{"version":3,"sources":["../src/dev-server.webpack.config.js"],"names":[],"mappings":";;;;;;;;;;kBAGe;SAAM,UAAC,MAAD,EAAY;QACxB,QAA+B,OAA/B,MADwB;QACjB,SAAwB,OAAxB,OADiB;0BACO,OAAhB,QADS;QACT,0CAAU;;;;;AADD;AAM/B,QAAM,MAAM,QAAQ,IAAR,CAAa,UAAC,MAAD,EAAY;AACnC,aAAO,OAAO,WAAP,CAAmB,IAAnB,KAA4B,4BAA5B,CAD4B;KAAZ,CAAnB;;;AANyB,WAWxB,oBAdD,QAcC,CAAQ,MAAR,EAAgB;AACrB,aAAO,oBAfM,OAeN,CAAO,KAAP,EAAc,uBAdjB,QAciB,CAAQ,EAAC,cAAD,EAAS,QAAT,EAAR,CAAd,CAAP;KADK,CAAP,CAX+B;GAAZ;CAAN","file":"dev-server.webpack.config.js","sourcesContent":["import {partial, inject} from 'webpack-partial';\nimport {runtime} from 'webpack-udev-server';\n\nexport default () => (config) => {\n  const {entry, target, plugins = []} = config;\n\n  // Detect whether or not HMR is enabled to enable hot on the dev server.\n  // NOTE: This means devServer has to come _after_ hot is configured.\n  // TODO: Checking constructor name might be a little brittle.\n  const hot = plugins.some((plugin) => {\n    return plugin.constructor.name === 'HotModuleReplacementPlugin';\n  });\n\n  // Rewrite all the entry points to include HMR code.\n  return partial(config, {\n    entry: inject(entry, runtime({target, hot})),\n  });\n};\n"]}