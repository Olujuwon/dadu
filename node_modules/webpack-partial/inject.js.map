{"version":3,"sources":["lib/inject.js"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAM,SAAS,SAAT,MAAS,CAAC,OAAD,EAAU,MAAV,EAAqB;AAClC,MAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,wCAAW,MAAX,IAAmB,OAAnB;AACD,GAFD,MAEO,IAAI,MAAM,OAAN,CAAc,OAAd,CAAJ,EAA4B;AACjC,wCAAW,MAAX,sBAAsB,OAAtB;AACD,GAFM,MAEA,IAAI,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAvB,EAAiC;AACtC,QAAM,MAAM,EAAZ;AADsC;AAAA;AAAA;;AAAA;AAEtC,2BAAkB,OAAO,IAAP,CAAY,OAAZ,CAAlB,8HAAwC;AAAA,YAA7B,GAA6B;;AACtC,YAAI,GAAJ,IAAW,OAAO,QAAQ,GAAR,CAAP,EAAqB,MAArB,CAAX;AACD;AAJqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKtC,WAAO,GAAP;AACD;AACD,QAAM,IAAI,SAAJ,EAAN;AACD,CAbD;;kBAee,M","file":"inject.js","sourcesContent":["const inject = (entries, module) => {\n  if (typeof entries === 'string') {\n    return [...module, entries];\n  } else if (Array.isArray(entries)) {\n    return [...module, ...entries];\n  } else if (typeof entries === 'object') {\n    const res = { };\n    for (const key of Object.keys(entries)) {\n      res[key] = inject(entries[key], module);\n    }\n    return res;\n  }\n  throw new TypeError();\n};\n\nexport default inject;\n"]}