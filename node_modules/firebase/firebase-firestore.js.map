{"version":3,"sources":["webpack:///firebase-firestore.js","webpack:///./firestore/index.js","webpack:///../firestore/dist/esm/src/util/log.js","webpack:///../firestore/dist/esm/src/util/assert.js","webpack:///../firestore/dist/esm/src/platform/platform.js","webpack:///../firestore/dist/esm/src/util/api.js","webpack:///../firestore/dist/esm/src/util/obj.js","webpack:///../firestore/dist/esm/src/util/input_validation.js","webpack:///../firestore/dist/esm/src/util/misc.js","webpack:///../firestore/dist/esm/src/api/blob.js","webpack:///../firestore/dist/esm/src/model/field_value.js","webpack:///../firestore/dist/esm/src/util/types.js","webpack:///../firestore/dist/esm/src/core/query.js","webpack:///../firestore/dist/esm/src/remote/rpc_error.js","webpack:///../firestore/dist/esm/src/model/collections.js","webpack:///../firestore/dist/esm/src/remote/watch_change.js","webpack:///../firestore/dist/esm/src/remote/serializer.js","webpack:///../firestore/dist/esm/src/api/field_path.js","webpack:///../firestore/dist/esm/src/core/view.js","webpack:///../firestore/dist/esm/src/local/encoded_resource_path.js","webpack:///../firestore/dist/esm/src/local/indexeddb_schema.js","webpack:///../firestore/dist/esm/src/local/simple_db.js","webpack:///../firestore/dist/esm/src/local/indexeddb_mutation_queue.js","webpack:///../firestore/dist/esm/src/local/indexeddb_query_cache.js","webpack:///../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js","webpack:///../firestore/dist/esm/src/local/local_serializer.js","webpack:///../firestore/dist/esm/src/api/credentials.js","webpack:///../firestore/dist/esm/src/api/observer.js","webpack:///../firestore/dist/esm/src/api/user_data_converter.js","webpack:///../firestore/dist/esm/src/api/database.js","webpack:///../firestore/dist/esm/src/platform/config.js","webpack:///../firestore/dist/esm/index.js","webpack:///../firestore/dist/esm/src/core/version.js","webpack:///../firestore/dist/esm/src/util/error.js","webpack:///../firestore/dist/esm/src/api/geo_point.js","webpack:///../firestore/dist/esm/src/core/database_info.js","webpack:///../firestore/dist/esm/src/model/path.js","webpack:///../firestore/dist/esm/src/model/document_key.js","webpack:///../firestore/dist/esm/src/model/document.js","webpack:///../firestore/dist/esm/src/util/sorted_map.js","webpack:///../firestore/dist/esm/src/local/query_data.js","webpack:///../firestore/dist/esm/src/core/timestamp.js","webpack:///../firestore/dist/esm/src/core/snapshot_version.js","webpack:///../firestore/dist/esm/src/model/mutation.js","webpack:///../firestore/dist/esm/src/remote/existence_filter.js","webpack:///../firestore/dist/esm/src/util/sorted_set.js","webpack:///../firestore/dist/esm/src/remote/remote_event.js","webpack:///../firestore/dist/esm/src/remote/stream_bridge.js","webpack:///../firestore/dist/esm/src/platform_browser/webchannel_connection.js","webpack:///../firestore/dist/esm/src/platform_browser/browser_platform.js","webpack:///../firestore/dist/esm/src/platform_browser/browser_init.js","webpack:///../firestore/dist/esm/src/core/types.js","webpack:///../firestore/dist/esm/src/core/view_snapshot.js","webpack:///../firestore/dist/esm/src/core/target_id_generator.js","webpack:///../firestore/dist/esm/src/model/document_set.js","webpack:///../firestore/dist/esm/src/util/obj_map.js","webpack:///../firestore/dist/esm/src/core/event_manager.js","webpack:///../firestore/dist/esm/src/local/persistence_promise.js","webpack:///../firestore/dist/esm/src/local/eager_garbage_collector.js","webpack:///../firestore/dist/esm/src/local/local_view_changes.js","webpack:///../firestore/dist/esm/src/local/reference_set.js","webpack:///../firestore/dist/esm/src/remote/persistent_stream.js","webpack:///../firestore/dist/esm/src/core/sync_engine.js","webpack:///../firestore/dist/esm/src/model/mutation_batch.js","webpack:///../firestore/dist/esm/src/local/indexeddb_persistence.js","webpack:///../firestore/dist/esm/src/local/local_documents_view.js","webpack:///../firestore/dist/esm/src/local/remote_document_change_buffer.js","webpack:///../firestore/dist/esm/src/local/local_store.js","webpack:///../firestore/dist/esm/src/local/memory_mutation_queue.js","webpack:///../firestore/dist/esm/src/local/memory_query_cache.js","webpack:///../firestore/dist/esm/src/local/memory_remote_document_cache.js","webpack:///../firestore/dist/esm/src/local/memory_persistence.js","webpack:///../firestore/dist/esm/src/local/no_op_garbage_collector.js","webpack:///../firestore/dist/esm/src/util/promise.js","webpack:///../firestore/dist/esm/src/remote/backoff.js","webpack:///../firestore/dist/esm/src/remote/datastore.js","webpack:///../firestore/dist/esm/src/core/transaction.js","webpack:///../firestore/dist/esm/src/remote/remote_store.js","webpack:///../firestore/dist/esm/src/core/firestore_client.js","webpack:///../firestore/dist/esm/src/util/async_observer.js","webpack:///../firestore/dist/esm/src/util/async_queue.js","webpack:///../firestore/dist/esm/src/auth/user.js","webpack:///../firestore/dist/esm/src/api/field_value.js","webpack:///../webchannel-wrapper/dist/index.js"],"names":["webpackJsonpFirebase","113","module","exports","__webpack_require__","114","__webpack_exports__","getLogLevel","logLevel","setLogLevel","newLevel","debug","tag","msg","obj","_i","arguments","length","LogLevel","DEBUG","time","Date","toISOString","args","map","argToString","console","log","apply","SDK_VERSION","concat","log_error","ERROR","error","platform","platform_PlatformSupport","getPlatform","formatJSON","e","fail","failure","message","Error","assert","assertion","emptyByteString","makeConstructorPrivate","cls","optionalMessage","PublicConstructor","FirestoreError","Code","INVALID_ARGUMENT","prototype","staticProperty","hasOwnProperty","contains","key","Object","call","defaulted","value","defaultValue","undefined","forEachNumber","fn","num","parseInt","isNaN","forEach","isEmpty","shallowCopy","result","validateExactNumberOfArgs","functionName","numberOfArgs","formatPlural","validateAtLeastNumberOfArgs","minNumberOfArgs","validateBetweenNumberOfArgs","maxNumberOfArgs","validateNamedArrayAtLeastNumberOfElements","name","minNumberOfElements","Array","validateArgType","type","position","argument","validateType","ordinal","validateOptionalArgType","validateNamedType","optionName","validateNamedOptionalType","inputName","input","isPlainObject","description","valueDescription","getPrototypeOf","substring","JSON","stringify","customObjectName","tryGetCustomObjectType","constructor","funcNameRegex","results","exec","validateDefined","validateOptionNames","options","optionNames","_","indexOf","join","invalidClassError","str","primitiveComparator","left","right","equals","arrayEquals","i","immediatePredecessor","s","lastIndex","charAt","String","fromCharCode","charCodeAt","immediateSuccessor","assertUint8ArrayAvailable","Uint8Array","UNIMPLEMENTED","assertBase64Available","base64Available","numericComparator","numericEquals","isNullOrUndefined","isSafeInteger","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","fieldFilter","field","op","NullValue","INSTANCE","query_RelationOp","EQUAL","NullFilter","DoubleValue","NAN","NanFilter","query_RelationFilter","isPermanentError","code","OK","CANCELLED","UNKNOWN","DEADLINE_EXCEEDED","RESOURCE_EXHAUSTED","INTERNAL","UNAVAILABLE","UNAUTHENTICATED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","DATA_LOSS","mapCodeFromRpcStatus","status","RpcCode","mapCodeFromRpcCode","mapRpcCodeFromCode","mapCodeFromHttpStatus","maybeDocumentMap","EMPTY_MAYBE_DOCUMENT_MAP","documentMap","EMPTY_DOCUMENT_MAP","documentVersionMap","EMPTY_DOCUMENT_VERSION_MAP","documentKeySet","EMPTY_DOCUMENT_KEY_SET","applyResumeToken","change","resumeToken","assertPresent","parseInt64","hasTag","fromDotSeparatedString","path","search","RESERVED","field_path_FieldPath","bind","split","compareChangeType","c1","c2","order","ChangeType","Added","Modified","Metadata","Removed","encode","encodeSeparator","encodeSegment","get","segment","resultBuf","c","escapeChar","encodedNul","encodedEscape","encodedSeparatorChar","decode","path_ResourcePath","EMPTY_PATH","lastReasonableEscapeIndex","segments","segmentBuilder","start","end","currentPiece","push","createOrUpgradeDb","db","oldVersion","createObjectStore","DbMutationQueue","store","keyPath","DbMutationBatch","DbTargetDocument","createIndex","documentTargetsIndex","documentTargetsKeyPath","unique","DbTarget","queryTargetsIndexName","queryTargetsKeyPath","indexeddb_schema_DbDocumentMutation","DbRemoteDocument","DbOwner","DbTargetGlobal","wrapRequest","request","persistence_promise_PersistencePromise","resolve","reject","onsuccess","event","target","onerror","validateStreamToken","token","mutationsStore","txn","getStore","documentMutationsStore","mutationQueuesStore","simple_db_SimpleDbTransaction","targetsStore","indexeddb_query_cache_getStore","globalTargetStore","documentTargetStore","remoteDocumentsStore","dbKey","docKey","toArray","isDocumentQuery","dbQuery","documents","makeCredentialsProvider","credentials","credentials_EmptyCredentialsProvider","credentials_FirstPartyCredentialsProvider","client","sessionIndex","isPartialObserver","implementsAnyMethods","methods","object","methods_1","method","isWrite","dataSource","UserDataSource","Set","MergeSet","Update","QueryValue","looksLikeJsonObject","geo_point_GeoPoint","blob_Blob","DocumentKeyReference","FieldValueImpl","validatePlainObject","context","createError","fieldPathFromArgument","methodName","_internalPath","fieldPathFromDotSeparatedString","errorMessage","validateSetOptions","merge","validateReference","documentRef","firestore","database_DocumentReference","changesFromSnapshot","snapshot","oldDocs","lastDoc_1","index_1","docChanges","doc","database_DocumentSnapshot","fromCache","query","docComparator","oldIndex","newIndex","indexTracker_1","delete","add","resultChangeType","configureForFirebase","firebase","registerService","app","database_Firestore","firestoreNamespace","registerFirestore","instance","defineProperty","esm","PlatformSupport","setPlatform","__extends","this","extendStatics","setPrototypeOf","__proto__","d","b","p","__","create","_super","_this","toString","misc_AutoId","AutoId","newId","chars","autoId","Math","floor","random","Blob","binaryString","_binaryString","fromBase64String","base64","atob","fromUint8Array","array","char","toBase64","btoa","toUint8Array","buffer","_equals","other","_compareTo","PublicBlob","GeoPoint","latitude","longitude","isFinite","_lat","_long","enumerable","configurable","DatabaseInfo","databaseId","persistenceKey","host","ssl","DEFAULT_DATABASE_NAME","database_info_DatabaseId","DatabaseId","projectId","database","compareTo","path___extends","path_Path","Path","offset","init","len","construct","comparator","child","nameOrPath","slice","limit","popFirst","size","popLast","firstSegment","lastSegment","index","isPrefixOf","p1","p2","min","ResourcePath","canonicalString","fromString","filter","identifierRegExp","path_FieldPath","FieldPath","isValidIdentifier","test","replace","isKeyField","keyField","fromServerFormat","current","addCurrentSegment","inBackticks","next","document_key_DocumentKey","DocumentKey","isDocumentKey","k1","k2","fromSegments","fromPathString","EMPTY","document_Document","Document","version","data","hasLocalMutations","fieldValue","compareByKey","d1","d2","compareByField","v1","v2","document_NoDocument","NoDocument","sorted_map_SortedMap","SortedMap","root","sorted_map_LLRBNode","insert","copy","BLACK","remove","node","cmp","getPredecessorKey","rightParent","prunedNodes","minKey","maxKey","inorderTraversal","action","k","v","reverseTraversal","getIterator","resultGenerator","sorted_map_SortedMapIterator","getIteratorFrom","getReverseIterator","getReverseIteratorFrom","SortedMapIterator","startKey","isReverse","nodeStack","getNext","pop","hasNext","peek","LLRBNode","color","RED","n","fixUp","removeMin","isRed","moveRedLeft","smallest","rotateRight","moveRedRight","rotateLeft","colorFlip","nl","nr","checkMaxDepth","blackDepth","check","pow","LLRBEmptyNode","TypeOrder","field_value___extends","QueryPurpose","field_value_FieldValue","FieldValue","val","defaultCompareTo","typeOrder","internalValue","field_value_BooleanValue","BooleanValue","of","TRUE","FALSE","NumberValue","IntegerValue","NaN","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","field_value_StringValue","StringValue","TimestampValue","toDate","ServerTimestampValue","localWriteTime","BlobValue","field_value_RefValue","RefValue","GeoPointValue","field_value_ObjectValue","ObjectValue","it1","it2","next1","next2","set","to","setChild","newChild","pathSegment","childName","field_value_ArrayValue","ArrayValue","minLength","NumberAsAny","Number","query_Query","Query","explicitOrderBy","filters","startAt","endAt","memoizedCanonicalId","memoizedOrderBy","assertValidBound","atPath","inequalityField","getInequalityFilterField","firstOrderByField","getFirstOrderByField","KEY_ORDERING_ASC","query_OrderBy","foundKeyOrdering","_a","orderBy","lastDirection","dir","Direction","ASCENDING","KEY_ORDERING_DESC","addFilter","isInequality","newFilters","addOrderBy","newOrderBy","withLimit","withStartAt","bound","withEndAt","canonicalId","_b","_c","comparedOnKeyField","comp","compare","matches","matchesAncestor","matchesOrderBy","matchesFilters","matchesBounds","hasLimit","docPath","sortsBeforeDocument","RelationOp","LESS_THAN","LESS_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","GREATER_THAN","RelationFilter","refValue","comparison","matchesComparison","matchesValue","DESCENDING","query_Bound","Bound","before","component","orderByComponent","docValue","thisPosition","otherPosition","OrderBy","isKeyOrderBy","isoRegExp","RegExp","timestamp_Timestamp","Timestamp","seconds","nanos","now","fromEpochMilliseconds","fromDate","date","getTime","milliseconds","fromISOString","utc","fraction","nanoStr","substr","toEpochMilliseconds","snapshot_version_SnapshotVersion","SnapshotVersion","timestamp","fromMicroseconds","fromTimestamp","forDeletedDoc","MIN","toMicroseconds","toTimestamp","MutationType","query_data_QueryData","QueryData","targetId","purpose","snapshotVersion","update","updated","mutation___extends","mutation_FieldMask","FieldMask","fields","ServerTimestampTransform","FieldTransform","transform","MutationResult","transformResults","mutation_Precondition","Precondition","updateTime","exists","isValidFor","maybeDoc","isNone","NONE","mutation_Mutation","Mutation","verifyKeyMatches","getPostMutationVersion","mutation_SetMutation","SetMutation","precondition","applyToRemoteDocument","mutationResult","applyToLocalView","mutation_PatchMutation","PatchMutation","fieldMask","Patch","newData","patchDocument","patchObject","fieldPath","newValue","mutation_TransformMutation","TransformMutation","fieldTransforms","Transform","requireDocument","transformObject","localTransformResults","fieldTransform","mutation_DeleteMutation","DeleteMutation","Delete","ExistenceFilter","count","CurrentStatusUpdate","sorted_set_SortedSet","SortedSet","fromMapKeys","keys","has","elem","first","last","cb","forEachInRange","range","iter","forEachWhile","firstAfterOrEqual","unionWith","thisIt","otherIt","thisElem","otherElem","remote_event_RemoteEvent","RemoteEvent","targetChanges","documentUpdates","addDocumentUpdate","handleExistenceFilterMismatch","mapping","ResetMapping","currentStatusUpdate","MarkNotCurrent","WatchTargetChangeState","EMPTY_KEY_SET","docs","UpdateMapping","addedDocuments","removedDocuments","applyToKeySet","DocumentWatchChange","updatedTargetIds","removedTargetIds","newDoc","ExistenceFilterChange","existenceFilter","watch_change_WatchTargetChange","WatchTargetChange","state","targetIds","cause","watch_change_WatchChangeAggregator","WatchChangeAggregator","listenTargets","pendingTargetResponses","existenceFilters","frozen","watchChange","addDocumentChange","addTargetChange","addExistenceFilterChange","addChanges","watchChanges","createRemoteEvent","isActiveTarget","ensureTargetChange","None","docChange","relevant","targetChange","NoChange","recordTargetResponse","Current","MarkCurrent","Reset","newCount","DIRECTIONS","dirs","OPERATORS","ops","serializer_JsonProtoSerializer","JsonProtoSerializer","useProto3Json","unsafeCastProtoByteString","byteString","fromRpcStatus","toInt32Value","fromInt32Value","toBytes","bytes","fromBlob","blob","toVersion","fromVersion","toResourceName","fullyQualifiedPrefixPath","fromResourceName","resource","isValidResourceName","toName","fromName","extractLocalPathFromResourceName","toQueryPath","encodedDatabaseId","fromQueryPath","resourceName","toValue","nullValue","booleanValue","integerValue","doubleValue","stringValue","mapValue","toMapValue","arrayValue","toArrayValue","timestampValue","geoPointValue","bytesValue","referenceValue","fromValue","fromFields","values","dbId","toMutationDocument","toFields","toDocument","document","fromDocument","fromFound","found","fromMissing","missing","readTime","fromMaybeDocument","toWatchTargetChangeState","toTestWatchChange","documentChange","documentDelete","documentRemove","targetChangeType","fromWatchChange","fromWatchTargetChangeState","causeProto","entityChange","docDelete","docRemove","versionFromListenResponse","toMutation","mutation","updateMask","toDocumentMask","toFieldTransform","currentDocument","toPrecondition","fromMutation","proto","fromPrecondition","fromDocumentMask","fromFieldTransform","fromWriteResult","fromWriteResults","protos","setToServerValue","toDocumentsTarget","fromDocumentsTarget","documentsTarget","toQueryTarget","structuredQuery","parent","from","collectionId","where","toFilter","toOrder","toCursor","fromQueryTarget","fromCount","filterBy","fromFilter","fromOrder","fromCursor","toListenRequestLabels","queryData","toLabel","goog-listen-tags","Listen","ExistenceFilterMismatch","LimboResolution","toTarget","toRelationFilter","toUnaryFilter","compositeFilter","unaryFilter","fromUnaryFilter","fromRelationFilter","f","reduce","accum","orderBys","toPropertyOrder","fromPropertyOrder","cursor","toDirection","fromDirection","toOperatorName","fromOperatorName","toFieldPathReference","fromFieldPathReference","fieldReference","direction","nanField","nullField","fieldPaths","paths","dist","stream_bridge_StreamBridge","StreamBridge","wrappedOnOpen","wrappedOnClose","wrappedOnMessage","sendFn","closeFn","onOpen","callback","onClose","onMessage","close","send","callOnOpen","callOnClose","err","callOnMessage","LOG_TAG","RPC_NAME_REST_MAPPING","BatchGetDocuments","Commit","X_GOOG_API_CLIENT_VALUE","webchannel_connection_WebChannelConnection","WebChannelConnection","info","pool","baseUrl","modifyHeadersForRequest","headers","header","authHeaders","invokeRPC","rpcName","url","makeUrl","Promise","getObject","xhr","listenOnce","COMPLETE","getLastErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","status_1","getStatus","getResponseText","getStatusText","getLastError","releaseObject","requestString","Content-Type","invokeStreamingRPC","openStream","urlParts","webchannelTransport","backgroundChannelTest","httpSessionIdParam","initMessageHeaders","httpHeadersOverwriteParam","sendRawJson","supportsCrossDomainXhr","channel","createWebChannel","opened","closed","streamBridge","open","unguardedEventListen","listen","param","setTimeout","EventType","OPEN","CLOSE","MESSAGE","msgData","status_2","urlRpcName","browser_platform_BrowserPlatform","BrowserPlatform","loadConnection","databaseInfo","newSerializer","encoded","raw","OnlineState","fieldNames","documentId","_DOCUMENT_ID","SyncState","GeneratorIds","view_snapshot_DocumentChangeSet","DocumentChangeSet","changeMap","track","oldChange","getChanges","changes","document_set_DocumentSet","DocumentSet","keyedMap","sortedSet","emptySet","oldSet","prevDoc","thisDoc","otherDoc","docStrings","newSet","obj_map_ObjectMap","ObjectMap","mapKeyFn","inner","id","matches_1","otherKey","splice","entries","entries_1","QueryListenersInfo","listeners","event_manager_EventManager","EventManager","syncEngine","queries","q","onlineState","Unknown","subscribe","onChange","onError","listener","firstListen","queryInfo","onOnlineStateChanged","viewSnap","onViewSnapshot","then","unlisten","lastListen","viewSnaps","viewSnaps_1","event_manager_QueryListener","QueryListener","queryObserver","raisedInitialEvent","snap","syncStateChanged","includeDocumentMetadataChanges","hasPendingWrites","shouldRaiseEvent","shouldRaiseInitialEvent","raiseInitialEvent","maybeOnline","Failed","waitForSyncWhenOnline","hasPendingWritesChanged","includeQueryMetadataChanges","getInitialViewChanges","PersistencePromise","nextCallback","catchCallback","isDone","callbackAttached","catch","nextFn","catchFn","wrapFailure","wrapSuccess","toPromise","wrapUserFunction","waitFor","all","promise","nextPromise","idx","initial","eager_garbage_collector_EagerGarbageCollector","EagerGarbageCollector","isEager","sources","potentialGarbage","addGarbageSource","garbageSource","setGarbageCollector","removeGarbageSource","addPotentialGarbageKey","collectGarbage","promises","garbageKeys","hasRefsPromise","documentHasAnyReferences","hasRefs","source","containsKey","local_view_changes_LocalViewChanges","LocalViewChanges","addedKeys","removedKeys","fromSnapshot","viewSnapshot","reference_set_ReferenceSet","ReferenceSet","refsByKey","reference_set_DocReference","refsByTarget","compareByTargetId","garbageCollector","addReference","ref","addReferences","removeReference","removeRef","removeReferences","removeReferencesForId","emptyKey","startRef","endRef","removeAllReferences","referencesForId","firstRef","DocReference","targetOrBatchId","RESERVED_BITS","PersistentStreamState","TargetIdGenerator","generatorId","initAfter","afterWithoutGenerator","afterGenerator","previousId","forLocalStore","LocalStore","forSyncEngine","SyncEngine","AddedLimboDocument","RemovedLimboDocument","view_View","View","syncedDocuments","syncState","limboDocuments","mutatedKeys","documentSet","computeDocChanges","previousChanges","changeSet","oldDocumentSet","newMutatedKeys","newDocumentSet","needsRefill","lastDocInLimit","newMaybeDoc","oldDoc","docsEqual","applyChanges","sort","limboChanges","applyTargetChange","synced","newSyncState","Synced","Local","shouldBeInLimbo","targetMapping","oldLimboDocuments","QueryView","view","sync_engine_SyncEngine","localStore","remoteStore","currentUser","viewHandler","errorHandler","queryViewsByQuery","queryViewsByTarget","limboTargetsByKey","limboKeysByTarget","limboDocumentRefs","limboCollector","mutationUserCallbacks","targetIdGenerator","assertSubscribed","allocateQuery","executeQuery","remoteDocumentKeys","remoteKeys","viewDocChanges","viewChange","queryView","releaseQuery","removeAndCleanupQuery","write","batch","userCallback","localWrite","addMutationCallback","batchId","emitNewSnapsAndNotifyLocalStore","fillWritePipeline","wrapUpdateFunctionError","runTransaction","updateFunction","retries","transaction","createTransaction","userPromise","commit","applyRemoteEvent","remoteEvent","limboKey","rejectListen","docMap","event_1","queryView_1","applySuccessfulWrite","mutationBatchResult","processUserCallback","acknowledgeBatch","rejectFailedWrite","rejectBatch","newCallbacks","toKey","gcLimboDocuments","updateTrackedLimbos","limboChanges_1","limboChange","trackLimboChange","limboTargetId","currentLimboDocs","newSnaps","docChangesInAllViews","queriesProcessed","notifyLocalViewChanges","fnName","handleUserChange","user","BATCHID_UNKNOWN","mutation_batch_MutationBatch","MutationBatch","mutations","batchResult","mutationResults","keySet","isTombstone","toTombstone","mutation_batch_MutationBatchResult","MutationBatchResult","commitVersion","streamToken","docVersions","versionMap","DbTimestamp","ownerId","leaseTimestampMs","userId","lastAcknowledgedBatchId","lastStreamToken","localWriteTimeMs","DbDocumentMutation","prefixForUser","prefixForPath","PLACEHOLDER","DbNoDocument","noDocument","lastListenSequenceNumber","highestTargetId","highestListenSequenceNumber","lastRemoteSnapshotVersion","ALL_STORES","simple_db_SimpleDb","SimpleDb","openOrCreate","runUpgrade","isAvailable","window","indexedDB","onupgradeneeded","deleteDatabase","ua","navigator","userAgent","mode","objectStores","transactionFn","transactionFnResult","abort","completionPromise","IterationController","dbCursor","shouldStop","nextKey","done","skip","SimpleDbTransaction","objectStoresNames","aborted","onabort","oncomplete","storeName","objectStore","simple_db_SimpleDbStore","SimpleDbStore","put","keyOrValue","loadAll","indexOrRange","iterateCursor","deleteAll","keysOnly","control","iterate","optionsOrCallback","cursorRequest","controller","userResult","primaryKey","skipToKey","continue","indexName","reverse","openKeyCursor","openCursor","indexeddb_mutation_queue_IndexedDbMutationQueue","IndexedDbMutationQueue","serializer","forUser","uid","isUnauthenticated","loadNextBatchIdFromDb","nextBatchId","metadata","checkEmpty","empty","maxBatchId","nextUser","IDBKeyRange","keyForBatchId","getNextBatchId","getHighestAcknowledgedBatchId","getLastStreamToken","setLastStreamToken","addMutationBatch","dbBatch","toDbMutationBatch","mutations_1","indexKey","lookupMutationBatch","fromDbMutationBatch","getNextMutationBatchAfterBatchId","lowerBound","foundBatch","getAllMutationBatches","dbBatches","getAllMutationBatchesThroughBatchId","getAllMutationBatchesAffectingDocumentKey","documentKey","indexPrefix","indexStart","userID","encodedPath","batchID","mutationKey","getAllMutationBatchesAffectingQuery","queryPath","immediateChildrenLength","uniqueBatchIDs","removeMutationBatches","batches","indexTxn","this_1","batches_1","only","numDeleted","removePromise","performConsistencyCheck","startRange","danglingMutationReferences","gc","indexeddb_query_cache_IndexedDbQueryCache","IndexedDbQueryCache","lastSavedVersion","getHighestTargetId","getLastRemoteSnapshotVersion","setLastRemoteSnapshotVersion","addQueryData","addedQueryPromise","toDbTarget","removeQueryData","removeMatchingKeysForTargetId","getQueryData","fromDbTarget","addMatchingKeys","removeMatchingKeys","notifyGCForRemovedKeys","getMatchingKeysForTargetId","indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache","IndexedDbRemoteDocumentCache","addEntry","maybeDocument","toDbRemoteDocument","removeEntry","getEntry","dbRemoteDoc","fromDbRemoteDocument","getDocumentsMatchingQuery","local_serializer_LocalSerializer","LocalSerializer","remoteSerializer","remoteDoc","serializedMutations","m","dbTarget","queryProto","dbTimestamp","EXISTING_OWNER_ERROR_MSG","indexeddb_persistence_IndexedDbPersistence","IndexedDbPersistence","prefix","generateOwnerId","dbName","MAIN_DATABASE","localStoragePrefix","started","simpleDb","tryAcquireOwnerLease","scheduleOwnerLeaseRefreshes","attachWindowUnloadHook","persistenceError","shutdown","detachWindowUnloadHook","stopOwnerLeaseRefreshes","releaseOwnerLease","getMutationQueue","getQueryCache","getRemoteDocumentCache","operation","ensureOwnerLease","buildStoragePrefix","isDefaultDatabase","dbOwner","validOwner","newDbOwner","minAcceptable","maxAcceptable","getZombiedOwnerId","ownerLeaseRefreshHandle","setInterval","reason","clearInterval","windowUnloadHandler","setZombiedOwnerId","addEventListener","removeEventListener","zombiedOwnerId","localStorage","getItem","zombiedOwnerLocalStorageKey","zombieOwnerId","removeItem","setItem","local_documents_view_LocalDocumentsView","LocalDocumentsView","remoteDocumentCache","mutationQueue","getDocument","computeLocalDocument","getDocuments","getDocumentsMatchingDocumentQuery","getDocumentsMatchingCollectionQuery","queryResults","computeLocalDocuments","promisedResults","matchingMutationBatches","matchingKeys","matchingMutationBatches_1","mutatedDoc","remote_document_change_buffer_RemoteDocumentChangeBuffer","RemoteDocumentChangeBuffer","assertChanges","bufferedEntry","local_store_LocalStore","persistence","initialUser","localViewReferences","heldBatchResults","remoteDocuments","queryCache","localDocuments","startMutationQueue","startQueryCache","oldBatches","promisedOldBatches","newBatches","changedKeys","_d","highestAck","ackedBatches","promisedBatch","changedDocuments","affected","shouldHoldBatchResult","documentBuffer_1","releaseBatchResults","promisedAffectedKeys","toReject","affectedKeys","promisedToReject","lastAcked","removeMutationBatch","documentBuffer","changedDocKeys","existingDoc","lastRemoteVersion","remoteVersion","releasedWriteKeys","releaseHeldBatchResults","promisedReleasedWriteKeys","viewChanges","viewChanges_1","nextMutationBatch","afterBatchId","readDocument","cached","documentBuffer_2","garbage","toRelease","isRemoteUpToVersion","batchResults","promiseChain","batchResults_1","applyWriteToRemoteDocuments","affectedDocs","batches_2","docKeys","ackVersion","memory_mutation_queue_MemoryMutationQueue","MemoryMutationQueue","highestAcknowledgedBatchId","batchesByDocumentKey","batchIndex","indexOfExistingBatchId","findMutationBatch","max","rawIndex","indexOfBatchId","getAllLiveMutationBatchesBeforeIndex","endIndex","immediateChildrenPathLength","startPath","rowKeyPath","batchCount","firstBatchId","queueCount","startIndex","queueIndex","length_1","references","memory_query_cache_MemoryQueryCache","MemoryQueryCache","memory_remote_document_cache_MemoryRemoteDocumentCache","MemoryRemoteDocumentCache","iterator","memory_persistence_MemoryPersistence","MemoryPersistence","mutationQueues","queue","MemoryPersistenceTransaction","no_op_garbage_collector_NoOpGarbageCollector","NoOpGarbageCollector","Deferred","backoff_ExponentialBackoff","ExponentialBackoff","initialDelayMs","backoffFactor","maxDelayMs","reset","currentBaseMs","resetToMax","backoffAndWait","def","delayWithJitterMs","jitterDelayMs","persistent_stream___extends","BACKOFF_INITIAL_DELAY_MS","BACKOFF_MAX_DELAY_MS","BACKOFF_FACTOR","persistent_stream_PersistentStream","PersistentStream","connection","credentialsProvider","initialBackoffDelay","idle","stream","backoff","Initial","isStarted","Backoff","Auth","Open","isOpen","performBackoff","auth","stop","Stopped","inhibitBackoff","markIdle","schedule","handleIdleCloseTimer","sendRequest","cancelIdleCheck","finalState","tearDown","getToken","startStream","rpcError","handleStreamClose","dispatchIfStillActive","currentStream_1","startRpc","PersistentListenStream","watchChangeProto","onWatchChange","watch","addTarget","labels","unwatch","removeTarget","persistent_stream_PersistentWriteStream","PersistentWriteStream","handshakeComplete_","writeMutations","responseProto","writeResults","commitTime","onMutationResult","onHandshakeComplete","writeHandshake","writes","datastore_Datastore","Datastore","newPersistentWriteStream","newPersistentWatchStream","params","response","lookup","transaction_Transaction","Transaction","datastore","readVersions","committed","recordVersion","docVersion","existingVersion","preconditionForUpdate","toMutations","unwritten","remote_store_RemoteStore","RemoteStore","onlineStateHandler","pendingWrites","lastBatchSeen","accumulatedWatchChanges","watchStream","writeStream","watchStreamOnlineState","watchStreamFailures","shouldWarnOffline","enableNetwork","setOnlineStateToHealthy","updateAndBroadcastOnlineState","Healthy","setOnlineStateToUnknown","updateOnlineStateAfterFailure","didChange","isNetworkEnabled","shouldStartWatchStream","startWatchStream","disableNetwork","cleanUpWatchStreamState","cleanUpWriteStreamState","sendWatchRequest","sendUnwatchRequest","recordPendingTargetRequest","onWatchStreamOpen","onWatchStreamClose","onWatchStreamChange","handleTargetError","handleWatchChangeBatch","aggregator","deletedDoc","trackedRemote","newQueryData","requestQueryData","canWriteMutations","outstandingWrites","shouldStartWriteStream","startWriteStream","handshakeComplete","onWriteStreamOpen","onWriteStreamClose","onWriteHandshakeComplete","shift","success","errorHandling","handleWriteError","handleHandshakeError","firestore_client_FirestoreClient","FirestoreClient","asyncQueue","usePersistence","initializationDone","persistenceResult","initialized","setUserChangeListener","initializePersistence","initializeRest","startIndexedDbPersistence","canFallback","warn","startMemoryPersistence","storagePrefix","onlineStateChangedHandler","eventMgr","verifyOperationInProgress","removeUserChangeListener","observer","deferred","AsyncObserver","muted","scheduleEvent","mute","eventHandler","async_queue_AsyncQueue","AsyncQueue","tail","delayedOperations","delayedOperationsCount","operationInProgress","delay","stack","delayedOp_1","handle","scheduleInternal","drain","executeDelayedTasks","entry","clearTimeout","User","otherUser","GOOGLE_CREDENTIALS","FIRST_PARTY","OAuthToken","Authorization","EmptyCredentialsProvider","userListener","forceRefresh","credentials_FirebaseCredentialsProvider","FirebaseCredentialsProvider","tokenListener","userCounter","newUser","getUser","addAuthTokenListener","initialUserCounter","tokenData","accessToken","removeAuthTokenListener","getUid","currentUid","credentials_FirstPartyToken","FirstPartyToken","gapi","X-Goog-AuthUser","FirstPartyCredentialsProvider","api_field_value___extends","DeleteFieldValueImpl","serverTimestamp","ServerTimestampFieldValueImpl","PublicFieldValue","RESERVED_FIELD_REGEX","user_data_converter_ParsedSetData","ParsedSetData","user_data_converter_ParsedUpdateData","ParsedUpdateData","user_data_converter_ParseContext","ParseContext","arrayElement","validatePath","childContextForField","childPath","validatePathSegment","childContextForFieldPath","childContextForArray","fieldDescription","user_data_converter_UserDataConverter","UserDataConverter","preConverter","parseSetData","updateData","parseData","parseMergeData","parseUpdateData","fieldMaskPaths","childContext","runPreConverter","parsedValue","mask","parseUpdateVarargs","moreFieldsAndValues","value_1","parseQueryValue","parsed","parseArray","parseObject","parseScalarValue","entryIndex","array_1","parsedEntry","database___extends","DEFAULT_HOST","DEFAULT_SSL","database_FirestoreSettings","FirestoreSettings","settings","FirestoreConfig","Firestore","databaseIdOrApp","_queue","_firestoreClient","drainAsyncQueue","config","firebaseApp","databaseIdFromApp","external_1","_config","_databaseId","settingsLiteral","newSettings","enablePersistence","configureClient","ensureClientConfigured","thisDb","otherDb","_key","_dataConverter","collection","pathString","database_CollectionReference","forPath","database_Transaction","database_WriteBatch","SILENT","level","_firestore","_transaction","fieldOrUpdateData","WriteBatch","_mutations","_committed","verifyNotCommitted","DocumentReference","isEqual","onSnapshot","includeMetadataChanges","currArg","internalOptions","complete","onSnapshotInternal","errHandler","asyncObserver","internalListener","DocumentSnapshot","_document","_fromCache","convertObject","convertValue","convertArray","database_Query","_query","opStr","validateNewFilter","directionStr","validateNewOrderBy","docOrField","boundFromDocOrFields","startAfter","endBefore","boundFromDocument","allFields","boundFromFields","components","rawValue","wrapped","database_QuerySnapshot","firestoreClient","existingField","validateOrderByAndInequalityMatch","inequality","QuerySnapshot","_originalQuery","_snapshot","_cachedChanges","thisArg","convertToDocumentImpl","CollectionReference","parentPath","docRef","PublicFirestore","PublicTransaction","PublicWriteBatch","PublicDocumentReference","PublicDocumentSnapshot","PublicQuery","PublicQuerySnapshot","PublicCollectionReference","115","global","l","a","aa","ba","propertyIsEnumerable","ca","da","fa","ha","unshift","r","Function","ia","u","L","Ab","ja","captureStackTrace","ka","ma","na","oa","w","qa","ra","ea","va","wa","xa","ya","y","x","Ba","Ca","Da","Ea","Ga","Fa","Ha","Ia","Ja","Oa","documentMode","Ta","la","Pa","h","A","$a","relatedTarget","button","screenY","screenX","clientY","clientX","metaKey","shiftKey","altKey","ctrlKey","pointerId","pointerType","changedTouches","srcElement","Ma","nodeName","fromElement","toElement","pageX","pageY","ab","defaultPrevented","bb","eb","src","capture","ga","Y","fb","gb","ib","sa","jb","hb","nb","once","ob","pb","qb","rb","kb","sb","Za","attachEvent","tb","addListener","removeListener","mb","ub","Xa","vb","wb","detachEvent","lb","xb","yb","keyCode","returnValue","parentNode","zb","handleEvent","B","P","J","Bb","Cb","eval","Db","Eb","Fb","Boolean","Gb","valueOf","Ib","Hb","Jb","Kb","Ob","Pb","Lb","Qb","Sb","MessageChannel","postMessage","createElement","style","display","documentElement","appendChild","contentWindow","location","protocol","origin","port1","onmessage","port2","za","onreadystatechange","removeChild","Ub","Tb","Vb","setImmediate","Window","Rb","Nb","Wb","Xb","g","t","Yb","$","K","Zb","$b","ac","X","C","cc","dc","fc","D","lc","oc","nc","mc","jc","lastIndexOf","E","hc","pc","ic","F","kc","qc","rc","H","G","Z","Mb","sc","tc","uc","vc","I","wc","xc","parse","zc","Ac","yc","dispatchEvent","Bc","Cc","Dc","Ec","Hc","Ic","Jc","Lc","Mc","ActiveXObject","XMLHttpRequest","T","N","S","Nc","Oc","j","U","o","M","Pc","Sc","Tc","Uc","Vc","Wc","Xc","Qa","Yc","W","Ka","V","Zc","$c","ad","bd","cd","dd","ed","Rc","Qc","fd","gd","hd","ta","O","jd","kd","md","decodeURIComponent","nd","od","pd","qd","rd","match","ld","sd","td","zd","ud","Ad","Q","Bd","abs","Cd","Dd","decodeURI","encodeURI","Ed","R","Gd","Fd","Hd","toLowerCase","Id","Kd","Jd","Ld","Md","Od","Pd","Qd","Rd","Sd","Td","Vd","Wd","Xd","Yd","Zd","pa","$d","ae","be","ce","de","ee","fe","ge","he","ie","encodeURIComponent","je","Image","onload","ke","ontimeout","le","qe","z","timeout","oe","re","se","te","goog","La","self","me","pe","readyState","ue","ve","we","Ua","concurrentRequestLimit","fastHandshake","xe","ye","ze","sendBeacon","Ae","cancel","Be","Ce","De","Ee","Fe","He","Ge","round","Va","Ie","Na","Je","Ke","Ud","Aa","Le","hostname","port","Me","Ne","Oe","testUrl","messageUrlParams","messageHeaders","clientProtocolHeaderRequired","X-Client-Protocol","messageContentType","X-WebChannel-Content-Type","Pe","Qe","__sm__","Re","Te","Ue","Ve","We","Xe","Ye","Ze","$e","af","trim","Ra","Sa","parseFloat","compatMode","Wa","freeze","Ya","2","3","4","preventDefault","\"","\\","/","\b","\f","\n","\r","\t","\u000b","bc","ec","Fc","Gc","Kc","vd","wd","xd","yd","Nd","getResponseHeader","ne","toUpperCase","FormData","setRequestHeader","responseType","withCredentials","statusText","responseText","__data__","Se","createWebChannelTransport","ErrorCode","WebChannel","XhrIoPool"],"mappings":";;;;;AAKA,IACQA,sBAAsB,IAExBC,IACA,SAAUC,EAAQC,EAASC,GCOjCA,EAAA,MDgBMC,IACA,SAAUH,EAAQI,EAAqBF,GAE7C,YETA,SAAAG,KACA,MAAAC,IAEA,QAAAC,GAAAC,GACAF,GAAAE,EAEA,QAAAC,GAAAC,EAAAC,GAEA,OADAC,MACAC,EAAA,EAAoBA,EAAAC,UAAAC,OAAuBF,IAC3CD,EAAAC,EAAA,GAAAC,UAAAD,EAEA,IAAAP,IAAAU,GAAAC,MAAA,CACA,GAAAC,IAAA,GAAAC,OAAAC,cACAC,EAAAT,EAAAU,IAAAC,EACAC,SAAAC,IAAAC,MAAAF,SAAA,cAAAG,GAAA,KAAAT,EAAA,KAAAR,EAAA,MAAAC,GAAAiB,OAAAP,KAGA,QAAAQ,GAAAlB,GAEA,OADAC,MACAC,EAAA,EAAoBA,EAAAC,UAAAC,OAAuBF,IAC3CD,EAAAC,EAAA,GAAAC,UAAAD,EAEA,IAAAP,IAAAU,GAAAc,MAAA,CACA,GAAAZ,IAAA,GAAAC,OAAAC,cACAC,EAAAT,EAAAU,IAAAC,EACAC,SAAAO,MAAAL,MAAAF,SAAA,cAAAG,GAAA,KAAAT,EAAA,KAAAP,GAAAiB,OAAAP,KAMA,QAAAE,GAAAX,GACA,mBAAAA,GACA,MAAAA,EAGA,IAAAoB,GAAAC,GAAAC,aACA,KACA,MAAAF,GAAAG,WAAAvB,GAEA,MAAAwB,GAEA,MAAAxB,IC5CA,QAAAyB,GAAAC,GAGA,GAAAC,GAAA,cAAAZ,GAAA,gCAAAW,CAKA,MAJAT,GAAAU,GAIAC,MAAAD,GAMA,QAAAE,GAAAC,EAAAH,GACAG,GACAL,EAAAE,GCGA,QAAAI,KACA,MAAAV,IAAAC,cAAAS,gBCfA,QAAAC,GAAAC,EAAAC,GACA,QAAAC,KACA,GAAAhB,GAAA,8BAKA,MAJAe,KACAf,GAAA,IACAA,GAAAe,GAEA,GAAAE,IAAAC,GAAAC,iBAAAnB,GAIAgB,EAAAI,UAAAN,EAAAM,SAEA,QAAAC,KAAAP,GACAA,EAAAQ,eAAAD,KACAL,EAAAK,GAAAP,EAAAO,GAGA,OAAAL,GC/BA,QAAAO,GAAA1C,EAAA2C,GACA,MAAAC,QAAAL,UAAAE,eAAAI,KAAA7C,EAAA2C,GAeA,QAAAG,GAAAC,EAAAC,GACA,WAAAC,KAAAF,IAAAC,EAEA,QAAAE,GAAAlD,EAAAmD,GACA,OAAAR,KAAA3C,GACA,GAAA4C,OAAAL,UAAAE,eAAAI,KAAA7C,EAAA2C,GAAA,CACA,GAAAS,GAAAC,SAAAV,EAAA,GACAW,OAAAF,IACAD,EAAAC,EAAApD,EAAA2C,KAKA,QAAAY,GAAAvD,EAAAmD,GACA,OAAAR,KAAA3C,GACA4C,OAAAL,UAAAE,eAAAI,KAAA7C,EAAA2C,IACAQ,EAAAR,EAAA3C,EAAA2C,IAUA,QAAAa,GAAAxD,GACA6B,EAAA,MAAA7B,GAAA,gBAAAA,GAAA,sCACA,QAAA2C,KAAA3C,GACA,GAAA4C,OAAAL,UAAAE,eAAAI,KAAA7C,EAAA2C,GACA,QAGA,UAEA,QAAAc,GAAAzD,GACA6B,EAAA7B,GAAA,gBAAAA,GAAA,0CACA,IAAA0D,KACA,QAAAf,KAAA3C,GACA4C,OAAAL,UAAAE,eAAAI,KAAA7C,EAAA2C,KACAe,EAAAf,GAAA3C,EAAA2C,GAGA,OAAAe,GClDA,QAAAC,GAAAC,EAAAnD,EAAAoD,GACA,GAAApD,EAAAN,SAAA0D,EACA,SAAAzB,IAAAC,GAAAC,iBAAA,YAAAsB,EAAA,eACAE,EAAAD,EAAA,YACA,yBACAC,EAAArD,EAAAN,OAAA,YACA,KAWA,QAAA4D,GAAAH,EAAAnD,EAAAuD,GACA,GAAAvD,EAAAN,OAAA6D,EACA,SAAA5B,IAAAC,GAAAC,iBAAA,YAAAsB,EAAA,wBACAE,EAAAE,EAAA,YACA,yBACAF,EAAArD,EAAAN,OAAA,YACA,KAWA,QAAA8D,GAAAL,EAAAnD,EAAAuD,EAAAE,GACA,GAAAzD,EAAAN,OAAA6D,GAAAvD,EAAAN,OAAA+D,EACA,SAAA9B,IAAAC,GAAAC,iBAAA,YAAAsB,EAAA,uBAAAI,EAAA,QACAE,EAAA,mCACAJ,EAAArD,EAAAN,OAAA,YACA,KAOA,QAAAgE,GAAAP,EAAAb,EAAAqB,EAAAC,GACA,KAAAtB,YAAAuB,SAAAvB,EAAA5C,OAAAkE,EACA,SAAAjC,IAAAC,GAAAC,iBAAA,YAAAsB,EAAA,mBAAAQ,EAAA,0CAEAN,EAAAO,EAAA,gBAOA,QAAAE,GAAAX,EAAAY,EAAAC,EAAAC,GACAC,EAAAf,EAAAY,EAAAI,EAAAH,GAAA,YAAAC,GAMA,QAAAG,GAAAjB,EAAAY,EAAAC,EAAAC,OACAzB,KAAAyB,GACAH,EAAAX,EAAAY,EAAAC,EAAAC,GAOA,QAAAI,GAAAlB,EAAAY,EAAAO,EAAAL,GACAC,EAAAf,EAAAY,EAAAO,EAAA,UAAAL,GAMA,QAAAM,GAAApB,EAAAY,EAAAO,EAAAL,OACAzB,KAAAyB,GACAI,EAAAlB,EAAAY,EAAAO,EAAAL,GAIA,QAAAC,GAAAf,EAAAY,EAAAS,EAAAC,GACA,SAAAA,KAAAV,GAAA,WAAAA,IAAAW,EAAAD,GAAA,CACA,GAAAE,GAAAC,EAAAH,EACA,UAAA9C,IAAAC,GAAAC,iBAAA,YAAAsB,EAAA,mBAAAqB,EAAA,kBACAT,EAAA,iBAAAY,IAOA,QAAAD,GAAAD,GACA,sBAAAA,IACA,OAAAA,GACAtC,OAAA0C,eAAAJ,KAAAtC,OAAAL,UAGA,QAAA8C,GAAAH,GACA,OAAAjC,KAAAiC,EACA,iBAEA,WAAAA,EACA,YAEA,oBAAAA,GAIA,MAHAA,GAAA/E,OAAA,KACA+E,IAAAK,UAAA,aAEAC,KAAAC,UAAAP,EAEA,oBAAAA,IAAA,iBAAAA,GACA,SAAAA,CAEA,oBAAAA,GAAA,CACA,GAAAA,YAAAZ,OACA,gBAGA,IAAAoB,GAAAC,EAAAT,EACA,OAAAQ,GACA,YAAAA,EAAA,UAGA,YAIA,wBAAAR,GACA,aAGAzD,EAAA,6BAAAyD,IAIA,QAAAS,GAAAT,GACA,GAAAA,EAAAU,YAAA,CACA,GAAAC,GAAA,4BACAC,EAAAD,EAAAE,KAAAb,KAAAU,YACA,IAAAE,KAAA3F,OAAA,EACA,MAAA2F,GAAA,GAGA,YAGA,QAAAE,GAAApC,EAAAa,EAAAC,GACA,OAAAzB,KAAAyB,EACA,SAAAtC,IAAAC,GAAAC,iBAAA,YAAAsB,EAAA,uBAAAgB,EAAAH,GAAA,oCAQA,QAAAwB,GAAArC,EAAAsC,EAAAC,GACA5C,EAAA2C,EAAA,SAAAvD,EAAAyD,GACA,GAAAD,EAAAE,QAAA1D,GAAA,EACA,SAAAP,IAAAC,GAAAC,iBAAA,mBAAAK,EAAA,wBAAAiB,EAAA,0BAEAuC,EAAAG,KAAA,SAQA,QAAAC,GAAA3C,EAAAY,EAAAC,EAAAC,GACA,GAAAU,GAAAC,EAAAX,EACA,WAAAtC,IAAAC,GAAAC,iBAAA,YAAAsB,EAAA,mBAAAgB,EAAAH,GAAA,qBACAD,EAAA,iBAAAY,GAGA,QAAAR,GAAAxB,GACA,OAAAA,GACA,OACA,aACA,QACA,cACA,QACA,aACA,SACA,MAAAA,GAAA,MAMA,QAAAU,GAAAV,EAAAoD,GACA,MAAApD,GAAA,IAAAoD,GAAA,IAAApD,EAAA,QC7LA,QAAAqD,GAAAC,EAAAC,GACA,MAAAD,GAAAC,GACA,EACAD,EAAAC,EACA,EACA,EAGA,QAAAC,GAAAF,EAAAC,GACA,cAAAD,OAAAzD,KAAAyD,KACAC,IAAAD,EAAAE,OAAAD,IAKAD,IAAAC,EAIA,QAAAE,GAAAH,EAAAC,GACA,GAAAD,EAAAvG,SAAAwG,EAAAxG,OACA,QAEA,QAAA2G,GAAA,EAAmBA,EAAAJ,EAAAvG,OAAiB2G,IACpC,IAAAJ,EAAAI,GAAAF,OAAAD,EAAAG,IACA,QAGA,UAWA,QAAAC,GAAAC,GAIA,GAAAC,GAAAD,EAAA7G,OAAA,CACA,YAAA6G,EAAA7G,OAEA,GAEA,OAAA6G,EAAAE,OAAAD,GACAD,EAAAzB,UAAA,EAAA0B,GAGAD,EAAAzB,UAAA,EAAA0B,GACAE,OAAAC,aAAAJ,EAAAK,WAAAJ,GAAA,GAOA,QAAAK,GAAAN,GAEA,MAAAA,GAAA,KC1EA,QAAAO,KACA,sBAAAC,YACA,SAAApF,IAAAC,GAAAoF,cAAA,sDAIA,QAAAC,KACA,IAAArG,GAAAC,cAAAqG,gBACA,SAAAvF,IAAAC,GAAAoF,cAAA,2DC6GA,QAAAG,GAAAlB,EAAAC,GACA,MAAAD,GAAAC,GACA,EAEAD,EAAAC,EACA,EAEAD,IAAAC,EACA,EAIArD,MAAAoD,GACApD,MAAAqD,GAAA,KAGA,EAQA,QAAAkB,GAAAnB,EAAAC,GAGA,MAAAD,KAAAC,EAEA,IAAAD,GAAA,EAAAA,GAAA,EAAAC,EAIAD,OAAAC,MChIA,QAAAmB,GAAA/E,GACA,cAAAA,OAAAE,KAAAF,EAMA,QAAAgF,GAAAhF,GACA,MAAAiF,IAAAjF,IACAA,GAAAkF,IACAlF,GAAAmF,GCqZA,QAAAC,GAAAC,EAAAC,EAAAtF,GACA,GAAAA,EAAA6D,OAAA0B,GAAAC,UAAA,CACA,GAAAF,IAAAG,GAAAC,MACA,SAAArG,IAAAC,GAAAC,iBAAA,kEAEA,WAAAoG,IAAAN,GAEA,GAAArF,EAAA6D,OAAA+B,GAAAC,KAAA,CACA,GAAAP,IAAAG,GAAAC,MACA,SAAArG,IAAAC,GAAAC,iBAAA,iEAEA,WAAAuG,IAAAT,GAGA,UAAAU,IAAAV,EAAAC,EAAAtF,GCxaA,QAAAgG,GAAAC,GACA,OAAAA,GACA,IAAA3G,IAAA4G,GACA,MAAAxH,GAAA,6BACA,KAAAY,IAAA6G,UACA,IAAA7G,IAAA8G,QACA,IAAA9G,IAAA+G,kBACA,IAAA/G,IAAAgH,mBACA,IAAAhH,IAAAiH,SACA,IAAAjH,IAAAkH,YAIA,IAAAlH,IAAAmH,gBACA,QACA,KAAAnH,IAAAC,iBACA,IAAAD,IAAAoH,UACA,IAAApH,IAAAqH,eACA,IAAArH,IAAAsH,kBACA,IAAAtH,IAAAuH,oBAIA,IAAAvH,IAAAwH,QACA,IAAAxH,IAAAyH,aACA,IAAAzH,IAAAoF,cACA,IAAApF,IAAA0H,UACA,QACA,SACA,MAAAtI,GAAA,wBAAAuH,IASA,QAAAgB,GAAAC,GAEA,GAAAjB,GAAAkB,GAAAD,EACA,QAAAhH,KAAA+F,EAGA,MAAAmB,GAAAnB,GASA,QAAAmB,GAAAnB,GACA,OAAA/F,KAAA+F,EAIA,MADA/H,GAAA,2BACAoB,GAAA8G,OAEA,QAAAH,GACA,IAAAkB,IAAAjB,GACA,MAAA5G,IAAA4G,EACA,KAAAiB,IAAAhB,UACA,MAAA7G,IAAA6G,SACA,KAAAgB,IAAAf,QACA,MAAA9G,IAAA8G,OACA,KAAAe,IAAAd,kBACA,MAAA/G,IAAA+G,iBACA,KAAAc,IAAAb,mBACA,MAAAhH,IAAAgH,kBACA,KAAAa,IAAAZ,SACA,MAAAjH,IAAAiH,QACA,KAAAY,IAAAX,YACA,MAAAlH,IAAAkH,WACA,KAAAW,IAAAV,gBACA,MAAAnH,IAAAmH,eACA,KAAAU,IAAA5H,iBACA,MAAAD,IAAAC,gBACA,KAAA4H,IAAAT,UACA,MAAApH,IAAAoH,SACA,KAAAS,IAAAR,eACA,MAAArH,IAAAqH,cACA,KAAAQ,IAAAP,kBACA,MAAAtH,IAAAsH,iBACA,KAAAO,IAAAN,oBACA,MAAAvH,IAAAuH,mBACA,KAAAM,IAAAL,QACA,MAAAxH,IAAAwH,OACA,KAAAK,IAAAJ,aACA,MAAAzH,IAAAyH,YACA,KAAAI,IAAAzC,cACA,MAAApF,IAAAoF,aACA,KAAAyC,IAAAH,UACA,MAAA1H,IAAA0H,SACA,SACA,MAAAtI,GAAA,wBAAAuH,IAOA,QAAAoB,GAAApB,GACA,OAAA/F,KAAA+F,EACA,MAAAkB,IAAAjB,EAEA,QAAAD,GACA,IAAA3G,IAAA4G,GACA,MAAAiB,IAAAjB,EACA,KAAA5G,IAAA6G,UACA,MAAAgB,IAAAhB,SACA,KAAA7G,IAAA8G,QACA,MAAAe,IAAAf,OACA,KAAA9G,IAAA+G,kBACA,MAAAc,IAAAd,iBACA,KAAA/G,IAAAgH,mBACA,MAAAa,IAAAb,kBACA,KAAAhH,IAAAiH,SACA,MAAAY,IAAAZ,QACA,KAAAjH,IAAAkH,YACA,MAAAW,IAAAX,WACA,KAAAlH,IAAAmH,gBACA,MAAAU,IAAAV,eACA,KAAAnH,IAAAC,iBACA,MAAA4H,IAAA5H,gBACA,KAAAD,IAAAoH,UACA,MAAAS,IAAAT,SACA,KAAApH,IAAAqH,eACA,MAAAQ,IAAAR,cACA,KAAArH,IAAAsH,kBACA,MAAAO,IAAAP,iBACA,KAAAtH,IAAAuH,oBACA,MAAAM,IAAAN,mBACA,KAAAvH,IAAAwH,QACA,MAAAK,IAAAL,OACA,KAAAxH,IAAAyH,aACA,MAAAI,IAAAJ,YACA,KAAAzH,IAAAoF,cACA,MAAAyC,IAAAzC,aACA,KAAApF,IAAA0H,UACA,MAAAG,IAAAH,SACA,SACA,MAAAtI,GAAA,wBAAAuH,IAUA,QAAAqB,GAAAJ,GAOA,OAAAA,GACA,SACA,MAAA5H,IAAA4G,EACA,UACA,MAAA5G,IAAAC,gBAIA,UACA,MAAAD,IAAAmH,eACA,UACA,MAAAnH,IAAAsH,iBACA,UACA,MAAAtH,IAAAoH,SACA,UACA,MAAApH,IAAAwH,OAGA,UACA,MAAAxH,IAAAyH,YACA,UACA,MAAAzH,IAAAgH,kBACA,UACA,MAAAhH,IAAA6G,SACA,UACA,MAAA7G,IAAA8G,OAIA,UACA,MAAA9G,IAAAoF,aACA,UACA,MAAApF,IAAAkH,WACA,UACA,MAAAlH,IAAA+G,iBACA,SACA,MAAAa,IAAA,KAAAA,EAAA,IACA5H,GAAA4G,GACAgB,GAAA,KAAAA,EAAA,IACA5H,GAAAuH,oBACAK,GAAA,KAAAA,EAAA,IACA5H,GAAAiH,SACAjH,GAAA8G,SCvOA,QAAAmB,KACA,MAAAC,IAGA,QAAAC,KACA,MAAAC,IAGA,QAAAC,MACA,MAAAC,IAGA,QAAAC,MACA,MAAAC,ICkPA,QAAAC,IAAAC,EAAAC,GACAA,EAAA7K,OAAA,IACA4K,EAAAC,eCnOA,QAAAC,IAAAlI,EAAAqC,GACAvD,GAAAiG,EAAA/E,GAAAqC,EAAA,eAEA,QAAA8F,IAAAnI,GAEA,sBAAAA,GACAA,EAEA,gBAAAA,GACAM,SAAAN,EAAA,IAGAtB,EAAA,eAAAsB,GA+gCA,QAAAoI,IAAAnL,EAAAwE,EAAA1E,GACA,MAAA0E,KAAA1E,IAAA0E,GAAA1E,IAAAE,GCxgCA,QAAAoL,IAAAC,GAEA,GADAA,EAAAC,OAAAC,KACA,EACA,SAAAnJ,IAAAC,GAAAC,iBAAA,uBAAA+I,EAAA,uDAGA,KACA,WAAAG,GAAAC,KAAA3K,MAAA0K,QAAA,IAAAxK,OAAAqK,EAAAK,MAAA,QAEA,MAAAlK,GACA,SAAAY,IAAAC,GAAAC,iBAAA,uBAAA+I,EAAA,8ECmNA,QAAAM,IAAAC,EAAAC,GACA,GAAAC,GAAA,SAAAf,GACA,OAAAA,GACA,IAAAgB,IAAAC,MACA,QACA,KAAAD,IAAAE,SAEA,IAAAF,IAAAG,SAIA,QACA,KAAAH,IAAAI,QACA,QACA,SACA,MAAA1K,GAAA,uBAAAsJ,IAGA,OAAAe,GAAAF,GAAAE,EAAAD,GC5RA,QAAAO,IAAAf,GAEA,OADA3H,GAAA,GACAoD,EAAA,EAAmBA,EAAAuE,EAAAlL,OAAiB2G,IACpCpD,EAAAvD,OAAA,IACAuD,EAAA2I,GAAA3I,IAEAA,EAAA4I,GAAAjB,EAAAkB,IAAAzF,GAAApD,EAEA,OAAA2I,IAAA3I,GAGA,QAAA4I,IAAAE,EAAAC,GAGA,OAFA/I,GAAA+I,EACAtM,EAAAqM,EAAArM,OACA2G,EAAA,EAAmBA,EAAA3G,EAAY2G,IAAA,CAC/B,GAAA4F,GAAAF,EAAAtF,OAAAJ,EACA,QAAA4F,GACA,SACAhJ,GAAAiJ,GAAAC,EACA,MACA,KAAAD,IACAjJ,GAAAiJ,GAAAE,EACA,MACA,SACAnJ,GAAAgJ,GAGA,MAAAhJ,GAGA,QAAA2I,IAAA3I,GACA,MAAAA,GAAAiJ,GAAAG,GAQA,QAAAC,IAAA1B,GAGA,GAAAlL,GAAAkL,EAAAlL,MAEA,IADA0B,EAAA1B,GAAA,kBAAAkL,GACA,IAAAlL,EAEA,MADA0B,GAAAwJ,EAAAnE,OAAA,KAAAyF,IAAAtB,EAAAnE,OAAA,KAAA4F,GAAA,kBAAAzB,EAAA,iBACA2B,GAAAC,UAOA,QAHAC,GAAA/M,EAAA,EACAgN,KACAC,EAAA,GACAC,EAAA,EAAuBA,EAAAlN,GAAgB,CAGvC,GAAAmN,GAAAjC,EAAAhF,QAAAsG,GAAAU,EAKA,SAJAC,EAAA,GAAAA,EAAAJ,IACAzL,EAAA,mCAAA4J,EAAA,KAEAA,EAAAnE,OAAAoG,EAAA,IAEA,IAAAR,IACA,GAAAS,GAAAlC,EAAA9F,UAAA8H,EAAAC,GACAd,MAAA,EACA,KAAAY,EAAAjN,OAGAqM,EAAAe,GAGAH,GAAAG,EACAf,EAAAY,EACAA,EAAA,IAEAD,EAAAK,KAAAhB,EACA,MACA,KAAAI,IACAQ,GAAA/B,EAAA9F,UAAA8H,EAAAC,GACAF,GAAA,IACA,MACA,KAAAP,IAEAO,GAAA/B,EAAA9F,UAAA8H,EAAAC,EAAA,EACA,MACA,SACA7L,EAAA,mCAAA4J,EAAA,KAEAgC,EAAAC,EAAA,EAEA,UAAAN,IAAAG,GC/FA,QAAAM,IAAAC,EAAAC,GACA9L,EAAA,IAAA8L,EAAA,mCAAAA,GACAD,EAAAE,kBAAAC,GAAAC,OACAC,QAAAF,GAAAE,UAIAL,EAAAE,kBAEAI,GAAAF,OAA4BC,QAAAC,GAAAD,UAC5BL,EAAAE,kBAEAK,GAAAH,OAA6BC,QAAAE,GAAAF,UAC7BG,YAAAD,GAAAE,qBAAAF,GAAAG,wBAAsHC,QAAA,IACtHX,EAAAE,kBAAAU,GAAAR,OACAC,QAAAO,GAAAP,UAGAG,YAAAI,GAAAC,sBAAAD,GAAAE,qBAA2FH,QAAA,IAG3FX,EAAAE,kBAAAa,GAAAX,OACAJ,EAAAE,kBAAAc,GAAAZ,OACAJ,EAAAE,kBAAAe,GAAAb,OACAJ,EAAAE,kBAAAgB,GAAAd,OCwUA,QAAAe,IAAAC,GACA,UAAAC,IAAA,SAAAC,EAAAC,GACAH,EAAAI,UAAA,SAAAC,GACA,GAAAzL,GAAAyL,EAAAC,OAAA1L,MACAsL,GAAAtL,IAEAoL,EAAAO,QAAA,SAAAF,GACAF,EAAAE,EAAAC,OAAAjO,UCQA,QAAAmO,IAAAC,GAEA,MADA1N,GAAA,gBAAA0N,GAAA,qDACAA,EAKA,QAAAC,IAAAC,GACA,MAAAC,IAAAD,EAAAzB,GAAAF,OAKA,QAAA6B,IAAAF,GACA,MAAAC,IAAAD,EAAAhB,GAAAX,OAKA,QAAA8B,IAAAH,GACA,MAAAC,IAAAD,EAAA5B,GAAAC,OAKA,QAAA4B,IAAAD,EAAA3B,GACA,MAAA2B,aAAAI,IACAJ,EAAA3B,SAGArM,EAAA,wCCvNA,QAAAqO,IAAAL,GACA,MAAAM,IAAAN,EAAAnB,GAAAR,OAKA,QAAAkC,IAAAP,GACA,MAAAM,IAAAN,EAAAb,GAAAd,OAKA,QAAAmC,IAAAR,GACA,MAAAM,IAAAN,EAAAxB,GAAAH,OAKA,QAAAiC,IAAAN,EAAA3B,GACA,MAAA2B,aAAAI,IACAJ,EAAA3B,SAGArM,EAAA,wCC/JA,QAAAyO,IAAAT,GACA,MAAAA,aAAAI,IACAJ,EAAA3B,MAAAY,GAAAZ,OAGArM,EAAA,wCAGA,QAAA0O,IAAAC,GACA,MAAAA,GAAA/E,KAAAgF,UCsCA,QAAAC,IAAAC,GACA,WAAAtN,KAAAsN,EAAAC,UCqFA,QAAAC,IAAAC,GACA,IAAAA,EACA,UAAAC,GAEA,QAAAD,EAAAlM,MACA,WACA,UAAAoM,IAAAF,EAAAG,OAAAH,EAAAI,cAAA,IACA,gBACA,MAAAJ,GAAAG,MACA,SACA,SAAAzO,IAAAC,GAAAC,iBAAA,kECjMA,QAAAyO,IAAA/Q,GACA,MAAAgR,IAAAhR,GAAA,4BAMA,QAAAgR,IAAAhR,EAAAiR,GACA,mBAAAjR,IAAA,OAAAA,EACA,QAGA,QADAkR,GAAAlR,EACAC,EAAA,EAAAkR,EAAAF,EAAyChR,EAAAkR,EAAAhR,OAAuBF,IAAA,CAChE,GAAAmR,GAAAD,EAAAlR,EACA,IAAAmR,IAAAF,IAAA,kBAAAA,GAAAE,GACA,SAGA,SCqDA,QAAAC,IAAAC,GACA,OAAAA,GACA,IAAAC,IAAAC,IACA,IAAAD,IAAAE,SACA,IAAAF,IAAAG,OACA,QACA,KAAAH,IAAAI,WACA,QACA,SACA,KAAAlQ,GAAA,uCAAA6P,IAoWA,QAAAM,IAAA1M,GACA,wBAAAA,IACA,OAAAA,GACAA,YAAAZ,QACAY,YAAA3E,OACA2E,YAAA2M,KACA3M,YAAA4M,KACA5M,YAAA6M,KACA7M,YAAA8M,KAEA,QAAAC,IAAAtQ,EAAAuQ,EAAAhN,GACA,IAAA0M,GAAA1M,KAAAC,EAAAD,GAAA,CACA,GAAAE,GAAAC,EAAAH,EACA,oBAAAE,EAEA8M,EAAAC,YAAAxQ,EAAA,oBAGAuQ,EAAAC,YAAAxQ,EAAA,IAAAyD,IAOA,QAAAgN,IAAAC,EAAAhH,GACA,GAAAA,YAAAG,IACA,MAAAH,GAAAiH,CAEA,oBAAAjH,GACA,MAAAkH,IAAAF,EAAAhH,EAIA,UAAAjJ,IAAAC,GAAAC,iBAAA,YAAA+P,EAAA,0FAUA,QAAAE,IAAAF,EAAAhH,GACA,IACA,MAAAD,IAAAC,GAAAiH,EAEA,MAAA9Q,GACA,GAAAG,GAAA6Q,GAAAhR,EACA,UAAAY,IAAAC,GAAAC,iBAAA,YAAA+P,EAAA,gCAAA1Q,IAOA,QAAA6Q,IAAArR,GACA,MAAAA,aAAAS,OAAAT,EAAAQ,QAAAR,KC4oBA,QAAAsR,IAAAJ,EAAAnM,GACA,WAAAjD,KAAAiD,GAEAwM,OAAA,IAGAzM,EAAAoM,EAAAnM,GAAA,UACAlB,EAAAqN,EAAA,kBAAAnM,EAAAwM,OACAxM,GAEA,QAAAyM,IAAAN,EAAAO,EAAAC,GACA,GAAAD,YAAAE,IAGA,IAAAF,EAAAC,cACA,SAAAzQ,IAAAC,GAAAC,iBAAA,sEAGA,OAAAsQ,GANA,KAAArM,GAAA8L,EAAA,sBAAAO,GAcA,QAAAG,IAAAF,EAAAG,GACA,GAAAA,EAAAC,QAAAzP,UAAA,CAGA,GAAA0P,GACAC,EAAA,CACA,OAAAH,GAAAI,WAAA1S,IAAA,SAAAqK,GACA,GAAAsI,GAAA,GAAAC,IAAAT,EAAA9H,EAAAsI,IAAA1Q,IAAAoI,EAAAsI,IAAAL,EAAAO,UAIA,OAHA1R,GAAAkJ,EAAAvG,OAAAuH,GAAAC,MAAA,yCACAnK,GAAAqR,GAAAF,EAAAQ,MAAAC,cAAAP,EAAAnI,EAAAsI,KAAA,qCACAH,EAAAnI,EAAAsI,KAEA7O,KAAA,QACA6O,MACAK,UAAA,EACAC,SAAAR,OAOA,GAAAS,GAAAZ,EAAAC,OACA,OAAAD,GAAAI,WAAA1S,IAAA,SAAAqK,GACA,GAAAsI,GAAA,GAAAC,IAAAT,EAAA9H,EAAAsI,IAAA1Q,IAAAoI,EAAAsI,IAAAL,EAAAO,WACAG,GAAA,EACAC,GAAA,CAUA,OATA5I,GAAAvG,OAAAuH,GAAAC,QACA0H,EAAAE,EAAAvN,QAAA0E,EAAAsI,IAAA1Q,KACAd,EAAA6R,GAAA,kCACAE,IAAAC,OAAA9I,EAAAsI,IAAA1Q,MAEAoI,EAAAvG,OAAAuH,GAAAI,UACAyH,IAAAE,IAAA/I,EAAAsI,KACAM,EAAAC,EAAAvN,QAAA0E,EAAAsI,IAAA1Q,OAEoB6B,KAAAuP,GAAAhJ,EAAAvG,MAAA6O,MAAAK,WAAAC,cAIpB,QAAAI,IAAAvP,GACA,OAAAA,GACA,IAAAuH,IAAAC,MACA,aACA,KAAAD,IAAAE,SACA,IAAAF,IAAAG,SACA,gBACA,KAAAH,IAAAI,QACA,eACA,SACA,MAAA1K,GAAA,wBAAA+C,IC9qCA,QAAAwP,IAAAC,GACAA,EAAA3K,SAAA4K,gBAAA,qBAAAC,GAAmE,UAAAC,IAAAD,IAA6B1Q,EAAA4Q,KCtBhG,QAAAC,IAAAC,GACAP,GAAAO,G/BiBA3R,OAAO4R,eAAehV,EAAqB,cAAgBuD,OAAO,GAGlE,IErBA3C,IFqBIqU,GAAMnV,EAAoB,GgCtB9ByB,GAAA0T,GAAA,QAAA1T,a9BEA,SAAAX,GACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,oBACCA,YACD,IAAAV,IAAAU,GAAAc,MEHAG,GAAA,WACA,QAAAqT,MAcA,MAZAA,GAAAC,YAAA,SAAAvT,GACAsT,EAAAtT,UACAK,EAAA,4BAEAiT,EAAAtT,YAEAsT,EAAApT,YAAA,WAIA,MAHAoT,GAAAtT,UACAK,EAAA,oBAEAiT,EAAAtT,UAEAsT,K6BrBAE,GAAAC,WAAAD,WAAA,WACA,GAAAE,GAAAlS,OAAAmS,iBACUC,uBAAgB1Q,QAAA,SAAA2Q,EAAAC,GAAsCD,EAAAD,UAAAE,IAChE,SAAAD,EAAAC,GAAyB,OAAAC,KAAAD,KAAAzS,eAAA0S,KAAAF,EAAAE,GAAAD,EAAAC,IACzB,iBAAAF,EAAAC,GAEA,QAAAE,KAAuBP,KAAAjP,YAAAqP,EADvBH,EAAAG,EAAAC,GAEAD,EAAA1S,UAAA,OAAA2S,EAAAtS,OAAAyS,OAAAH,IAAAE,EAAA7S,UAAA2S,EAAA3S,UAAA,GAAA6S,QAKA/S,IAIA4G,GAAA,KAEAC,UAAA,YAEAC,QAAA,UAOA7G,iBAAA,mBAQA8G,kBAAA,oBAEAK,UAAA,YAKAC,eAAA,iBAQAC,kBAAA,oBAKAH,gBAAA,kBAKAH,mBAAA,qBAqBAO,oBAAA,sBAQAC,QAAA,UAgBAC,aAAA,eAEArC,cAAA,gBAKA6B,SAAA,WAQAC,YAAA,cAEAQ,UAAA,aAQA3H,GAAA,SAAAkT,GAEA,QAAAlT,GAAA4G,EAAArH,GACA,GAAA4T,GAAAD,EAAAzS,KAAAgS,KAAAlT,IAAAkT,IAQA,OAPAU,GAAAvM,OACAuM,EAAA5T,UACA4T,EAAAnR,KAAA,gBAIAmR,EAAAC,SAAA,WAAsC,MAAAD,GAAAnR,KAAA,WAAAmR,EAAAvM,KAAA,MAAAuM,EAAA5T,SACtC4T,EAEA,MAZAX,IAAAxS,EAAAkT,GAYAlT,GACCR,OzB9ID6T,GAAA,WACA,QAAAC,MAYA,MAVAA,GAAAC,MAAA,WAIA,OAFAC,GAAA,iEACAC,EAAA,GACA/O,EAAA,EAAuBA,EAAA,GAAQA,IAC/B+O,GAAAD,EAAA1O,OAAA4O,KAAAC,MAAAD,KAAAE,SAAAJ,EAAAzV,QAGA,OADA0B,GAAA,KAAAgU,EAAA1V,OAAA,oBAAA0V,GACAA,GAEAH,KCSA5D,GAAA,WACA,QAAAmE,GAAAC,GACAxO,IACAmN,KAAAsB,EAAAD,EA6DA,MA3DAD,GAAAG,iBAAA,SAAAC,GACA1S,EAAA,wBAAAzD,UAAA,GACAqE,EAAA,mCAAA8R,GACA3O,GACA,KAEA,UAAAuO,GADA5U,GAAAC,cAAAgV,KAAAD,IAGA,MAAA7U,GACA,SAAAY,IAAAC,GAAAC,iBAAA,gDAAAd,KAGAyU,EAAAM,eAAA,SAAAC,GAGA,GAFA7S,EAAA,sBAAAzD,UAAA,GACAqH,MACAiP,YAAAhP,aACA,KAAAjB,GAAA,qCAAAiQ,EAUA,WAAAP,GALA3R,MAAA/B,UAAA7B,IACAmC,KAAA2T,EAAA,SAAAC,GACA,MAAAtP,QAAAC,aAAAqP,KAEAnQ,KAAA,MAGA2P,EAAA1T,UAAAmU,SAAA,WAGA,MAFA/S,GAAA,gBAAAzD,UAAA,GACAwH,IACArG,GAAAC,cAAAqV,KAAA9B,KAAAsB,IAEAF,EAAA1T,UAAAqU,aAAA,WACAjT,EAAA,oBAAAzD,UAAA,GACAqH,GAEA,QADAsP,GAAA,GAAArP,YAAAqN,KAAAsB,EAAAhW,QACA2G,EAAA,EAAuBA,EAAA+N,KAAAsB,EAAAhW,OAA+B2G,IACtD+P,EAAA/P,GAAA+N,KAAAsB,EAAA9O,WAAAP,EAEA,OAAA+P,IAEAZ,EAAA1T,UAAAiT,SAAA,WACA,sBAAAX,KAAA6B,WAAA,KAMAT,EAAA1T,UAAAuU,EAAA,SAAAC,GACA,MAAAlC,MAAAsB,IAAAY,EAAAZ,GAMAF,EAAA1T,UAAAyU,EAAA,SAAAD,GACA,MAAAtQ,GAAAoO,KAAAsB,EAAAY,EAAAZ,IAEAF,KAWAgB,GAAAjV,EAAA8P,GAAA,iEyB5FAD,GAAA,WACA,QAAAqF,GAAAC,EAAAC,GAIA,GAHAzT,EAAA,WAAAzD,UAAA,GACAqE,EAAA,sBAAA4S,GACA5S,EAAA,sBAAA6S,IACAC,SAAAF,OAAA,IAAAA,EAAA,GACA,SAAA/U,IAAAC,GAAAC,iBAAA,0DAAA6U,EAEA,KAAAE,SAAAD,OAAA,KAAAA,EAAA,IACA,SAAAhV,IAAAC,GAAAC,iBAAA,6DAAA8U,EAEAvC,MAAAyC,KAAAH,EACAtC,KAAA0C,EAAAH,EAqCA,MAnCAxU,QAAA4R,eAAA0C,EAAA3U,UAAA,YAIAgK,IAAA,WACA,MAAAsI,MAAAyC,MAEAE,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAA0C,EAAA3U,UAAA,aAIAgK,IAAA,WACA,MAAAsI,MAAA0C,GAEAC,YAAA,EACAC,cAAA,IAMAP,EAAA3U,UAAAuU,EAAA,SAAAC,GACA,MAAAlC,MAAAyC,OAAAP,EAAAO,MAAAzC,KAAA0C,IAAAR,EAAAQ,GAMAL,EAAA3U,UAAAyU,EAAA,SAAAD,GACA,MAAAtQ,GAAAoO,KAAAyC,KAAAP,EAAAO,OACA7Q,EAAAoO,KAAA0C,EAAAR,EAAAQ,IAEAL,KCvDAQ,GAAA,WAWA,QAAAA,GAAAC,EAAAC,EAAAC,EAAAC,GACAjD,KAAA8C,aACA9C,KAAA+C,iBACA/C,KAAAgD,OACAhD,KAAAiD,MAEA,MAAAJ,MAIAK,GAAA,YAEAC,GAAA,WACA,QAAAC,GAAAC,EAAAC,GACAtD,KAAAqD,YACArD,KAAAsD,YAAAJ,GAkBA,MAhBAnV,QAAA4R,eAAAyD,EAAA1V,UAAA,qBACAgK,IAAA,WACA,MAAAsI,MAAAsD,WAAAJ,IAEAP,YAAA,EACAC,cAAA,IAEAQ,EAAA1V,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAkB,IACAlB,EAAAmB,YAAArD,KAAAqD,WACAnB,EAAAoB,WAAAtD,KAAAsD,UAEAF,EAAA1V,UAAA6V,UAAA,SAAArB,GACA,MAAAtQ,GAAAoO,KAAAqD,UAAAnB,EAAAmB,YACAzR,EAAAoO,KAAAsD,SAAApB,EAAAoB,WAEAF,KC7CAI,GAAAxD,WAAAD,WAAA,WACA,GAAAE,GAAAlS,OAAAmS,iBACUC,uBAAgB1Q,QAAA,SAAA2Q,EAAAC,GAAsCD,EAAAD,UAAAE,IAChE,SAAAD,EAAAC,GAAyB,OAAAC,KAAAD,KAAAzS,eAAA0S,KAAAF,EAAAE,GAAAD,EAAAC,IACzB,iBAAAF,EAAAC,GAEA,QAAAE,KAAuBP,KAAAjP,YAAAqP,EADvBH,EAAAG,EAAAC,GAEAD,EAAA1S,UAAA,OAAA2S,EAAAtS,OAAAyS,OAAAH,IAAAE,EAAA7S,UAAA2S,EAAA3S,UAAA,GAAA6S,QASAkD,GAAA,WACA,QAAAC,GAAApL,EAAAqL,EAAArY,GACA0U,KAAA4D,KAAAtL,EAAAqL,EAAArY,GA0HA,MAnHAoY,GAAAhW,UAAAkW,KAAA,SAAAtL,EAAAqL,EAAArY,OACA8C,KAAAuV,EACAA,EAAA,EAEAA,EAAArL,EAAAhN,QACAsB,EAAA,UAAA+W,EAAA,iBAAArL,EAAAhN,YAEA8C,KAAA9C,EACAA,EAAAgN,EAAAhN,OAAAqY,EAEArY,EAAAgN,EAAAhN,OAAAqY,GACA/W,EAAA,UAAAtB,EAAA,kBAAAgN,EAAAhN,OAAAqY,IAEA3D,KAAA1H,WACA0H,KAAA2D,SACA3D,KAAA6D,IAAAvY,GAOAoY,EAAAhW,UAAAoW,UAAA,SAAAxL,EAAAqL,EAAArY,GACA,GAAAkL,GAAAzI,OAAAyS,OAAAzS,OAAA0C,eAAAuP,MAEA,OADAxJ,GAAAoN,KAAAtL,EAAAqL,EAAArY,GACAkL,GAEAzI,OAAA4R,eAAA+D,EAAAhW,UAAA,UACAgK,IAAA,WACA,MAAAsI,MAAA6D,KAEAlB,YAAA,EACAC,cAAA,IAEAc,EAAAhW,UAAAqE,OAAA,SAAAmQ,GACA,WAAAwB,EAAAK,WAAA/D,KAAAkC,IAEAwB,EAAAhW,UAAAsW,MAAA,SAAAC,GACA,GAAA3L,GAAA0H,KAAA1H,SAAA4L,MAAAlE,KAAA2D,OAAA3D,KAAAmE,QAYA,OAXAF,aAAAP,GACAO,EAAAvV,QAAA,SAAAiJ,GACAW,EAAAK,KAAAhB,KAGA,gBAAAsM,GACA3L,EAAAK,KAAAsL,GAGArX,EAAA,4CAAAqX,GAEAjE,KAAA8D,UAAAxL,IAGAoL,EAAAhW,UAAAyW,MAAA,WACA,MAAAnE,MAAA2D,OAAA3D,KAAA1U,QAEAoY,EAAAhW,UAAA0W,SAAA,SAAAC,GAGA,MAFAA,OAAAjW,KAAAiW,EAAA,EAAAA,EACArX,EAAAgT,KAAA1U,QAAA+Y,EAAA,4CACArE,KAAA8D,UAAA9D,KAAA1H,SAAA0H,KAAA2D,OAAAU,EAAArE,KAAA1U,OAAA+Y,IAEAX,EAAAhW,UAAA4W,QAAA,WAEA,MADAtX,IAAAgT,KAAArR,UAAA,sCACAqR,KAAA8D,UAAA9D,KAAA1H,SAAA0H,KAAA2D,OAAA3D,KAAA1U,OAAA,IAEAoY,EAAAhW,UAAA6W,aAAA,WAEA,MADAvX,IAAAgT,KAAArR,UAAA,2CACAqR,KAAA1H,SAAA0H,KAAA2D,SAEAD,EAAAhW,UAAA8W,YAAA,WAEA,MADAxX,IAAAgT,KAAArR,UAAA,0CACAqR,KAAA1H,SAAA0H,KAAAmE,QAAA,IAEAT,EAAAhW,UAAAgK,IAAA,SAAA+M,GAEA,MADAzX,GAAAyX,EAAAzE,KAAA1U,OAAA,sBACA0U,KAAA1H,SAAA0H,KAAA2D,OAAAc,IAEAf,EAAAhW,UAAAiB,QAAA,WACA,WAAAqR,KAAA1U,QAEAoY,EAAAhW,UAAAgX,WAAA,SAAAxC,GACA,GAAAA,EAAA5W,OAAA0U,KAAA1U,OACA,QAEA,QAAA2G,GAAA,EAAuBA,EAAA+N,KAAA1U,OAAiB2G,IACxC,GAAA+N,KAAAtI,IAAAzF,KAAAiQ,EAAAxK,IAAAzF,GACA,QAGA,WAEAyR,EAAAhW,UAAAgB,QAAA,SAAAJ,GACA,OAAA2D,GAAA+N,KAAA2D,OAAAlL,EAAAuH,KAAAmE,QAAqDlS,EAAAwG,EAASxG,IAC9D3D,EAAA0R,KAAA1H,SAAArG,KAGAyR,EAAAhW,UAAA8N,QAAA,WACA,MAAAwE,MAAA1H,SAAA4L,MAAAlE,KAAA2D,OAAA3D,KAAAmE,UAEAT,EAAAK,WAAA,SAAAY,EAAAC,GAEA,OADAf,GAAA5C,KAAA4D,IAAAF,EAAArZ,OAAAsZ,EAAAtZ,QACA2G,EAAA,EAAuBA,EAAA4R,EAAS5R,IAAA,CAChC,GAAAJ,GAAA8S,EAAAjN,IAAAzF,GACAH,EAAA8S,EAAAlN,IAAAzF,EACA,IAAAJ,EAAAC,EACA,QACA,IAAAD,EAAAC,EACA,SAEA,MAAA6S,GAAArZ,OAAAsZ,EAAAtZ,QACA,EACAqZ,EAAArZ,OAAAsZ,EAAAtZ,OACA,EACA,GAEAoY,KAOAvL,GAAA,SAAAsI,GAEA,QAAAqE,KACA,cAAArE,KAAAxU,MAAA+T,KAAA3U,YAAA2U,KA2BA,MA7BAwD,IAAAsB,EAAArE,GAIAqE,EAAApX,UAAAqX,gBAAA,WAIA,MAAA/E,MAAAxE,UAAA/J,KAAA,MAEAqT,EAAApX,UAAAiT,SAAA,WACA,MAAAX,MAAA+E,mBAKAD,EAAAE,WAAA,SAAAxO,GAIA,GAAAA,EAAAhF,QAAA,SACA,SAAAjE,IAAAC,GAAAC,iBAAA,iBAAA+I,EAAA,wCAKA,WAAAsO,GADAtO,EAAAK,MAAA,KAAAoO,OAAA,SAAAtN,GAAkE,MAAAA,GAAArM,OAAA,MAGlEwZ,EAAA1M,WAAA,GAAA0M,OACAA,GACCrB,IAEDyB,GAAA,2BAEAC,GAAA,SAAA1E,GAEA,QAAA2E,KACA,cAAA3E,KAAAxU,MAAA+T,KAAA3U,YAAA2U,KA2FA,MA7FAwD,IAAA4B,EAAA3E,GAQA2E,EAAAC,kBAAA,SAAA1N,GACA,MAAAuN,IAAAI,KAAA3N,IAEAyN,EAAA1X,UAAAqX,gBAAA,WACA,MAAA/E,MAAAxE,UACA3P,IAAA,SAAA8F,GAKA,MAJAA,KAAA4T,QAAA,aAAAA,QAAA,WACAH,EAAAC,kBAAA1T,KACAA,EAAA,IAAAA,EAAA,KAEAA,IAEAF,KAAA,MAEA2T,EAAA1X,UAAAiT,SAAA,WACA,MAAAX,MAAA+E,mBAKAK,EAAA1X,UAAA8X,WAAA,WACA,WAAAxF,KAAA1U,QAxMA,aAwMA0U,KAAAtI,IAAA,IAKA0N,EAAAK,SAAA,WACA,UAAAL,IA9MA,cA0NAA,EAAAM,iBAAA,SAAAlP,GAaA,IAZA,GAAA8B,MACAqN,EAAA,GACA1T,EAAA,EACA2T,EAAA,WACA,OAAAD,EAAAra,OACA,SAAAiC,IAAAC,GAAAC,iBAAA,uBAAA+I,EAAA,4EAGA8B,GAAAK,KAAAgN,GACAA,EAAA,IAEAE,GAAA,EACA5T,EAAAuE,EAAAlL,QAAA,CACA,GAAAuM,GAAArB,EAAAvE,EACA,WAAA4F,EAAA,CACA,GAAA5F,EAAA,IAAAuE,EAAAlL,OACA,SAAAiC,IAAAC,GAAAC,iBAAA,uCAAA+I,EAEA,IAAAsP,GAAAtP,EAAAvE,EAAA,EACA,WAAA6T,GAAA,MAAAA,GAAA,MAAAA,EACA,SAAAvY,IAAAC,GAAAC,iBAAA,qCAAA+I,EAEAmP,IAAAG,EACA7T,GAAA,MAEA,MAAA4F,GACAgO,KACA5T,KAEA,MAAA4F,GAAAgO,GAKAF,GAAA9N,EACA5F,MALA2T,IACA3T,KAQA,GADA2T,IACAC,EACA,SAAAtY,IAAAC,GAAAC,iBAAA,2BAAA+I,EAEA,WAAA4O,GAAA9M,IAEA8M,EAAAhN,WAAA,GAAAgN,OACAA,GACC3B,ICnRDsC,GAAA,WACA,QAAAC,GAAAxP,GACAwJ,KAAAxJ,OACAxJ,EAAAgZ,EAAAC,cAAAzP,GAAA,uDACAA,EAAAgF,UAAA/J,KAAA,MAkCA,MAhCAuU,GAAAtY,UAAAqE,OAAA,SAAAmQ,GACA,cAAAA,GAAA,IAAA/J,GAAA4L,WAAA/D,KAAAxJ,KAAA0L,EAAA1L,OAEAwP,EAAAtY,UAAAiT,SAAA,WACA,MAAAX,QAAAxJ,MAEAwP,EAAAjC,WAAA,SAAAmC,EAAAC,GACA,MAAAhO,IAAA4L,WAAAmC,EAAA1P,KAAA2P,EAAA3P,OAEAwP,EAAAC,cAAA,SAAAzP,GACA,MAAAA,GAAAlL,OAAA,MAQA0a,EAAAI,aAAA,SAAA9N,GACA,UAAA0N,GAAA,GAAA7N,IAAAG,EAAA4L,WASA8B,EAAAK,eAAA,SAAA7P,GACA,UAAAwP,GAAA7N,GAAA6M,WAAAxO,KAEAwP,EAAAM,MAAA,GAAAN,GAAA,GAAA7N,SACA6N,KCtCAO,GAAA,WACA,QAAAC,GAAA1Y,EAAA2Y,EAAAC,EAAArV,GACA2O,KAAAlS,MACAkS,KAAAyG,UACAzG,KAAA0G,OACA1G,KAAA2G,kBAAAtV,EAAAsV,kBAoCA,MAlCAH,GAAA9Y,UAAA6F,MAAA,SAAAiD,GACA,MAAAwJ,MAAA0G,KAAAnT,MAAAiD,IAEAgQ,EAAA9Y,UAAAkZ,WAAA,SAAApQ,GACA,GAAAjD,GAAAyM,KAAAzM,MAAAiD,EACA,OAAAjD,KAAArF,YAAAE,IAEAoY,EAAA9Y,UAAAQ,MAAA,WACA,MAAA8R,MAAA0G,KAAAxY,SAEAsY,EAAA9Y,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAsE,IACAxG,KAAAlS,IAAAiE,OAAAmQ,EAAApU,MACAkS,KAAAyG,QAAA1U,OAAAmQ,EAAAuE,UACAzG,KAAA0G,KAAA3U,OAAAmQ,EAAAwE,OACA1G,KAAA2G,oBAAAzE,EAAAyE,mBAEAH,EAAA9Y,UAAAiT,SAAA,WACA,kBAAAX,KAAAlS,IAAA,KAAAkS,KAAAyG,QAAA,KAAAzG,KAAA0G,KAAA,yBACe1G,KAAA2G,kBAAA,MAEfH,EAAAK,aAAA,SAAAC,EAAAC,GACA,MAAAhB,IAAAhC,WAAA+C,EAAAhZ,IAAAiZ,EAAAjZ,MAEA0Y,EAAAQ,eAAA,SAAAzT,EAAAuT,EAAAC,GACA,GAAAE,GAAAH,EAAAvT,SACA2T,EAAAH,EAAAxT,QACA,YAAAnF,KAAA6Y,OAAA7Y,KAAA8Y,EACAD,EAAA1D,UAAA2D,GAGAta,EAAA,2DAGA4Z,KAQAW,GAAA,WACA,QAAAC,GAAAtZ,EAAA2Y,GACAzG,KAAAlS,MACAkS,KAAAyG,UAWA,MATAW,GAAA1Z,UAAAiT,SAAA,WACA,oBAAAX,KAAAlS,IAAA,KAAAkS,KAAAyG,QAAA,KAEAW,EAAA1Z,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,MAAAuE,QAAA1U,OAAAiO,KAAAyG,UAAAvE,EAAApU,IAAAiE,OAAAiO,KAAAlS,MAEAsZ,EAAAP,aAAA,SAAAC,EAAAC,GACA,MAAAhB,IAAAhC,WAAA+C,EAAAhZ,IAAAiZ,EAAAjZ,MAEAsZ,KC9DAC,GAAA,WACA,QAAAC,GAAAvD,EAAAwD,GACAvH,KAAA+D,aACA/D,KAAAuH,QAAAC,GAAAlB,MA0IA,MAvIAgB,GAAA5Z,UAAA+Z,OAAA,SAAA3Z,EAAAI,GACA,UAAAoZ,GAAAtH,KAAA+D,WAAA/D,KAAAuH,KACAE,OAAA3Z,EAAAI,EAAA8R,KAAA+D,YACA2D,KAAA,UAAAF,GAAAG,MAAA,aAGAL,EAAA5Z,UAAAka,OAAA,SAAA9Z,GACA,UAAAwZ,GAAAtH,KAAA+D,WAAA/D,KAAAuH,KACAK,OAAA9Z,EAAAkS,KAAA+D,YACA2D,KAAA,UAAAF,GAAAG,MAAA,aAGAL,EAAA5Z,UAAAgK,IAAA,SAAA5J,GAEA,IADA,GAAA+Z,GAAA7H,KAAAuH,MACAM,EAAAlZ,WAAA,CACA,GAAAmZ,GAAA9H,KAAA+D,WAAAjW,EAAA+Z,EAAA/Z,IACA,QAAAga,EACA,MAAAD,GAAA3Z,KAEA4Z,GAAA,EACAD,IAAAhW,KAEAiW,EAAA,IACAD,IAAA/V,OAGA,aAIAwV,EAAA5Z,UAAAqa,kBAAA,SAAAja,GAGA,IAFA,GAAA+Z,GAAA7H,KAAAuH,KACAS,EAAA,MACAH,EAAAlZ,WAAA,CACA,GAAAmZ,GAAA9H,KAAA+D,WAAAjW,EAAA+Z,EAAA/Z,IACA,QAAAga,EAAA,CACA,GAAAD,EAAAhW,KAAAlD,UAMA,MAAAqZ,GACAA,EAAAla,IAGA,IARA,KADA+Z,IAAAhW,MACAgW,EAAA/V,MAAAnD,WACAkZ,IAAA/V,KACA,OAAA+V,GAAA/Z,IASAga,EAAA,EACAD,IAAAhW,KAEAiW,EAAA,IACAE,EAAAH,EACAA,IAAA/V,OAGA,KAAAlF,GAAA,0EAKA0a,EAAA5Z,UAAA8D,QAAA,SAAA1D,GAIA,IAFA,GAAAma,GAAA,EACAJ,EAAA7H,KAAAuH,MACAM,EAAAlZ,WAAA,CACA,GAAAmZ,GAAA9H,KAAA+D,WAAAjW,EAAA+Z,EAAA/Z,IACA,QAAAga,EACA,MAAAG,GAAAJ,EAAAhW,KAAAwS,IAEAyD,GAAA,EACAD,IAAAhW,MAIAoW,GAAAJ,EAAAhW,KAAAwS,KAAA,EACAwD,IAAA/V,OAIA,UAEAwV,EAAA5Z,UAAAiB,QAAA,WACA,MAAAqR,MAAAuH,KAAA5Y,WAEAZ,OAAA4R,eAAA2H,EAAA5Z,UAAA,QAEAgK,IAAA,WACA,MAAAsI,MAAAuH,KAAAlD,MAEA1B,YAAA,EACAC,cAAA,IAGA0E,EAAA5Z,UAAAwa,OAAA,WACA,MAAAlI,MAAAuH,KAAAW,UAGAZ,EAAA5Z,UAAAya,OAAA,WACA,MAAAnI,MAAAuH,KAAAY,UAMAb,EAAA5Z,UAAA0a,iBAAA,SAAAC,GACA,MAAArI,MAAAuH,KAAAa,iBAAAC,IAEAf,EAAA5Z,UAAAgB,QAAA,SAAAJ,GACA0R,KAAAoI,iBAAA,SAAAE,EAAAC,GAEA,MADAja,GAAAga,EAAAC,IACA,KAQAjB,EAAA5Z,UAAA8a,iBAAA,SAAAH,GACA,MAAArI,MAAAuH,KAAAiB,iBAAAH,IAEAf,EAAA5Z,UAAA+a,YAAA,SAAAC,GACA,UAAAC,IAAA3I,KAAAuH,KAAA,KAAAvH,KAAA+D,YAAA,EAAA2E,IAEApB,EAAA5Z,UAAAkb,gBAAA,SAAA9a,EAAA4a,GACA,UAAAC,IAAA3I,KAAAuH,KAAAzZ,EAAAkS,KAAA+D,YAAA,EAAA2E,IAEApB,EAAA5Z,UAAAmb,mBAAA,SAAAH,GACA,UAAAC,IAAA3I,KAAAuH,KAAA,KAAAvH,KAAA+D,YAAA,EAAA2E,IAEApB,EAAA5Z,UAAAob,uBAAA,SAAAhb,EAAA4a,GACA,UAAAC,IAAA3I,KAAAuH,KAAAzZ,EAAAkS,KAAA+D,YAAA,EAAA2E,IAEApB,KAIAqB,GAAA,WACA,QAAAI,GAAAlB,EAAAmB,EAAAjF,EAAAkF,EAAAP,GACA1I,KAAA0I,mBAAA,KACA1I,KAAAiJ,YACAjJ,KAAAkJ,YAEA,KADA,GAAApB,GAAA,GACAD,EAAAlZ,WAKA,GAJAmZ,EAAAkB,EAAAjF,EAAA8D,EAAA/Z,IAAAkb,GAAA,EAEAC,IACAnB,IAAA,GACAA,EAAA,EAGAD,EADA7H,KAAAiJ,UACApB,EAAAhW,KAGAgW,EAAA/V,UAGA,QAAAgW,EAAA,CAGA9H,KAAAkJ,UAAAvQ,KAAAkP,EACA,OAKA7H,KAAAkJ,UAAAvQ,KAAAkP,GAEAA,EADA7H,KAAAiJ,UACApB,EAAA/V,MAGA+V,EAAAhW,MA2CA,MAtCAkX,GAAArb,UAAAyb,QAAA,WACAnc,EAAAgT,KAAAkJ,UAAA5d,OAAA,0DACA,IACAuD,GADAgZ,EAAA7H,KAAAkJ,UAAAE,KAMA,IAHAva,EADAmR,KAAA0I,gBACA1I,KAAA0I,gBAAAb,EAAA/Z,IAAA+Z,EAAA3Z,QAEsBJ,IAAA+Z,EAAA/Z,IAAAI,MAAA2Z,EAAA3Z,OACtB8R,KAAAiJ,UAEA,IADApB,IAAAhW,MACAgW,EAAAlZ,WACAqR,KAAAkJ,UAAAvQ,KAAAkP,GACAA,IAAA/V,UAKA,KADA+V,IAAA/V,OACA+V,EAAAlZ,WACAqR,KAAAkJ,UAAAvQ,KAAAkP,GACAA,IAAAhW,IAGA,OAAAhD,IAEAka,EAAArb,UAAA2b,QAAA,WACA,MAAArJ,MAAAkJ,UAAA5d,OAAA,GAEAyd,EAAArb,UAAA4b,KAAA,WACA,OAAAtJ,KAAAkJ,UAAA5d,OACA,WACA,IAAAuc,GAAA7H,KAAAkJ,UAAAlJ,KAAAkJ,UAAA5d,OAAA,EACA,OAAA0U,MAAA0I,gBACA1I,KAAA0I,gBAAAb,EAAA/Z,IAAA+Z,EAAA3Z,QAGoBJ,IAAA+Z,EAAA/Z,IAAAI,MAAA2Z,EAAA3Z,QAGpB6a,KAIAvB,GAAA,WACA,QAAA+B,GAAAzb,EAAAI,EAAAsb,EAAA3X,EAAAC,GACAkO,KAAAlS,MACAkS,KAAA9R,QACA8R,KAAAwJ,MAAA,MAAAA,IAAAD,EAAAE,IACAzJ,KAAAnO,KAAA,MAAAA,IAAA0X,EAAAjD,MACAtG,KAAAlO,MAAA,MAAAA,IAAAyX,EAAAjD,MACAtG,KAAAqE,KAAArE,KAAAnO,KAAAwS,KAAA,EAAArE,KAAAlO,MAAAuS,KAiLA,MA9KAkF,GAAA7b,UAAAga,KAAA,SAAA5Z,EAAAI,EAAAsb,EAAA3X,EAAAC,GACA,UAAAyX,GAAA,MAAAzb,IAAAkS,KAAAlS,IAAA,MAAAI,IAAA8R,KAAA9R,MAAA,MAAAsb,IAAAxJ,KAAAwJ,MAAA,MAAA3X,IAAAmO,KAAAnO,KAAA,MAAAC,IAAAkO,KAAAlO,QAEAyX,EAAA7b,UAAAiB,QAAA,WACA,UAMA4a,EAAA7b,UAAA0a,iBAAA,SAAAC,GACA,MAAArI,MAAAnO,KAAAuW,iBAAAC,IACAA,EAAArI,KAAAlS,IAAAkS,KAAA9R,QACA8R,KAAAlO,MAAAsW,iBAAAC,IAMAkB,EAAA7b,UAAA8a,iBAAA,SAAAH,GACA,MAAArI,MAAAlO,MAAA0W,iBAAAH,IACAA,EAAArI,KAAAlS,IAAAkS,KAAA9R,QACA8R,KAAAnO,KAAA2W,iBAAAH,IAGAkB,EAAA7b,UAAAmX,IAAA,WACA,MAAA7E,MAAAnO,KAAAlD,UACAqR,KAGAA,KAAAnO,KAAAgT,OAIA0E,EAAA7b,UAAAwa,OAAA,WACA,MAAAlI,MAAA6E,MAAA/W,KAGAyb,EAAA7b,UAAAya,OAAA,WACA,MAAAnI,MAAAlO,MAAAnD,UACAqR,KAAAlS,IAGAkS,KAAAlO,MAAAqW,UAIAoB,EAAA7b,UAAA+Z,OAAA,SAAA3Z,EAAAI,EAAA6V,GACA,GAAA2F,GAAA1J,KACA8H,EAAA/D,EAAAjW,EAAA4b,EAAA5b,IAUA,OARA4b,GADA5B,EAAA,EACA4B,EAAAhC,KAAA,eAAAgC,EAAA7X,KAAA4V,OAAA3Z,EAAAI,EAAA6V,GAAA,MAEA,IAAA+D,EACA4B,EAAAhC,KAAA,KAAAxZ,EAAA,gBAGAwb,EAAAhC,KAAA,oBAAAgC,EAAA5X,MAAA2V,OAAA3Z,EAAAI,EAAA6V,IAEA2F,EAAAC,SAEAJ,EAAA7b,UAAAkc,UAAA,WACA,GAAA5J,KAAAnO,KAAAlD,UACA,MAAA4a,GAAAjD,KAEA,IAAAoD,GAAA1J,IAIA,OAHA0J,GAAA7X,KAAAgY,SAAAH,EAAA7X,UAAAgY,UACAH,IAAAI,eACAJ,IAAAhC,KAAA,eAAAgC,EAAA7X,KAAA+X,YAAA,MACAF,EAAAC,SAGAJ,EAAA7b,UAAAka,OAAA,SAAA9Z,EAAAiW,GACA,GAAAgG,GACAL,EAAA1J,IACA,IAAA+D,EAAAjW,EAAA4b,EAAA5b,KAAA,EACA4b,EAAA7X,KAAAlD,WAAA+a,EAAA7X,KAAAgY,SAAAH,EAAA7X,UAAAgY,UACAH,IAAAI,eAEAJ,IAAAhC,KAAA,eAAAgC,EAAA7X,KAAA+V,OAAA9Z,EAAAiW,GAAA,UAEA,CAMA,GALA2F,EAAA7X,KAAAgY,UACAH,IAAAM,eACAN,EAAA5X,MAAAnD,WAAA+a,EAAA5X,MAAA+X,SAAAH,EAAA5X,MAAAD,KAAAgY,UACAH,IAAAO,gBAEA,IAAAlG,EAAAjW,EAAA4b,EAAA5b,KAAA,CACA,GAAA4b,EAAA5X,MAAAnD,UACA,MAAA4a,GAAAjD,KAGAyD,GAAAL,EAAA5X,MAAA+S,MACA6E,IAAAhC,KAAAqC,EAAAjc,IAAAic,EAAA7b,MAAA,UAAAwb,EAAA5X,MAAA8X,aAGAF,IAAAhC,KAAA,oBAAAgC,EAAA5X,MAAA8V,OAAA9Z,EAAAiW,IAEA,MAAA2F,GAAAC,SAEAJ,EAAA7b,UAAAmc,MAAA,WACA,MAAA7J,MAAAwJ,OAGAD,EAAA7b,UAAAic,MAAA,WACA,GAAAD,GAAA1J,IAOA,OANA0J,GAAA5X,MAAA+X,UAAAH,EAAA7X,KAAAgY,UACAH,IAAAQ,cACAR,EAAA7X,KAAAgY,SAAAH,EAAA7X,UAAAgY,UACAH,IAAAM,eACAN,EAAA7X,KAAAgY,SAAAH,EAAA5X,MAAA+X,UACAH,IAAAS,aACAT,GAEAH,EAAA7b,UAAAoc,YAAA,WACA,GAAAJ,GAAA1J,KAAAmK,WAMA,OALAT,GAAA5X,MAAAD,KAAAgY,UACAH,IAAAhC,KAAA,oBAAAgC,EAAA5X,MAAAkY,eACAN,IAAAQ,aACAR,IAAAS,aAEAT,GAEAH,EAAA7b,UAAAuc,aAAA,WACA,GAAAP,GAAA1J,KAAAmK,WAKA,OAJAT,GAAA7X,UAAAgY,UACAH,IAAAM,cACAN,IAAAS,aAEAT,GAEAH,EAAA7b,UAAAwc,WAAA,WACA,GAAAE,GAAApK,KAAA0H,KAAA,UAAA6B,EAAAE,IAAA,KAAAzJ,KAAAlO,MAAAD,KACA,OAAAmO,MAAAlO,MAAA4V,KAAA,UAAA1H,KAAAwJ,MAAAY,EAAA,OAEAb,EAAA7b,UAAAsc,YAAA,WACA,GAAAK,GAAArK,KAAA0H,KAAA,UAAA6B,EAAAE,IAAAzJ,KAAAnO,KAAAC,MAAA,KACA,OAAAkO,MAAAnO,KAAA6V,KAAA,UAAA1H,KAAAwJ,MAAA,KAAAa,IAEAd,EAAA7b,UAAAyc,UAAA,WACA,GAAAtY,GAAAmO,KAAAnO,KAAA6V,KAAA,WAAA1H,KAAAnO,KAAA2X,MAAA,WACA1X,EAAAkO,KAAAlO,MAAA4V,KAAA,WAAA1H,KAAAlO,MAAA0X,MAAA,UACA,OAAAxJ,MAAA0H,KAAA,WAAA1H,KAAAwJ,MAAA3X,EAAAC,IAGAyX,EAAA7b,UAAA4c,cAAA,WACA,GAAAC,GAAAvK,KAAAwK,OACA,OAAAvJ,MAAAwJ,IAAA,EAAAF,IAAAvK,KAAAqE,KAAA,GASAkF,EAAA7b,UAAA8c,MAAA,WACA,GAAAxK,KAAA6J,SAAA7J,KAAAnO,KAAAgY,QACA,KAAAjd,GAAA,0BAAAoT,KAAAlS,IAAA,IAAAkS,KAAA9R,MAAA,IAEA,IAAA8R,KAAAlO,MAAA+X,QACA,KAAAjd,GAAA,mBAAAoT,KAAAlS,IAAA,IAAAkS,KAAA9R,MAAA,WAEA,IAAAqc,GAAAvK,KAAAnO,KAAA2Y,OACA,IAAAD,IAAAvK,KAAAlO,MAAA0Y,QACA,KAAA5d,GAAA,sBAGA,OAAA2d,IAAAvK,KAAA6J,QAAA,MAGAN,EAAAjD,MAAA,KACAiD,EAAAE,KAAA,EACAF,EAAA5B,OAAA,EACA4B,KAIAmB,GAAA,WACA,QAAAA,KACA1K,KAAAqE,KAAA,EAuCA,MApCAqG,GAAAhd,UAAAga,KAAA,SAAA5Z,EAAAI,EAAAsb,EAAA3X,EAAAC,GACA,MAAAkO,OAGA0K,EAAAhd,UAAA+Z,OAAA,SAAA3Z,EAAAI,EAAA6V,GACA,UAAAyD,IAAA1Z,EAAAI,IAGAwc,EAAAhd,UAAAka,OAAA,SAAA9Z,EAAAiW,GACA,MAAA/D,OAEA0K,EAAAhd,UAAAiB,QAAA,WACA,UAEA+b,EAAAhd,UAAA0a,iBAAA,SAAAC,GACA,UAEAqC,EAAAhd,UAAA8a,iBAAA,SAAAH,GACA,UAEAqC,EAAAhd,UAAAwa,OAAA,WACA,aAEAwC,EAAAhd,UAAAya,OAAA,WACA,aAEAuC,EAAAhd,UAAAmc,MAAA,WACA,UAGAa,EAAAhd,UAAA4c,cAAA,WACA,UAEAI,EAAAhd,UAAA8c,MAAA,WACA,UAEAE,IAGAlD,IAAAlB,MAAA,GAAAoE,G7B7cA,IAcAC,IAdAC,GAAA5K,WAAAD,WAAA,WACA,GAAAE,GAAAlS,OAAAmS,iBACUC,uBAAgB1Q,QAAA,SAAA2Q,EAAAC,GAAsCD,EAAAD,UAAAE,IAChE,SAAAD,EAAAC,GAAyB,OAAAC,KAAAD,KAAAzS,eAAA0S,KAAAF,EAAAE,GAAAD,EAAAC,IACzB,iBAAAF,EAAAC,GAEA,QAAAE,KAAuBP,KAAAjP,YAAAqP,EADvBH,EAAAG,EAAAC,GAEAD,EAAA1S,UAAA,OAAA2S,EAAAtS,OAAAyS,OAAAH,IAAAE,EAAA7S,UAAA2S,EAAA3S,UAAA,GAAA6S,SAQA,SAAAoK,GAEAA,IAAA,yBACAA,IAAA,+BACAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,6BACAA,IAAA,yBACAA,IAAA,uBACAA,IAAA,iCACAA,IAAA,2BACAA,IAAA,8BACCA,YAID,I8B5BAE,I9B4BAC,GAAA,WACA,QAAAC,MAWA,MATAA,GAAArd,UAAAiT,SAAA,WACA,GAAAqK,GAAAhL,KAAA9R,OACA,eAAA8c,EAAA,OAAAA,MAEAD,EAAArd,UAAAud,iBAAA,SAAA/I,GAGA,MAFAlV,GAAAgT,KAAAkL,YAAAhJ,EAAAgJ,UAAA,iEACAtZ,EAAAoO,KAAAkL,UAAAhJ,EAAAgJ,YAGAH,KAGAtX,GAAA,SAAAgN,GAEA,QAAAhN,KACA,GAAAiN,GAAAD,EAAAzS,KAAAgS,WAKA,OAJAU,GAAAwK,UAAAP,GAAAlX,UAGAiN,EAAAyK,cAAA,KACAzK,EAeA,MAtBAkK,IAAAnX,EAAAgN,GASAhN,EAAA/F,UAAAQ,MAAA,WACA,aAEAuF,EAAA/F,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAzO,IAEAA,EAAA/F,UAAA6V,UAAA,SAAArB,GACA,MAAAA,aAAAzO,GACA,EAEAuM,KAAAiL,iBAAA/I,IAEAzO,EAAAC,SAAA,GAAAD,GACAA,GACCqX,IAEDM,GAAA,SAAA3K,GAEA,QAAA4K,GAAAF,GACA,GAAAzK,GAAAD,EAAAzS,KAAAgS,WAGA,OAFAU,GAAAyK,gBACAzK,EAAAwK,UAAAP,GAAAU,aACA3K,EAoBA,MAzBAkK,IAAAS,EAAA5K,GAOA4K,EAAA3d,UAAAQ,MAAA,WACA,MAAA8R,MAAAmL,eAEAE,EAAA3d,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAmJ,IACArL,KAAAmL,gBAAAjJ,EAAAiJ,eAEAE,EAAA3d,UAAA6V,UAAA,SAAArB,GACA,MAAAA,aAAAmJ,GACAzZ,EAAAoO,KAAAkC,GAEAlC,KAAAiL,iBAAA/I,IAEAmJ,EAAAC,GAAA,SAAApd,GACA,MAAAA,GAAAmd,EAAAE,KAAAF,EAAAG,OAEAH,EAAAE,KAAA,GAAAF,IAAA,GACAA,EAAAG,MAAA,GAAAH,IAAA,GACAA,GACCP,IAGDW,GAAA,SAAAhL,GAEA,QAAAgL,GAAAN,GACA,GAAAzK,GAAAD,EAAAzS,KAAAgS,WAGA,OAFAU,GAAAyK,gBACAzK,EAAAwK,UAAAP,GAAAc,YACA/K,EAWA,MAhBAkK,IAAAa,EAAAhL,GAOAgL,EAAA/d,UAAAQ,MAAA,WACA,MAAA8R,MAAAmL,eAEAM,EAAA/d,UAAA6V,UAAA,SAAArB,GACA,MAAAA,aAAAuJ,GACA1Y,EAAAiN,KAAAmL,cAAAjJ,EAAAiJ,eAEAnL,KAAAiL,iBAAA/I,IAEAuJ,GACCX,IAuCDY,GAAA,SAAAjL,GAEA,QAAAiL,GAAAP,GACA,MAAA1K,GAAAzS,KAAAgS,KAAAmL,IAAAnL,KAYA,MAdA4K,IAAAc,EAAAjL,GAIAiL,EAAAhe,UAAAqE,OAAA,SAAAmQ,GAGA,MAAAA,aAAAwJ,IACA1Y,EAAAgN,KAAAmL,cAAAjJ,EAAAiJ,gBAMAO,GACCD,IAED3X,GAAA,SAAA2M,GAEA,QAAA3M,GAAAqX,GACA,GAAAzK,GAAAD,EAAAzS,KAAAgS,KAAAmL,IAAAnL,IAEA,OADAU,GAAAyK,gBACAzK,EAeA,MAnBAkK,IAAA9W,EAAA2M,GAMA3M,EAAApG,UAAAqE,OAAA,SAAAmQ,GAGA,MAAAA,aAAApO,IACAd,EAAAgN,KAAAmL,cAAAjJ,EAAAiJ,gBAMArX,EAAAC,IAAA,GAAAD,GAAA6X,KACA7X,EAAA8X,kBAAA,GAAA9X,GAAA+X,KACA/X,EAAAgY,kBAAA,GAAAhY,IAAA,KACAA,GACC2X,IAGDM,GAAA,SAAAtL,GAEA,QAAAuL,GAAAb,GACA,GAAAzK,GAAAD,EAAAzS,KAAAgS,WAGA,OAFAU,GAAAyK,gBACAzK,EAAAwK,UAAAP,GAAAqB,YACAtL,EAcA,MAnBAkK,IAAAoB,EAAAvL,GAOAuL,EAAAte,UAAAQ,MAAA,WACA,MAAA8R,MAAAmL,eAEAa,EAAAte,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAA8J,IAAAhM,KAAAmL,gBAAAjJ,EAAAiJ,eAEAa,EAAAte,UAAA6V,UAAA,SAAArB,GACA,MAAAA,aAAA8J,GACApa,EAAAoO,KAAAmL,cAAAjJ,EAAAiJ,eAEAnL,KAAAiL,iBAAA/I,IAEA8J,GACClB,IAEDmB,GAAA,SAAAxL,GAEA,QAAAwL,GAAAd,GACA,GAAAzK,GAAAD,EAAAzS,KAAAgS,WAGA,OAFAU,GAAAyK,gBACAzK,EAAAwK,UAAAP,GAAAsB,eACAvL,EAqBA,MA1BAkK,IAAAqB,EAAAxL,GAOAwL,EAAAve,UAAAQ,MAAA,WACA,MAAA8R,MAAAmL,cAAAe,UAEAD,EAAAve,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAA+J,IACAjM,KAAAmL,cAAApZ,OAAAmQ,EAAAiJ,gBAEAc,EAAAve,UAAA6V,UAAA,SAAArB,GACA,MAAAA,aAAA+J,GACAjM,KAAAmL,cAAA5H,UAAArB,EAAAiJ,eAEAjJ,YAAAiK,KAEA,EAGAnM,KAAAiL,iBAAA/I,IAGA+J,GACCnB,IAcDqB,GAAA,SAAA1L,GAEA,QAAA0L,GAAAC,GACA,GAAA1L,GAAAD,EAAAzS,KAAAgS,WAGA,OAFAU,GAAA0L,iBACA1L,EAAAwK,UAAAP,GAAAsB,eACAvL,EAwBA,MA7BAkK,IAAAuB,EAAA1L,GAOA0L,EAAAze,UAAAQ,MAAA,WACA,aAEAie,EAAAze,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAiK,IACAnM,KAAAoM,eAAAra,OAAAmQ,EAAAkK,iBAEAD,EAAAze,UAAA6V,UAAA,SAAArB,GACA,MAAAA,aAAAiK,GACAnM,KAAAoM,eAAA7I,UAAArB,EAAAkK,gBAEAlK,YAAA+J,IAEA,EAGAjM,KAAAiL,iBAAA/I,IAGAiK,EAAAze,UAAAiT,SAAA,WACA,oCAAAX,KAAAoM,eAAA,KAEAD,GACCrB,IAEDuB,GAAA,SAAA5L,GAEA,QAAA4L,GAAAlB,GACA,GAAAzK,GAAAD,EAAAzS,KAAAgS,WAGA,OAFAU,GAAAyK,gBACAzK,EAAAwK,UAAAP,GAAA0B,UACA3L,EAeA,MApBAkK,IAAAyB,EAAA5L,GAOA4L,EAAA3e,UAAAQ,MAAA,WACA,MAAA8R,MAAAmL,eAEAkB,EAAA3e,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAmK,IACArM,KAAAmL,cAAAlJ,EAAAC,EAAAiJ,gBAEAkB,EAAA3e,UAAA6V,UAAA,SAAArB,GACA,MAAAA,aAAAmK,GACArM,KAAAmL,cAAAhJ,EAAAD,EAAAiJ,eAEAnL,KAAAiL,iBAAA/I,IAEAmK,GACCvB,IAEDwB,GAAA,SAAA7L,GAEA,QAAA8L,GAAAzJ,EAAAhV,GACA,GAAA4S,GAAAD,EAAAzS,KAAAgS,WAIA,OAHAU,GAAAoC,aACApC,EAAA5S,MACA4S,EAAAwK,UAAAP,GAAA4B,SACA7L,EAoBA,MA1BAkK,IAAA2B,EAAA9L,GAQA8L,EAAA7e,UAAAQ,MAAA,WACA,MAAA8R,MAAAlS,KAEAye,EAAA7e,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAqK,IACAvM,KAAAlS,IAAAiE,OAAAmQ,EAAApU,MAAAkS,KAAA8C,WAAA/Q,OAAAmQ,EAAAY,aAMAyJ,EAAA7e,UAAA6V,UAAA,SAAArB,GACA,GAAAA,YAAAqK,GAAA,CACA,GAAAzE,GAAA9H,KAAA8C,WAAAS,UAAArB,EAAAY,WACA,YAAAgF,IAAA/B,GAAAhC,WAAA/D,KAAAlS,IAAAoU,EAAApU,KAEA,MAAAkS,MAAAiL,iBAAA/I,IAEAqK,GACCzB,IAED0B,GAAA,SAAA/L,GAEA,QAAA+L,GAAArB,GACA,GAAAzK,GAAAD,EAAAzS,KAAAgS,WAGA,OAFAU,GAAAyK,gBACAzK,EAAAwK,UAAAP,GAAA6B,cACA9L,EAeA,MApBAkK,IAAA4B,EAAA/L,GAOA+L,EAAA9e,UAAAQ,MAAA,WACA,MAAA8R,MAAAmL,eAEAqB,EAAA9e,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAsK,IACAxM,KAAAmL,cAAAlJ,EAAAC,EAAAiJ,gBAEAqB,EAAA9e,UAAA6V,UAAA,SAAArB,GACA,MAAAA,aAAAsK,GACAxM,KAAAmL,cAAAhJ,EAAAD,EAAAiJ,eAEAnL,KAAAiL,iBAAA/I,IAEAsK,GACC1B,IAED2B,GAAA,SAAAhM,GAEA,QAAAiM,GAAAvB,GACA,GAAAzK,GAAAD,EAAAzS,KAAAgS,WAGA,OAFAU,GAAAyK,gBACAzK,EAAAwK,UAAAP,GAAA+B,YACAhM,EAyGA,MA9GAkK,IAAA8B,EAAAjM,GAOAiM,EAAAhf,UAAAQ,MAAA,WACA,GAAAW,KAIA,OAHAmR,MAAAmL,cAAA/C,iBAAA,SAAAta,EAAAkd,GACAnc,EAAAf,GAAAkd,EAAA9c,UAEAW,GAEA6d,EAAAhf,UAAAgB,QAAA,SAAA2Z,GACArI,KAAAmL,cAAA/C,iBAAAC,IAEAqE,EAAAhf,UAAAqE,OAAA,SAAAmQ,GACA,GAAAA,YAAAwK,GAAA,CAGA,IAFA,GAAAC,GAAA3M,KAAAmL,cAAA1C,cACAmE,EAAA1K,EAAAiJ,cAAA1C,cACAkE,EAAAtD,WAAAuD,EAAAvD,WAAA,CACA,GAAAwD,GAAAF,EAAAxD,UACA2D,EAAAF,EAAAzD,SACA,IAAA0D,EAAA/e,MAAAgf,EAAAhf,MAAA+e,EAAA3e,MAAA6D,OAAA+a,EAAA5e,OACA,SAGA,OAAAye,EAAAtD,YAAAuD,EAAAvD,UAEA,UAEAqD,EAAAhf,UAAA6V,UAAA,SAAArB,GACA,GAAAA,YAAAwK,GAAA,CAGA,IAFA,GAAAC,GAAA3M,KAAAmL,cAAA1C,cACAmE,EAAA1K,EAAAiJ,cAAA1C,cACAkE,EAAAtD,WAAAuD,EAAAvD,WAAA,CACA,GAAAwD,GAAAF,EAAAxD,UACA2D,EAAAF,EAAAzD,UACArB,EAAAlW,EAAAib,EAAA/e,IAAAgf,EAAAhf,MACA+e,EAAA3e,MAAAqV,UAAAuJ,EAAA5e,MACA,IAAA4Z,EACA,MAAAA,GAIA,MAAAlW,GAAA+a,EAAAtD,UAAAuD,EAAAvD,WAGA,MAAArJ,MAAAiL,iBAAA/I,IAGAwK,EAAAhf,UAAAqf,IAAA,SAAAvW,EAAAwW,GAEA,GADAhgB,GAAAwJ,EAAA7H,UAAA,kDACA,IAAA6H,EAAAlL,OACA,MAAA0U,MAAAiN,SAAAzW,EAAA+N,eAAAyI,EAGA,IAAAhJ,GAAAhE,KAAAgE,MAAAxN,EAAA+N,eACAP,aAAA0I,KACA1I,EAAA0I,EAAApG,MAEA,IAAA4G,GAAAlJ,EAAA+I,IAAAvW,EAAA4N,WAAA4I,EACA,OAAAhN,MAAAiN,SAAAzW,EAAA+N,eAAA2I,IAGAR,EAAAhf,UAAAsR,OAAA,SAAAxI,GAEA,GADAxJ,GAAAwJ,EAAA7H,UAAA,qDACA,IAAA6H,EAAAlL,OACA,UAAAohB,GAAA1M,KAAAmL,cAAAvD,OAAApR,EAAA+N,gBAIA,IAAAP,GAAAhE,KAAAgE,MAAAxN,EAAA+N,eACA,IAAAP,YAAA0I,GAAA,CACA,GAAAQ,GAAAlJ,EAAAhF,OAAAxI,EAAA4N,WACA,WAAAsI,GAAA1M,KAAAmL,cAAA1D,OAAAjR,EAAA+N,eAAA2I,IAIA,MAAAlN,OAIA0M,EAAAhf,UAAAG,SAAA,SAAA2I,GACA,WAAApI,KAAA4R,KAAAzM,MAAAiD,IAEAkW,EAAAhf,UAAA6F,MAAA,SAAAiD,GACAxJ,GAAAwJ,EAAA7H,UAAA,gCACA,IAAA4E,GAAAyM,IASA,OARAxJ,GAAA9H,QAAA,SAAAye,GAEA5Z,EADAA,YAAAmZ,GACAnZ,EAAA4X,cAAAzT,IAAAyV,QAAA/e,OAGAA,KAGAmF,GAEAmZ,EAAAhf,UAAAiT,SAAA,WACA,MAAAhQ,MAAAC,UAAAoP,KAAA9R,UAEAwe,EAAAhf,UAAAsW,MAAA,SAAAoJ,GACA,MAAApN,MAAAmL,cAAAzT,IAAA0V,QAAAhf,IAEAse,EAAAhf,UAAAuf,SAAA,SAAAG,EAAAlf,GACA,UAAAwe,GAAA1M,KAAAmL,cAAA1D,OAAA2F,EAAAlf,KAEAwe,EAAApG,MAAA,GAAAoG,GAAA,GAAArF,IAAAzV,IACA8a,GACC5B,IAEDuC,GAAA,SAAA5M,GAEA,QAAA6M,GAAAnC,GACA,GAAAzK,GAAAD,EAAAzS,KAAAgS,WAGA,OAFAU,GAAAyK,gBACAzK,EAAAwK,UAAAP,GAAA2C,WACA5M,EAwCA,MA7CAkK,IAAA0C,EAAA7M,GAOA6M,EAAA5f,UAAAQ,MAAA,WACA,MAAA8R,MAAAmL,cAAAtf,IAAA,SAAA0c,GAAoD,MAAAA,GAAAra,WAEpDof,EAAA5f,UAAAgB,QAAA,SAAA2Z,GACArI,KAAAmL,cAAAzc,QAAA2Z,IAEAiF,EAAA5f,UAAAqE,OAAA,SAAAmQ,GACA,GAAAA,YAAAoL,GAAA,CACA,GAAAtN,KAAAmL,cAAA7f,SAAA4W,EAAAiJ,cAAA7f,OACA,QAEA,QAAA2G,GAAA,EAA2BA,EAAA+N,KAAAmL,cAAA7f,OAA+B2G,IAC1D,IAAA+N,KAAAmL,cAAAlZ,GAAAF,OAAAmQ,EAAAiJ,cAAAlZ,IACA,QAGA,UAEA,UAEAqb,EAAA5f,UAAA6V,UAAA,SAAArB,GACA,GAAAA,YAAAoL,GAAA,CAEA,OADAC,GAAAtM,KAAA4D,IAAA7E,KAAAmL,cAAA7f,OAAA4W,EAAAiJ,cAAA7f,QACA2G,EAAA,EAA2BA,EAAAsb,EAAetb,IAAA,CAC1C,GAAA6V,GAAA9H,KAAAmL,cAAAlZ,GAAAsR,UAAArB,EAAAiJ,cAAAlZ,GACA,IAAA6V,EACA,MAAAA,GAGA,MAAAlW,GAAAoO,KAAAmL,cAAA7f,OAAA4W,EAAAiJ,cAAA7f,QAGA,MAAA0U,MAAAiL,iBAAA/I,IAGAoL,EAAA5f,UAAAiT,SAAA,WACA,MAAAhQ,MAAAC,UAAAoP,KAAA9R,UAEAof,GACCxC,ICxhBD0C,GAAAC,OAKApa,GAAAma,GAAAna,oBAAA4N,KAAAwJ,IAAA,SAKArX,GAAAoa,GAAApa,kBAAA6N,KAAAwJ,IAAA,QAOAtX,GAAAqa,GAAAra,WACA,SAAAjF,GACA,sBAAAA,IACAsU,SAAAtU,IACA+S,KAAAC,MAAAhT,QChBAwf,GAAA,WACA,QAAAC,GAAAnX,EAAAoX,EAAAC,EAAA1J,EAAA2J,EAAAC,OACA,KAAAH,IAAyCA,UACzC,KAAAC,IAAiCA,UACjC,KAAA1J,IAA+BA,EAAA,UAC/B,KAAA2J,IAAiCA,EAAA,UACjC,KAAAC,IAA+BA,EAAA,MAC/B/N,KAAAxJ,OACAwJ,KAAA4N,kBACA5N,KAAA6N,UACA7N,KAAAmE,QACAnE,KAAA8N,UACA9N,KAAA+N,QACA/N,KAAAgO,oBAAA,KACAhO,KAAAiO,gBAAA,KACAjO,KAAA8N,SACA9N,KAAAkO,iBAAAlO,KAAA8N,SAEA9N,KAAA+N,OACA/N,KAAAkO,iBAAAlO,KAAA+N,OA+PA,MA5PAJ,GAAAQ,OAAA,SAAA3X,GACA,UAAAmX,GAAAnX,IAEAzI,OAAA4R,eAAAgO,EAAAjgB,UAAA,WACAgK,IAAA,WACA,UAAAsI,KAAAiO,gBAAA,CACA,GAAAG,GAAApO,KAAAqO,2BACAC,EAAAtO,KAAAuO,sBACA,WAAAH,GAAA,OAAAE,EAIAF,EAAA5I,aACAxF,KAAAiO,iBAAAO,IAGAxO,KAAAiO,iBACA,GAAAQ,IAAAL,GACAI,QAIA,CACAxhB,EAAA,OAAAohB,GACA,OAAAE,GACAF,EAAArc,OAAAuc,GAAA,gDACAtO,KAAAiO,kBAEA,QADAS,IAAA,EACAtjB,EAAA,EAAAujB,EAAA3O,KAAA4N,gBAA+DxiB,EAAAujB,EAAArjB,OAAgBF,IAAA,CAC/E,GAAAwjB,GAAAD,EAAAvjB,EACA4U,MAAAiO,gBAAAtV,KAAAiW,GACAA,EAAArb,MAAAiS,eACAkJ,GAAA,GAGA,IAAAA,EAAA,CAGA,GAAAG,GAAA7O,KAAA4N,gBAAAtiB,OAAA,EACA0U,KAAA4N,gBAAA5N,KAAA4N,gBAAAtiB,OAAA,GAAAwjB,IACAC,GAAAC,SACAhP,MAAAiO,gBAAAtV,KAAAkW,IAAAE,GAAAC,UACAR,GACAS,MAIA,MAAAjP,MAAAiO,iBAEAtL,YAAA,EACAC,cAAA,IAEA+K,EAAAjgB,UAAAwhB,UAAA,SAAAjK,GACAjY,EAAA,MAAAgT,KAAAqO,8BACApJ,YAAAhR,OACAgR,EAAAkK,gBACAlK,EAAA1R,MAAAxB,OAAAiO,KAAAqO,4BAAA,8CACArhB,GAAA+Y,GAAAE,cAAAjG,KAAAxJ,MAAA,0CACA,IAAA4Y,GAAApP,KAAA6N,QAAA1hB,QAAA8Y,GACA,WAAA0I,GAAA3N,KAAAxJ,KAAAwJ,KAAA4N,gBAAA1J,QAAAkL,EAAApP,KAAAmE,MAAAnE,KAAA8N,QAAA9N,KAAA+N,QAEAJ,EAAAjgB,UAAA2hB,WAAA,SAAAT,GACA5hB,GAAA+Y,GAAAE,cAAAjG,KAAAxJ,MAAA,0CACAxJ,GAAAgT,KAAA8N,UAAA9N,KAAA+N,MAAA,mCAEA,IAAAuB,GAAAtP,KAAA4N,gBAAAzhB,QAAAyiB,GACA,WAAAjB,GAAA3N,KAAAxJ,KAAA8Y,EAAAtP,KAAA6N,QAAA3J,QAAAlE,KAAAmE,MAAAnE,KAAA8N,QAAA9N,KAAA+N,QAEAJ,EAAAjgB,UAAA6hB,UAAA,SAAApL,GACA,UAAAwJ,GAAA3N,KAAAxJ,KAAAwJ,KAAA4N,gBAAA1J,QAAAlE,KAAA6N,QAAA3J,QAAAC,EAAAnE,KAAA8N,QAAA9N,KAAA+N,QAEAJ,EAAAjgB,UAAA8hB,YAAA,SAAAC,GACA,UAAA9B,GAAA3N,KAAAxJ,KAAAwJ,KAAA4N,gBAAA1J,QAAAlE,KAAA6N,QAAA3J,QAAAlE,KAAAmE,MAAAsL,EAAAzP,KAAA+N,QAEAJ,EAAAjgB,UAAAgiB,UAAA,SAAAD,GACA,UAAA9B,GAAA3N,KAAAxJ,KAAAwJ,KAAA4N,gBAAA1J,QAAAlE,KAAA6N,QAAA3J,QAAAlE,KAAAmE,MAAAnE,KAAA8N,QAAA2B,IAKA9B,EAAAjgB,UAAAiiB,YAAA,WACA,UAAA3P,KAAAgO,oBAAA,CACA,GAAA2B,GAAA3P,KAAAxJ,KAAAuO,iBACA4K,IAAA,KACA,QAAAvkB,GAAA,EAAAujB,EAAA3O,KAAA6N,QAA+CziB,EAAAujB,EAAArjB,OAAgBF,IAE/DukB,GADAhB,EAAAvjB,GACAukB,cACAA,GAAA,GAEAA,IAAA,MAEA,QAAAC,GAAA,EAAAC,EAAA7P,KAAA4O,QAA+CgB,EAAAC,EAAAvkB,OAAgBskB,IAE/DD,GADAE,EAAAD,GACAD,cACAA,GAAA,GAEA1c,GAAA+M,KAAAmE,SACAwL,GAAA,MACAA,GAAA3P,KAAAmE,OAEAnE,KAAA8N,UACA6B,GAAA,OACAA,GAAA3P,KAAA8N,QAAA6B,eAEA3P,KAAA+N,QACA4B,GAAA,OACAA,GAAA3P,KAAA+N,MAAA4B,eAEA3P,KAAAgO,oBAAA2B,EAEA,MAAA3P,MAAAgO,qBAEAL,EAAAjgB,UAAAiT,SAAA,WACA,GAAAhP,GAAA,SAAAqO,KAAAxJ,KAAAuO,iBAgBA,OAfA/E,MAAA6N,QAAAviB,OAAA,IACAqG,GAAA,eAAAqO,KAAA6N,QAAApc,KAAA,WAEAwB,EAAA+M,KAAAmE,SACAxS,GAAA,YAAAqO,KAAAmE,OAEAnE,KAAA4N,gBAAAtiB,OAAA,IACAqG,GAAA,eAAAqO,KAAA4N,gBAAAnc,KAAA,WAEAuO,KAAA8N,UACAnc,GAAA,cAAAqO,KAAA8N,QAAA6B,eAEA3P,KAAA+N,QACApc,GAAA,YAAAqO,KAAA+N,MAAA4B,eAEAhe,EAAA,KAEAgc,EAAAjgB,UAAAqE,OAAA,SAAAmQ,GACA,GAAAlC,KAAAmE,QAAAjC,EAAAiC,MACA,QAEA,IAAAnE,KAAA4O,QAAAtjB,SAAA4W,EAAA0M,QAAAtjB,OACA,QAEA,QAAA2G,GAAA,EAAuBA,EAAA+N,KAAA4O,QAAAtjB,OAAyB2G,IAChD,IAAA+N,KAAA4O,QAAA3c,GAAAF,OAAAmQ,EAAA0M,QAAA3c,IACA,QAGA,IAAA+N,KAAA6N,QAAAviB,SAAA4W,EAAA2L,QAAAviB,OACA,QAEA,QAAA2G,GAAA,EAAuBA,EAAA+N,KAAA6N,QAAAviB,OAAyB2G,IAChD,IAAA+N,KAAA6N,QAAA5b,GAAAF,OAAAmQ,EAAA2L,QAAA5b,IACA,QAGA,SAAA+N,KAAAxJ,KAAAzE,OAAAmQ,EAAA1L,SAGA,OAAAwJ,KAAA8N,SACA9N,KAAA8N,QAAA/b,OAAAmQ,EAAA4L,SACA,OAAA5L,EAAA4L,WAGA,OAAA9N,KAAA+N,MACA/N,KAAA+N,MAAAhc,OAAAmQ,EAAA6L,OACA,OAAA7L,EAAA6L,QAEAJ,EAAAjgB,UAAAkR,cAAA,SAAAkI,EAAAC,GAEA,OADA+I,IAAA,EACA1kB,EAAA,EAAAujB,EAAA3O,KAAA4O,QAA2CxjB,EAAAujB,EAAArjB,OAAgBF,IAAA,CAC3D,GAAAwjB,GAAAD,EAAAvjB,GACA2kB,EAAAnB,EAAAoB,QAAAlJ,EAAAC,EACA,QAAAgJ,EACA,MAAAA,EACAD,MAAAlB,EAAArb,MAAAiS,aAIA,MADAxY,GAAA8iB,EAAA,kDACA,GAEAnC,EAAAjgB,UAAAuiB,QAAA,SAAAzR,GACA,MAAAwB,MAAAkQ,gBAAA1R,IACAwB,KAAAmQ,eAAA3R,IACAwB,KAAAoQ,eAAA5R,IACAwB,KAAAqQ,cAAA7R,IAEAmP,EAAAjgB,UAAA4iB,SAAA,WACA,OAAArd,EAAA+M,KAAAmE,QAEAwJ,EAAAjgB,UAAA6gB,qBAAA,WACA,MAAAvO,MAAA4N,gBAAAtiB,OAAA,EACA0U,KAAA4N,gBAAA,GAAAra,MACA,MAEAoa,EAAAjgB,UAAA2gB,yBAAA,WACA,OAAAjjB,GAAA,EAAAujB,EAAA3O,KAAA6N,QAA2CziB,EAAAujB,EAAArjB,OAAgBF,IAAA,CAC3D,GAAA6Z,GAAA0J,EAAAvjB,EACA,IAAA6Z,YAAAhR,KAAAgR,EAAAkK,eACA,MAAAlK,GAAA1R,MAGA,aAEAoa,EAAAjgB,UAAA+N,gBAAA,WACA,MAAAsK,IAAAE,cAAAjG,KAAAxJ,OAAA,IAAAwJ,KAAA6N,QAAAviB,QAEAqiB,EAAAjgB,UAAAwiB,gBAAA,SAAA1R,GACA,GAAA+R,GAAA/R,EAAA1Q,IAAA0I,IACA,OAAAuP,IAAAE,cAAAjG,KAAAxJ,MAEAwJ,KAAAxJ,KAAAzE,OAAAwe,GAIAvQ,KAAAxJ,KAAAkO,WAAA6L,IAAAvQ,KAAAxJ,KAAAlL,SAAAilB,EAAAjlB,OAAA,GAOAqiB,EAAAjgB,UAAAyiB,eAAA,SAAA3R,GACA,OAAApT,GAAA,EAAAujB,EAAA3O,KAAA4N,gBAAmDxiB,EAAAujB,EAAArjB,OAAgBF,IAAA,CACnE,GAAAwjB,GAAAD,EAAAvjB,EAEA,KAAAwjB,EAAArb,MAAAiS,kBACApX,KAAAoQ,EAAAjL,MAAAqb,EAAArb,OACA,SAGA,UAEAoa,EAAAjgB,UAAA0iB,eAAA,SAAA5R,GACA,OAAApT,GAAA,EAAAujB,EAAA3O,KAAA6N,QAA2CziB,EAAAujB,EAAArjB,OAAgBF,IAE3D,IADAujB,EAAAvjB,GACA6kB,QAAAzR,GACA,QAGA,WAKAmP,EAAAjgB,UAAA2iB,cAAA,SAAA7R,GACA,QAAAwB,KAAA8N,UAAA9N,KAAA8N,QAAA0C,oBAAAxQ,KAAA4O,QAAApQ,IAGAwB,KAAA+N,OAAA/N,KAAA+N,MAAAyC,oBAAAxQ,KAAA4O,QAAApQ,KAKAmP,EAAAjgB,UAAAwgB,iBAAA,SAAAuB,GACAziB,EAAAyiB,EAAA7f,SAAAtE,QAAA0U,KAAA4O,QAAAtjB,OAAA,iCAEAqiB,KAGAha,GAAA,WACA,QAAA8c,GAAAlhB,GACAyQ,KAAAzQ,OA6BA,MA3BAkhB,GAAAzL,WAAA,SAAAxR,GACA,OAAAA,GACA,QACA,MAAAid,GAAAC,SACA,UACA,MAAAD,GAAAE,kBACA,UACA,MAAAF,GAAA7c,KACA,UACA,MAAA6c,GAAAG,qBACA,SACA,MAAAH,GAAAI,YACA,SACA,MAAAjkB,GAAA,qBAAA4G,KAGAid,EAAA/iB,UAAAiT,SAAA,WACA,MAAAX,MAAAzQ,MAEAkhB,EAAA/iB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAlC,MAAAzQ,OAAA2S,EAAA3S,MAEAkhB,EAAAC,UAAA,GAAAD,GAAA,KACAA,EAAAE,mBAAA,GAAAF,GAAA,MACAA,EAAA7c,MAAA,GAAA6c,GAAA,MACAA,EAAAI,aAAA,GAAAJ,GAAA,KACAA,EAAAG,sBAAA,GAAAH,GAAA,MACAA,KAGAxc,GAAA,WACA,QAAA6c,GAAAvd,EAAAC,EAAAtF,GACA8R,KAAAzM,QACAyM,KAAAxM,KACAwM,KAAA9R,QA2DA,MAzDA4iB,GAAApjB,UAAAuiB,QAAA,SAAAzR,GACA,GAAAwB,KAAAzM,MAAAiS,aAAA,CACAxY,EAAAgT,KAAA9R,gBAAAoe,IAAA,oDACA,IAAAyE,GAAA/Q,KAAA9R,MACA8iB,EAAAjL,GAAAhC,WAAAvF,EAAA1Q,IAAAijB,EAAAjjB,IACA,OAAAkS,MAAAiR,kBAAAD,GAGA,GAAAhG,GAAAxM,EAAAjL,MAAAyM,KAAAzM,MACA,YAAAnF,KAAA4c,GAAAhL,KAAAkR,aAAAlG,IAGA8F,EAAApjB,UAAAwjB,aAAA,SAAAhjB,GAEA,MAAA8R,MAAA9R,MAAAgd,YAAAhd,EAAAgd,WAGAlL,KAAAiR,kBAAA/iB,EAAAqV,UAAAvD,KAAA9R,SAEA4iB,EAAApjB,UAAAujB,kBAAA,SAAAD,GACA,OAAAhR,KAAAxM,IACA,IAAAG,IAAA+c,UACA,MAAAM,GAAA,CACA,KAAArd,IAAAgd,mBACA,MAAAK,IAAA,CACA,KAAArd,IAAAC,MACA,WAAAod,CACA,KAAArd,IAAAkd,aACA,MAAAG,GAAA,CACA,KAAArd,IAAAid,sBACA,MAAAI,IAAA,CACA,SACA,MAAApkB,GAAA,sBAAAoT,KAAAxM,MAGAsd,EAAApjB,UAAAyhB,aAAA,WACA,MAAAnP,MAAAxM,KAAAG,GAAAC,OAEAkd,EAAApjB,UAAAiiB,YAAA,WAIA,MAAA3P,MAAAzM,MAAAwR,kBAAA/E,QAAAxM,GAAAwM,KAAA9R,OAEA4iB,EAAApjB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAA4O,IACA9Q,KAAAxM,GAAAzB,OAAAmQ,EAAA1O,KACAwM,KAAAzM,MAAAxB,OAAAmQ,EAAA3O,QACAyM,KAAA9R,MAAA6D,OAAAmQ,EAAAhU,QAMA4iB,EAAApjB,UAAAiT,SAAA,WACA,MAAAX,MAAAzM,MAAAwR,kBAAA,IAAA/E,KAAAxM,GAAA,IAAAwM,KAAA9R,eAEA4iB,KAMAjd,GAAA,WACA,QAAAA,GAAAN,GACAyM,KAAAzM,QAoBA,MAlBAM,GAAAnG,UAAAuiB,QAAA,SAAAzR,GACA,GAAAwM,GAAAxM,EAAAjL,MAAAyM,KAAAzM,MACA,YAAAnF,KAAA4c,GAAA,OAAAA,EAAA9c,SAEA2F,EAAAnG,UAAAiiB,YAAA,WACA,MAAA3P,MAAAzM,MAAAwR,kBAAA,YAEAlR,EAAAnG,UAAAiT,SAAA,WACA,MAAAX,MAAAzM,MAAAwR,kBAAA,YAEAlR,EAAAnG,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAArO,IACAmM,KAAAzM,MAAAxB,OAAAmQ,EAAA3O,QAMAM,KAMAG,GAAA,WACA,QAAAA,GAAAT,GACAyM,KAAAzM,QAoBA,MAlBAS,GAAAtG,UAAAuiB,QAAA,SAAAzR,GACA,GAAAwM,GAAAxM,EAAAjL,MAAAyM,KAAAzM,OAAArF,OACA,uBAAA8c,IAAAvc,MAAAuc,IAEAhX,EAAAtG,UAAAiiB,YAAA,WACA,MAAA3P,MAAAzM,MAAAwR,kBAAA,WAEA/Q,EAAAtG,UAAAiT,SAAA,WACA,MAAAX,MAAAzM,MAAAwR,kBAAA,WAEA/Q,EAAAtG,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAlO,IACAgM,KAAAzM,MAAAxB,OAAAmQ,EAAA3O,QAMAS,KA0BA+a,GAAA,WACA,QAAAA,GAAAxf,GACAyQ,KAAAzQ,OAOA,MALAwf,GAAArhB,UAAAiT,SAAA,WACA,MAAAX,MAAAzQ,MAEAwf,EAAAC,UAAA,GAAAD,GAAA,OACAA,EAAAoC,WAAA,GAAApC,GAAA,QACAA,KAiBAqC,GAAA,WACA,QAAAC,GAAAzhB,EAAA0hB,GACAtR,KAAApQ,WACAoQ,KAAAsR,SAsDA,MApDAD,GAAA3jB,UAAAiiB,YAAA,WAGA,OADAA,GAAA3P,KAAAsR,OAAA,UACAlmB,EAAA,EAAAujB,EAAA3O,KAAApQ,SAA4CxE,EAAAujB,EAAArjB,OAAgBF,IAE5DukB,GAAA4B,GADA5C,EAAAvjB,EAGA,OAAAukB,IAMA0B,EAAA3jB,UAAA8iB,oBAAA,SAAA5B,EAAApQ,GACAxR,EAAAgT,KAAApQ,SAAAtE,QAAAsjB,EAAAtjB,OAAA,iDAEA,QADA0lB,GAAA,EACA/e,EAAA,EAAuBA,EAAA+N,KAAApQ,SAAAtE,OAA0B2G,IAAA,CACjD,GAAAuf,GAAA5C,EAAA3c,GACAsf,EAAAvR,KAAApQ,SAAAqC,EACA,IAAAuf,EAAAje,MAAAiS,aACAxY,EAAAukB,YAAAjF,IAAA,+DACA0E,EAAAjL,GAAAhC,WAAAwN,EAAAzjB,IAAA0Q,EAAA1Q,SAEA,CACA,GAAA2jB,GAAAjT,EAAAjL,MAAAie,EAAAje,MACAvG,OAAAoB,KAAAqjB,EAAA,kEACAT,EAAAO,EAAAhO,UAAAkO,GAKA,GAHAD,EAAA1C,MAAAC,GAAAoC,aACAH,IAAA,GAEA,IAAAA,EACA,MAGA,MAAAhR,MAAAsR,OAAAN,GAAA,EAAAA,EAAA,GAEAK,EAAA3jB,UAAAqE,OAAA,SAAAmQ,GACA,UAAAA,EACA,QAEA,IAAAlC,KAAAsR,SAAApP,EAAAoP,QACAtR,KAAApQ,SAAAtE,SAAA4W,EAAAtS,SAAAtE,OACA,QAEA,QAAA2G,GAAA,EAAuBA,EAAA+N,KAAApQ,SAAAtE,OAA0B2G,IAAA,CACjD,GAAAyf,GAAA1R,KAAApQ,SAAAqC,GACA0f,EAAAzP,EAAAtS,SAAAqC,EACA,OAAAyf,GAAA3f,OAAA4f,GAEA,UAEAN,KAMA5C,GAAA,WACA,QAAAmD,GAAAre,EAAAub,GACA9O,KAAAzM,YACAnF,KAAA0gB,IACAA,EAAAC,GAAAC,WAEAhP,KAAA8O,MACA9O,KAAA6R,aAAAte,EAAAiS,aAyBA,MAvBAoM,GAAAlkB,UAAAsiB,QAAA,SAAAlJ,EAAAC,GACA,GAAAiK,GAAAhR,KAAA6R,aACAtL,GAAAM,aAAAC,EAAAC,GACAR,GAAAS,eAAAhH,KAAAzM,MAAAuT,EAAAC,EACA,QAAA/G,KAAA8O,KACA,IAAAC,IAAAC,UACA,MAAAgC,EACA,KAAAjC,IAAAoC,WACA,SAAAH,CACA,SACA,MAAApkB,GAAA,sBAAAoT,KAAA8O,OAGA8C,EAAAlkB,UAAAiiB,YAAA,WAEA,MAAA3P,MAAAzM,MAAAwR,kBAAA/E,QAAA8O,KAEA8C,EAAAlkB,UAAAiT,SAAA,WACA,MAAAX,MAAAzM,MAAAwR,kBAAA,KAAA/E,KAAA8O,IAAA,KAEA8C,EAAAlkB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAlC,MAAA8O,MAAA5M,EAAA4M,KAAA9O,KAAAzM,MAAAxB,OAAAmQ,EAAA3O,QAEAqe,KAGApD,GAAA,GAAAC,IAAAtJ,GAAAM,WAAAsJ,GAAAC,WACAC,GAAA,GAAAR,IAAAtJ,GAAAM,WAAAsJ,GAAAoC,Y6BzkBAW,GAAAC,OAAA,iDACAC,GAAA,WACA,QAAAC,GAAAC,EAAAC,GACAnS,KAAAkS,UACAlS,KAAAmS,QACAnlB,EAAAmlB,GAAA,yCAAAA,GACAnlB,EAAAmlB,EAAA,yCAAAA,GAEAnlB,EAAAklB,IAAA,+CAAAA,GAEAllB,EAAAklB,EAAA,8CAAAA,GAiDA,MA/CAD,GAAAG,IAAA,WACA,MAAAH,GAAAI,sBAAA3mB,KAAA0mB,QAEAH,EAAAK,SAAA,SAAAC,GACA,MAAAN,GAAAI,sBAAAE,EAAAC,YAEAP,EAAAI,sBAAA,SAAAI,GACA,GAAAP,GAAAjR,KAAAC,MAAAuR,EAAA,IAEA,WAAAR,GAAAC,EADA,KAAAO,EAAA,IAAAP,KAGAD,EAAAS,cAAA,SAAAC,GAIA,GAAAR,GAAA,EACAS,EAAAd,GAAA5gB,KAAAyhB,EAEA,IADA3lB,IAAA4lB,EAAA,sBAAAD,GACAC,EAAA,IAEA,GAAAC,GAAAD,EAAA,EACAC,MAAA,aAAAC,OAAA,KACAX,EAAA3jB,SAAAqkB,EAAA,IAGA,GAAAN,GAAA,GAAA7mB,MAAAinB,EAEA,WAAAV,GADAhR,KAAAC,MAAAqR,EAAAC,UAAA,KACAL,IAEAF,EAAAvkB,UAAAwe,OAAA,WACA,UAAAxgB,MAAAsU,KAAA+S,wBAEAd,EAAAvkB,UAAAqlB,oBAAA,WACA,WAAA/S,KAAAkS,QAAAlS,KAAAmS,MAAA,KAEAF,EAAAvkB,UAAA6V,UAAA,SAAArB,GACA,MAAAlC,MAAAkS,UAAAhQ,EAAAgQ,QACAtgB,EAAAoO,KAAAmS,MAAAjQ,EAAAiQ,OAEAvgB,EAAAoO,KAAAkS,QAAAhQ,EAAAgQ,UAEAD,EAAAvkB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,GAAAgQ,UAAAlS,KAAAkS,SAAAhQ,EAAAiQ,QAAAnS,KAAAmS,OAEAF,EAAAvkB,UAAAiT,SAAA,WACA,2BAAAX,KAAAkS,QAAA,WAAAlS,KAAAmS,MAAA,KAEAF,KCzDAe,GAAA,WACA,QAAAC,GAAAC,GACAlT,KAAAkT,YAiCA,MA7BAD,GAAAE,iBAAA,SAAAjlB,GACA,GAAAgkB,GAAAjR,KAAAC,MAAAhT,EAAA,IAEA,WAAA+kB,GAAA,GAAAjB,IAAAE,EADAhkB,EAAA,WAGA+kB,EAAAG,cAAA,SAAAllB,GACA,UAAA+kB,GAAA/kB,IAEA+kB,EAAAI,cAAA,WACA,MAAAJ,GAAAK,KAEAL,EAAAvlB,UAAA6V,UAAA,SAAArB,GACA,MAAAlC,MAAAkT,UAAA3P,UAAArB,EAAAgR,YAEAD,EAAAvlB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAlC,MAAAkT,UAAAnhB,OAAAmQ,EAAAgR,YAGAD,EAAAvlB,UAAA6lB,eAAA,WAEA,WAAAvT,KAAAkT,UAAAhB,QAAAlS,KAAAkT,UAAAf,MAAA,KAEAc,EAAAvlB,UAAAiT,SAAA,WACA,yBAAAX,KAAAkT,UAAA,KAEAD,EAAAvlB,UAAA8lB,YAAA,WACA,MAAAxT,MAAAkT,WAEAD,EAAAK,IAAA,GAAAL,GAAA,GAAAjB,IAAA,MACAiB,MFpCA,SAAApI,GAEAA,IAAA,mBAIAA,IAAA,qDAEAA,IAAA,sCACCA,YAID,IG+DA4I,IH/DAC,GAAA,WACA,QAAAC,GAEAhV,EAKAiV,EAEAC,EAEAC,EAOA3d,OACA,KAAA2d,IAAyCA,EAAAd,GAAAM,SACzC,KAAAnd,IAAqCA,EAAAjJ,KACrC8S,KAAArB,QACAqB,KAAA4T,WACA5T,KAAA6T,UACA7T,KAAA8T,kBACA9T,KAAA7J,cAgBA,MAVAwd,GAAAjmB,UAAAqmB,OAAA,SAAAC,GACA,UAAAL,GAAA3T,KAAArB,MAAAqB,KAAA4T,SAAA5T,KAAA6T,QAAAG,EAAAF,gBAAAE,EAAA7d,cAEAwd,EAAAjmB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAlC,MAAA4T,WAAA1R,EAAA0R,UACA5T,KAAA6T,UAAA3R,EAAA2R,SACA7T,KAAA8T,gBAAA/hB,OAAAmQ,EAAA4R,kBACA9T,KAAA7J,cAAA+L,EAAA/L,aACA6J,KAAArB,MAAA5M,OAAAmQ,EAAAvD,QAEAgV,KG3DAM,GAAAjU,WAAAD,WAAA,WACA,GAAAE,GAAAlS,OAAAmS,iBACUC,uBAAgB1Q,QAAA,SAAA2Q,EAAAC,GAAsCD,EAAAD,UAAAE,IAChE,SAAAD,EAAAC,GAAyB,OAAAC,KAAAD,KAAAzS,eAAA0S,KAAAF,EAAAE,GAAAD,EAAAC,IACzB,iBAAAF,EAAAC,GAEA,QAAAE,KAAuBP,KAAAjP,YAAAqP,EADvBH,EAAAG,EAAAC,GAEAD,EAAA1S,UAAA,OAAA2S,EAAAtS,OAAAyS,OAAAH,IAAAE,EAAA7S,UAAA2S,EAAA3S,UAAA,GAAA6S,QAkBA2T,GAAA,WACA,QAAAC,GAAAC,GACApU,KAAAoU,SAMA,MAHAD,GAAAzmB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAlQ,GAAAgO,KAAAoU,OAAAlS,EAAAkS,SAEAD,KAIAE,GAAA,WACA,QAAAA,MAMA,MAJAA,GAAA3mB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAmS,IAEAA,EAAA3U,SAAA,GAAA2U,GACAA,KAIAC,GAAA,WACA,QAAAA,GAAA/gB,EAAAghB,GACAvU,KAAAzM,QACAyM,KAAAuU,YAKA,MAHAD,GAAA5mB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAlC,MAAAzM,MAAAxB,OAAAmQ,EAAA3O,QAAAyM,KAAAuU,UAAAxiB,OAAAmQ,EAAAqS,YAEAD,KAIAE,GAAA,WACA,QAAAA,GAIA/N,EAQAgO,GACAzU,KAAAyG,UACAzG,KAAAyU,mBAEA,MAAAD,OAIA,SAAAf,GACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,yBACAA,IAAA,oBACCA,YAMD,I9B/EApe,I8B+EAqf,GAAA,WACA,QAAAC,GAAAC,EAAAC,GACA7U,KAAA4U,aACA5U,KAAA6U,SACA7nB,MAAAoB,KAAAwmB,OAAAxmB,KAAAymB,EAAA,kEA4CA,MAzCAF,GAAAE,OAAA,SAAAA,GACA,UAAAF,OAAAvmB,GAAAymB,IAGAF,EAAAC,WAAA,SAAAnO,GACA,UAAAkO,GAAAlO,IAEA1Y,OAAA4R,eAAAgV,EAAAjnB,UAAA,UAEAgK,IAAA,WACA,WAAAtJ,KAAA4R,KAAA4U,gBAAAxmB,KAAA4R,KAAA6U,QAEAlS,YAAA,EACAC,cAAA,IAMA+R,EAAAjnB,UAAAonB,WAAA,SAAAC,GACA,WAAA3mB,KAAA4R,KAAA4U,WACAG,YAAAxO,KAAAwO,EAAAtO,QAAA1U,OAAAiO,KAAA4U,gBAEAxmB,KAAA4R,KAAA6U,OACA7U,KAAA6U,OACAE,YAAAxO,IAGA,OAAAwO,eAAA5N,KAIAna,EAAAgT,KAAAgV,OAAA,iCACA,IAGAL,EAAAjnB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAnQ,GAAAiO,KAAA4U,WAAA1S,EAAA0S,aACA5U,KAAA6U,SAAA3S,EAAA2S,QAEAF,EAAAM,KAAA,GAAAN,GACAA,KAyCAO,GAAA,WACA,QAAAC,MAqBA,MAnBAA,GAAAznB,UAAA0nB,iBAAA,SAAAL,GACA,MAAAA,GACA/nB,EAAA+nB,EAAAjnB,IAAAiE,OAAAiO,KAAAlS,KAAA,8DASAqnB,EAAAE,uBAAA,SAAAN,GACA,MAAAA,aAAAxO,IACAwO,EAAAtO,QAGAuM,GAAAM,KAGA6B,KAOAG,GAAA,SAAA7U,GAEA,QAAA8U,GAAAznB,EAAAI,EAAAsnB,GACA,GAAA9U,GAAAD,EAAAzS,KAAAgS,WAKA,OAJAU,GAAA5S,MACA4S,EAAAxS,QACAwS,EAAA8U,eACA9U,EAAA/Q,KAAA8jB,GAAA9W,IACA+D,EA6BA,MApCAuT,IAAAsB,EAAA9U,GASA8U,EAAA7nB,UAAA+nB,sBAAA,SAAAV,EAAAW,GACA1V,KAAAoV,iBAAAL,GACA/nB,EAAA,MAAA0oB,EAAAjB,iBAAA,6CAIA,IAAAhO,GAAAyO,GAAAG,uBAAAN,EACA,WAAAxO,IAAAvG,KAAAlS,IAAA2Y,EAAAzG,KAAA9R,OACAyY,mBAAA,KAGA4O,EAAA7nB,UAAAioB,iBAAA,SAAAZ,EAAA3I,GAEA,GADApM,KAAAoV,iBAAAL,IACA/U,KAAAwV,aAAAV,WAAAC,GACA,MAAAA,EAEA,IAAAtO,GAAAyO,GAAAG,uBAAAN,EACA,WAAAxO,IAAAvG,KAAAlS,IAAA2Y,EAAAzG,KAAA9R,OACAyY,mBAAA,KAGA4O,EAAA7nB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAqT,IACAvV,KAAAlS,IAAAiE,OAAAmQ,EAAApU,MACAkS,KAAA9R,MAAA6D,OAAAmQ,EAAAhU,QACA8R,KAAAwV,aAAAzjB,OAAAmQ,EAAAsT,eAEAD,GACCL,IAeDU,GAAA,SAAAnV,GAEA,QAAAoV,GAAA/nB,EAAA4Y,EAAAoP,EAAAN,GACA,GAAA9U,GAAAD,EAAAzS,KAAAgS,WAMA,OALAU,GAAA5S,MACA4S,EAAAgG,OACAhG,EAAAoV,YACApV,EAAA8U,eACA9U,EAAA/Q,KAAA8jB,GAAAsC,MACArV,EAiEA,MAzEAuT,IAAA4B,EAAApV,GAUAoV,EAAAnoB,UAAA+nB,sBAAA,SAAAV,EAAAW,GASA,GARA1V,KAAAoV,iBAAAL,GACA/nB,EAAA,MAAA0oB,EAAAjB,iBAAA,iDAOAzU,KAAAwV,aAAAV,WAAAC,GACA,MAAAA,EAEA,IAAAtO,GAAAyO,GAAAG,uBAAAN,GACAiB,EAAAhW,KAAAiW,cAAAlB,EACA,WAAAxO,IAAAvG,KAAAlS,IAAA2Y,EAAAuP,GACArP,mBAAA,KAGAkP,EAAAnoB,UAAAioB,iBAAA,SAAAZ,EAAA3I,GAEA,GADApM,KAAAoV,iBAAAL,IACA/U,KAAAwV,aAAAV,WAAAC,GACA,MAAAA,EAEA,IAAAtO,GAAAyO,GAAAG,uBAAAN,GACAiB,EAAAhW,KAAAiW,cAAAlB,EACA,WAAAxO,IAAAvG,KAAAlS,IAAA2Y,EAAAuP,GACArP,mBAAA,KAGAkP,EAAAnoB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAA2T,IACA7V,KAAAlS,IAAAiE,OAAAmQ,EAAApU,MACAkS,KAAA8V,UAAA/jB,OAAAmQ,EAAA4T,YACA9V,KAAAwV,aAAAzjB,OAAAmQ,EAAAsT,eAOAK,EAAAnoB,UAAAuoB,cAAA,SAAAlB,GACA,GAAArO,EAOA,OALAA,GADAqO,YAAAxO,IACAwO,EAAArO,KAGA+F,GAAAnG,MAEAtG,KAAAkW,YAAAxP,IAEAmP,EAAAnoB,UAAAwoB,YAAA,SAAAxP,GACA,OAAAtb,GAAA,EAAAujB,EAAA3O,KAAA8V,UAAA1B,OAAoDhpB,EAAAujB,EAAArjB,OAAgBF,IAAA,CACpE,GAAA+qB,GAAAxH,EAAAvjB,GACAgrB,EAAApW,KAAA0G,KAAAnT,MAAA4iB,EAEAzP,OADAtY,KAAAgoB,EACA1P,EAAAqG,IAAAoJ,EAAAC,GAGA1P,EAAA1H,OAAAmX,GAGA,MAAAzP,IAEAmP,GACCX,IAWDmB,GAAA,SAAA5V,GAEA,QAAA6V,GAAAxoB,EAAAyoB,GACA,GAAA7V,GAAAD,EAAAzS,KAAAgS,WAQA,OAPAU,GAAA5S,MACA4S,EAAA6V,kBACA7V,EAAA/Q,KAAA8jB,GAAA+C,UAIA9V,EAAA8U,aAAAd,GAAAG,QAAA,GACAnU,EAyFA,MAnGAuT,IAAAqC,EAAA7V,GAYA6V,EAAA5oB,UAAA+nB,sBAAA,SAAAV,EAAAW,GACA1V,KAAAoV,iBAAAL,GACA/nB,EAAA,MAAA0oB,EAAAjB,iBAAA,mDACA,IAAAA,GAAAiB,EAAAjB,gBAOA,KAAAzU,KAAAwV,aAAAV,WAAAC,GACA,MAAAA,EAEA,IAAAvW,GAAAwB,KAAAyW,gBAAA1B,GACAiB,EAAAhW,KAAA0W,gBAAAlY,EAAAkI,KAAA+N,EACA,WAAAlO,IAAAvG,KAAAlS,IAAA0Q,EAAAiI,QAAAuP,GACArP,mBAAA,KAGA2P,EAAA5oB,UAAAioB,iBAAA,SAAAZ,EAAA3I,GAEA,GADApM,KAAAoV,iBAAAL,IACA/U,KAAAwV,aAAAV,WAAAC,GACA,MAAAA,EAEA,IAAAvW,GAAAwB,KAAAyW,gBAAA1B,GACAN,EAAAzU,KAAA2W,sBAAAvK,GACA4J,EAAAhW,KAAA0W,gBAAAlY,EAAAkI,KAAA+N,EACA,WAAAlO,IAAAvG,KAAAlS,IAAA0Q,EAAAiI,QAAAuP,GACArP,mBAAA,KAGA2P,EAAA5oB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAAoU,IACAtW,KAAAlS,IAAAiE,OAAAmQ,EAAApU,MACAkE,EAAAgO,KAAAuW,gBAAArU,EAAAqU,kBACAvW,KAAAwV,aAAAzjB,OAAAmQ,EAAAsT,eAQAc,EAAA5oB,UAAA+oB,gBAAA,SAAA1B,GACA/nB,EAAA+nB,YAAAxO,IAAA,8BAAAwO,EACA,IAAAvW,GAAAuW,CAEA,OADA/nB,GAAAwR,EAAA1Q,IAAAiE,OAAAiO,KAAAlS,KAAA,mDACA0Q,GAWA8X,EAAA5oB,UAAAipB,sBAAA,SAAAvK,GAEA,OADAqI,MACArpB,EAAA,EAAAujB,EAAA3O,KAAAuW,gBAAmDnrB,EAAAujB,EAAArjB,OAAgBF,IAAA,CACnE,GAAAwrB,GAAAjI,EAAAvjB,GACAmpB,EAAAqC,EAAArC,SACA,MAAAA,YAAAF,KAIA,MAAAznB,GAAA,kCAAA2nB,EAHAE,GAAA9b,KAAA,GAAAwT,IAAAC,IAMA,MAAAqI,IAEA6B,EAAA5oB,UAAAgpB,gBAAA,SAAAhQ,EAAA+N,GACAznB,EAAAynB,EAAAnpB,SAAA0U,KAAAuW,gBAAAjrB,OAAA,oCACA,QAAA2G,GAAA,EAAuBA,EAAA+N,KAAAuW,gBAAAjrB,OAAiC2G,IAAA,CACxD,GAAA2kB,GAAA5W,KAAAuW,gBAAAtkB,GACAsiB,EAAAqC,EAAArC,UACA4B,EAAAS,EAAArjB,KACA,MAAAghB,YAAAF,KAIA,MAAAznB,GAAA,kCAAA2nB,EAHA7N,KAAAqG,IAAAoJ,EAAA1B,EAAAxiB,IAMA,MAAAyU,IAEA4P,GACCpB,IAGD2B,GAAA,SAAApW,GAEA,QAAAqW,GAAAhpB,EAAA0nB,GACA,GAAA9U,GAAAD,EAAAzS,KAAAgS,WAIA,OAHAU,GAAA5S,MACA4S,EAAA8U,eACA9U,EAAA/Q,KAAA8jB,GAAAsD,OACArW,EAyBA,MA/BAuT,IAAA6C,EAAArW,GAQAqW,EAAAppB,UAAA+nB,sBAAA,SAAAV,EAAAW,GAMA,MALA1V,MAAAoV,iBAAAL,GACA/nB,EAAA,MAAA0oB,EAAAjB,iBAAA,iDAIA,GAAAtN,IAAAnH,KAAAlS,IAAAklB,GAAAM,MAEAwD,EAAAppB,UAAAioB,iBAAA,SAAAZ,EAAA3I,GAEA,MADApM,MAAAoV,iBAAAL,GACA/U,KAAAwV,aAAAV,WAAAC,IAGAA,GACA/nB,EAAA+nB,EAAAjnB,IAAAiE,OAAAiO,KAAAlS,KAAA,qDAEA,GAAAqZ,IAAAnH,KAAAlS,IAAAklB,GAAAK,kBALA0B,GAOA+B,EAAAppB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,aAAA4U,IACA9W,KAAAlS,IAAAiE,OAAAmQ,EAAApU,MACAkS,KAAAwV,aAAAzjB,OAAAmQ,EAAAsT,eAEAsB,GACC5B,ICteD8B,GAAA,WAEA,QAAAA,GAAAC,GACAjX,KAAAiX,QAKA,MAHAD,GAAAtpB,UAAAqE,OAAA,SAAAmQ,GACA,MAAAA,MAAA+U,QAAAjX,KAAAiX,OAEAD,M/BMA,SAAA3hB,GACAA,IAAA,WACAA,IAAA,yBACAA,IAAA,qBACAA,IAAA,uCACAA,IAAA,yCACAA,IAAA,yBACAA,IAAA,mCACAA,IAAA,yCACAA,IAAA,sCACAA,IAAA,2CACAA,IAAA,6CACAA,IAAA,sBACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,2BACCA,YgCxBD,ICkDA6hB,IDlDAC,GAAA,WACA,QAAAC,GAAArT,GACA/D,KAAA+D,aACA/D,KAAA0G,KAAA,GAAAW,IAAArH,KAAA+D,YAqHA,MA/GAqT,GAAAC,YAAA,SAAAxrB,GACA,GAAAyrB,GAAA,GAAAF,GAAAvrB,EAAAkY,WAIA,OAHAlY,GAAA6C,QAAA,SAAAZ,GACAwpB,IAAArY,IAAAnR,KAEAwpB,GAEAF,EAAA1pB,UAAA6pB,IAAA,SAAAC,GACA,cAAAxX,KAAA0G,KAAAhP,IAAA8f,IAEAJ,EAAA1pB,UAAA+pB,MAAA,WACA,MAAAzX,MAAA0G,KAAAwB,UAEAkP,EAAA1pB,UAAAgqB,KAAA,WACA,MAAA1X,MAAA0G,KAAAyB,UAEApa,OAAA4R,eAAAyX,EAAA1pB,UAAA,QACAgK,IAAA,WACA,MAAAsI,MAAA0G,KAAArC,MAEA1B,YAAA,EACAC,cAAA,IAEAwU,EAAA1pB,UAAA8D,QAAA,SAAAgmB,GACA,MAAAxX,MAAA0G,KAAAlV,QAAAgmB,IAGAJ,EAAA1pB,UAAAgB,QAAA,SAAAipB,GACA3X,KAAA0G,KAAA0B,iBAAA,SAAAE,EAAAC,GAEA,MADAoP,GAAArP,IACA,KAIA8O,EAAA1pB,UAAAkqB,eAAA,SAAAC,EAAAF,GAEA,IADA,GAAAG,GAAA9X,KAAA0G,KAAAkC,gBAAAiP,EAAA,IACAC,EAAAzO,WAAA,CACA,GAAAmO,GAAAM,EAAA3O,SACA,IAAAnJ,KAAA+D,WAAAyT,EAAA1pB,IAAA+pB,EAAA,OACA,MACAF,GAAAH,EAAA1pB,OAMAspB,EAAA1pB,UAAAqqB,aAAA,SAAAJ,EAAAnf,GACA,GAAAsf,EAOA,KALAA,MADA1pB,KAAAoK,EACAwH,KAAA0G,KAAAkC,gBAAApQ,GAGAwH,KAAA0G,KAAA+B,cAEAqP,EAAAzO,WAGA,IADAsO,EADAG,EAAA3O,UACArb,KAEA,QAIAspB,EAAA1pB,UAAAsqB,kBAAA,SAAAR,GACA,GAAAM,GAAA9X,KAAA0G,KAAAkC,gBAAA4O,EACA,OAAAM,GAAAzO,UAAAyO,EAAA3O,UAAArb,IAAA,MAGAspB,EAAA1pB,UAAAuR,IAAA,SAAAuY,GACA,MAAAxX,MAAA0H,KAAA1H,KAAA0G,KAAAkB,OAAA4P,GAAA/P,OAAA+P,GAAA,KAGAJ,EAAA1pB,UAAAsR,OAAA,SAAAwY,GACA,MAAAxX,MAAAuX,IAAAC,GAEAxX,KAAA0H,KAAA1H,KAAA0G,KAAAkB,OAAA4P,IADAxX,MAGAoX,EAAA1pB,UAAAiB,QAAA,WACA,MAAAqR,MAAA0G,KAAA/X,WAEAyoB,EAAA1pB,UAAAuqB,UAAA,SAAA/V,GACA,GAAArT,GAAAmR,IAIA,OAHAkC,GAAAxT,QAAA,SAAA8oB,GACA3oB,IAAAoQ,IAAAuY,KAEA3oB,GAEAuoB,EAAA1pB,UAAAqE,OAAA,SAAAmQ,GACA,KAAAA,YAAAkV,IACA,QACA,IAAApX,KAAAqE,OAAAnC,EAAAmC,KACA,QAGA,KAFA,GAAA6T,GAAAlY,KAAA0G,KAAA+B,cACA0P,EAAAjW,EAAAwE,KAAA+B,cACAyP,EAAA7O,WAAA,CACA,GAAA+O,GAAAF,EAAA/O,UAAArb,IACAuqB,EAAAF,EAAAhP,UAAArb,GACA,QAAAkS,KAAA+D,WAAAqU,EAAAC,GACA,SAEA,UAEAjB,EAAA1pB,UAAAiT,SAAA,WACA,GAAA9R,KAEA,OADAmR,MAAAtR,QAAA,SAAA8oB,GAAsC,MAAA3oB,GAAA8J,KAAA6e,KACtC,aAAA3oB,EAAA,KAEAuoB,EAAA1pB,UAAAga,KAAA,SAAAhB,GACA,GAAA7X,GAAA,GAAAuoB,GAAApX,KAAA+D,WAEA,OADAlV,GAAA6X,OACA7X,GAEAuoB,K/B7HA1hB,GAAA,GAAA2R,IAAAtB,GAAAhC,YAIAnO,GAAA,GAAAyR,IAAAtB,GAAAhC,YAIAjO,GAAA,GAAAuR,IAAAtB,GAAAhC,YAIA/N,GAAA,GAAAmhB,IAAApR,GAAAhC,YgCPAuU,GAAA,WACA,QAAAC,GAIAzE,EAIA0E,EAKAC,GACAzY,KAAA8T,kBACA9T,KAAAwY,gBACAxY,KAAAyY,kBAwBA,MAtBAF,GAAA7qB,UAAAgrB,kBAAA,SAAAla,GACAwB,KAAAyY,gBAAAzY,KAAAyY,gBAAAhR,OAAAjJ,EAAA1Q,IAAA0Q,IAEA+Z,EAAA7qB,UAAAirB,8BAAA,SAAA/E,GAYA5T,KAAAwY,cAAA5E,IACAgF,QAAA,GAAAC,IACA/E,gBAAAd,GAAAM,IACAwF,oBAAA5B,GAAA6B,eACA5iB,YAAAjJ,MAGAqrB,MAUA,SAAArB,GAEAA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,8BACCA,YACD,I/B3BA8B,I+B2BAC,GAAAljB,KACA8iB,GAAA,WACA,QAAAA,KACA7Y,KAAAkZ,KAAAD,GAkBA,MAhBAlrB,QAAA4R,eAAAkZ,EAAAnrB,UAAA,aACAgK,IAAA,WACA,MAAAsI,MAAAkZ,MAEAvW,YAAA,EACAC,cAAA,IAEAiW,EAAAnrB,UAAAuR,IAAA,SAAAnR,GACAkS,KAAAkZ,KAAAlZ,KAAAkZ,KAAAja,IAAAnR,IAEA+qB,EAAAnrB,UAAAsR,OAAA,SAAAlR,GACAkS,KAAAkZ,KAAAlZ,KAAAkZ,KAAAla,OAAAlR,IAEA+qB,EAAAnrB,UAAAqE,OAAA,SAAAmQ,GACA,cAAAA,GAAAlC,KAAAkZ,KAAAnnB,OAAAmQ,EAAAgX,OAEAL,KAGAM,GAAA,WACA,QAAAA,KACAnZ,KAAAoZ,eAAAH,GACAjZ,KAAAqZ,iBAAAJ,GAqBA,MAnBAE,GAAAzrB,UAAA4rB,cAAA,SAAAhC,GACA,GAAAzoB,GAAAyoB,CAGA,OAFAtX,MAAAoZ,eAAA1qB,QAAA,SAAAZ,GAAoD,MAAAe,KAAAoQ,IAAAnR,KACpDkS,KAAAqZ,iBAAA3qB,QAAA,SAAAZ,GAAsD,MAAAe,KAAAmQ,OAAAlR,KACtDe,GAEAsqB,EAAAzrB,UAAAuR,IAAA,SAAAnR,GACAkS,KAAAoZ,eAAApZ,KAAAoZ,eAAAna,IAAAnR,GACAkS,KAAAqZ,iBAAArZ,KAAAqZ,iBAAAra,OAAAlR,IAEAqrB,EAAAzrB,UAAAsR,OAAA,SAAAlR,GACAkS,KAAAoZ,eAAApZ,KAAAoZ,eAAApa,OAAAlR,GACAkS,KAAAqZ,iBAAArZ,KAAAqZ,iBAAApa,IAAAnR,IAEAqrB,EAAAzrB,UAAAqE,OAAA,SAAAmQ,GACA,cAAAA,GACAlC,KAAAoZ,eAAArnB,OAAAmQ,EAAAkX,iBACApZ,KAAAqZ,iBAAAtnB,OAAAmQ,EAAAmX,mBAEAF,K/BxGAI,GAAA,WACA,QAAAA,GAEAC,EAEAC,EAEA3rB,EAKA4rB,GACA1Z,KAAAwZ,mBACAxZ,KAAAyZ,mBACAzZ,KAAAlS,MACAkS,KAAA0Z,SAEA,MAAAH,MAGAI,GAAA,WACA,QAAAA,GAAA/F,EAAAgG,GACA5Z,KAAA4T,WACA5T,KAAA4Z,kBAEA,MAAAD,OAIA,SAAAX,GACAA,IAAA,uBACAA,IAAA,iBACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,kBACCA,YACD,IAAAa,IAAA,WACA,QAAAC,GAEAC,EAEAC,EAOA7jB,EAEA8jB,OACA,KAAA9jB,IAAqCA,EAAAjJ,SACrC,KAAA+sB,IAA+BA,EAAA,MAC/Bja,KAAA+Z,QACA/Z,KAAAga,YACAha,KAAA7J,cACA6J,KAAAia,QAEA,MAAAH,MAOAI,GAAA,WACA,QAAAC,GAAArG,EAAAsG,EAAAC,GACAra,KAAA8T,kBACA9T,KAAAoa,gBAEApa,KAAAsa,oBAEAta,KAAAwY,iBAEAxY,KAAAyY,gBAAAhjB,IAEAuK,KAAAua,QAAA,EACAva,KAAAqa,uBAAAzrB,EAAAyrB,GAmKA,MAhKAF,GAAAzsB,UAAAuR,IAAA,SAAAub,GACAxtB,GAAAgT,KAAAua,OAAA,kDACAC,YAAAjB,IACAvZ,KAAAya,kBAAAD,GAEAA,YAAAX,IACA7Z,KAAA0a,gBAAAF,GAEAA,YAAAb,IACA3Z,KAAA2a,yBAAAH,GAGA5tB,EAAA,yBAAA4tB,IAIAL,EAAAzsB,UAAAktB,WAAA,SAAAC,GACA,GAAAna,GAAAV,IACAhT,IAAAgT,KAAAua,OAAA,kDACAM,EAAAnsB,QAAA,SAAAwH,GAAgD,MAAAwK,GAAAzB,IAAA/I,MAMhDikB,EAAAzsB,UAAAotB,kBAAA,WACA,GAAApa,GAAAV,KACAwY,EAAAxY,KAAAwY,aASA,OAPAnqB,GAAA2R,KAAAwY,cAAA,SAAA5E,GACAlT,EAAAqa,eAAAnH,UACA4E,GAAA5E,KAIA5T,KAAAua,QAAA,EACA,GAAAjC,IAAAtY,KAAA8T,gBAAA0E,EAAAxY,KAAAyY,kBAEA0B,EAAAzsB,UAAAstB,mBAAA,SAAApH,GACA,GAAA1d,GAAA8J,KAAAwY,cAAA5E,EAWA,OAVA1d,KAEAA,GACA4iB,oBAAA5B,GAAA+D,KACAnH,gBAAA9T,KAAA8T,gBACA8E,QAAA,GAAAO,IACAhjB,YAAAjJ,KAEA8S,KAAAwY,cAAA5E,GAAA1d,GAEAA,GAUAikB,EAAAzsB,UAAAqtB,eAAA,SAAAnH,GACA,OAAA/lB,EAAAmS,KAAAqa,uBAAAzG,IACA/lB,EAAAmS,KAAAoa,cAAAxG,IAEAuG,EAAAzsB,UAAA+sB,kBAAA,SAAAS,GAEA,OADAC,IAAA,EACA/vB,EAAA,EAAAujB,EAAAuM,EAAA1B,iBAAyDpuB,EAAAujB,EAAArjB,OAAgBF,IAAA,CACzE,GAAAwoB,GAAAjF,EAAAvjB,EACA,IAAA4U,KAAA+a,eAAAnH,GAAA,CACA,GAAA1d,GAAA8J,KAAAgb,mBAAApH,EACA1d,GAAA0iB,QAAA3Z,IAAAic,EAAAptB,KACAqtB,GAAA,GAGA,OAAAvL,GAAA,EAAAC,EAAAqL,EAAAzB,iBAAyD7J,EAAAC,EAAAvkB,OAAgBskB,IAAA,CACzE,GAAAgE,GAAA/D,EAAAD,EACA,IAAA5P,KAAA+a,eAAAnH,GAAA,CACA,GAAA1d,GAAA8J,KAAAgb,mBAAApH,EACA1d,GAAA0iB,QAAA5Z,OAAAkc,EAAAptB,KACAqtB,GAAA,GAMAD,EAAAxB,QAAAyB,IACAnb,KAAAyY,gBAAAzY,KAAAyY,gBAAAhR,OAAAyT,EAAAptB,IAAAotB,EAAAxB,UAGAS,EAAAzsB,UAAAgtB,gBAAA,SAAAU,GACA,GAAA1a,GAAAV,IACAob,GAAApB,UAAAtrB,QAAA,SAAAklB,GACA,GAAA1d,GAAAwK,EAAAsa,mBAAApH,EACA,QAAAwH,EAAArB,OACA,IAAAf,IAAAqC,SACA3a,EAAAqa,eAAAnH,IAEA3d,GAAAC,EAAAklB,EAAAjlB,YAEA,MACA,KAAA6iB,IAAA7hB,MAGAuJ,EAAA4a,qBAAA1H,GACA/lB,EAAA6S,EAAA2Z,uBAAAzG,KAIA1d,EAAA0iB,QAAA,GAAAO,IACAjjB,EAAA4iB,oBAAA5B,GAAA+D,WACAva,GAAA4Z,iBAAA1G,IAEA3d,GAAAC,EAAAklB,EAAAjlB,YACA,MACA,KAAA6iB,IAAA1hB,QAKAoJ,EAAA4a,qBAAA1H,GACA5mB,GAAAouB,EAAAnB,MAAA,wDACA,MACA,KAAAjB,IAAAuC,QACA7a,EAAAqa,eAAAnH,KACA1d,EAAA4iB,oBAAA5B,GAAAsE,YACAvlB,GAAAC,EAAAklB,EAAAjlB,aAEA,MACA,KAAA6iB,IAAAyC,MACA/a,EAAAqa,eAAAnH,KAIA1d,EAAA0iB,QAAA,GAAAC,IACA5iB,GAAAC,EAAAklB,EAAAjlB,aAEA,MACA,SACAvJ,EAAA,sCAAAwuB,EAAArB,WAQAI,EAAAzsB,UAAA4tB,qBAAA,SAAA1H,GACA,GAAA8H,IAAA1b,KAAAqa,uBAAAzG,IAAA,IACA,KAAA8H,QACA1b,MAAAqa,uBAAAzG,GAGA5T,KAAAqa,uBAAAzG,GAAA8H,GAGAvB,EAAAzsB,UAAAitB,yBAAA,SAAAzkB,GACA8J,KAAA+a,eAAA7kB,EAAA0d,YACA5T,KAAAsa,iBAAApkB,EAAA0d,UAAA1d,EAAA0jB,kBAGAO,KCzOAwB,GAAA,WACA,GAAAC,KAGA,OAFAA,GAAA7M,GAAAC,UAAAzf,MAAA,YACAqsB,EAAA7M,GAAAoC,WAAA5hB,MAAA,aACAqsB,KAEAC,GAAA,WACA,GAAAC,KAMA,OALAA,GAAAnoB,GAAA+c,UAAAnhB,MAAA,YACAusB,EAAAnoB,GAAAgd,mBAAAphB,MAAA,qBACAusB,EAAAnoB,GAAAkd,aAAAthB,MAAA,eACAusB,EAAAnoB,GAAAid,sBAAArhB,MAAA,wBACAusB,EAAAnoB,GAAAC,MAAArE,MAAA,QACAusB,KAuBAC,GAAA,WACA,QAAAC,GAAAlZ,EAAAzR,GACA2O,KAAA8C,aACA9C,KAAA3O,UAo+BA,MAl+BA2qB,GAAAtuB,UAAAR,gBAAA,WACA,MAAA8S,MAAA3O,QAAA4qB,cACA,GAGA,GAAAtpB,YAAA,IAGAqpB,EAAAtuB,UAAAwuB,0BAAA,SAAAC,GAGA,MAAAA,IAEAH,EAAAtuB,UAAA0uB,cAAA,SAAAhnB,GACA,GAAAjB,OAAA/F,KAAAgH,EAAAjB,KACA3G,GAAA8G,QACAgB,EAAAF,EAAAjB,KACA,WAAA5G,IAAA4G,EAAAiB,EAAAtI,SAAA,KAUAkvB,EAAAtuB,UAAA2uB,aAAA,SAAArR,GACA,MAAA/X,GAAA+X,OAIA,IAHoB9c,MAAA8c,IAapBgR,EAAAtuB,UAAA4uB,eAAA,SAAAtR,GACA,GAAAnc,EASA,OAPAA,GADA,gBAAAmc,GACAA,EAAA9c,MAKA8c,EAEA/X,EAAApE,GAAA,KAAAA,GASAmtB,EAAAtuB,UAAA8lB,YAAA,SAAAN,GACA,OACAhB,QAAAgB,EAAAhB,QACAC,MAAAe,EAAAf,QAIA6J,EAAAtuB,UAAA0lB,cAAA,SAAAb,GAIA,mBAAAA,GAIA,MAAAP,IAAAU,cAAAH,EAGAvlB,KAAAulB,EAAA,kDAIA,IAAAL,GAAA7b,GAAAkc,EAAAL,SAAA,KACAC,EAAAI,EAAAJ,OAAA,CACA,WAAAH,IAAAE,EAAAC,IAUA6J,EAAAtuB,UAAA6uB,QAAA,SAAAC,GACA,MAAAxc,MAAA3O,QAAA4qB,cACAO,EAAA3a,WAIA7B,KAAAkc,0BAAAM,EAAAza,iBAQAia,EAAAtuB,UAAA+uB,SAAA,SAAAC,GACA,sBAAAA,IACA1vB,EAAAgT,KAAA3O,QAAA4qB,cAAA,2EACAhf,GAAAsE,iBAAAmb,KAGA1vB,GAAAgT,KAAA3O,QAAA4qB,cAAA,6EACAhf,GAAAyE,eAAAgb,KAGAV,EAAAtuB,UAAAivB,UAAA,SAAAlW,GACA,MAAAzG,MAAAwT,YAAA/M,EAAA+M,gBAEAwI,EAAAtuB,UAAAkvB,YAAA,SAAAnW,GAEA,MADAzZ,KAAAyZ,EAAA,gDACAuM,GAAAI,cAAApT,KAAAoT,cAAA3M,KAEAuV,EAAAtuB,UAAAmvB,eAAA,SAAA/Z,EAAAtM,GACA,MAAAwJ,MAAA8c,yBAAAha,GACAkB,MAAA,aACAA,MAAAxN,GACAuO,mBAEAiX,EAAAtuB,UAAAqvB,iBAAA,SAAAxtB,GACA,GAAAytB,GAAA7kB,GAAA6M,WAAAzV,EAEA,OADAvC,GAAAgT,KAAAid,oBAAAD,GAAA,oCAAAA,GACAA,GAEAhB,EAAAtuB,UAAAwvB,OAAA,SAAApvB,GACA,MAAAkS,MAAA6c,eAAA7c,KAAA8C,WAAAhV,EAAA0I,OAEAwlB,EAAAtuB,UAAAyvB,SAAA,SAAA5tB,GACA,GAAAytB,GAAAhd,KAAA+c,iBAAAxtB,EAUA,OATAvC,GAAAgwB,EAAAtlB,IAAA,KAAAsI,KAAA8C,WAAAO,UAAA,oDACA2Z,EAAAtlB,IAAA,GACA,OACAsI,KAAA8C,WAAAO,WACArW,GAAAgwB,EAAAtlB,IAAA,KAAAsI,KAAA8C,WAAAQ,UACA0Z,EAAAtlB,IAAA,KAAAsI,KAAA8C,WAAAQ,SAAA,qDACA0Z,EAAAtlB,IAAA,GACA,OACAsI,KAAA8C,WAAAQ,UACA,GAAAyC,IAAA/F,KAAAod,iCAAAJ,KAEAhB,EAAAtuB,UAAA2vB,YAAA,SAAA7mB,GACA,WAAAA,EAAAlL,OAGA0U,KAAAsd,kBAEAtd,KAAA6c,eAAA7c,KAAA8C,WAAAtM,IAEAwlB,EAAAtuB,UAAA6vB,cAAA,SAAAhuB,GACA,GAAAiuB,GAAAxd,KAAA+c,iBAAAxtB,EACA,YAAAiuB,EAAAlyB,OACA6M,GAAAC,WAEA4H,KAAAod,iCAAAI,IAEAzvB,OAAA4R,eAAAqc,EAAAtuB,UAAA,qBACAgK,IAAA,WAOA,MANA,IAAAS,KACA,WACA6H,KAAA8C,WAAAO,UACA,YACArD,KAAA8C,WAAAQ,WAEAyB,mBAEApC,YAAA,EACAC,cAAA,IAEAoZ,EAAAtuB,UAAAovB,yBAAA,SAAAha,GACA,UAAA3K,KACA,WACA2K,EAAAO,UACA,YACAP,EAAAQ,YAGA0Y,EAAAtuB,UAAA0vB,iCAAA,SAAAI,GAEA,MADAxwB,GAAAwwB,EAAAlyB,OAAA,iBAAAkyB,EAAA9lB,IAAA,uCAAA8lB,GACAA,EAAApZ,SAAA,IAEA4X,EAAAtuB,UAAAuvB,oBAAA,SAAAzmB,GAEA,MAAAA,GAAAlL,QAAA,GACA,aAAAkL,EAAAkB,IAAA,IACA,cAAAlB,EAAAkB,IAAA,IAEAskB,EAAAtuB,UAAA+vB,QAAA,SAAAzS,GACA,GAAAA,YAAAvX,IACA,OAAoBiqB,UAAA,aAEpB,IAAA1S,YAAAI,IACA,OAAoBuS,aAAA3S,EAAA9c,QAEpB,IAAA8c,YAAAU,IACA,OAAoBkS,aAAA,GAAA5S,EAAA9c,QAEpB,IAAA8c,YAAAlX,IAAA,CACA,GAAA+pB,GAAA7S,EAAA9c,OACA,IAAA8R,KAAA3O,QAAA4qB,cAAA,CAIA,GAAAxtB,MAAAovB,GACA,OAA4BA,YAAA,MAE5B,IAAAA,IAAAhS,IACA,OAA4BgS,YAAA,WAE5B,IAAAA,KAAA,IACA,OAA4BA,YAAA,aAG5B,OAAoBA,YAAA7S,EAAA9c,SAEpB,MAAA8c,aAAAe,KACoB+R,YAAA9S,EAAA9c,SAEpB8c,YAAAyB,KACoBsR,SAAA/d,KAAAge,WAAAhT,IAEpBA,YAAAqC,KACoB4Q,WAAAje,KAAAke,aAAAlT,IAEpBA,YAAAiB,KAEAkS,eAAAne,KAAAwT,YAAAxI,EAAAG,gBAGAH,YAAAwB,KAEA4R,eACA9b,SAAA0I,EAAA9c,QAAAoU,SACAC,UAAAyI,EAAA9c,QAAAqU,YAIAyI,YAAAqB,KAEAgS,WAAAre,KAAAuc,QAAAvR,EAAA9c,UAGA8c,YAAAsB,KAEAgS,eAAAte,KAAA6c,eAAA7R,EAAAlI,WAAAkI,EAAAld,IAAA0I,OAIA5J,EAAA,sBAAA+D,KAAAC,UAAAoa,KAGAgR,EAAAtuB,UAAA6wB,UAAA,SAAApzB,GACA,GAAAuV,GAAAV,KAEArQ,EAAAxE,EAAA,UACA,IAAAmL,GAAAnL,EAAAwE,EAAA,aACA,MAAA8D,IAAAC,QAEA,IAAA4C,GAAAnL,EAAAwE,EAAA,gBACA,MAAAyb,IAAAE,GAAAngB,EAAAwyB,aAEA,IAAArnB,GAAAnL,EAAAwE,EAAA,gBACA,UAAA+b,IAAArV,GAAAlL,EAAAyyB,cAEA,IAAAtnB,GAAAnL,EAAAwE,EAAA,gBACA,GAAAqQ,KAAA3O,QAAA4qB,cAAA,CAEA,WAAA9wB,EAAA0yB,YACA,MAAA/pB,IAAAC,GAEA,iBAAA5I,EAAA0yB,YACA,MAAA/pB,IAAA8X,iBAEA,kBAAAzgB,EAAA0yB,YACA,MAAA/pB,IAAAgY,kBAGA,UAAAhY,IAAA3I,EAAA0yB,aAEA,GAAAvnB,GAAAnL,EAAAwE,EAAA,eACA,UAAAoc,IAAA5gB,EAAA2yB,YAEA,IAAAxnB,GAAAnL,EAAAwE,EAAA,YACA,MAAAqQ,MAAAwe,WAAArzB,EAAA4yB,SAAA3J,WAEA,IAAA9d,GAAAnL,EAAAwE,EAAA,eAEAyG,GAAAjL,EAAA8yB,WAAA,aACA,IAAAQ,GAAAtzB,EAAA8yB,WAAAQ,UACA,WAAApR,IAAAoR,EAAA5yB,IAAA,SAAA0c,GAAsE,MAAA7H,GAAA6d,UAAAhW,MAEtE,GAAAjS,GAAAnL,EAAAwE,EAAA,kBAEA,MADAyG,IAAAjL,EAAAgzB,eAAA,kBACA,GAAAlS,IAAAjM,KAAAoT,cAAAjoB,EAAAgzB,gBAEA,IAAA7nB,GAAAnL,EAAAwE,EAAA,kBACAyG,GAAAjL,EAAAizB,cAAA,gBACA,IAAA9b,GAAAnX,EAAAizB,cAAA9b,UAAA,EACAC,EAAApX,EAAAizB,cAAA7b,WAAA,CACA,WAAAiK,IAAA,GAAAxP,IAAAsF,EAAAC,IAEA,GAAAjM,GAAAnL,EAAAwE,EAAA,eACAyG,GAAAjL,EAAAkzB,WAAA,aACA,IAAA3B,GAAA1c,KAAAyc,SAAAtxB,EAAAkzB,WACA,WAAAhS,IAAAqQ,GAEA,GAAApmB,GAAAnL,EAAAwE,EAAA,mBACAyG,GAAAjL,EAAAmzB,eAAA,iBACA,IAAAd,GAAAxd,KAAA+c,iBAAA5xB,EAAAmzB,gBACAI,EAAA,GAAAvb,IAAAqa,EAAA9lB,IAAA,GAAA8lB,EAAA9lB,IAAA,IACA5J,EAAA,GAAAiY,IAAA/F,KAAAod,iCAAAI,GACA,WAAAlR,IAAAoS,EAAA5wB,GAGA,MAAAlB,GAAA,uBAAA+D,KAAAC,UAAAzF,KAIA6wB,EAAAtuB,UAAAixB,mBAAA,SAAA7wB,EAAAsmB,GACA,OACA7kB,KAAAyQ,KAAAkd,OAAApvB,GACAsmB,OAAApU,KAAA4e,SAAAxK,KAGA4H,EAAAtuB,UAAAmxB,WAAA,SAAAC,GAEA,MADA9xB,IAAA8xB,EAAAnY,kBAAA,8CAEApX,KAAAyQ,KAAAkd,OAAA4B,EAAAhxB,KACAsmB,OAAApU,KAAA4e,SAAAE,EAAApY,MACAkO,WAAA5U,KAAAwT,YAAAsL,EAAArY,QAAA+M,iBAGAwI,EAAAtuB,UAAAqxB,aAAA,SAAAD,GACA,UAAAvY,IAAAvG,KAAAmd,SAAA2B,EAAAvvB,MAAAyQ,KAAA4c,YAAAkC,EAAAlK,YAAA5U,KAAAwe,WAAAM,EAAA1K,aAA0IzN,mBAAA,KAE1IqV,EAAAtuB,UAAAkxB,SAAA,SAAAxK,GACA,GAAA1T,GAAAV,KACAnR,IAIA,OAHAulB,GAAA1lB,QAAA,SAAAZ,EAAAI,GACAW,EAAAf,GAAA4S,EAAA+c,QAAAvvB,KAEAW,GAEAmtB,EAAAtuB,UAAA8wB,WAAA,SAAAniB,GACA,GAAAqE,GAAAV,KAEAnU,EAAAwQ,EACAxN,EAAA4d,GAAAnG,KAIA,OAHA5X,GAAA7C,EAAA,SAAAiC,EAAAI,GACAW,IAAAke,IAAA,GAAA5H,KAAArX,IAAA4S,EAAA6d,UAAArwB,MAEAW,GAEAmtB,EAAAtuB,UAAAswB,WAAA,SAAAnyB,GACA,OACAuoB,OAAApU,KAAA4e,SAAA/yB,KAGAmwB,EAAAtuB,UAAAwwB,aAAA,SAAAvc,GACA,GAAAjB,GAAAV,KACAnR,IAIA,OAHA8S,GAAAjT,QAAA,SAAAR,GACAW,EAAA8J,KAAA+H,EAAA+c,QAAAvvB,OAEgBuwB,OAAA5vB,IAEhBmtB,EAAAtuB,UAAAsxB,UAAA,SAAAxgB,GACAxR,IAAAwR,EAAAygB,MAAA,kEACA7oB,GAAAoI,EAAAygB,MAAA1vB,KAAA,kBACA6G,GAAAoI,EAAAygB,MAAArK,WAAA,uBACA,IAAA9mB,GAAAkS,KAAAmd,SAAA3e,EAAAygB,MAAA1vB,MACAkX,EAAAzG,KAAA4c,YAAApe,EAAAygB,MAAArK,YACAR,EAAApU,KAAAwe,WAAAhgB,EAAAygB,MAAA7K,WACA,WAAA7N,IAAAzY,EAAA2Y,EAAA2N,GAAmDzN,mBAAA,KAEnDqV,EAAAtuB,UAAAwxB,YAAA,SAAArwB,GACA7B,IAAA6B,EAAAswB,QAAA,kEACAnyB,IAAA6B,EAAAuwB,SAAA,+DACA,IAAAtxB,GAAAkS,KAAAmd,SAAAtuB,EAAAswB,SACA1Y,EAAAzG,KAAA4c,YAAA/tB,EAAAuwB,SACA,WAAAjY,IAAArZ,EAAA2Y,IAEAuV,EAAAtuB,UAAA2xB,kBAAA,SAAAxwB,GAEA,GAAAc,GAAAd,EAAA,MACA,OAAAyH,IAAAzH,EAAAc,EAAA,SACAqQ,KAAAgf,UAAAnwB,GAEAyH,GAAAzH,EAAAc,EAAA,WACAqQ,KAAAkf,YAAArwB,GAEAjC,EAAA,+BAAA+D,KAAAC,UAAA/B,KAEAmtB,EAAAtuB,UAAA4xB,yBAAA,SAAAvF,GACA,OAAAA,GACA,IAAAf,IAAA7hB,MACA,WACA,KAAA6hB,IAAAuC,QACA,eACA,KAAAvC,IAAAqC,SACA,iBACA,KAAArC,IAAA1hB,QACA,cACA,KAAA0hB,IAAAyC,MACA,aACA,SACA,MAAA7uB,GAAA,mCAAAmtB,KAGAiC,EAAAtuB,UAAA6xB,kBAAA,SAAA/E,GACA,GAAAA,YAAAb,IACA,OACA1U,QACAgS,MAAAuD,EAAAZ,gBAAA3C,MACArD,SAAA4G,EAAA5G,UAIA,IAAA4G,YAAAjB,IAAA,CACA,GAAAiB,EAAAd,iBAAAnT,IAAA,CACA,GAAA/H,GAAAgc,EAAAd,MACA,QACA8F,gBACAV,UACAvvB,KAAAyQ,KAAAkd,OAAA1e,EAAA1Q,KACAsmB,OAAApU,KAAA4e,SAAApgB,EAAAkI,MACAkO,WAAA5U,KAAA2c,UAAAne,EAAAiI,UAEAuT,UAAAQ,EAAAhB,iBACAC,iBAAAe,EAAAf,mBAIA,GAAAe,EAAAd,iBAAAvS,IAAA,CACA,GAAA3I,GAAAgc,EAAAd,MACA,QACA+F,gBACAX,SAAA9e,KAAAkd,OAAA1e,EAAA1Q,KACAsxB,SAAApf,KAAA2c,UAAAne,EAAAiI,SACAgT,iBAAAe,EAAAf,mBAIA,UAAAe,EAAAd,OACA,OACAgG,gBACAZ,SAAA9e,KAAAkd,OAAA1C,EAAA1sB,KACA2rB,iBAAAe,EAAAf,mBAKA,GAAAe,YAAAX,IAAA,CACA,GAAAI,OAAA7rB,EAOA,OANAosB,GAAAP,QACAA,GACA9lB,KAAAoB,EAAAilB,EAAAP,MAAA9lB,MACArH,QAAA0tB,EAAAP,MAAAntB,WAIAsuB,cACAuE,iBAAA3f,KAAAsf,yBAAA9E,EAAAT,OACAC,UAAAQ,EAAAR,UACA7jB,YAAA6J,KAAAkc,0BAAA1B,EAAArkB,aACA8jB,UAIA,MAAArtB,GAAA,8BAAA+D,KAAAC,UAAA4pB,KAEAwB,EAAAtuB,UAAAkyB,gBAAA,SAAA1pB,GAEA,GACAskB,GADA7qB,EAAAuG,EAAA,aAEA,IAAAI,GAAAJ,EAAAvG,EAAA,iBACAyG,GAAAF,EAAAklB,aAAA,eAGA,IAAArB,GAAA/Z,KAAA6f,2BAAA3pB,EAAAklB,aAAAuE,kBAAA,aACA3F,EAAA9jB,EAAAklB,aAAApB,cACA7jB,EAAAD,EAAAklB,aAAAjlB,aAAA6J,KAAA9S,kBACA4yB,EAAA5pB,EAAAklB,aAAAnB,MACAA,EAAA6F,GAAA9f,KAAAoc,cAAA0D,EACAtF,GAAA,GAAAX,IAAAE,EAAAC,EAAA7jB,EAAA8jB,GAAA,UAEA,IAAA3jB,GAAAJ,EAAAvG,EAAA,mBACAyG,GAAAF,EAAAspB,eAAA,kBACAppB,GAAAF,EAAAspB,eAAAV,SAAA,uBACA1oB,GAAAF,EAAAspB,eAAAV,SAAAvvB,KAAA,gCACA6G,GAAAF,EAAAspB,eAAAV,SAAAlK,WAAA,qCACA,IAAAmL,GAAA7pB,EAAAspB,eACA1xB,EAAAkS,KAAAmd,SAAA4C,EAAAjB,SAAAvvB,MACAkX,EAAAzG,KAAA4c,YAAAmD,EAAAjB,SAAAlK,YACAR,EAAApU,KAAAwe,WAAAuB,EAAAjB,SAAA1K,YACA5V,EAAA,GAAA+H,IAAAzY,EAAA2Y,EAAA2N,GACAzN,mBAAA,IAEA6S,EAAAuG,EAAA/F,cACAP,EAAAsG,EAAAtG,oBACAe,GAAA,GAAAjB,IAAAC,EAAAC,EAAAjb,EAAA1Q,IAAA0Q,OAEA,IAAAlI,GAAAJ,EAAAvG,EAAA,mBACAyG,GAAAF,EAAAupB,eAAA,kBACArpB,GAAAF,EAAAupB,eAAAX,SAAA,0BACA,IAAAkB,GAAA9pB,EAAAupB,eACA3xB,EAAAkS,KAAAmd,SAAA6C,EAAAlB,UACArY,EAAAuZ,EAAAZ,SACApf,KAAA4c,YAAAoD,EAAAZ,UACApM,GAAAK,gBACA7U,EAAA,GAAA2I,IAAArZ,EAAA2Y,GACAgT,EAAAuG,EAAAvG,oBACAe,GAAA,GAAAjB,OAAAE,EAAAjb,EAAA1Q,IAAA0Q,OAEA,IAAAlI,GAAAJ,EAAAvG,EAAA,mBACAyG,GAAAF,EAAAwpB,eAAA,kBACAtpB,GAAAF,EAAAwpB,eAAAZ,SAAA,iBACA,IAAAmB,GAAA/pB,EAAAwpB,eACA5xB,EAAAkS,KAAAmd,SAAA8C,EAAAnB,UACArF,EAAAwG,EAAAxG,oBACAe,GAAA,GAAAjB,OAAAE,EAAA3rB,EAAA,UAEA,KAAAwI,GAAAJ,EAAAvG,EAAA,UAWA,MAAA/C,GAAA,uBAAA+D,KAAAC,UAAAsF,GATAE,IAAAF,EAAA+O,OAAA,UACA7O,GAAAF,EAAA+O,OAAA2O,SAAA,kBACA,IAAA3O,GAAA/O,EAAA+O,OACAgS,EAAAhS,EAAAgS,OAAA,EACA2C,EAAA,GAAA5C,IAAAC,GACArD,EAAA3O,EAAA2O,QACA4G,GAAA,GAAAb,IAAA/F,EAAAgG,GAKA,MAAAY,IAEAwB,EAAAtuB,UAAAmyB,2BAAA,SAAA9F,GACA,oBAAAA,EACAf,GAAAqC,SAEA,QAAAtB,EACAf,GAAA7hB,MAEA,WAAA4iB,EACAf,GAAA1hB,QAEA,YAAAyiB,EACAf,GAAAuC,QAEA,UAAAxB,EACAf,GAAAyC,MAGA7uB,EAAA,sCAAAmtB,IAGAiC,EAAAtuB,UAAAwyB,0BAAA,SAAAhqB,GAMA,IAAAI,GAAAJ,EADAA,EAAA,cACA,gBACA,MAAA8c,IAAAM,GAEA,IAAA8H,GAAAllB,EAAAklB,YACA,OAAAA,GAAApB,WAAAoB,EAAApB,UAAA1uB,OACA0nB,GAAAM,IAEA8H,EAAAgE,SAGApf,KAAA4c,YAAAxB,EAAAgE,UAFApM,GAAAM,KAIA0I,EAAAtuB,UAAAyyB,WAAA,SAAAC,GACA,GACAvxB,GADA6R,EAAAV,IAEA,IAAAogB,YAAA9K,IACAzmB,GACAklB,OAAA/T,KAAA2e,mBAAAyB,EAAAtyB,IAAAsyB,EAAAlyB,YAGA,IAAAkyB,YAAAvJ,IACAhoB,GAAsBmQ,OAAAgB,KAAAkd,OAAAkD,EAAAtyB,UAEtB,IAAAsyB,YAAAxK,IACA/mB,GACAklB,OAAA/T,KAAA2e,mBAAAyB,EAAAtyB,IAAAsyB,EAAA1Z,MACA2Z,WAAArgB,KAAAsgB,eAAAF,EAAAtK,gBAGA,MAAAsK,YAAA/J,KAWA,MAAAzpB,GAAA,yBAAAwzB,EAAAzwB,KAVAd,IACA0lB,WACAuK,SAAA9e,KAAAkd,OAAAkD,EAAAtyB,KACAyoB,gBAAA6J,EAAA7J,gBAAA1qB,IAAA,SAAA0oB,GACA,MAAA7T,GAAA6f,iBAAAhM,OAWA,MAHA6L,GAAA5K,aAAAR,SACAnmB,EAAA2xB,gBAAAxgB,KAAAygB,eAAAL,EAAA5K,eAEA3mB,GAEAmtB,EAAAtuB,UAAAgzB,aAAA,SAAAC,GACA,GAAAjgB,GAAAV,KACAwV,EAAAmL,EAAAH,gBACAxgB,KAAA4gB,iBAAAD,EAAAH,iBACA9L,GAAAO,IACA,IAAA0L,EAAA5M,OAAA,CACA3d,GAAAuqB,EAAA5M,OAAAxkB,KAAA,OACA,IAAAzB,GAAAkS,KAAAmd,SAAAwD,EAAA5M,OAAAxkB,MACArB,EAAA8R,KAAAwe,WAAAmC,EAAA5M,OAAAK,WACA,IAAAuM,EAAAN,WAAA,CACA,GAAAvK,GAAA9V,KAAA6gB,iBAAAF,EAAAN,WACA,WAAAzK,IAAA9nB,EAAAI,EAAA4nB,EAAAN,GAGA,UAAAF,IAAAxnB,EAAAI,EAAAsnB,GAGA,GAAAmL,EAAA3hB,OAAA,CACA,GAAAlR,GAAAkS,KAAAmd,SAAAwD,EAAA3hB,OACA,WAAA6X,IAAA/oB,EAAA0nB,GAEA,GAAAmL,EAAApM,UAAA,CACA,GAAAzmB,GAAAkS,KAAAmd,SAAAwD,EAAApM,UAAAuK,UACAvI,EAAAoK,EAAApM,UAAAgC,gBAAA1qB,IAAA,SAAA0oB,GACA,MAAA7T,GAAAogB,mBAAAvM,IAGA,OADAvnB,IAAA,IAAAwoB,EAAAX,OAAA,yDACA,GAAAwB,IAAAvoB,EAAAyoB,GAGA,MAAA3pB,GAAA,2BAAA+D,KAAAC,UAAA+vB,KAGA3E,EAAAtuB,UAAA+yB,eAAA,SAAAjL,GAEA,MADAxoB,IAAAwoB,EAAAR,OAAA,6CACA5mB,KAAAonB,EAAAZ,YAEAA,WAAA5U,KAAA2c,UAAAnH,EAAAZ,iBAGAxmB,KAAAonB,EAAAX,QACoBA,OAAAW,EAAAX,QAGpBjoB,EAAA,yBAGAovB,EAAAtuB,UAAAkzB,iBAAA,SAAApL,GACA,WAAApnB,KAAAonB,EAAAZ,WACAF,GAAAE,WAAA5U,KAAA4c,YAAApH,EAAAZ,iBAEAxmB,KAAAonB,EAAAX,OACAH,GAAAG,OAAAW,EAAAX,QAGAH,GAAAO,MAGA+G,EAAAtuB,UAAAqzB,gBAAA,SAAAJ,GACA,GAAAjgB,GAAAV,KAEAyG,EAAAka,EAAA/L,WACA5U,KAAA4c,YAAA+D,EAAA/L,YACA,KACAH,EAAA,IAMA,OALAkM,GAAAlM,kBAAAkM,EAAAlM,iBAAAnpB,OAAA,IACAmpB,EAAAkM,EAAAlM,iBAAA5oB,IAAA,SAAAgD,GACA,MAAA6R,GAAA6d,UAAA1vB,MAGA,GAAA2lB,IAAA/N,EAAAgO,IAEAuH,EAAAtuB,UAAAszB,iBAAA,SAAAC,GACA,GAAAvgB,GAAAV,IACA,QAAAihB,OAAAp1B,IAAA,SAAA80B,GAAoD,MAAAjgB,GAAAqgB,gBAAAJ,MAEpD3E,EAAAtuB,UAAA6yB,iBAAA,SAAA3J,GAEA,MADA5pB,GAAA4pB,EAAArC,oBAAAF,IAAA,sBAAAuC,EAAArC,YAEA4B,UAAAS,EAAArjB,MAAAwR,kBACAmc,iBAAA,iBAGAlF,EAAAtuB,UAAAozB,mBAAA,SAAAH,GACA3zB,EAAA,iBAAA2zB,EAAAO,iBAAA,4BAAAvwB,KAAAC,UAAA+vB,GACA,IAAAxK,GAAAhR,GAAAO,iBAAAib,EAAAxK,UACA,WAAA7B,IAAA6B,EAAA9B,GAAA3U,WAEAsc,EAAAtuB,UAAAyzB,kBAAA,SAAAxiB,GACA,OAAgBhD,WAAAqE,KAAAqd,YAAA1e,EAAAnI,SAEhBwlB,EAAAtuB,UAAA0zB,oBAAA,SAAAC,GACA,GAAApK,GAAAoK,EAAA1lB,UAAArQ,MACA0B,GAAA,IAAAiqB,EAAA,oDAAAA,EACA,IAAA1nB,GAAA8xB,EAAA1lB,UAAA,EACA,OAAA+R,IAAAS,OAAAnO,KAAAud,cAAAhuB,KAEAysB,EAAAtuB,UAAA4zB,cAAA,SAAA3iB,GAEA,GAAA9P,IAAsB0yB,mBACtB,IAAA5iB,EAAAnI,KAAA7H,UACAE,EAAA2yB,OAAAxhB,KAAAqd,YAAAllB,GAAAC,gBAEA,CACA,GAAA5B,GAAAmI,EAAAnI,IACAxJ,GAAAwJ,EAAAlL,OAAA,yDACAuD,EAAA2yB,OAAAxhB,KAAAqd,YAAA7mB,EAAA8N,WACAzV,EAAA0yB,gBAAAE,OAA4CC,aAAAlrB,EAAAgO,gBAE5C,GAAAmd,GAAA3hB,KAAA4hB,SAAAjjB,EAAAkP,QACA8T,KACA9yB,EAAA0yB,gBAAAI,QAEA,IAAA/S,GAAA5O,KAAA6hB,QAAAljB,EAAAiQ,QACAA,KACA/f,EAAA0yB,gBAAA3S,UAEA,IAAAzK,GAAAnE,KAAAqc,aAAA1d,EAAAwF,MAUA,YATA/V,KAAA+V,IACAtV,EAAA0yB,gBAAApd,SAEAxF,EAAAmP,UACAjf,EAAA0yB,gBAAAzT,QAAA9N,KAAA8hB,SAAAnjB,EAAAmP,UAEAnP,EAAAoP,QACAlf,EAAA0yB,gBAAAxT,MAAA/N,KAAA8hB,SAAAnjB,EAAAoP,QAEAlf,GAEAmtB,EAAAtuB,UAAAq0B,gBAAA,SAAAxnB,GACA,GAAA/D,GAAAwJ,KAAAud,cAAAhjB,EAAAinB,QACA7iB,EAAApE,EAAAgnB,gBACAS,EAAArjB,EAAA8iB,KAAA9iB,EAAA8iB,KAAAn2B,OAAA,CACA,IAAA02B,EAAA,GACAh1B,EAAA,IAAAg1B,EAAA,uEACA,IAAAP,GAAA9iB,EAAA8iB,KAAA,EACAjrB,KAAAwN,MAAAyd,EAAAC,cAEA,GAAAO,KACAtjB,GAAAgjB,QACAM,EAAAjiB,KAAAkiB,WAAAvjB,EAAAgjB,OAEA,IAAA/S,KACAjQ,GAAAiQ,UACAA,EAAA5O,KAAAmiB,UAAAxjB,EAAAiQ,SAEA,IAAAzK,GAAA,IACAxF,GAAAwF,QACAA,EAAAnE,KAAAsc,eAAA3d,EAAAwF,OAEA,IAAA2J,GAAA,IACAnP,GAAAmP,UACAA,EAAA9N,KAAAoiB,WAAAzjB,EAAAmP,SAEA,IAAAC,GAAA,IAIA,OAHApP,GAAAoP,QACAA,EAAA/N,KAAAoiB,WAAAzjB,EAAAoP,QAEA,GAAAL,IAAAlX,EAAAoY,EAAAqT,EAAA9d,EAAA2J,EAAAC,IAEAiO,EAAAtuB,UAAA20B,sBAAA,SAAAC,GACA,GAAAp0B,GAAA8R,KAAAuiB,QAAAD,EAAAzO,QACA,cAAA3lB,EACA,MAIAs0B,mBAAAt0B,IAIA8tB,EAAAtuB,UAAA60B,QAAA,SAAA1O,GACA,OAAAA,GACA,IAAAhJ,IAAA4X,OACA,WACA,KAAA5X,IAAA6X,wBACA,iCACA,KAAA7X,IAAA8X,gBACA,sBACA,SACA,MAAA/1B,GAAA,+BAAAinB,KAGAmI,EAAAtuB,UAAAk1B,SAAA,SAAAN,GACA,GAAAzzB,GACA8P,EAAA2jB,EAAA3jB,KAWA,OATA9P,GADA8P,EAAAlD,mBACsBE,UAAAqE,KAAAmhB,kBAAAxiB,KAGAA,MAAAqB,KAAAshB,cAAA3iB,IAEtB9P,EAAA+kB,SAAA0O,EAAA1O,SACA0O,EAAAnsB,YAAA7K,OAAA,IACAuD,EAAAsH,YAAA6J,KAAAkc,0BAAAoG,EAAAnsB,cAEAtH,GAEAmtB,EAAAtuB,UAAAk0B,SAAA,SAAA/T,GACA,GAAAnN,GAAAV,IACA,QAAA6N,EAAAviB,OAAA,CAEA,GAAA21B,GAAApT,EAAAhiB,IAAA,SAAAoZ,GACA,MAAAA,aAAAhR,IACAyM,EAAAmiB,iBAAA5d,GACAvE,EAAAoiB,cAAA7d,IAEA,YAAAgc,EAAA31B,OACA21B,EAAA,IAEgB8B,iBAAmBvvB,GAAA,MAAAqa,QAAAoT,MAEnCjF,EAAAtuB,UAAAw0B,WAAA,SAAAjd,GACA,GAAAvE,GAAAV,IACA,OAAAiF,OAGA7W,KAAA6W,EAAA+d,aACAhjB,KAAAijB,gBAAAhe,QAEA7W,KAAA6W,EAAA3R,aACA0M,KAAAkjB,mBAAAje,QAEA7W,KAAA6W,EAAA8d,gBACA9d,EAAA8d,gBAAAlV,QACAhiB,IAAA,SAAAs3B,GAAmC,MAAAziB,GAAAwhB,WAAAiB,KACnCC,OAAA,SAAAC,EAAA1d,GAAmD,MAAA0d,GAAAl3B,OAAAwZ,KAGnD/Y,EAAA,mBAAA+D,KAAAC,UAAAqU,QAGA+W,EAAAtuB,UAAAm0B,QAAA,SAAAyB,GACA,GAAA5iB,GAAAV,IACA,QAAAsjB,EAAAh4B,OAEA,MAAAg4B,GAAAz3B,IAAA,SAAAoL,GAA8C,MAAAyJ,GAAA6iB,gBAAAtsB,MAE9C+kB,EAAAtuB,UAAAy0B,UAAA,SAAAmB,GACA,GAAA5iB,GAAAV,IACA,OAAAsjB,GAAAz3B,IAAA,SAAAoL,GAA8C,MAAAyJ,GAAA8iB,kBAAAvsB,MAE9C+kB,EAAAtuB,UAAAo0B,SAAA,SAAA2B,GACA,GAAA/iB,GAAAV,IACA,QACAsR,OAAAmS,EAAAnS,OACAmN,OAAAgF,EAAA7zB,SAAA/D,IAAA,SAAA0lB,GAA8D,MAAA7Q,GAAA+c,QAAAlM,OAG9DyK,EAAAtuB,UAAA00B,WAAA,SAAAqB,GACA,GAAA/iB,GAAAV,KACAsR,IAAAmS,EAAAnS,OACA1hB,EAAA6zB,EAAAhF,OAAA5yB,IAAA,SAAA0lB,GAA+D,MAAA7Q,GAAA6d,UAAAhN,IAC/D,WAAAH,IAAAxhB,EAAA0hB,IAGA0K,EAAAtuB,UAAAg2B,YAAA,SAAA5U,GACA,MAAA6M,IAAA7M,EAAAvf,OAGAysB,EAAAtuB,UAAAi2B,cAAA,SAAA7U,GACA,OAAAA,GACA,gBACA,MAAAC,IAAAC,SACA,kBACA,MAAAD,IAAAoC,UACA,SACA,SAIA6K,EAAAtuB,UAAAk2B,eAAA,SAAApwB,GACA,MAAAqoB,IAAAroB,EAAAjE,OAEAysB,EAAAtuB,UAAAm2B,iBAAA,SAAArwB,GACA,OAAAA,GACA,YACA,MAAAG,IAAAC,KACA,oBACA,MAAAD,IAAAkd,YACA,6BACA,MAAAld,IAAAid,qBACA,iBACA,MAAAjd,IAAA+c,SACA,0BACA,MAAA/c,IAAAgd,kBACA,4BACA,MAAA/jB,GAAA,uBACA,SACA,MAAAA,GAAA,sBAGAovB,EAAAtuB,UAAAo2B,qBAAA,SAAAttB,GACA,OAAgB2f,UAAA3f,EAAAuO,oBAEhBiX,EAAAtuB,UAAAq2B,uBAAA,SAAAC,GACA,MAAA7e,IAAAO,iBAAAse,EAAA7N,YAGA6F,EAAAtuB,UAAA61B,gBAAA,SAAA3U,GACA,OACArb,MAAAyM,KAAA8jB,qBAAAlV,EAAArb,OACA0wB,UAAAjkB,KAAA0jB,YAAA9U,EAAAE,OAGAkN,EAAAtuB,UAAA81B,kBAAA,SAAA5U,GACA,UAAAH,IAAAzO,KAAA+jB,uBAAAnV,EAAArb,OAAAyM,KAAA2jB,cAAA/U,EAAAqV,aAGAjI,EAAAtuB,UAAAm1B,iBAAA,SAAA5d,GACA,MAAAA,aAAAhR,KAEAX,aACAC,MAAAyM,KAAA8jB,qBAAA7e,EAAA1R,OACAC,GAAAwM,KAAA4jB,eAAA3e,EAAAzR,IACAtF,MAAA8R,KAAAyd,QAAAxY,EAAA/W,SAKAtB,EAAA,wBAAA+D,KAAAC,UAAAqU,KAGA+W,EAAAtuB,UAAAw1B,mBAAA,SAAAje,GACA,UAAAhR,IAAA+L,KAAA+jB,uBAAA9e,EAAA3R,YAAAC,OAAAyM,KAAA6jB,iBAAA5e,EAAA3R,YAAAE,IAAAwM,KAAAue,UAAAtZ,EAAA3R,YAAApF,SAGA8tB,EAAAtuB,UAAAo1B,cAAA,SAAA7d,GACA,MAAAA,aAAAjR,KAEAgvB,aACAzvB,MAAAyM,KAAA8jB,qBAAA7e,EAAA1R,OACAC,GAAA,WAIAyR,YAAApR,KAEAmvB,aACAzvB,MAAAyM,KAAA8jB,qBAAA7e,EAAA1R,OACAC,GAAA,YAKA5G,EAAA,wBAAA+D,KAAAC,UAAAqU,KAGA+W,EAAAtuB,UAAAu1B,gBAAA,SAAAhe,GACA,OAAAA,EAAA+d,YAAAxvB,IACA,aACA,GAAA0wB,GAAAlkB,KAAA+jB,uBAAA9e,EAAA+d,YAAAzvB,MACA,WAAAS,IAAAkwB,EACA,eACA,GAAAC,GAAAnkB,KAAA+jB,uBAAA9e,EAAA+d,YAAAzvB,MACA,WAAAM,IAAAswB,EACA,4BACA,MAAAv3B,GAAA,qBACA,SACA,MAAAA,GAAA,oBAGAovB,EAAAtuB,UAAA4yB,eAAA,SAAAxK,GACA,OACAsO,WAAAtO,EAAA1B,OAAAvoB,IAAA,SAAA0H,GAA+D,MAAAA,GAAAwR,sBAG/DiX,EAAAtuB,UAAAmzB,iBAAA,SAAAF,GACA,GAAA0D,GAAA1D,EAAAyD,eACAhQ,EAAAiQ,EAAAx4B,IAAA,SAAA2K,GAAgD,MAAA2O,IAAAO,iBAAAlP,IAChD,WAAA0d,IAAAE,IAEA4H,KhBi2JIsI,GAAO75B,EAAoB,K+Cz3L/B85B,GAAA,WACA,QAAAC,GAAA54B,GACAoU,KAAAykB,cAAA,KACAzkB,KAAA0kB,eAAA,KACA1kB,KAAA2kB,iBAAA,KACA3kB,KAAA4kB,OAAAh5B,EAAAg5B,OACA5kB,KAAA6kB,QAAAj5B,EAAAi5B,QAgCA,MA9BAL,GAAA92B,UAAAo3B,OAAA,SAAAC,GACA/3B,GAAAgT,KAAAykB,cAAA,kCACAzkB,KAAAykB,cAAAM,GAEAP,EAAA92B,UAAAs3B,QAAA,SAAAD,GACA/3B,GAAAgT,KAAA0kB,eAAA,mCACA1kB,KAAA0kB,eAAAK,GAEAP,EAAA92B,UAAAu3B,UAAA,SAAAF,GACA/3B,GAAAgT,KAAA2kB,iBAAA,qCACA3kB,KAAA2kB,iBAAAI,GAEAP,EAAA92B,UAAAw3B,MAAA,WACAllB,KAAA6kB,WAEAL,EAAA92B,UAAAy3B,KAAA,SAAAj6B,GACA8U,KAAA4kB,OAAA15B,IAEAs5B,EAAA92B,UAAA03B,WAAA,WACAp4B,EAAA,OAAAgT,KAAAykB,cAAA,kDACAzkB,KAAAykB,iBAEAD,EAAA92B,UAAA23B,YAAA,SAAAC,GACAt4B,EAAA,OAAAgT,KAAA0kB,eAAA,mDACA1kB,KAAA0kB,eAAAY,IAEAd,EAAA92B,UAAA63B,cAAA,SAAAr6B,GACA8B,EAAA,OAAAgT,KAAA2kB,iBAAA,qDACA3kB,KAAA2kB,iBAAAz5B,IAEAs5B,KCrCAgB,GAAA,aAIAC,IACAC,kBAAA,WACAC,OAAA,UAKAC,GAAA,eAAA15B,GAEA25B,GAAA,WACA,QAAAC,GAAAC,GACA/lB,KAAA8C,WAAAijB,EAAAjjB,WACA9C,KAAAgmB,KAAA,GAAA1B,IAAA,SACA,IAAA3D,GAAAoF,EAAA9iB,IAAA,cACAjD,MAAAimB,QAAAtF,EAAA,MAAAoF,EAAA/iB,KAkPA,MA5OA8iB,GAAAp4B,UAAAw4B,wBAAA,SAAAC,EAAAzrB,GACA,GAAAA,EACA,OAAA0rB,KAAA1rB,GAAA2rB,YACA3rB,EAAA2rB,YAAAz4B,eAAAw4B,KACAD,EAAAC,GAAA1rB,EAAA2rB,YAAAD,GAIAD,GAAA,qBAAAP,GAGAO,EAAA,gCACA,YAAAnmB,KAAA8C,WAAAO,UAAA,cACArD,KAAA8C,WAAAQ,UAEAwiB,EAAAp4B,UAAA44B,UAAA,SAAAC,EAAAtsB,EAAAS,GACA,GAAAgG,GAAAV,KACAwmB,EAAAxmB,KAAAymB,QAAAF,EACA,WAAAG,SAAA,SAAAvsB,EAAAC,GACAsG,EAAAslB,KAAAW,UAAA,SAAAC,GACAA,EAAAC,WAAAvC,GAAA,UAAAwC,SAAA,WACA,IACA,OAAAF,EAAAG,oBACA,IAAAzC,IAAA,UAAA0C,SACA,GAAAC,GAAAL,EAAAM,iBACAl8B,GAAAw6B,GAAA,gBAAA70B,KAAAC,UAAAq2B,IACA9sB,EAAA8sB,EACA,MACA,KAAA3C,IAAA,UAAA6C,QACAn8B,EAAAw6B,GAAA,QAAAe,EAAA,eACAnsB,EAAA,GAAA7M,IAAAC,GAAA+G,kBAAA,oBACA,MACA,KAAA+vB,IAAA,UAAA8C,WACA,GAAAC,GAAAT,EAAAU,WACAt8B,GAAAw6B,GAAA,QAAAe,EAAA,wBAAAc,EAAA,iBAAAT,EAAAW,mBACAF,EAAA,EACAjtB,EAAA,GAAA7M,IAAAiI,EAAA6xB,GAAA,gCAAAT,EAAAY,mBAKAx8B,EAAAw6B,GAAA,QAAAe,EAAA,YACAnsB,EAAA,GAAA7M,IAAAC,GAAAkH,YAAA,uBAEA,MACA,SACA9H,EAAA,QACA25B,EACA,gDAEAK,EAAAG,mBACA,KACAH,EAAAa,eACA,iBAGA,QACAz8B,EAAAw6B,GAAA,QAAAe,EAAA,gBACA7lB,EAAAslB,KAAA0B,cAAAd,KAGA,IAAAe,GAAAh3B,KAAAC,UAAAqJ,EACAjP,GAAAw6B,GAAA,gBAAAgB,EAAA,IAAAmB,EAMA,IAAAxB,IAA+ByB,eAAA,aAC/BlnB,GAAAwlB,wBAAAC,EAAAzrB,GACAksB,EAAAzB,KAAAqB,EAAA,OAAAmB,EAAAxB,EAlFA,SAsFAL,EAAAp4B,UAAAm6B,mBAAA,SAAAtB,EAAAtsB,EAAAS,GAGA,MAAAsF,MAAAsmB,UAAAC,EAAAtsB,EAAAS,IAEAorB,EAAAp4B,UAAAo6B,WAAA,SAAAvB,EAAA7rB,GACA,GAAAqtB,IACA/nB,KAAAimB,QACA,IAzGA,qCA2GA,IACAM,EACA,YAEAyB,EAAAj6B,OAAAu2B,GAAA,6BACArqB,GAKAguB,uBAAA,EAGAC,mBAAA,aACAC,sBAIAC,0BAAA,eACAC,aAAA,EACAC,wBAAA,EAEAtoB,MAAAkmB,wBAAAjsB,EAAAkuB,mBAAAztB,EACA,IAAA8rB,GAAAuB,EAAAt2B,KAAA,GACAzG,GAAAw6B,GAAA,wBAAAgB,EAAA,IAAAvsB,EAEA,IAAAsuB,GAAAP,EAAAQ,iBAAAhC,EAAAvsB,GAMAwuB,GAAA,EAIAC,GAAA,EAEAC,EAAA,GAAApE,KACAK,OAAA,SAAA15B,GACAw9B,EAUA19B,EAAAw6B,GAAA,4CAAAt6B,IATAu9B,IACAz9B,EAAAw6B,GAAA,iCACA+C,EAAAK,OACAH,GAAA,GAEAz9B,EAAAw6B,GAAA,sBAAAt6B,GACAq9B,EAAApD,KAAAj6B,KAMA25B,QAAA,WAAkC,MAAA0D,GAAArD,WAMlC2D,EAAA,SAAAl5B,EAAArB,GAGAi6B,EAAAO,OAAAn5B,EAAA,SAAAo5B,GACA,IACAz6B,EAAAy6B,GAEA,MAAAp8B,GACAq8B,WAAA,WACA,KAAAr8B,IACqB,MAmErB,OA/DAk8B,GAAAvE,GAAA,WAAA2E,UAAAC,KAAA,WACAR,GACA19B,EAAAw6B,GAAA,kCAGAqD,EAAAvE,GAAA,WAAA2E,UAAAE,MAAA,WACAT,IACAA,GAAA,EACA19B,EAAAw6B,GAAA,+BACAmD,EAAAtD,iBAGAwD,EAAAvE,GAAA,WAAA2E,UAAA58B,MAAA,SAAAi5B,GACAoD,IACAA,GAAA,EACA19B,EAAAw6B,GAAA,gCAAAF,GACAqD,EAAAtD,YAAA,GAAA93B,IAAAC,GAAAkH,YAAA,4CAGAm0B,EAAAvE,GAAA,WAAA2E,UAAAG,QAAA,SAAAl+B,GACA,IAAAw9B,EAAA,CAIA,GAAAW,GAAAn+B,EAAAwb,KAAA,EACA1Z,KAAAq8B,EAAA,yCAKA,IAAA/8B,GAAA+8B,EAAA/8B,OAAA+8B,EAAA,IAAAA,EAAA,GAAA/8B,KACA,IAAAA,EAAA,CACAtB,EAAAw6B,GAAA,6BAAAl5B,EAEA,IAAAg9B,GAAAh9B,EAAA8I,OACAjB,EAAAgB,EAAAm0B,GACAx8B,EAAAR,EAAAQ,YACAsB,KAAA+F,IACAA,EAAA3G,GAAAiH,SACA3H,EACA,yBACAw8B,EACA,iBACAh9B,EAAAQ,SAGA47B,GAAA,EACAC,EAAAtD,YAAA,GAAA93B,IAAA4G,EAAArH,IACAy7B,EAAArD,YAGAl6B,GAAAw6B,GAAA,uBAAA6D,GACAV,EAAApD,cAAA8D,MAIAL,WAAA,WAKAL,EAAAvD,cACS,GACTuD,GAGA7C,EAAAp4B,UAAA+4B,QAAA,SAAAF,GACA,GAAAgD,GAAA9D,GAAAc,EACAv5B,OAAAoB,KAAAm7B,EAAA,6BAAAhD,EACA,IAAAC,IAAAxmB,KAAAimB,QAAA,IAxPA,UAgQA,OAPAO,GAAA7tB,KAAA,cACA6tB,EAAA7tB,KAAAqH,KAAA8C,WAAAO,WACAmjB,EAAA7tB,KAAA,eACA6tB,EAAA7tB,KAAAqH,KAAA8C,WAAAQ,UACAkjB,EAAA7tB,KAAA,cACA6tB,EAAA7tB,KAAA,KACA6tB,EAAA7tB,KAAA4wB,GACA/C,EAAA/0B,KAAA,KAEAq0B,KCzQA0D,GAAA,WACA,QAAAC,KACAzpB,KAAA9S,gBAAA,GACA8S,KAAAlN,gBAAA,mBAAA2O,MAiBA,MAfAgoB,GAAA/7B,UAAAg8B,eAAA,SAAAC,GACA,MAAAjD,SAAAvsB,QAAA,GAAA0rB,IAAA8D,KAEAF,EAAA/7B,UAAAk8B,cAAA,SAAA9mB,GACA,UAAAiZ,IAAAjZ,GAAoDmZ,eAAA,KAEpDwN,EAAA/7B,UAAAhB,WAAA,SAAAwB,GACA,MAAAyC,MAAAC,UAAA1C,IAEAu7B,EAAA/7B,UAAA+T,KAAA,SAAAooB,GACA,MAAApoB,MAAAooB,IAEAJ,EAAA/7B,UAAAoU,KAAA,SAAAgoB,GACA,MAAAhoB,MAAAgoB,IAEAL,ICbAj9B,IAAAsT,YAAA,GAAA0pB,IjCGA,IkCXAO,IlCWApzB,GAAA,WAOA,QAAAyO,KAEA,OADA4kB,MACA5+B,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/C4+B,EAAA5+B,GAAAC,UAAAD,EAEAkE,GAAA,YAAA06B,EAAA,eACA,QAAA/3B,GAAA,EAAuBA,EAAA+3B,EAAA1+B,SAAuB2G,EAE9C,GADAvC,EAAA,qBAAAuC,EAAA+3B,EAAA/3B,IACA,IAAA+3B,EAAA/3B,GAAA3G,OACA,SAAAiC,IAAAC,GAAAC,iBAAA,0EAIAuS,MAAAvC,EAAA,GAAA0H,IAAA6kB,GAYA,MAVA5kB,GAAA6kB,WAAA,WACA,MAAA7kB,GAAA8kB,GAQA9kB,EAAA8kB,EAAA,GAAA9kB,GAAAD,GAAAM,WAAAV,mBACAK,KAMA1O,GAAAqb,OAAA,kBkChDA,SAAAgY,GAMAA,IAAA,qBAMAA,IAAA,qBAMAA,IAAA,oBACCA,YClBD,IAAA7yB,KACA,SAAAA,GACAA,IAAA,iBACAA,IAAA,qBACAA,IAAA,uBACAA,IAAA,wBACCA,YACD,IAAAizB,KACA,SAAAA,GACAA,IAAA,iBACAA,IAAA,oBACCA,YAKD,IClBAC,IDkBAC,GAAA,WACA,QAAAC,KACAtqB,KAAAuqB,UAAA,GAAAljB,IAAAtB,GAAAhC,YA0EA,MAxEAumB,GAAA58B,UAAA88B,MAAA,SAAAt0B,GACA,GAAApI,GAAAoI,EAAAsI,IAAA1Q,IACA28B,EAAAzqB,KAAAuqB,UAAA7yB,IAAA5J,EACA,KAAA28B,EAEA,YADAzqB,KAAAuqB,UAAAvqB,KAAAuqB,UAAA9iB,OAAA3Z,EAAAoI,GAIAA,GAAAvG,OAAAuH,GAAAC,OACAszB,EAAA96B,OAAAuH,GAAAG,SACA2I,KAAAuqB,UAAAvqB,KAAAuqB,UAAA9iB,OAAA3Z,EAAAoI,GAEAA,EAAAvG,OAAAuH,GAAAG,UACAozB,EAAA96B,OAAAuH,GAAAI,QACA0I,KAAAuqB,UAAAvqB,KAAAuqB,UAAA9iB,OAAA3Z,GACA6B,KAAA86B,EAAA96B,KACA6O,IAAAtI,EAAAsI,MAGAtI,EAAAvG,OAAAuH,GAAAE,UACAqzB,EAAA96B,OAAAuH,GAAAE,SACA4I,KAAAuqB,UAAAvqB,KAAAuqB,UAAA9iB,OAAA3Z,GACA6B,KAAAuH,GAAAE,SACAoH,IAAAtI,EAAAsI,MAGAtI,EAAAvG,OAAAuH,GAAAE,UACAqzB,EAAA96B,OAAAuH,GAAAC,MACA6I,KAAAuqB,UAAAvqB,KAAAuqB,UAAA9iB,OAAA3Z,GACA6B,KAAAuH,GAAAC,MACAqH,IAAAtI,EAAAsI,MAGAtI,EAAAvG,OAAAuH,GAAAI,SACAmzB,EAAA96B,OAAAuH,GAAAC,MACA6I,KAAAuqB,UAAAvqB,KAAAuqB,UAAA3iB,OAAA9Z,GAEAoI,EAAAvG,OAAAuH,GAAAI,SACAmzB,EAAA96B,OAAAuH,GAAAE,SACA4I,KAAAuqB,UAAAvqB,KAAAuqB,UAAA9iB,OAAA3Z,GACA6B,KAAAuH,GAAAI,QACAkH,IAAAisB,EAAAjsB,MAGAtI,EAAAvG,OAAAuH,GAAAC,OACAszB,EAAA96B,OAAAuH,GAAAI,QACA0I,KAAAuqB,UAAAvqB,KAAAuqB,UAAA9iB,OAAA3Z,GACA6B,KAAAuH,GAAAE,SACAoH,IAAAtI,EAAAsI,MAWA5R,EAAA,uCACA+D,KAAAC,UAAAsF,GACA,UACAvF,KAAAC,UAAA65B,KAGAH,EAAA58B,UAAAg9B,WAAA,WACA,GAAAC,KAIA,OAHA3qB,MAAAuqB,UAAAniB,iBAAA,SAAAta,EAAAoI,GACAy0B,EAAAhyB,KAAAzC,KAEAy0B,GAEAL,KErFAM,GAAA,WAEA,QAAAC,GAAA9a,GAIA/P,KAAA+D,WADAgM,EACA,SAAAjJ,EAAAC,GACA,MAAAgJ,GAAAjJ,EAAAC,IAAAhB,GAAAhC,WAAA+C,EAAAhZ,IAAAiZ,EAAAjZ,MAIA,SAAAgZ,EAAAC,GACA,MAAAhB,IAAAhC,WAAA+C,EAAAhZ,IAAAiZ,EAAAjZ,MAGAkS,KAAA8qB,SAAAn1B,IACAqK,KAAA+qB,UAAA,GAAA1jB,IAAArH,KAAA+D,YAwGA,MAlGA8mB,GAAAG,SAAA,SAAAC,GACA,UAAAJ,GAAAI,EAAAlnB,aAEA8mB,EAAAn9B,UAAA6pB,IAAA,SAAAzpB,GACA,aAAAkS,KAAA8qB,SAAApzB,IAAA5J,IAEA+8B,EAAAn9B,UAAAgK,IAAA,SAAA5J,GACA,MAAAkS,MAAA8qB,SAAApzB,IAAA5J,IAEA+8B,EAAAn9B,UAAA+pB,MAAA,WACA,MAAAzX,MAAA+qB,UAAA7iB,UAEA2iB,EAAAn9B,UAAAgqB,KAAA,WACA,MAAA1X,MAAA+qB,UAAA5iB,UAEA0iB,EAAAn9B,UAAAiB,QAAA,WACA,MAAAqR,MAAA+qB,UAAAp8B,WAOAk8B,EAAAn9B,UAAAw9B,QAAA,SAAAp9B,GACAd,EAAAgT,KAAAuX,IAAAzpB,GAAA,0DAAAA,EACA,IAAA0Q,GAAAwB,KAAA8qB,SAAApzB,IAAA5J,EACA,OAAAkS,MAAA+qB,UAAAhjB,kBAAAvJ,IAMAqsB,EAAAn9B,UAAA8D,QAAA,SAAA1D,GACA,GAAA0Q,GAAAwB,KAAA8qB,SAAApzB,IAAA5J,EACA,OAAA0Q,GAAAwB,KAAA+qB,UAAAv5B,QAAAgN,IAAA,GAEAzQ,OAAA4R,eAAAkrB,EAAAn9B,UAAA,QACAgK,IAAA,WACA,MAAAsI,MAAA+qB,UAAA1mB,MAEA1B,YAAA,EACAC,cAAA,IAGAioB,EAAAn9B,UAAAgB,QAAA,SAAAipB,GACA3X,KAAA+qB,UAAA3iB,iBAAA,SAAAE,EAAAC,GAEA,MADAoP,GAAArP,IACA,KAIAuiB,EAAAn9B,UAAAuR,IAAA,SAAAT,GAEA,GAAAuO,GAAA/M,KAAAhB,OAAAR,EAAA1Q,IACA,OAAAif,GAAArF,KAAAqF,EAAA+d,SAAArjB,OAAAjJ,EAAA1Q,IAAA0Q,GAAAuO,EAAAge,UAAAtjB,OAAAjJ,EAAA,QAGAqsB,EAAAn9B,UAAAsR,OAAA,SAAAlR,GACA,GAAA0Q,GAAAwB,KAAAtI,IAAA5J,EACA,OAAA0Q,GAGAwB,KAAA0H,KAAA1H,KAAA8qB,SAAAljB,OAAA9Z,GAAAkS,KAAA+qB,UAAAnjB,OAAApJ,IAFAwB,MAIA6qB,EAAAn9B,UAAAqE,OAAA,SAAAmQ,GACA,KAAAA,YAAA2oB,IACA,QACA,IAAA7qB,KAAAqE,OAAAnC,EAAAmC,KACA,QAGA,KAFA,GAAA6T,GAAAlY,KAAA+qB,UAAAtiB,cACA0P,EAAAjW,EAAA6oB,UAAAtiB,cACAyP,EAAA7O,WAAA,CACA,GAAA8hB,GAAAjT,EAAA/O,UAAArb,IACAs9B,EAAAjT,EAAAhP,UAAArb,GACA,KAAAq9B,EAAAp5B,OAAAq5B,GACA,SAEA,UAEAP,EAAAn9B,UAAAiT,SAAA,WACA,GAAA0qB,KAIA,OAHArrB,MAAAtR,QAAA,SAAA8P,GACA6sB,EAAA1yB,KAAA6F,QAEA,IAAA6sB,EAAA//B,OACA,iBAGA,oBAAA+/B,EAAA55B,KAAA,eAGAo5B,EAAAn9B,UAAAga,KAAA,SAAAojB,EAAAC,GACA,GAAAO,GAAA,GAAAT,EAIA,OAHAS,GAAAvnB,WAAA/D,KAAA+D,WACAunB,EAAAR,WACAQ,EAAAP,YACAO,GAEAT,KC3HAU,GAAA,WACA,QAAAC,GAAAC,GACAzrB,KAAAyrB,WAOAzrB,KAAA0rB,SAqEA,MAlEAF,GAAA99B,UAAAgK,IAAA,SAAA5J,GACA,GAAA69B,GAAA3rB,KAAAyrB,SAAA39B,GACAmiB,EAAAjQ,KAAA0rB,MAAAC,EACA,QAAAv9B,KAAA6hB,EAGA,OAAA7kB,GAAA,EAAAwgC,EAAA3b,EAA6C7kB,EAAAwgC,EAAAtgC,OAAuBF,IAAA,CACpE,GAAAujB,GAAAid,EAAAxgC,GAAAygC,EAAAld,EAAA,GAAAzgB,EAAAygB,EAAA,EACA,IAAAkd,EAAA95B,OAAAjE,GACA,MAAAI,KAKAs9B,EAAA99B,UAAA6pB,IAAA,SAAAzpB,GACA,WAAAM,KAAA4R,KAAAtI,IAAA5J,IAGA09B,EAAA99B,UAAAqf,IAAA,SAAAjf,EAAAI,GACA,GAAAy9B,GAAA3rB,KAAAyrB,SAAA39B,GACAmiB,EAAAjQ,KAAA0rB,MAAAC,EACA,QAAAv9B,KAAA6hB,EAEA,YADAjQ,KAAA0rB,MAAAC,KAAA79B,EAAAI,IAGA,QAAA+D,GAAA,EAAuBA,EAAAge,EAAA3kB,OAAoB2G,IAC3C,GAAAge,EAAAhe,GAAA,GAAAF,OAAAjE,GAEA,YADAmiB,EAAAhe,IAAAnE,EAAAI,GAIA+hB,GAAAtX,MAAA7K,EAAAI,KAKAs9B,EAAA99B,UAAAsR,OAAA,SAAAlR,GACA,GAAA69B,GAAA3rB,KAAAyrB,SAAA39B,GACAmiB,EAAAjQ,KAAA0rB,MAAAC,EACA,QAAAv9B,KAAA6hB,EACA,QAEA,QAAAhe,GAAA,EAAuBA,EAAAge,EAAA3kB,OAAoB2G,IAC3C,GAAAge,EAAAhe,GAAA,GAAAF,OAAAjE,GAOA,MANA,KAAAmiB,EAAA3kB,aACA0U,MAAA0rB,MAAAC,GAGA1b,EAAA6b,OAAA75B,EAAA,IAEA,CAGA,WAEAu5B,EAAA99B,UAAAgB,QAAA,SAAAJ,GACAI,EAAAsR,KAAA0rB,MAAA,SAAAn6B,EAAAw6B,GACA,OAAA3gC,GAAA,EAAA4gC,EAAAD,EAAiD3gC,EAAA4gC,EAAA1gC,OAAuBF,IAAA,CACxE,GAAAujB,GAAAqd,EAAA5gC,GAAAkd,EAAAqG,EAAA,GAAApG,EAAAoG,EAAA,EACArgB,GAAAga,EAAAC,OAIAijB,EAAA99B,UAAAiB,QAAA,WACA,MAAAA,GAAAqR,KAAA0rB,QAEAF,KC5EAS,GAAA,WACA,QAAAA,KACAjsB,KAAAksB,aAEA,MAAAD,MAOAE,GAAA,WACA,QAAAC,GAAAC,GACArsB,KAAAqsB,aACArsB,KAAAssB,QAAA,GAAAf,IAAA,SAAAgB,GACA,MAAAA,GAAA5c,gBAEA3P,KAAAwsB,YAAAzC,GAAA0C,QACAzsB,KAAAqsB,WAAAK,UAAA1sB,KAAA2sB,SAAA/1B,KAAAoJ,WAAA4sB,QAAAh2B,KAAAoJ,OA+EA,MA7EAosB,GAAA1+B,UAAAo7B,OAAA,SAAA+D,GACA,GAAAluB,GAAAkuB,EAAAluB,MACAmuB,GAAA,EACAC,EAAA/sB,KAAAssB,QAAA50B,IAAAiH,EAUA,OATAouB,KACAD,GAAA,EACAC,EAAA,GAAAd,IACAjsB,KAAAssB,QAAAvf,IAAApO,EAAAouB,IAEAA,EAAAb,UAAAvzB,KAAAk0B,GACAA,EAAAG,qBAAAhtB,KAAAwsB,aACAO,EAAAE,UACAJ,EAAAK,eAAAH,EAAAE,UACAH,EACA9sB,KAAAqsB,WAAAvD,OAAAnqB,GAAAwuB,KAAA,SAAAvZ,GAEA,MADAmZ,GAAAnZ,WACAA,IAIA8S,QAAAvsB,QAAA4yB,EAAAnZ,WAGAwY,EAAA1+B,UAAA0/B,SAAA,SAAAP,GACA,GAAAluB,GAAAkuB,EAAAluB,MACA0uB,GAAA,EACAN,EAAA/sB,KAAAssB,QAAA50B,IAAAiH,EACA,IAAAouB,EAAA,CACA,GAAA96B,GAAA86B,EAAAb,UAAA16B,QAAAq7B,EACA56B,IAAA,IACA86B,EAAAb,UAAAJ,OAAA75B,EAAA,GACAo7B,EAAA,IAAAN,EAAAb,UAAA5gC,QAGA,MAAA+hC,IACArtB,KAAAssB,QAAAttB,OAAAL,GACAqB,KAAAqsB,WAAAe,SAAAzuB,IAGA+nB,QAAAvsB,WAGAiyB,EAAA1+B,UAAAi/B,SAAA,SAAAW,GACA,OAAAliC,GAAA,EAAAmiC,EAAAD,EAAiDliC,EAAAmiC,EAAAjiC,OAAyBF,IAAA,CAC1E,GAAA6hC,GAAAM,EAAAniC,GACAuT,EAAAsuB,EAAAtuB,MACAouB,EAAA/sB,KAAAssB,QAAA50B,IAAAiH,EACA,IAAAouB,EAAA,CACA,OAAApe,GAAA,EAAAiB,EAAAmd,EAAAb,UAA0Dvd,EAAAiB,EAAAtkB,OAAgBqjB,IAC1EiB,EAAAjB,GACAue,eAAAD,EAEAF,GAAAE,cAIAb,EAAA1+B,UAAAk/B,QAAA,SAAAjuB,EAAArS,GACA,GAAAygC,GAAA/sB,KAAAssB,QAAA50B,IAAAiH,EACA,IAAAouB,EACA,OAAA3hC,GAAA,EAAAujB,EAAAoe,EAAAb,UAAsD9gC,EAAAujB,EAAArjB,OAAgBF,IAAA,CACtE,GAAAyhC,GAAAle,EAAAvjB,EACAyhC,GAAAD,QAAAtgC,GAKA0T,KAAAssB,QAAAttB,OAAAL,IAEAytB,EAAA1+B,UAAAs/B,qBAAA,SAAAR,GACAxsB,KAAAwsB,cACAxsB,KAAAssB,QAAA59B,QAAA,SAAA6C,EAAAw7B,GACA,OAAA3hC,GAAA,EAAAujB,EAAAoe,EAAAb,UAAsD9gC,EAAAujB,EAAArjB,OAAgBF,IACtEujB,EAAAvjB,GACA4hC,qBAAAR,MAIAJ,KASAoB,GAAA,WACA,QAAAC,GAAA9uB,EAAA+uB,EAAAr8B,GACA2O,KAAArB,QACAqB,KAAA0tB,gBAKA1tB,KAAA2tB,oBAAA,EACA3tB,KAAAwsB,YAAAzC,GAAA0C,QACAzsB,KAAA3O,cAqGA,MAnGAo8B,GAAA//B,UAAAw/B,eAAA,SAAAU,GAEA,GADA5gC,EAAA4gC,EAAArvB,WAAAjT,OAAA,GAAAsiC,EAAAC,iBAAA,2CACA7tB,KAAA3O,QAAAy8B,+BAAA,CAGA,OADAvvB,MACAnT,EAAA,EAAAujB,EAAAif,EAAArvB,WAAkDnT,EAAAujB,EAAArjB,OAAgBF,IAAA,CAClE,GAAA8vB,GAAAvM,EAAAvjB,EACA8vB,GAAAvrB,OAAAuH,GAAAG,UACAkH,EAAA5F,KAAAuiB,GAGA0S,GACAjvB,MAAAivB,EAAAjvB,MACAua,KAAA0U,EAAA1U,KACA9a,QAAAwvB,EAAAxvB,QACAG,aACAG,UAAAkvB,EAAAlvB,UACAqvB,iBAAAH,EAAAG,iBACAF,iBAAAD,EAAAC,kBAGA7tB,KAAA2tB,mBAKA3tB,KAAAguB,iBAAAJ,IACA5tB,KAAA0tB,cAAA5nB,KAAA8nB,GALA5tB,KAAAiuB,wBAAAL,EAAA5tB,KAAAwsB,cACAxsB,KAAAkuB,kBAAAN,GAMA5tB,KAAA4tB,QAEAH,EAAA//B,UAAAk/B,QAAA,SAAAtgC,GACA0T,KAAA0tB,cAAAphC,UAEAmhC,EAAA//B,UAAAs/B,qBAAA,SAAAR,GACAxsB,KAAAwsB,cACAxsB,KAAA4tB,OACA5tB,KAAA2tB,oBACA3tB,KAAAiuB,wBAAAjuB,KAAA4tB,KAAApB,IACAxsB,KAAAkuB,kBAAAluB,KAAA4tB,OAGAH,EAAA//B,UAAAugC,wBAAA,SAAAL,EAAApB,GAGA,GAFAx/B,GAAAgT,KAAA2tB,mBAAA,yEAEAC,EAAAlvB,UACA,QAIA,IAAAyvB,GAAA3B,IAAAzC,GAAAqE,MAGA,OAAApuB,MAAA3O,QAAAg9B,uBAAAF,GACAnhC,EAAA4gC,EAAAlvB,UAAA,qDACA,IAGAkvB,EAAA1U,KAAAvqB,WAAA69B,IAAAzC,GAAAqE,QAEAX,EAAA//B,UAAAsgC,iBAAA,SAAAJ,GAKA,GAAAA,EAAArvB,WAAAjT,OAAA,EACA,QAEA,IAAAgjC,GAAAtuB,KAAA4tB,MAAA5tB,KAAA4tB,KAAAG,mBAAAH,EAAAG,gBACA,UAAAH,EAAAC,mBAAAS,KACA,IAAAtuB,KAAA3O,QAAAk9B,6BAOAd,EAAA//B,UAAAwgC,kBAAA,SAAAN,GACA5gC,GAAAgT,KAAA2tB,mBAAA,kDACAC,GACAjvB,MAAAivB,EAAAjvB,MACAua,KAAA0U,EAAA1U,KACA9a,QAAAwsB,GAAAI,SAAA4C,EAAA1U,MACA3a,WAAAkvB,EAAAe,sBAAAZ,GACAlvB,UAAAkvB,EAAAlvB,UACAqvB,iBAAAH,EAAAG,iBACAF,kBAAA,GAEA7tB,KAAA2tB,oBAAA,EACA3tB,KAAA0tB,cAAA5nB,KAAA8nB,IAGAH,EAAAe,sBAAA,SAAAZ,GACA,GAAA/+B,KAIA,OAHA++B,GAAA1U,KAAAxqB,QAAA,SAAA8P,GACA3P,EAAA8J,MAAyBhJ,KAAAuH,GAAAC,MAAAqH,UAEzB3P,GAEA4+B,KCpNAvzB,GAAA,WACA,QAAAu0B,GAAA1J,GACA,GAAArkB,GAAAV,IAGAA,MAAA0uB,aAAA,KACA1uB,KAAA2uB,cAAA,KAEA3uB,KAAAnR,WAAAT,GACA4R,KAAA1T,MAAA,KACA0T,KAAA4uB,QAAA,EAGA5uB,KAAA6uB,kBAAA,EACA9J,EAAA,SAAA72B,GACAwS,EAAAkuB,QAAA,EACAluB,EAAA7R,OAAAX,EACAwS,EAAAguB,cAGAhuB,EAAAguB,aAAAxgC,IAES,SAAA5B,GACToU,EAAAkuB,QAAA,EACAluB,EAAApU,QACAoU,EAAAiuB,eACAjuB,EAAAiuB,cAAAriC,KA2GA,MAvGAmiC,GAAA/gC,UAAAohC,MAAA,SAAAxgC,GACA,MAAA0R,MAAA8F,SAAA1X,GAAAE,IAEAmgC,EAAA/gC,UAAAoY,KAAA,SAAAipB,EAAAC,GACA,GAAAtuB,GAAAV,IAKA,OAJAA,MAAA6uB,kBACAjiC,EAAA,yDAEAoT,KAAA6uB,kBAAA,EACA7uB,KAAA4uB,OACA5uB,KAAA1T,MAIA0T,KAAAivB,YAAAD,EAAAhvB,KAAA1T,OAHA0T,KAAAkvB,YAAAH,EAAA/uB,KAAAnR,QAOA,GAAA4/B,GAAA,SAAAt0B,EAAAC,GACAsG,EAAAguB,aAAA,SAAAxgC,GACAwS,EAAAwuB,YAAAH,EAAA7gC,GAAA4X,KAAA3L,EAAAC,IAEAsG,EAAAiuB,cAAA,SAAAriC,GACAoU,EAAAuuB,YAAAD,EAAA1iC,GAAAwZ,KAAA3L,EAAAC,OAKAq0B,EAAA/gC,UAAAyhC,UAAA,WACA,GAAAzuB,GAAAV,IACA,WAAA0mB,SAAA,SAAAvsB,EAAAC,GACAsG,EAAAoF,KAAA3L,EAAAC,MAGAq0B,EAAA/gC,UAAA0hC,iBAAA,SAAA9gC,GACA,IACA,GAAAO,GAAAP,GACA,OAAAO,aAAA4/B,GACA5/B,EAGA4/B,EAAAt0B,QAAAtL,GAGA,MAAAlC,GACA,MAAA8hC,GAAAr0B,OAAAzN,KAGA8hC,EAAA/gC,UAAAwhC,YAAA,SAAAH,EAAA7gC,GACA,MAAA6gC,GACA/uB,KAAAovB,iBAAA,WAAsD,MAAAL,GAAA7gC,KAKtDugC,EAAAt0B,QAAAjM,IAGAugC,EAAA/gC,UAAAuhC,YAAA,SAAAD,EAAA1iC,GACA,MAAA0iC,GACAhvB,KAAAovB,iBAAA,WAAsD,MAAAJ,GAAA1iC,KAGtDmiC,EAAAr0B,OAAA9N,IAGAmiC,EAAAt0B,QAAA,SAAAtL,GACA,UAAA4/B,GAAA,SAAAt0B,EAAAC,GACAD,EAAAtL,MAGA4/B,EAAAr0B,OAAA,SAAA9N,GACA,UAAAmiC,GAAA,SAAAt0B,EAAAC,GACAA,EAAA9N,MAGAmiC,EAAAY,QAAA,SAAAC,GACA,MAAAA,GAAAlM,OAAA,SAAAmM,EAAAC,EAAAC,GACA,MAAAF,GAAAzpB,KAAA,WACA,MAAA0pB,MAESf,EAAAt0B,YAETs0B,EAAA5iC,IAAA,SAAAyjC,GACA,GAAAr+B,MACAwmB,GAAA,EAEAiY,EAAAjB,EAAAt0B,QAAA,KACA,OAAAm1B,GACAlM,OAAA,SAAAmM,EAAAC,GACA,MAAAD,GAAAzpB,KAAA,SAAAjX,GAKA,MAJA4oB,IACAxmB,EAAA0H,KAAA9J,GAEA4oB,GAAA,EACA+X,KAESE,GACT5pB,KAAA,SAAAjX,GAEA,MADAoC,GAAA0H,KAAA9J,GACAoC,KAGAw9B,KCxIAkB,GAAA,WACA,QAAAC,KACA5vB,KAAA6vB,SAAA,EAIA7vB,KAAA8vB,WAKA9vB,KAAA+vB,iBAAAh6B,KA8CA,MA5CA65B,GAAAliC,UAAAsiC,iBAAA,SAAAC,GACAjwB,KAAA8vB,QAAAn3B,KAAAs3B,GACAA,EAAAC,oBAAAlwB,OAEA4vB,EAAAliC,UAAAyiC,oBAAA,SAAAF,GACAjwB,KAAA8vB,QAAAhE,OAAA9rB,KAAA8vB,QAAAt+B,QAAAy+B,GAAA,GACAA,EAAAC,oBAAA,OAEAN,EAAAliC,UAAA0iC,uBAAA,SAAAtiC,GACAkS,KAAA+vB,iBAAA/vB,KAAA+vB,iBAAA9wB,IAAAnR,IAEA8hC,EAAAliC,UAAA2iC,eAAA,SAAAz1B,GACA,GAAA8F,GAAAV,KACAswB,KACAC,EAAAx6B,IAaA,OAZAiK,MAAA+vB,iBAAArhC,QAAA,SAAAZ,GACA,GAAA0iC,GAAA9vB,EAAA+vB,yBAAA71B,EAAA9M,EACAwiC,GAAA33B,KAAA63B,EAAA1qB,KAAA,SAAA4qB,GAKA,MAHAA,KACAH,IAAAtxB,IAAAnR,IAEAoM,GAAAC,eAIA6F,KAAA+vB,iBAAAh6B,KACAmE,GAAAm1B,QAAAiB,GAAAxqB,KAAA,WAAsE,MAAAyqB,MAEtEX,EAAAliC,UAAA+iC,yBAAA,SAAA71B,EAAA9M,GACA,GAAA4hC,GAAAx1B,GAAAC,SAAA,EACA,OAAA6F,MAAA8vB,QACAjkC,IAAA,SAAA8kC,GAAoC,kBAAqB,MAAAA,GAAAC,YAAAh2B,EAAA9M,MACzDs1B,OAAA,SAAAmM,EAAAC,GACA,MAAAD,GAAAzpB,KAAA,SAAAjX,GACA,MAAAA,GACAqL,GAAAC,SAAA,GAGAq1B,OAGSE,IAETE,KC7DAiB,GAAA,WACA,QAAAC,GAAAnyB,EAAAoyB,EAAAC,GACAhxB,KAAArB,QACAqB,KAAA+wB,YACA/wB,KAAAgxB,cAmBA,MAjBAF,GAAAG,aAAA,SAAAC,GAGA,OAFAH,GAAAh7B,KACAi7B,EAAAj7B,KACA3K,EAAA,EAAAujB,EAAAuiB,EAAA3yB,WAAsDnT,EAAAujB,EAAArjB,OAAgBF,IAAA,CACtE,GAAA8vB,GAAAvM,EAAAvjB,EACA,QAAA8vB,EAAAvrB,MACA,IAAAuH,IAAAC,MACA45B,IAAA9xB,IAAAic,EAAA1c,IAAA1Q,IACA,MACA,KAAAoJ,IAAAI,QACA05B,IAAA/xB,IAAAic,EAAA1c,IAAA1Q,MAKA,UAAAgjC,GAAAI,EAAAvyB,MAAAoyB,EAAAC,IAEAF,KCVAK,GAAA,WACA,QAAAC,KAEApxB,KAAAqxB,UAAA,GAAAla,IAAAma,GAAAzqB,cAEA7G,KAAAuxB,aAAA,GAAApa,IAAAma,GAAAE,mBAEAxxB,KAAAyxB,iBAAA,KAsEA,MAnEAL,GAAA1jC,UAAAiB,QAAA,WACA,MAAAqR,MAAAqxB,UAAA1iC,WAGAyiC,EAAA1jC,UAAAgkC,aAAA,SAAA5jC,EAAA69B,GACA,GAAAgG,GAAA,GAAAL,IAAAxjC,EAAA69B,EACA3rB,MAAAqxB,UAAArxB,KAAAqxB,UAAApyB,IAAA0yB,GACA3xB,KAAAuxB,aAAAvxB,KAAAuxB,aAAAtyB,IAAA0yB,IAGAP,EAAA1jC,UAAAkkC,cAAA,SAAAta,EAAAqU,GACA,GAAAjrB,GAAAV,IACAsX,GAAA5oB,QAAA,SAAAZ,GAAqC,MAAA4S,GAAAgxB,aAAA5jC,EAAA69B,MAMrCyF,EAAA1jC,UAAAmkC,gBAAA,SAAA/jC,EAAA69B,GACA3rB,KAAA8xB,UAAA,GAAAR,IAAAxjC,EAAA69B,KAEAyF,EAAA1jC,UAAAqkC,iBAAA,SAAAza,EAAAqU,GACA,GAAAjrB,GAAAV,IACAsX,GAAA5oB,QAAA,SAAAZ,GAAqC,MAAA4S,GAAAmxB,gBAAA/jC,EAAA69B,MAMrCyF,EAAA1jC,UAAAskC,sBAAA,SAAArG,GACA,GAAAjrB,GAAAV,KACAiyB,EAAAlsB,GAAAO,MACA4rB,EAAA,GAAAZ,IAAAW,EAAAtG,GACAwG,EAAA,GAAAb,IAAAW,EAAAtG,EAAA,EACA3rB,MAAAuxB,aAAA3Z,gBAAAsa,EAAAC,GAAA,SAAAR,GACAjxB,EAAAoxB,UAAAH,MAGAP,EAAA1jC,UAAA0kC,oBAAA,WACA,GAAA1xB,GAAAV,IACAA,MAAAqxB,UAAA3iC,QAAA,SAAAijC,GAA+C,MAAAjxB,GAAAoxB,UAAAH,MAE/CP,EAAA1jC,UAAAokC,UAAA,SAAAH,GACA3xB,KAAAqxB,UAAArxB,KAAAqxB,UAAAryB,OAAA2yB,GACA3xB,KAAAuxB,aAAAvxB,KAAAuxB,aAAAvyB,OAAA2yB,GACA,OAAA3xB,KAAAyxB,kBACAzxB,KAAAyxB,iBAAArB,uBAAAuB,EAAA7jC,MAGAsjC,EAAA1jC,UAAA2kC,gBAAA,SAAA1G,GACA,GAAAsG,GAAAlsB,GAAAO,MACA4rB,EAAA,GAAAZ,IAAAW,EAAAtG,GACAwG,EAAA,GAAAb,IAAAW,EAAAtG,EAAA,GACArU,EAAAvhB,IAIA,OAHAiK,MAAAuxB,aAAA3Z,gBAAAsa,EAAAC,GAAA,SAAAR,GACAra,IAAArY,IAAA0yB,EAAA7jC,OAEAwpB,GAEA8Z,EAAA1jC,UAAAwiC,oBAAA,SAAAuB,GACAzxB,KAAAyxB,oBAEAL,EAAA1jC,UAAAkjC,YAAA,SAAAh2B,EAAA9M,GACA,GAAA6jC,GAAA,GAAAL,IAAAxjC,EAAA,GACAwkC,EAAAtyB,KAAAqxB,UAAArZ,kBAAA2Z,EACA,OAAAz3B,IAAAC,QAAA,OAAAm4B,GAAAxkC,EAAAiE,OAAAugC,EAAAxkC,OAEAsjC,KAGAE,GAAA,WACA,QAAAiB,GAAAzkC,EAAA0kC,GACAxyB,KAAAlS,MACAkS,KAAAwyB,kBAYA,MATAD,GAAA1rB,aAAA,SAAAhV,EAAAC,GACA,MAAAiU,IAAAhC,WAAAlS,EAAA/D,IAAAgE,EAAAhE,MACA8D,EAAAC,EAAA2gC,gBAAA1gC,EAAA0gC,kBAGAD,EAAAf,kBAAA,SAAA3/B,EAAAC,GACA,MAAAF,GAAAC,EAAA2gC,gBAAA1gC,EAAA0gC,kBACAzsB,GAAAhC,WAAAlS,EAAA/D,IAAAgE,EAAAhE,MAEAykC,KPnHAE,GAAA,GAEA,SAAArI,GACAA,IAAA,2BACAA,IAAA,4BACCA,YAQD,IQGAsI,IRHAC,GAAA,WACA,QAAAA,GAAAC,EAAAC,OACA,KAAAA,IAAmCA,EAAA,GACnC7yB,KAAA4yB,aAEA,IAAAE,GAAAD,GAAAJ,OACAM,EAAAF,EAAAC,CASA9yB,MAAAgzB,WARAD,GAAAH,EAQAE,EAAA9yB,KAAA4yB,aAWAE,EAAA9yB,KAAA4yB,cAAA,GAAAH,IAcA,MAXAE,GAAAjlC,UAAAoY,KAAA,WAEA,MADA9F,MAAAgzB,YAAA,GAAAP,GACAzyB,KAAAgzB,YAEAL,EAAAM,cAAA,SAAAJ,GAEA,WADA,KAAAA,IAAmCA,EAAA,GACnC,GAAAF,GAAAvI,GAAA8I,WAAAL,IAEAF,EAAAQ,cAAA,WACA,UAAAR,GAAAvI,GAAAgJ,aAEAT,KnC/CAU,GAAA,WACA,QAAAA,GAAAvlC,GACAkS,KAAAlS,MAEA,MAAAulC,MAGAC,GAAA,WACA,QAAAA,GAAAxlC,GACAkS,KAAAlS,MAEA,MAAAwlC,MAQAC,GAAA,WACA,QAAAC,GAAA70B,EAEA80B,GACAzzB,KAAArB,QACAqB,KAAAyzB,kBACAzzB,KAAA0zB,UAAA,KAOA1zB,KAAA2F,SAAA,EAEA3F,KAAA2zB,eAAA59B,KAEAiK,KAAA4zB,YAAA79B,KACAiK,KAAA6zB,YAAA,GAAAjJ,IAAAjsB,EAAAC,cAAAhI,KAAA+H,IAqOA,MAzNA60B,GAAA9lC,UAAAomC,kBAAA,SAAAv1B,EAAAw1B,GACA,GAAArzB,GAAAV,KACAg0B,EAAAD,EACAA,EAAAC,UACA,GAAA3J,IACA4J,EAAAF,EACAA,EAAAF,YACA7zB,KAAA6zB,YACAK,EAAAH,EACAA,EAAAH,YACA5zB,KAAA4zB,YACAO,EAAAF,EACAG,GAAA,EAUAC,EAAAr0B,KAAArB,MAAA2R,YAAA2jB,EAAA5vB,OAAArE,KAAArB,MAAAwF,MACA8vB,EAAAvc,OACA,IA0DA,IAzDAnZ,EAAA6J,iBAAA,SAAAta,EAAAwmC,GACA,GAAAC,GAAAN,EAAAv8B,IAAA5J,GACA4rB,EAAA4a,YAAA/tB,IAAA+tB,EAAA,IAsBA,IArBA5a,IACA1sB,EAAAc,EAAAiE,OAAA2nB,EAAA5rB,KAAA,+CACAA,EACA,OACA4rB,EAAA5rB,KACA4rB,EAAAhZ,EAAA/B,MAAAsR,QAAAyJ,KAAA,MAEAA,GACAya,IAAAl1B,IAAAya,GAEAwa,EADAxa,EAAA/S,kBACAutB,EAAAj1B,IAAAnR,GAGAomC,EAAAl1B,OAAAlR,KAIAqmC,IAAAn1B,OAAAlR,GACAomC,IAAAl1B,OAAAlR,IAGAymC,GAAA7a,EAAA,CACA,GAAA8a,GAAAD,EAAA7tB,KAAA3U,OAAA2nB,EAAAhT,KACA8tB,IACAD,EAAA5tB,oBAAA+S,EAAA/S,oBAEA6tB,EACAR,EAAAxJ,OAAyC76B,KAAAuH,GAAAG,SAAAmH,IAAAkb,IAGzCsa,EAAAxJ,OAAyC76B,KAAAuH,GAAAE,SAAAoH,IAAAkb,IAEzC2a,GACA3zB,EAAA/B,MAAAC,cAAA8a,EAAA2a,GAAA,IAIAD,GAAA,SAIAG,GAAA7a,EACAsa,EAAAxJ,OAAiC76B,KAAAuH,GAAAC,MAAAqH,IAAAkb,IAEjC6a,IAAA7a,IACAsa,EAAAxJ,OAAiC76B,KAAAuH,GAAAI,QAAAkH,IAAA+1B,IACjCF,IAIAD,GAAA,MAIAp0B,KAAArB,MAAA2R,WAEA,KAAA6jB,EAAA9vB,KAAArE,KAAArB,MAAAwF,OAAA,CACA,GAAAowB,GAAAJ,EAAAzc,MACAyc,KAAAn1B,OAAAu1B,EAAAzmC,KACAkmC,EAAAxJ,OAAiC76B,KAAAuH,GAAAI,QAAAkH,IAAA+1B,IAIjC,MADAvnC,IAAAonC,IAAAL,EAAA,mEAEAF,YAAAM,EACAH,YACAI,cACAR,YAAAM,IAWAV,EAAA9lC,UAAA+mC,aAAA,SAAAl2B,EAAA6c,GACA,GAAA1a,GAAAV,IACAhT,IAAAuR,EAAA61B,YAAA,0CACA,IAAAh2B,GAAA4B,KAAA6zB,WACA7zB,MAAA6zB,YAAAt1B,EAAAs1B,YACA7zB,KAAA4zB,YAAAr1B,EAAAq1B,WAEA,IAAAjJ,GAAApsB,EAAAy1B,UAAAtJ,YACAC,GAAA+J,KAAA,SAAA39B,EAAAC,GACA,MAAAF,IAAAC,EAAApH,KAAAqH,EAAArH,OACA+Q,EAAA/B,MAAAC,cAAA7H,EAAAyH,IAAAxH,EAAAwH,MAEA,IAAAm2B,GAAA30B,KAAA40B,kBAAAxZ,GACAyZ,EAAA,IAAA70B,KAAA2zB,eAAAtvB,MAAArE,KAAA2F,QACAmvB,EAAAD,EAAA1K,GAAA4K,OAAA5K,GAAA6K,MACAnH,EAAAiH,IAAA90B,KAAA0zB,SAEA,OADA1zB,MAAA0zB,UAAAoB,EACA,IAAAnK,EAAAr/B,QAAAuiC,GAMA1vB,UACAQ,MAAAqB,KAAArB,MACAua,KAAA3a,EAAAs1B,YACAz1B,UACAG,WAAAosB,EACAjsB,UAAAo2B,IAAA3K,GAAA6K,MACAnH,mBACAE,kBAAAxvB,EAAAq1B,YAAAjlC,WAEAgmC,iBAboBA,iBAoBpBnB,EAAA9lC,UAAAunC,gBAAA,SAAAnnC,GAEA,OAAAkS,KAAAyzB,gBAAAlc,IAAAzpB,MAIAkS,KAAA6zB,YAAAtc,IAAAzpB,KAOAkS,KAAA6zB,YAAAn8B,IAAA5J,GAAA6Y,mBAUA6sB,EAAA9lC,UAAAknC,kBAAA,SAAAxZ,GACA,GAAA1a,GAAAV,IACA,IAAAob,EAAA,CACA,GAAA8Z,GAAA9Z,EAAAxC,OAOA,QANAsc,YAAArc,IACA7Y,KAAAyzB,gBAAAyB,EAAAv5B,UAEAu5B,YAAA/b,MACAnZ,KAAAyzB,gBAAAyB,EAAA5b,cAAAtZ,KAAAyzB,kBAEArY,EAAAtC,qBACA,IAAA5B,IAAAsE,YACAxb,KAAA2F,SAAA,CACA,MACA,KAAAuR,IAAA6B,eACA/Y,KAAA2F,SAAA,CACA,MACA,KAAAuR,IAAA+D,KACA,KACA,SACAruB,EAAA,kCAAAwuB,EAAAtC,sBAMA,GAAAqc,GAAAn1B,KAAA2zB,cACA3zB,MAAA2zB,eAAA59B,KACAiK,KAAA2F,SACA3F,KAAA6zB,YAAAnlC,QAAA,SAAA8P,GACAkC,EAAAu0B,gBAAAz2B,EAAA1Q,OACA4S,EAAAizB,eAAAjzB,EAAAizB,eAAA10B,IAAAT,EAAA1Q,OAKA,IAAA68B,KAWA,OAVAwK,GAAAzmC,QAAA,SAAAZ,GACA4S,EAAAizB,eAAApc,IAAAzpB,IACA68B,EAAAhyB,KAAA,GAAA26B,IAAAxlC,MAGAkS,KAAA2zB,eAAAjlC,QAAA,SAAAZ,GACAqnC,EAAA5d,IAAAzpB,IACA68B,EAAAhyB,KAAA,GAAA06B,IAAAvlC,MAGA68B,GAEA6I,K4CzPA4B,GAAA,WACA,QAAAA,GAIAz2B,EAKAiV,EAMAzd,EAOAk/B,GACAr1B,KAAArB,QACAqB,KAAA4T,WACA5T,KAAA7J,cACA6J,KAAAq1B,OAEA,MAAAD,MAgBAE,GAAA,WACA,QAAAlC,GAAAmC,EAAAC,EAAAC,GACAz1B,KAAAu1B,aACAv1B,KAAAw1B,cACAx1B,KAAAy1B,cACAz1B,KAAA01B,YAAA,KACA11B,KAAA21B,aAAA,KACA31B,KAAA41B,kBAAA,GAAArK,IAAA,SAAAgB,GACA,MAAAA,GAAA5c,gBAEA3P,KAAA61B,sBACA71B,KAAA81B,kBAAA,GAAAzuB,IAAAtB,GAAAhC,YACA/D,KAAA+1B,qBACA/1B,KAAAg2B,kBAAA,GAAA7E,IACAnxB,KAAAi2B,eAAA,GAAAtG,IAEA3vB,KAAAk2B,yBACAl2B,KAAAm2B,kBAAAxD,GAAAQ,gBA0XA,MAvXAC,GAAA1lC,UAAAg/B,UAAA,SAAAgJ,EAAAC,GACA3oC,EAAA,OAAA0oC,GAAA,OAAAC,EAAA,0CACA3oC,EAAA,OAAAgT,KAAA01B,aAAA,OAAA11B,KAAA21B,aAAA,wCACA31B,KAAA01B,cACA11B,KAAA21B,eACA31B,KAAAi2B,eAAAjG,iBAAAhwB,KAAAg2B,oBAOA5C,EAAA1lC,UAAAo7B,OAAA,SAAAnqB,GACA,GAAA+B,GAAAV,IAGA,OAFAA,MAAAo2B,iBAAA,YACAppC,GAAAgT,KAAA41B,kBAAAre,IAAA5Y,GAAA,mCAAAA,GACAqB,KAAAu1B,WAAAc,cAAA13B,GAAAwuB,KAAA,SAAA7K,GACA,MAAA5hB,GAAA60B,WACAe,aAAA33B,GACAwuB,KAAA,SAAAjU,GACA,MAAAxY,GAAA60B,WACAgB,mBAAAjU,EAAA1O,UACAuZ,KAAA,SAAAqJ,GACA,GAAAnB,GAAA,GAAA9B,IAAA50B,EAAA63B,GACAC,EAAApB,EAAAvB,kBAAA5a,GACAwd,EAAArB,EAAAZ,aAAAgC,EACAzpC,GAAA,IAAA0pC,EAAA/B,aAAArpC,OAAA,+DACA0B,IAAA0pC,EAAAv4B,SAAA,4DACA,IAAAuI,GAAA,GAAA0uB,IAAAz2B,EAAA2jB,EAAA1O,SAAA0O,EAAAnsB,YAAAk/B,EACA30B,GAAAk1B,kBAAA7oB,IAAApO,EAAA+H,GACAhG,EAAAm1B,mBAAAvT,EAAA1O,UAAAlN,EACAhG,EAAAg1B,aAAAgB,EAAAv4B,WACAuC,EAAA80B,YAAA1M,OAAAxG,OAGA6K,KAAA,WACA,MAAA7K,GAAA1O,cAKAwf,EAAA1lC,UAAA0/B,SAAA,SAAAzuB,GACA,GAAA+B,GAAAV,IACAA,MAAAo2B,iBAAA,aACA,IAAAO,GAAA32B,KAAA41B,kBAAAl+B,IAAAiH,EAEA,OADA3R,KAAA2pC,EAAA,yCAAAh4B,GACAqB,KAAAu1B,WAAAqB,aAAAj4B,GAAAwuB,KAAA,WAEA,MADAzsB,GAAA80B,YAAApI,SAAAuJ,EAAA/iB,UACAlT,EAAAm2B,sBAAAF,GAAAxJ,KAAA,WACA,MAAAzsB,GAAA60B,WAAAlF,sBAcA+C,EAAA1lC,UAAAopC,MAAA,SAAAC,EAAAC,GACA,GAAAt2B,GAAAV,IAEA,OADAA,MAAAo2B,iBAAA,WACAp2B,KAAAu1B,WACA0B,WAAAF,GACA5J,KAAA,SAAAt+B,GAEA,MADA6R,GAAAw2B,oBAAAroC,EAAAsoC,QAAAH,GACAt2B,EAAA02B,gCAAAvoC,EAAA87B,WAEAwC,KAAA,WACA,MAAAzsB,GAAA80B,YAAA6B,uBAIAjE,EAAA1lC,UAAA4pC,wBAAA,SAAAhrC,GACA,MAAAA,IAmBA8mC,EAAA1lC,UAAA6pC,eAAA,SAAAC,EAAAC,GACA,GAAA/2B,GAAAV,SACA,KAAAy3B,IAAiCA,EAAA,GACjCzqC,EAAAyqC,GAAA,oDACA,IAAAC,GAAA13B,KAAAw1B,YAAAmC,mBAiBA,OAhBA,YACA,IACA,GAAAC,GAAAJ,EAAAE,EACA,QAAAzkC,EAAA2kC,IACAA,EAAA9I,OACA8I,EAAAzK,KAGAyK,EAAA9I,MAAA,SAAAniC,GACA,MAAA+5B,SAAAtsB,OAAAsG,EAAA42B,wBAAA3qC,MAHA+5B,QAAAtsB,OAAArN,MAAA,+CAMA,MAAAJ,GACA,MAAA+5B,SAAAtsB,OAAAsG,EAAA42B,wBAAA3qC,QAGAwgC,KAAA,SAAAt+B,GACA,MAAA6oC,GACAG,SACA1K,KAAA,WACA,MAAAt+B,KAEAigC,MAAA,SAAAxiC,GACA,WAAAmrC,EACA/Q,QAAAtsB,OAAA9N,GAGAoU,EAAA62B,eAAAC,EAAAC,EAAA,QAIArE,EAAA1lC,UAAAoqC,iBAAA,SAAAC,GACA,GAAAr3B,GAAAV,IAoCA,OAnCAA,MAAAo2B,iBAAA,sBAEA/nC,EAAA0pC,EAAAvf,cAAA,SAAA5E,EAAAwH,GACA,GAAA4c,GAAAt3B,EAAAq1B,kBAAAniB,EACAokB,IACA5c,EAAAtC,sBACA5B,GAAAsE,cACAuc,EAAAtf,gBAAA/gB,IAAAsgC,IAyBAD,EAAArf,kBAAA,GAAAvR,IAAA6wB,EAAAD,EAAAjkB,oBAGA9T,KAAAu1B,WAAAuC,iBAAAC,GAAA5K,KAAA,SAAAxC,GACA,MAAAjqB,GAAA02B,gCAAAzM,EAAAoN,MAGA3E,EAAA1lC,UAAAuqC,aAAA,SAAArkB,EAAA0R,GACA,GAAA5kB,GAAAV,IACAA,MAAAo2B,iBAAA,kBACA,IAAA4B,GAAAh4B,KAAA+1B,kBAAAniB,EACA,IAAAokB,EAAA,CAGAh4B,KAAA81B,kBAAA91B,KAAA81B,kBAAAluB,OAAAowB,SACAh4B,MAAA+1B,kBAAAniB,EAOA,IAAAskB,GAAA,GAAA7wB,IAAAtB,GAAAhC,WACAm0B,KAAAzwB,OAAAuwB,EAAA,GAAA7wB,IAAA6wB,EAAAhlB,GAAAK,iBACA,IAAA8kB,GAAA,GAAA7f,IAAAtF,GAAAM,OAAiE4kB,EACjE,OAAAl4B,MAAA83B,iBAAAK,GAGA,GAAAC,GAAAp4B,KAAA61B,mBAAAjiB,EAEA,OADA5mB,KAAAorC,EAAA,qBAAAxkB,GACA5T,KAAAu1B,WAAAqB,aAAAwB,EAAAz5B,OAAAwuB,KAAA,WACA,MAAAzsB,GAAAm2B,sBAAAuB,GAAAjL,KAAA,WACAzsB,EAAAi1B,aAAAyC,EAAAz5B,MAAA2mB,QAKA8N,EAAA1lC,UAAA2qC,qBAAA,SAAAC,GACA,GAAA53B,GAAAV,IAQA,OAPAA,MAAAo2B,iBAAA,0BAKAp2B,KAAAu4B,oBAAAD,EAAAvB,MAAAI,QACA,MACAn3B,KAAAu1B,WACAiD,iBAAAF,GACAnL,KAAA,SAAAxC,GACA,MAAAjqB,GAAA02B,gCAAAzM,MAGAyI,EAAA1lC,UAAA+qC,kBAAA,SAAAtB,EAAA7qC,GACA,GAAAoU,GAAAV,IAOA,OANAA,MAAAo2B,iBAAA,uBAKAp2B,KAAAu4B,oBAAApB,EAAA7qC,GACA0T,KAAAu1B,WAAAmD,YAAAvB,GAAAhK,KAAA,SAAAxC,GACA,MAAAjqB,GAAA02B,gCAAAzM,MAGAyI,EAAA1lC,UAAAwpC,oBAAA,SAAAC,EAAApS,GACA,GAAA4T,GAAA34B,KAAAk2B,sBAAAl2B,KAAAy1B,YAAAmD,QACAD,KACAA,EAAA,GAAAtxB,IAAAzV,IAEA+mC,IAAAlxB,OAAA0vB,EAAApS,GACA/kB,KAAAk2B,sBAAAl2B,KAAAy1B,YAAAmD,SAAAD,GAMAvF,EAAA1lC,UAAA6qC,oBAAA,SAAApB,EAAA7qC,GACA,GAAAqsC,GAAA34B,KAAAk2B,sBAAAl2B,KAAAy1B,YAAAmD,QAGA,IAAAD,EAAA,CACA,GAAA5T,GAAA4T,EAAAjhC,IAAAy/B,EACApS,KACA/3B,EAAAmqC,IAAAwB,EAAAzwB,SAAA,8CACA5b,EACAy4B,EAAA3qB,OAAA9N,GAGAy4B,EAAA5qB,UAEAw+B,IAAA/wB,OAAAuvB,IAEAn3B,KAAAk2B,sBAAAl2B,KAAAy1B,YAAAmD,SAAAD,IAGAvF,EAAA1lC,UAAAmpC,sBAAA,SAAAF,GAIA,MAHA32B,MAAA41B,kBAAA52B,OAAA23B,EAAAh4B,aACAqB,MAAA61B,mBAAAc,EAAA/iB,UACA5T,KAAAg2B,kBAAAhE,sBAAA2E,EAAA/iB,UACA5T,KAAA64B,oBAEAzF,EAAA1lC,UAAAorC,oBAAA,SAAAllB,EAAA+gB,GACA,OAAAvpC,GAAA,EAAA2tC,EAAApE,EAAuDvpC,EAAA2tC,EAAAztC,OAA4BF,IAAA,CACnF,GAAA4tC,GAAAD,EAAA3tC,EACA4tC,aAAA3F,KACArzB,KAAAg2B,kBAAAtE,aAAAsH,EAAAlrC,IAAA8lB,GACA5T,KAAAi5B,iBAAAD,IAEAA,YAAA1F,KACAtoC,EA1VA,aA0VA,gCAAAguC,EAAAlrC,KACAkS,KAAAg2B,kBAAAnE,gBAAAmH,EAAAlrC,IAAA8lB,IAGAhnB,EAAA,yBAAA+D,KAAAC,UAAAooC,IAGA,MAAAh5B,MAAA64B,oBAEAzF,EAAA1lC,UAAAurC,iBAAA,SAAAD,GACA,GAAAlrC,GAAAkrC,EAAAlrC,GACA,KAAAkS,KAAA81B,kBAAAp+B,IAAA5J,GAAA,CACA9C,EAtWA,aAsWA,0BAAA8C,EACA,IAAAorC,GAAAl5B,KAAAm2B,kBAAArwB,OACAnH,EAAA+O,GAAAS,OAAArgB,EAAA0I,KACAwJ,MAAA+1B,kBAAAmD,GAAAprC,EACAkS,KAAAw1B,YAAA1M,OAAA,GAAApV,IAAA/U,EAAAu6B,EAAAruB,GAAA4X,SACAziB,KAAA81B,kBAAA91B,KAAA81B,kBAAAruB,OAAA3Z,EAAAorC,KAGA9F,EAAA1lC,UAAAmrC,iBAAA,WACA,GAAAn4B,GAAAV,IAGA,OAAAA,MAAAi2B,eACA5F,eAAA,MACAvqB,KAAA,SAAAwR,GACAA,EAAA5oB,QAAA,SAAAZ,GACA,GAAAorC,GAAAx4B,EAAAo1B,kBAAAp+B,IAAA5J,EACA,QAAAorC,IAIAx4B,EAAA80B,YAAApI,SAAA8L,GACAx4B,EAAAo1B,kBAAAp1B,EAAAo1B,kBAAAluB,OAAA9Z,SACA4S,GAAAq1B,kBAAAmD,QAGA/J,aAGAiE,EAAA1lC,UAAAyrC,iBAAA,WACA,MAAAn5B,MAAA81B,mBAEA1C,EAAA1lC,UAAA0pC,gCAAA,SAAAzM,EAAAoN,GACA,GAAAr3B,GAAAV,KACAo5B,KACAC,KACAC,IA2BA,OA1BAt5B,MAAA41B,kBAAAlnC,QAAA,SAAA6C,EAAAolC,GACA2C,EAAA3gC,KAAA+tB,QAAAvsB,UACAgzB,KAAA,WACA,GAAAsJ,GAAAE,EAAAtB,KAAAvB,kBAAAnJ,EACA,OAAA8L,GAAArC,YAMA1zB,EAAA60B,WAAAe,aAAAK,EAAAh4B,OAAAwuB,KAAA,SAAAjU,GACA,MAAAyd,GAAAtB,KAAAvB,kBAAA5a,EAAAud,KANAA,IASAtJ,KAAA,SAAAsJ,GACA,GAAArb,GAAA2c,KAAAvf,cAAAme,EAAA/iB,UACA8iB,EAAAC,EAAAtB,KAAAZ,aAAAgC,EAAArb,EACA,OAAA1a,GAAAo4B,oBAAAnC,EAAA/iB,SAAA8iB,EAAA/B,cAAAxH,KAAA,WACA,GAAAuJ,EAAAv4B,SAAA,CACAi7B,EAAAzgC,KAAA+9B,EAAAv4B,SACA,IAAAI,GAAAsyB,GAAAI,aAAAyF,EAAAv4B,SACAk7B,GAAA1gC,KAAA4F,WAKAmoB,QAAA4I,IAAAgK,GACAnM,KAAA,WAEA,MADAzsB,GAAAg1B,YAAA0D,GACA14B,EAAA60B,WAAAgE,uBAAAF,KAEAlM,KAAA,WACA,MAAAzsB,GAAA60B,WAAAlF,oBAGA+C,EAAA1lC,UAAA0oC,iBAAA,SAAAoD,GACAxsC,EAAA,OAAAgT,KAAA01B,aAAA,OAAA11B,KAAA21B,aAAA,kBAAA6D,EAAA,iCAEApG,EAAA1lC,UAAA+rC,iBAAA,SAAAC,GACA,GAAAh5B,GAAAV,IAEA,OADAA,MAAAy1B,YAAAiE,EACA15B,KAAAu1B,WACAkE,iBAAAC,GACAvM,KAAA,SAAAxC,GACA,MAAAjqB,GAAA02B,gCAAAzM,KAEAwC,KAAA,WACA,MAAAzsB,GAAA80B,YAAAiE,iBAAAC,MAGAtG,KC5cAuG,IAAA,EAIAC,GAAA,WACA,QAAAC,GAAA1C,EAAA/qB,EAAA0tB,GACA95B,KAAAm3B,UACAn3B,KAAAoM,iBACApM,KAAA85B,YAwEA,MA7DAD,GAAAnsC,UAAA+nB,sBAAA,SAAAla,EAAAwZ,EAAAglB,GACAhlB,GACA/nB,EAAA+nB,EAAAjnB,IAAAiE,OAAAwJ,GAAA,8BAAAA,EAAA,uCAAAwZ,EAAAjnB,IAEA,IAAAksC,GAAAD,EAAAC,eACAhtC,GAAAgtC,EAAA1uC,SAAA0U,KAAA85B,UAAAxuC,OAAA,6CAAA0U,KAAA85B,UAAAxuC,OAAA,yCAAA0uC,EAAA1uC,OAAA,KACA,QAAA2G,GAAA,EAAuBA,EAAA+N,KAAA85B,UAAAxuC,OAA2B2G,IAAA,CAClD,GAAAmuB,GAAApgB,KAAA85B,UAAA7nC,EACA,IAAAmuB,EAAAtyB,IAAAiE,OAAAwJ,GAAA,CACA,GAAAma,GAAAskB,EAAA/nC,EACA8iB,GAAAqL,EAAA3K,sBAAAV,EAAAW,IAGA,MAAAX,IASA8kB,EAAAnsC,UAAAioB,iBAAA,SAAApa,EAAAwZ,GACAA,GACA/nB,EAAA+nB,EAAAjnB,IAAAiE,OAAAwJ,GAAA,6BAAAA,EAAA,uCAAAwZ,EAAAjnB,IAEA,QAAAmE,GAAA,EAAuBA,EAAA+N,KAAA85B,UAAAxuC,OAA2B2G,IAAA,CAClD,GAAAmuB,GAAApgB,KAAA85B,UAAA7nC,EACAmuB,GAAAtyB,IAAAiE,OAAAwJ,KACAwZ,EAAAqL,EAAAzK,iBAAAZ,EAAA/U,KAAAoM,iBAGA,MAAA2I,IAEA8kB,EAAAnsC,UAAA4pB,KAAA,WAEA,OADA2iB,GAAAlkC,KACA3K,EAAA,EAAAujB,EAAA3O,KAAA85B,UAA6C1uC,EAAAujB,EAAArjB,OAAgBF,IAAA,CAC7D,GAAAg1B,GAAAzR,EAAAvjB,EACA6uC,KAAAh7B,IAAAmhB,EAAAtyB,KAEA,MAAAmsC,IAEAJ,EAAAnsC,UAAAqE,OAAA,SAAAmQ,GACA,MAAAlC,MAAAm3B,UAAAj1B,EAAAi1B,SACAnlC,EAAAgO,KAAA85B,UAAA53B,EAAA43B,YAUAD,EAAAnsC,UAAAwsC,YAAA,WACA,WAAAl6B,KAAA85B,UAAAxuC,QAGAuuC,EAAAnsC,UAAAysC,YAAA,WACA,UAAAN,GAAA75B,KAAAm3B,QAAAn3B,KAAAoM,oBAEAytB,KAIAO,GAAA,WACA,QAAAC,GAAAtD,EAAAuD,EAAAN,EAAAO,EAKAC,GACAx6B,KAAA+2B,QACA/2B,KAAAs6B,gBACAt6B,KAAAg6B,kBACAh6B,KAAAu6B,cACAv6B,KAAAw6B,cAyBA,MAlBAH,GAAA5Y,KAAA,SAAAsV,EAAAuD,EAAArpC,EAAAspC,GACAvtC,EAAA+pC,EAAA+C,UAAAxuC,SAAA2F,EAAA3F,OAAA,kBACAyrC,EAAA+C,UAAAxuC,OACA,gCACA2F,EAAA3F,OAGA,QAFAmvC,GAAA5kC,KACAikC,EAAA/C,EAAA+C,UACA7nC,EAAA,EAAuBA,EAAA6nC,EAAAxuC,OAAsB2G,IAAA,CAC7C,GAAAwU,GAAAxV,EAAAgB,GAAAwU,OACA,QAAAA,IAGAA,EAAA6zB,GAEAG,IAAAhzB,OAAAqyB,EAAA7nC,GAAAnE,IAAA2Y,GAEA,UAAA4zB,GAAAtD,EAAAuD,EAAArpC,EAAAspC,EAAAE,IAEAJ,K5CzHAviC,GAAA,IACAG,GAAA,IACAF,GAAA,IACAC,GAAA,IC4BA0iC,GAAA,WACA,QAAAA,GAAAxoB,EAAAC,GACAnS,KAAAkS,UACAlS,KAAAmS,QAEA,MAAAuoB,MAWA5gC,GAAA,WACA,QAAAA,GAAA6gC,EAAAC,GACA56B,KAAA26B,UACA36B,KAAA46B,mBAIA,MADA9gC,GAAAb,MAAA,QACAa,KASAd,GAAA,WACA,QAAAA,GAIA6hC,EAOAC,EAUAC,GACA/6B,KAAA66B,SACA76B,KAAA86B,0BACA96B,KAAA+6B,kBAMA,MAHA/hC,GAAAC,MAAA,iBAEAD,EAAAE,QAAA,SACAF,KAUAG,GAAA,WACA,QAAAA,GAIA0hC,EAKA1D,EAKA6D,EAMAlB,GACA95B,KAAA66B,SACA76B,KAAAm3B,UACAn3B,KAAAg7B,mBACAh7B,KAAA85B,YAMA,MAHA3gC,GAAAF,MAAA,YAEAE,EAAAD,SAAA,oBACAC,KAUAS,GAAA,WACA,QAAAqhC,MA+BA,MAzBAA,GAAAC,cAAA,SAAAL,GACA,OAAAA,IAMAI,EAAAE,cAAA,SAAAN,EAAArkC,GACA,OAAAqkC,EAAAtjC,GAAAf,KAMAykC,EAAAntC,IAAA,SAAA+sC,EAAArkC,EAAA2gC,GACA,OAAA0D,EAAAtjC,GAAAf,GAAA2gC,IAEA8D,EAAAhiC,MAAA,oBAOAgiC,EAAAG,YAAA,GAAAH,GACAA,KAOAI,GAAA,WACA,QAAAA,GAAA7kC,EAAA4oB,GACApf,KAAAxJ,OACAwJ,KAAAof,WAEA,MAAAic,MAWAxhC,GAAA,WACA,QAAAA,GAKAyhC,EAKAxc,GACA9e,KAAAs7B,aACAt7B,KAAA8e,WAGA,MADAjlB,GAAAZ,MAAA,kBACAY,KAYAJ,GAAA,WACA,QAAAA,GASAma,EAIAjE,EAMAyP,EAkBAjpB,EAeAolC,EAQA58B,GACAqB,KAAA4T,WACA5T,KAAA2P,cACA3P,KAAAof,WACApf,KAAA7J,cACA6J,KAAAu7B,2BACAv7B,KAAArB,QAaA,MAXAlF,GAAAR,MAAA,UAEAQ,EAAAP,QAAA,WAEAO,EAAAC,sBAAA,oBAMAD,EAAAE,qBAAA,0BACAF,KAQAL,GAAA,WACA,QAAAA,GAIAwa,EAIApd,GACAwJ,KAAA4T,WACA5T,KAAAxJ,OAUA,MAPA4C,GAAAH,MAAA,kBAEAG,EAAAF,SAAA,mBAEAE,EAAAE,qBAAA,uBAEAF,EAAAG,wBAAA,mBACAH,KASAW,GAAA,WACA,QAAAA,GAMAyhC,EAMAC,EASAC,GACA17B,KAAAw7B,kBACAx7B,KAAAy7B,8BACAz7B,KAAA07B,4BAQA,MAFA3hC,GAAAjM,IAAA,kBACAiM,EAAAd,MAAA,eACAc,KAOA4hC,IACA3iC,GAAAC,MACAE,GAAAF,MACAW,GAAAX,MACAY,GAAAZ,MACAQ,GAAAR,MACAa,GAAAb,MACAc,GAAAd,MACAG,GAAAH,OCjYA2iC,GAAA,WACA,QAAAC,GAAAhjC,GACAmH,KAAAnH,KAoFA,MAjFAgjC,GAAAC,aAAA,SAAAvsC,EAAAkX,EAAAs1B,GAGA,MAFA/uC,GAAA6uC,EAAAG,cAAA,mDACAhxC,EAfA,WAeA,oBAAAuE,GACA,GAAA2K,IAAA,SAAAC,EAAAC,GAKA,GAAAH,GAAAgiC,OAAAC,UAAAtT,KAAAr5B,EAAAkX,EACAxM,GAAAI,UAAA,SAAAC,GACA,GAAAzB,GAAAyB,EAAAC,OAAA1L,MACAsL,GAAA,GAAA0hC,GAAAhjC,KAEAoB,EAAAO,QAAA,SAAAF,GACAF,EAAAE,EAAAC,OAAAjO,QAEA2N,EAAAkiC,gBAAA,SAAA7hC,GACAtP,EA9BA,WA8BA,aAAAuE,EAAA,mCAAA+K,EAAAxB,WAOA,IAAAD,GAAAyB,EAAAC,OAAA1L,MACAktC,GAAAljC,EAAAyB,EAAAxB,eAESq2B,aAGT0M,EAAA78B,OAAA,SAAAzP,GAEA,MADAvE,GA5CA,WA4CA,qBAAAuE,GACAyK,GAAAiiC,OAAAC,UAAAE,eAAA7sC,IAAA4/B,aAGA0M,EAAAG,YAAA,WACA,sBAAAC,SAAA,MAAAA,OAAAC,UACA,QASA,IAAAG,GAAAJ,OAAAK,UAAAC,SAQA,SAAAF,EAAA7qC,QAAA,YACA6qC,EAAA7qC,QAAA,eACA6qC,EAAA7qC,QAAA,aAOAqqC,EAAAnuC,UAAA6pC,eAAA,SAAAiF,EAAAC,EAAAC,GACA,GAAAhF,GAAA,GAAA18B,IAAAgF,KAAAnH,GAAA2jC,EAAAC,GACAE,EAAAD,EAAAhF,GACA5I,MAAA,SAAAxiC,GAIA,MADAorC,GAAAkF,QACA1iC,GAAAE,OAAA9N,KAEA6iC,WAIA,OAAAuI,GAAAmF,kBAAA1P,KAAA,WAA+D,MAAAwP,MAE/Dd,EAAAnuC,UAAAw3B,MAAA,WACAllB,KAAAnH,GAAAqsB,SAEA2W,KAQAiB,GAAA,WACA,QAAAA,GAAAC,GACA/8B,KAAA+8B,WACA/8B,KAAAg9B,YAAA,EACAh9B,KAAAi9B,QAAA,KA4CA,MA1CAlvC,QAAA4R,eAAAm9B,EAAApvC,UAAA,UACAgK,IAAA,WACA,MAAAsI,MAAAg9B,YAEAr6B,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAAm9B,EAAApvC,UAAA,aACAgK,IAAA,WACA,MAAAsI,MAAAi9B,SAEAt6B,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAAm9B,EAAApvC,UAAA,UACAqf,IAAA,SAAA7e,GACA8R,KAAA+8B,SAAA7uC,GAEAyU,YAAA,EACAC,cAAA,IAKAk6B,EAAApvC,UAAAwvC,KAAA,WACAl9B,KAAAg9B,YAAA,GAMAF,EAAApvC,UAAAyvC,KAAA,SAAArvC,GACAkS,KAAAi9B,QAAAnvC,GAOAgvC,EAAApvC,UAAAsR,OAAA,WACA,MAAAhF,IAAAgG,KAAA+8B,SAAA/9B,WAEA89B,KAOA9hC,GAAA,WACA,QAAAoiC,GAAAvkC,EAAA2jC,EAAAa,GACA,GAAA38B,GAAAV,IACAA,MAAAs9B,SAAA,EACAt9B,KAAA03B,YAAA7+B,EAAA6+B,YAAA2F,EAAAb,GACAx8B,KAAA68B,kBAAA,GAAAnW,SAAA,SAAAvsB,EAAAC,GAGAsG,EAAAg3B,YAAA6F,QAAA78B,EAAAg3B,YAAA8F,WAAA,SAAAljC,GACAH,KAEAuG,EAAAg3B,YAAAl9B,QAAA,SAAAF,GACAF,EAAAE,EAAAC,OAAAjO,UAyBA,MArBA8wC,GAAA1vC,UAAAkvC,MAAA,WACA58B,KAAAs9B,UACAtyC,EA/KA,WA+KA,yBACAgV,KAAAs9B,SAAA,EACAt9B,KAAA03B,YAAAkF,UAYAQ,EAAA1vC,UAAAuL,MAAA,SAAAwkC,GACA,GAAAxkC,GAAA+G,KAAA03B,YAAAgG,YAAAD,EAEA,OADAzwC,KAAAiM,EAAA,yCAAAwkC,GACA,GAAAE,IAAA1kC,IAEAmkC,KAaAO,GAAA,WACA,QAAAC,GAAA3kC,GACA+G,KAAA/G,QAyIA,MAvIA2kC,GAAAlwC,UAAAmwC,IAAA,SAAAC,EAAA5vC,GACA,GAAA+L,EASA,YARA7L,KAAAF,GACAlD,EAtNA,WAsNA,MAAAgV,KAAA/G,MAAA1J,KAAAuuC,EAAA5vC,GACA+L,EAAA+F,KAAA/G,MAAA4kC,IAAA3vC,EAAA4vC,KAGA9yC,EA1NA,WA0NA,MAAAgV,KAAA/G,MAAA1J,KAAA,aAAAuuC,GACA7jC,EAAA+F,KAAA/G,MAAA4kC,IAAAC,IAEA9jC,GAAAC,IASA2jC,EAAAlwC,UAAAgK,IAAA,SAAA5J,GACA,GAAA4S,GAAAV,IAGA,OAAAhG,IAFAgG,KAAA/G,MAAAvB,IAAA5J,IAEAgY,KAAA,SAAAjX,GAMA,WAJAT,KAAAS,IACAA,EAAA,MAEA7D,EA/OA,WA+OA,MAAA0V,EAAAzH,MAAA1J,KAAAzB,EAAAe,GACAA,KAGA+uC,EAAAlwC,UAAAsR,OAAA,SAAAlR,GAGA,MAFA9C,GApPA,WAoPA,SAAAgV,KAAA/G,MAAA1J,KAAAzB,GAEAkM,GADAgG,KAAA/G,MAAA+F,OAAAlR,KAGA8vC,EAAAlwC,UAAAqwC,QAAA,SAAAC,EAAAnmB,GACA,GAAA4L,GAAAzjB,KAAAyjB,OAAAzjB,KAAA3O,QAAA2sC,EAAAnmB,IACA5mB,IACA,OAAA+O,MAAAi+B,cAAAxa,EAAA,SAAA31B,EAAAI,GACA+C,EAAA0H,KAAAzK,KACS4X,KAAA,WACT,MAAA7U,MAGA2sC,EAAAlwC,UAAAwwC,UAAA,SAAAF,EAAAnmB,GACA7sB,EAlQA,WAkQA,aAAAgV,KAAA/G,MAAA1J,KACA,IAAA8B,GAAA2O,KAAA3O,QAAA2sC,EAAAnmB,EACAxmB,GAAA8sC,UAAA,CACA,IAAA1a,GAAAzjB,KAAAyjB,OAAApyB,EACA,OAAA2O,MAAAi+B,cAAAxa,EAAA,SAAA31B,EAAAI,EAAAkwC,GAOA,MAAAA,GAAAp/B,YAGA4+B,EAAAlwC,UAAA2wC,QAAA,SAAAC,EAAAvZ,GACA,GAAA1zB,EACA0zB,GAKA1zB,EAAAitC,GAJAjtC,KACA0zB,EAAAuZ,EAKA,IAAA7a,GAAAzjB,KAAAyjB,OAAApyB,EACA,OAAA2O,MAAAi+B,cAAAxa,EAAAsB,IAEA6Y,EAAAlwC,UAAAuwC,cAAA,SAAAM,EAAAjwC,GACA,GAAA2C,KACA,WAAAiJ,IAAA,SAAAC,EAAAC,GACAmkC,EAAA/jC,QAAA,SAAAF,GACAF,EAAAE,EAAAC,OAAAjO,QAEAiyC,EAAAlkC,UAAA,SAAAC,GACA,GAAAmpB,GAAAnpB,EAAAC,OAAA1L,MACA,KAAA40B,EAEA,WADAtpB,IAGA,IAAAqkC,GAAA,GAAA1B,IAAArZ,GACAgb,EAAAnwC,EAAAm1B,EAAAib,WAAAjb,EAAAv1B,MAAAswC,EACAC,aAAAvkC,KACAjJ,EAAA0H,KAAA8lC,GAEAD,EAAA5P,OACAz0B,IAEA,OAAAqkC,EAAAG,UACAlb,EAAAmb,WAGAnb,EAAAmb,SAAAJ,EAAAG,cAGS74B,KAAA,WACT,MAAA5L,IAAAm1B,QAAAp+B,MAGA2sC,EAAAlwC,UAAA2D,QAAA,SAAA2sC,EAAAnmB,GACA,GAAAgnB,OAAAzwC,EAUA,YATAA,KAAA4vC,IACA,gBAAAA,GACAa,EAAAb,GAGAhxC,MAAAoB,KAAAypB,EAAA,uDACAA,EAAAmmB,KAGgBv5B,MAAAo6B,EAAAhnB,UAEhB+lB,EAAAlwC,UAAA+1B,OAAA,SAAApyB,GACA,GAAA4yB,GAAA,MAIA,IAHA5yB,EAAAytC,UACA7a,EAAA,QAEA5yB,EAAAoT,MAAA,CACA,GAAAA,GAAAzE,KAAA/G,MAAAwL,MAAApT,EAAAoT,MACA,OAAApT,GAAA8sC,SACA15B,EAAAs6B,cAAA1tC,EAAAwmB,MAAAoM,GAGAxf,EAAAu6B,WAAA3tC,EAAAwmB,MAAAoM,GAIA,MAAAjkB,MAAA/G,MAAA+lC,WAAA3tC,EAAAwmB,MAAAoM,IAGA2Z,KCpVAqB,GAAA,WACA,QAAAC,GAKArE,EAAAsE,GACAn/B,KAAA66B,SACA76B,KAAAm/B,aACAn/B,KAAAyxB,iBAAA,KA8VA,MAvVAyN,GAAAE,QAAA,SAAA1F,EAAAyF,GAOA,MAFAnyC,GAAA,KAAA0sC,EAAA2F,IAAA,uCAEA,GAAAH,GADAxF,EAAA4F,oBAAA,GAAA5F,EAAA2F,IACAF,IAEAD,EAAAxxC,UAAA8K,MAAA,SAAAk/B,GACA,GAAAh3B,GAAAV,IACA,OAAAk/B,GAAAK,sBAAA7H,GACA5xB,KAAA,SAAA05B,GAEA,MADA9+B,GAAA8+B,cACAzkC,GAAA28B,GAAAhgC,IAAAgJ,EAAAm6B,UAEA/0B,KAAA,SAAA25B,GAWA,MAVAA,KACAA,EAAA,GAAAzmC,IAAA0H,EAAAm6B,OAAAlB,GACA,KAEAj5B,EAAA++B,WAMA/+B,EAAA++B,SAAA3E,yBAAAp6B,EAAA8+B,YACA9+B,EAAAg/B,WAAAhI,GAAA5xB,KAAA,SAAA65B,GAGA,MAFA3yC,GAAA2yC,EAAA,8DACAj/B,EAAA++B,SAAA3E,wBAAAnB,GACA5+B,GAAA28B,GAAAmG,IAAAn9B,EAAA++B,YAIAvlC,GAAAC,aAQA+kC,EAAAK,sBAAA,SAAA3kC,GACA,GAAAglC,GAAAjG,EACA,OAAAh/B,IAAAC,GACAyjC,SAAsBS,SAAA,GAAgB,SAAAhxC,EAAAipC,EAAAqH,GACtC,GAAAvD,GAAA/sC,EAAA,EAIA,IAJAA,EAAA,GACA8xC,IACAA,EAAA7I,EAAAI,SAEA,KAAA0D,EAIAuD,EAAAlB,WAEA,CACA,GAAA2C,GAAA3tC,EAAA2oC,EACAuD,GAAAjB,MAAA0C,OAGA/5B,KAAA,WAA+B,MAAA85B,GAAA,KAE/BV,EAAAxxC,UAAAgyC,WAAA,SAAAhI,GACA,GAAAiI,IAAA,EACA9nB,EAAAioB,YAAArwB,MAAAzP,KAAA+/B,cAAAtyB,OAAA3B,mBAAA9L,KAAA+/B,cAAAtyB,OAAA7B,mBACA,OAAAjR,IAAA+8B,GACA2G,SAAsBxmB,SAAe,SAAA/pB,EAAAI,EAAAkwC,GACrCuB,GAAA,EACAvB,EAAAlB,SAEAp3B,KAAA,WAA+B,MAAA65B,MAE/BT,EAAAxxC,UAAAsyC,eAAA,SAAAtI,GACA,MAAAx9B,IAAAC,QAAA6F,KAAAw/B,cAEAN,EAAAxxC,UAAAuyC,8BAAA,SAAAvI,GACA,MAAAx9B,IAAAC,QAAA6F,KAAAy/B,SAAA3E,0BAEAoE,EAAAxxC,UAAA8qC,iBAAA,SAAAd,EAAAX,EAAAwD,GACA,GAAApD,GAAAJ,EAAAI,OAIA,OAHAnqC,GAAAmqC,EAAAn3B,KAAAy/B,SAAA3E,wBAAA,mDACA96B,KAAAy/B,SAAA3E,wBAAA3D,EACAn3B,KAAAy/B,SAAA1E,gBAAAtgC,GAAA8/B,GACAx/B,GAAA28B,GAAAmG,IAAA79B,KAAAy/B,WAEAP,EAAAxxC,UAAAwyC,mBAAA,SAAAxI,GACA,MAAAx9B,IAAAC,QAAA6F,KAAAy/B,SAAA1E,kBAEAmE,EAAAxxC,UAAAyyC,mBAAA,SAAAzI,EAAA6C,GAEA,MADAv6B,MAAAy/B,SAAA1E,gBAAAtgC,GAAA8/B,GACAx/B,GAAA28B,GAAAmG,IAAA79B,KAAAy/B,WAEAP,EAAAxxC,UAAA0yC,iBAAA,SAAA1I,EAAAtrB,EAAA0tB,GACA,GAAAp5B,GAAAV,KACAm3B,EAAAn3B,KAAAw/B,WACAx/B,MAAAw/B,aACA,IAAAzI,GAAA,GAAA6C,IAAAzC,EAAA/qB,EAAA0tB,GACAuG,EAAArgC,KAAAm/B,WAAAmB,kBAAAtgC,KAAA66B,OAAA9D,EACA,OAAAp8B,IAAA+8B,GACAmG,IAAAwC,GACAv6B,KAAA,WAEA,OADAwqB,MACAllC,EAAA,EAAAm1C,EAAAzG,EAAqD1uC,EAAAm1C,EAAAj1C,OAAyBF,IAAA,CAC9E,GAAAg1B,GAAAmgB,EAAAn1C,GAEAo1C,GADAjpC,GAAA6oB,EAAAtyB,IAAA0I,MACAoD,GAAA9L,IAAA4S,EAAAm6B,OAAAza,EAAAtyB,IAAA0I,KAAA2gC,GACAr8B,IAAA48B,GAAAmG,IAAA2C,EAAA5mC,GAAAwhC,aAEA,MAAAlhC,IAAAm1B,QAAAiB,KAEAxqB,KAAA,WACA,MAAAixB,MAGAmI,EAAAxxC,UAAA+yC,oBAAA,SAAA/I,EAAAP,GACA,GAAAz2B,GAAAV,IACA,OAAArF,IAAA+8B,GACAhgC,IAAAsI,KAAA+/B,cAAA5I,IACArxB,KAAA,SAAAu6B,GACA,MAAAA,GAAA3/B,EAAAy+B,WAAAuB,oBAAAL,GAAA,QAGAnB,EAAAxxC,UAAAizC,iCAAA,SAAAjJ,EAAAP,GACA,GAAAz2B,GAAAV,KACA6X,EAAAioB,YAAAc,WAAA5gC,KAAA+/B,cAAA5I,EAAA,IACA0J,EAAA,IACA,OAAAlmC,IAAA+8B,GACA2G,SAAsBxmB,SAAe,SAAA/pB,EAAAuyC,EAAAjC,GACrCiC,EAAAxF,SAAAn6B,EAAAm6B,SACA7tC,EAAAqzC,EAAAlJ,UAAA,oCAAAA,GACA0J,EAAAngC,EAAAy+B,WAAAuB,oBAAAL,IAEAjC,EAAAlB,SAEAp3B,KAAA,WAA+B,MAAA+6B,MAE/B3B,EAAAxxC,UAAAozC,sBAAA,SAAApJ,GACA,GAAAh3B,GAAAV,KACA6X,EAAAioB,YAAArwB,MAAAzP,KAAA+/B,cAAApG,IAAA35B,KAAA+/B,cAAAtyB,OAAA7B,mBACA,OAAAjR,IAAA+8B,GACAqG,QAAAlmB,GACA/R,KAAA,SAAAi7B,GACA,MAAAA,GAAAl1C,IAAA,SAAAw0C,GAAqD,MAAA3/B,GAAAy+B,WAAAuB,oBAAAL,QAGrDnB,EAAAxxC,UAAAszC,oCAAA,SAAAtJ,EAAAP,GACA,GAAAz2B,GAAAV,KACA6X,EAAAioB,YAAArwB,MAAAzP,KAAA+/B,cAAApG,IAAA35B,KAAA+/B,cAAA5I,GACA,OAAAx8B,IAAA+8B,GACAqG,QAAAlmB,GACA/R,KAAA,SAAAi7B,GACA,MAAAA,GAAAl1C,IAAA,SAAAw0C,GAAqD,MAAA3/B,GAAAy+B,WAAAuB,oBAAAL,QAGrDnB,EAAAxxC,UAAAuzC,0CAAA,SAAAvJ,EAAAwJ,GACA,GAAAxgC,GAAAV,KAGAmhC,EAAAvnC,GAAAuhC,cAAAn7B,KAAA66B,OAAAqG,EAAA1qC,MACA4qC,EAAAtB,YAAAc,WAAAO,GACAlwC,IACA,OAAA6J,IAAA48B,GACA2G,SAAsBxmB,MAAAupB,GAAoB,SAAAZ,EAAAjvC,EAAA6sC,GAC1C,GAAAiD,GAAAb,EAAA,GAAAc,EAAAd,EAAA,GAAAe,EAAAf,EAAA,GAQAhqC,EAAA0B,GAAAopC,EACA,IAAAD,IAAA3gC,EAAAm6B,SAAAqG,EAAA1qC,KAAAzE,OAAAyE,GAEA,WADA4nC,GAAAlB,MAGA,IAAAsE,GAAA9gC,EAAAq/B,cAAAwB,EAKA,OAAA5mC,IAAA+8B,GACAhgC,IAAA8pC,GACA17B,KAAA,SAAAu6B,GACA,OAAAA,GACAzzC,EAAA,+CACA4zC,EACA,oBACAgB,GAEAvwC,EAAA0H,KAAA+H,EAAAy+B,WAAAuB,oBAAAL,QAGAv6B,KAAA,WAA+B,MAAA7U,MAE/BiuC,EAAAxxC,UAAA+zC,oCAAA,SAAA/J,EAAA/4B,GACA,GAAA+B,GAAAV,IACAhT,IAAA2R,EAAAlD,kBAAA,+CACA,IAAAimC,GAAA/iC,EAAAnI,KACAmrC,EAAAD,EAAAp2C,OAAA,EAYA61C,EAAAvnC,GAAAuhC,cAAAn7B,KAAA66B,OAAA6G,GAEAN,GADAD,EAAA,GACArB,YAAAc,WAAAO,IAIAS,EAAA,GAAAzqB,IAAAvlB,EACA,OAAAkJ,IAAA48B,GACA2G,SAAsBxmB,MAAAupB,GAAoB,SAAAZ,EAAAjvC,EAAA6sC,GAC1C,GAAAiD,GAAAb,EAAA,GAAAc,EAAAd,EAAA,GAAAe,EAAAf,EAAA,GACAhqC,EAAA0B,GAAAopC,EACA,IAAAD,IAAA3gC,EAAAm6B,SAAA6G,EAAAh9B,WAAAlO,GAEA,WADA4nC,GAAAlB,MAQA1mC,GAAAlL,SAAAq2C,IAGAC,IAAA3iC,IAAAsiC,MAEAz7B,KAAA,WACA,GAAA7U,MACAq/B,IAeA,OAbAsR,GAAAlzC,QAAA,SAAA6yC,GACA,GAAAC,GAAA9gC,EAAAq/B,cAAAwB,EACAjR,GAAA33B,KAAAgC,GAAA+8B,GACAhgC,IAAA8pC,GACA17B,KAAA,SAAAsa,GACA,OAAAA,GACAxzB,EAAA,+DAEA40C,GAEAvwC,EAAA0H,KAAA+H,EAAAy+B,WAAAuB,oBAAAtgB,SAGAlmB,GAAAm1B,QAAAiB,GAAAxqB,KAAA,WAA0E,MAAA7U,QAG1EiuC,EAAAxxC,UAAAm0C,sBAAA,SAAAnK,EAAAoK,GAyBA,OAxBAlnC,GAAAD,GAAA+8B,GACAqK,EAAAjnC,GAAA48B,GACApH,KAqBA0R,EAAAhiC,KACA5U,EAAA,EAAA62C,EAAAH,EAA6C12C,EAAA62C,EAAA32C,OAAuBF,IAAA,CACpE,GAAA2rC,GAAAkL,EAAA72C,IAtBA,SAAA2rC,GACA,GAAAlf,GAAAioB,YAAAoC,KAAAF,EAAAjC,cAAAhJ,EAAAI,UACAgL,EAAA,EACAC,EAAAxnC,EAAAyjC,SAA6CxmB,SAAe,SAAA/pB,EAAAI,EAAAkwC,GAE5D,MADA+D,KACA/D,EAAAp/B,UAEAsxB,GAAA33B,KAAAypC,EAAAt8B,KAAA,WACA9Y,EAAA,IAAAm1C,EAAA,6DACApL,EAAAI,WAEA,QAAA/rC,GAAA,EAAAujB,EAAAooB,EAAA+C,UAAkD1uC,EAAAujB,EAAArjB,OAAgBF,IAAA,CAClE,GAAAg1B,GAAAzR,EAAAvjB,GACAo1C,EAAA5mC,GAAA9L,IAAAk0C,EAAAnH,OAAAza,EAAAtyB,IAAA0I,KAAAugC,EAAAI,QACA7G,GAAA33B,KAAAopC,EAAA/iC,OAAAwhC,IACA,OAAAwB,EAAAvQ,kBACAuQ,EAAAvQ,iBAAArB,uBAAAhQ,EAAAtyB,OAOAipC,GAEA,MAAA78B,IAAAm1B,QAAAiB,IAEA4O,EAAAxxC,UAAA20C,wBAAA,SAAAznC,GACA,GAAA8F,GAAAV,IACA,OAAAA,MAAA0/B,WAAA9kC,GAAAkL,KAAA,SAAA65B,GACA,IAAAA,EACA,MAAAzlC,IAAAC,SAIA,IAAAmoC,GAAAxC,YAAAc,WAAAhnC,GAAAshC,cAAAx6B,EAAAm6B,SACA0H,IACA,OAAAznC,IAAAF,GACAyjC,SAA0BxmB,MAAAyqB,GAAoB,SAAAx0C,EAAAyD,EAAA6sC,GAE9C,GADAtwC,EAAA,KACA4S,EAAAm6B,OAEA,WADAuD,GAAAlB,MAIA,IAAA1mC,GAAA0B,GAAApK,EAAA,GACAy0C,GAAA5pC,KAAAnC,KAGAsP,KAAA,WACA9Y,EAAA,IAAAu1C,EAAAj3C,OAAA,8FACAi3C,EAAA12C,IAAA,SAAAyU,GAAiE,MAAAA,GAAAyE,0BAIjEm6B,EAAAxxC,UAAAwiC,oBAAA,SAAAsS,GACAxiC,KAAAyxB,iBAAA+Q,GAEAtD,EAAAxxC,UAAAkjC,YAAA,SAAAh2B,EAAA9M,GACA,GAAA4S,GAAAV,KACAwgC,EAAA5mC,GAAAuhC,cAAAn7B,KAAA66B,OAAA/sC,EAAA0I,MACA8qC,EAAAd,EAAA,GACA8B,EAAAxC,YAAAc,WAAAJ,GACA5P,GAAA,CACA,OAAA91B,IAAAF,GACAyjC,SAAsBxmB,MAAAyqB,EAAAnE,UAAA,GAAoC,SAAArwC,EAAAyD,EAAA6sC,GAC1D,GAAAiD,GAAAvzC,EAAA,GAAAoL,EAAApL,EAAA,EAAAA,GAAA,GACAuzC,IAAA3gC,EAAAm6B,QAAA3hC,IAAAooC,IACA1Q,GAAA,GAEAwN,EAAAlB,SAEAp3B,KAAA,WAA+B,MAAA8qB,MAM/BsO,EAAAxxC,UAAAqyC,cAAA,SAAA5I,GACA,OAAAn3B,KAAA66B,OAAA1D,IAEA+H,KCtWAuD,GAAA,WACA,QAAAC,GAAAvD,GACAn/B,KAAAm/B,aAKAn/B,KAAA07B,0BAAA1oB,GAAAM,IAIAtT,KAAAy/B,SAAA,GAAA1lC,IACA,EACA,EAAAiZ,GAAAM,IAAAE,eAEAxT,KAAAyxB,iBAAA,KA2JA,MAzJAiR,GAAAh1C,UAAA8K,MAAA,SAAAk/B,GACA,GAAAh3B,GAAAV,IACA,OAAA7E,IAAAu8B,GACAhgC,IAAAqC,GAAAjM,KACAgY,KAAA,SAAA25B,GACA,UAAAA,EAAA,CACA/+B,EAAA++B,UACA,IAAAkD,GAAAlD,EAAA/D,yBACAh7B,GAAAg7B,0BAAA1oB,GAAAI,cAAA,GAAApB,IAAA2wB,EAAAzwB,QAAAywB,EAAAxwB,QAEA,MAAAjY,IAAAC,aAGAuoC,EAAAh1C,UAAAk1C,mBAAA,WACA,MAAA5iC,MAAAy/B,SAAAjE,iBAEAkH,EAAAh1C,UAAAm1C,6BAAA,WACA,MAAA7iC,MAAA07B,2BAEAgH,EAAAh1C,UAAAo1C,6BAAA,SAAApL,EAAA5jB,GAGA,MAFA9T,MAAA07B,0BAAA5nB,EACA9T,KAAAy/B,SAAA/D,0BAAA5nB,EAAAN,cACArY,GAAAu8B,GAAAmG,IAAA9jC,GAAAjM,IAAAkS,KAAAy/B,WAEAiD,EAAAh1C,UAAAq1C,aAAA,SAAArL,EAAApV,GACA,GAAA5hB,GAAAV,KACA4T,EAAA0O,EAAA1O,SACAovB,EAAA/nC,GAAAy8B,GAAAmG,IAAA79B,KAAAm/B,WAAA8D,WAAA3gB,GACA,OAAA1O,GAAA5T,KAAAy/B,SAAAjE,iBACAx7B,KAAAy/B,SAAAjE,gBAAA5nB,EACAovB,EAAAl9B,KAAA,WACA,MAAA3K,IAAAu8B,GAAAmG,IAAA9jC,GAAAjM,IAAA4S,EAAA++B,aAIAuD,GAGAN,EAAAh1C,UAAAw1C,gBAAA,SAAAxL,EAAApV,GACA,MAAAtiB,MAAAmjC,8BAAAzL,EAAApV,EAAA1O,UAAA9N,KAAA,WACA7K,GAAAy8B,GAAA14B,OAAAsjB,EAAA1O,aAGA8uB,EAAAh1C,UAAA01C,aAAA,SAAA1L,EAAA/4B,GACA,GAAA+B,GAAAV,KAIA2P,EAAAhR,EAAAgR,cACAkI,EAAAioB,YAAArwB,OAAAE,EAAAlC,OAAA3B,oBAAA6D,EAAAlC,OAAA7B,oBACA/c,EAAA,IACA,OAAAoM,IAAAy8B,GACA2G,SAAsBxmB,QAAApT,MAAAhL,GAAAC,uBAAsD,SAAA5L,EAAAI,EAAAkwC,GAC5E,GAAAnf,GAAAve,EAAAy+B,WAAAkE,aAAAn1C,EAGAyQ,GAAA5M,OAAAktB,EAAAtgB,SACA9P,EAAAowB,EACAmf,EAAAlB,UAGAp3B,KAAA,WAA+B,MAAAjX,MAE/B6zC,EAAAh1C,UAAA41C,gBAAA,SAAA1oC,EAAA0c,EAAA1D,GAGA,GAAA0c,MACAr3B,EAAAmC,GAAAR,EAKA,OAJA0c,GAAA5oB,QAAA,SAAAZ,GACA,GAAA0I,GAAAe,GAAAzJ,EAAA0I,KACA85B,GAAA33B,KAAAM,EAAA4kC,IAAA,GAAAzkC,IAAAwa,EAAApd,OAEA0D,GAAAm1B,QAAAiB,IAEAoS,EAAAh1C,UAAA61C,mBAAA,SAAA3oC,EAAA0c,EAAA1D,GACA,GAAAlT,GAAAV,KAGAswB,KACAr3B,EAAAmC,GAAAR,EAQA,OAPA0c,GAAA5oB,QAAA,SAAAZ,GACA,GAAA0I,GAAAe,GAAAzJ,EAAA0I,KACA85B,GAAA33B,KAAAM,EAAA+F,QAAA4U,EAAApd,KACA,OAAAkK,EAAA+wB,kBACA/wB,EAAA+wB,iBAAArB,uBAAAtiC,KAGAoM,GAAAm1B,QAAAiB,IAEAoS,EAAAh1C,UAAAy1C,8BAAA,SAAAvoC,EAAAgZ,GACA,GAAA3a,GAAAmC,GAAAR,GACAid,EAAAioB,YAAArwB,OAAAmE,MAAA,IACA,GACA,EACA,OAAA5T,MAAAwjC,uBAAA5oC,EAAAid,GAAA/R,KAAA,WACA,MAAA7M,GAAA+F,OAAA6Y,MAGA6qB,EAAAh1C,UAAA81C,uBAAA,SAAA5oC,EAAAid,GACA,GAAAnX,GAAAV,KACA/G,EAAAmC,GAAAR,EACA,eAAAoF,KAAAyxB,kBAAAzxB,KAAAyxB,iBAAA5B,QAGA52B,EAAAolC,SAAkCxmB,QAAAsmB,UAAA,GAA+B,SAAArwC,EAAAyD,EAAA6sC,GACjE,GAAA5nC,GAAA0B,GAAApK,EAAA,IACAyN,EAAA,GAAAwK,IAAAvP,EAGAxJ,GAAA,OAAA0T,EAAA+wB,iBAAA,oEACA/wB,EAAA+wB,iBAAArB,uBAAA70B,KAIArB,GAAAC,WAGAuoC,EAAAh1C,UAAA+1C,2BAAA,SAAA7oC,EAAAgZ,GACA,GACAiE,GAAAioB,YAAArwB,OAAAmE,MAAA,IACA,GACA,GACA3a,EAAAmC,GAAAR,GACA/L,EAAAkH,IACA,OAAAkD,GACAolC,SAAsBxmB,QAAAsmB,UAAA,GAA+B,SAAArwC,EAAAyD,EAAA6sC,GACrD,GAAA5nC,GAAA0B,GAAApK,EAAA,IACAyN,EAAA,GAAAwK,IAAAvP,EACA3H,KAAAoQ,IAAA1D,KAEAuK,KAAA,WAA+B,MAAAjX,MAE/B6zC,EAAAh1C,UAAAwiC,oBAAA,SAAAsS,GACAxiC,KAAAyxB,iBAAA+Q,GAEAE,EAAAh1C,UAAAkjC,YAAA,SAAAh2B,EAAA9M,GACAd,EAAA,OAAA4N,EAAA,qEACA,IAAApE,GAAAe,GAAAzJ,EAAA0I,MACAqhB,EAAAioB,YAAArwB,OAAAjZ,IAAA/D,EAAA+D,KACA,GACA,GACAygB,EAAA,CACA,OAAA7b,IAAAR,GACAyjC,SACA55B,MAAArL,GAAAE,qBACA6kC,UAAA,EACAtmB,SACS,SAAA/pB,EAAAyD,EAAA6sC,GACTnnB,IACAmnB,EAAAlB,SAEAp3B,KAAA,WAA+B,MAAAmR,GAAA,KAE/ByrB,KC/KAgB,GAAA,WACA,QAAAC,GAAAxE,GACAn/B,KAAAm/B,aAqCA,MAnCAwE,GAAAj2C,UAAAk2C,SAAA,SAAAlM,EAAAmM,GACA,MAAAxoC,IAAAq8B,GAAAmG,IAAAviC,GAAAuoC,EAAA/1C,KAAAkS,KAAAm/B,WAAA2E,mBAAAD,KAEAF,EAAAj2C,UAAAq2C,YAAA,SAAArM,EAAAwJ,GACA,MAAA7lC,IAAAq8B,GAAA14B,OAAA1D,GAAA4lC,KAEAyC,EAAAj2C,UAAAs2C,SAAA,SAAAtM,EAAAwJ,GACA,GAAAxgC,GAAAV,IACA,OAAA3E,IAAAq8B,GACAhgC,IAAA4D,GAAA4lC,IACAp7B,KAAA,SAAAm+B,GACA,MAAAA,GACAvjC,EAAAy+B,WAAA+E,qBAAAD,GACA,QAGAN,EAAAj2C,UAAAy2C,0BAAA,SAAAzM,EAAA/4B,GACA,GAAA+B,GAAAV,KACA/O,EAAA0E,IAGAqT,EAAArK,EAAAnI,KAAAgF,UACAqc,EAAAioB,YAAAc,WAAA53B,EACA,OAAA3N,IAAAq8B,GACA2G,SAAsBxmB,SAAe,SAAA/pB,EAAAm2C,EAAA7F,GACrC,GAAArpB,GAAArU,EAAAy+B,WAAA+E,qBAAAD,EACAtlC,GAAAnI,KAAAkO,WAAAqQ,EAAAjnB,IAAA0I,MAGAue,YAAAxO,KAAA5H,EAAAsR,QAAA8E,KACA9jB,IAAAwW,OAAAsN,EAAAjnB,IAAAinB,IAHAqpB,EAAAlB,SAMAp3B,KAAA,WAA+B,MAAA7U,MAE/B0yC,KCnCAS,GAAA,WACA,QAAAC,GAAAC,GACAtkC,KAAAskC,mBAgFA,MA7EAD,GAAA32C,UAAAw2C,qBAAA,SAAAK,GACA,GAAAA,EAAAzlB,SACA,MAAA9e,MAAAskC,iBAAAvlB,aAAAwlB,EAAAzlB,SAEA,IAAAylB,EAAAjJ,WAAA,CACA,GAAAxtC,GAAAiY,GAAAK,aAAAm+B,EAAAjJ,WAAA9kC,MACA4oB,EAAAmlB,EAAAjJ,WAAAlc,SACAlM,EAAA,GAAAlB,IAAAoN,EAAAlN,QAAAkN,EAAAjN,MACA,WAAAhL,IAAArZ,EAAAklB,GAAAI,cAAAF,IAGA,MAAAtmB,GAAA,gCAIAy3C,EAAA32C,UAAAo2C,mBAAA,SAAA/uB,GACA,GAAAA,YAAAxO,IAAA,CACA,GAAA/H,GAAAwB,KAAAskC,iBAAAzlB,WAAA9J,EACA,WAAAlb,IAAA,KAAA2E,GAGA,GAAAhI,GAAAue,EAAAjnB,IAAA0I,KAAAgF,UACA0X,EAAA6B,EAAAtO,QAAA+M,cACA4L,EAAA,GAAAsb,IAAAxnB,EAAAhB,QAAAgB,EAAAf,MACA,WAAAtY,IAAA,GAAAwhC,IAAA7kC,EAAA4oB,GAAA,OAIAilB,EAAA32C,UAAA4yC,kBAAA,SAAAzF,EAAA9D,GACA,GAAAr2B,GAAAV,KACAwkC,EAAAzN,EAAA+C,UAAAjuC,IAAA,SAAA44C,GACA,MAAA/jC,GAAA4jC,iBAAAnkB,WAAAskB,IAEA,WAAAtrC,IAAA0hC,EAAA9D,EAAAI,QAAAJ,EAAA3qB,eAAA2G,sBAAAyxB,IAGAH,EAAA32C,UAAAgzC,oBAAA,SAAAL,GACA,GAAA3/B,GAAAV,KACA85B,EAAAuG,EAAAvG,UAAAjuC,IAAA,SAAA44C,GACA,MAAA/jC,GAAA4jC,iBAAA5jB,aAAA+jB,KAEAvxB,EAAAlB,GAAAK,sBAAAguB,EAAArF,iBACA,WAAApB,IAAAyG,EAAAlJ,QAAAjkB,EAAA4mB,IAGAuK,EAAA32C,UAAA21C,aAAA,SAAAqB,GACA,GAEA/lC,GAFAygB,EAAA,GAAApN,IAAA0yB,EAAAtlB,SAAAlN,QAAAwyB,EAAAtlB,SAAAjN,OACA1L,EAAAuM,GAAAI,cAAAgM,EAQA,OALAzgB,GADAlD,GAAAipC,EAAA/lC,OACAqB,KAAAskC,iBAAAljB,oBAAAsjB,EAAA/lC,OAGAqB,KAAAskC,iBAAAviB,gBAAA2iB,EAAA/lC,OAEA,GAAA+U,IAAA/U,EAAA+lC,EAAA9wB,SAAA/I,GAAA4X,OAAAhc,EAAAi+B,EAAAvuC,cAGAkuC,EAAA32C,UAAAu1C,WAAA,SAAA3gB,GACAt1B,EAAA6d,GAAA4X,SAAAH,EAAAzO,QAAA,6BACAhJ,GAAA4X,OACA,uBACAH,EAAAzO,QACA,IAEA8wB,GAFAzxB,EAAAoP,EAAAxO,gBAAAN,cACAoxB,EAAA,GAAAlK,IAAAxnB,EAAAhB,QAAAgB,EAAAf,MAGAwyB,GADAriB,EAAA3jB,MAAAlD,kBACAuE,KAAAskC,iBAAAnjB,kBAAAmB,EAAA3jB,OAGAqB,KAAAskC,iBAAAhjB,cAAAgB,EAAA3jB,OAEA3R,EAAA,gBAAAs1B,GAAAnsB,YAAA,oDACA,IAAAA,GAAAmsB,EAAAnsB,WAEA,WAAAsD,IAAA6oB,EAAA1O,SAAA0O,EAAA3jB,MAAAgR,cAAAi1B,EAAAzuC,EAAA,EAAAwuC,IAEAN,KuCvEAQ,GAAA,oKAmCAC,GAAA,WACA,QAAAC,GAAAC,EAAA7F,GACAn/B,KAAA26B,QAAA36B,KAAAilC,kBACAjlC,KAAAklC,OAAAF,EAAAD,EAAAI,cACAnlC,KAAAm/B,WAAA,GAAAiF,IAAAjF,GACAn/B,KAAAolC,mBAAAJ,EAwQA,MAtQAD,GAAAr3C,UAAA8K,MAAA,WACA,GAAAkI,GAAAV,IACA,OAAA+kC,GAAA/I,eAIAhvC,GAAAgT,KAAAqlC,QAAA,wCACArlC,KAAAqlC,SAAA,EACAzJ,GAAAE,aAAA97B,KAAAklC,O5CpEA,E4CoEAtsC,IACAu0B,KAAA,SAAAt0B,GACA6H,EAAA4kC,SAAAzsC,IAEAs0B,KAAA,WAA+B,MAAAzsB,GAAA6kC,yBAC/BpY,KAAA,WACAzsB,EAAA8kC,8BACA9kC,EAAA+kC,6BAZAzlC,KAAA0lC,iBAAA,GAAAn4C,IAAAC,GAAAoF,cA1CA,sIA2CA8zB,QAAAtsB,OAAA4F,KAAA0lC,oBAcAX,EAAAr3C,UAAAi4C,SAAA,WACA,GAAAjlC,GAAAV,IAKA,OAJAhT,GAAAgT,KAAAqlC,QAAA,gDACArlC,KAAAqlC,SAAA,EACArlC,KAAA4lC,yBACA5lC,KAAA6lC,0BACA7lC,KAAA8lC,oBAAA3Y,KAAA,WACAzsB,EAAA4kC,SAAApgB,WAGA6f,EAAAr3C,UAAAq4C,iBAAA,SAAArM,GACA,MAAAuF,IAAAG,QAAA1F,EAAA15B,KAAAm/B,aAEA4F,EAAAr3C,UAAAs4C,cAAA,WACA,UAAAvD,IAAAziC,KAAAm/B,aAEA4F,EAAAr3C,UAAAu4C,uBAAA,WACA,UAAAvC,IAAA1jC,KAAAm/B,aAEA4F,EAAAr3C,UAAA6pC,eAAA,SAAAlvB,EAAA69B,GACA,GAAAxlC,GAAAV,IACA,OAAAA,MAAA0lC,iBACAhf,QAAAtsB,OAAA4F,KAAA0lC,mBAEA16C,EA5FA,uBA4FA,wBAAAqd,GAGArI,KAAAslC,SAAA/N,eAAA,YAAAoE,GAAA,SAAA/gC,GAEA,MAAA8F,GAAAylC,iBAAAvrC,GAAAkL,KAAA,WAAiE,MAAAogC,GAAAtrC,SAGjEmqC,EAAA/I,YAAA,WACA,MAAAJ,IAAAI,eAMA+I,EAAAqB,mBAAA,SAAAzc,GAQA,GAAArmB,GAAAqmB,EAAA7mB,WAAAO,SAIA,OAHAsmB,GAAA7mB,WAAAujC,oBACA/iC,GAAA,IAAAqmB,EAAA7mB,WAAAQ,UAEA,aAAAqmB,EAAA5mB,eAAA,IAAAO,EAAA,KAMAyhC,EAAAr3C,UAAA63C,qBAAA,WACA,GAAA7kC,GAAAV,IAGA,OAAAA,MAAAslC,SAAA/N,eAAA,aAAAz9B,GAAAb,OAAA,SAAA2B,GACA,GAAA3B,GAAA2B,EAAA3B,MAAAa,GAAAb,MACA,OAAAA,GAAAvB,IAAA,SAAAoO,KAAA,SAAAwgC,GACA,GAAA5lC,EAAA6lC,WAAAD,GAQA,MAFAt7C,GA1IA,uBA0IA,+CAAAs7C,GACA5lC,EAAAglC,iBAAA,GAAAn4C,IAAAC,GAAAuH,oBAAA8vC,IACA3qC,GAAAE,OAAAsG,EAAAglC,iBAPA,IAAAc,GAAA,GAAA1sC,IAAA4G,EAAAi6B,QAAAjvC,KAAA0mB,MAEA,OADApnB,GAtIA,uBAsIA,wDAAAs7C,EAAA,aAAAE,GACAvtC,EAAA4kC,IAAA,QAAA2I,QAWAzB,EAAAr3C,UAAAo4C,kBAAA,WACA,GAAAplC,GAAAV,IAGA,OAAAA,MAAAslC,SAAA/N,eAAA,aAAAz9B,GAAAb,OAAA,SAAA2B,GACA,GAAA3B,GAAA2B,EAAA3B,MAAAa,GAAAb,MACA,OAAAA,GAAAvB,IAAA,SAAAoO,KAAA,SAAAwgC,GACA,cAAAA,KAAA3L,UAAAj6B,EAAAi6B,SACA3vC,EA1JA,uBA0JA,0BACAiO,EAAA+F,OAAA,UAGA9E,GAAAC,eAUA4qC,EAAAr3C,UAAAy4C,iBAAA,SAAAvrC,GACA,GAAA8F,GAAAV,IAEA,OADApF,GAAA3B,MAAAa,GAAAb,OACAvB,IAAA,SAAAoO,KAAA,SAAAwgC,GACA,cAAAA,KAAA3L,UAAAj6B,EAAAi6B,SACAj6B,EAAAglC,iBAAA,GAAAn4C,IAAAC,GAAAuH,oBAAA8vC,IACA3qC,GAAAE,OAAAsG,EAAAglC,mBAGAxrC,GAAAC,aAWA4qC,EAAAr3C,UAAA64C,WAAA,SAAAD,GACA,GAAAl0B,GAAA1mB,KAAA0mB,MACAq0B,EAAAr0B,EA5LA,IA6LAs0B,EAAAt0B,CACA,gBAAAk0B,GAGAA,EAAA1L,iBAAA6L,IAGAH,EAAA1L,iBAAA8L,GACAt6C,EAAA,wDAAAk6C,GACA,GAEAA,EAAA3L,UAAA36B,KAAA2mC,uBAWA5B,EAAAr3C,UAAA83C,4BAAA,WACA,GAAA9kC,GAAAV,IAIAA,MAAA4mC,wBAAAC,YAAA,WACAnmC,EAAA62B,eAAA,mCAAA38B,GAIA,MADAA,GAAA3B,MAAAa,GAAAb,OACA4kC,IAAA,WAAA/jC,IAAA4G,EAAAi6B,QAAAjvC,KAAA0mB,UAEA0c,MAAA,SAAAgY,GAGA16C,EAAA06C,GACApmC,EAAAmlC,6BAjOA,MAqOAd,EAAAr3C,UAAAm4C,wBAAA,WACA7lC,KAAA4mC,0BACAG,cAAA/mC,KAAA4mC,yBACA5mC,KAAA4mC,wBAAA,OAYA7B,EAAAr3C,UAAA+3C,uBAAA,WACA,GAAA/kC,GAAAV,IACAA,MAAAgnC,oBAAA,WAEAtmC,EAAAumC,kBAAAvmC,EAAAi6B,SAGAj6B,EAAAilC,YAEA1J,OAAAiL,iBAAA,SAAAlnC,KAAAgnC,sBAEAjC,EAAAr3C,UAAAk4C,uBAAA,WACA5lC,KAAAgnC,sBACA/K,OAAAkL,oBAAA,SAAAnnC,KAAAgnC,qBACAhnC,KAAAgnC,oBAAA,OAQAjC,EAAAr3C,UAAAi5C,kBAAA,WACA,IACA,GAAAS,GAAAnL,OAAAoL,aAAAC,QAAAtnC,KAAAunC,8BAEA,OADAv8C,GAjRA,uBAiRA,qCAAAo8C,GACAA,EAEA,MAAAz6C,GAGA,MADAP,GAAA,iCAAAO,GACA,OAOAo4C,EAAAr3C,UAAAu5C,kBAAA,SAAAO,GACA,IACA,OAAAA,EACAvL,OAAAoL,aAAAI,WAAAznC,KAAAunC,+BAGAtL,OAAAoL,aAAAK,QAAA1nC,KAAAunC,8BAAAC,GAGA,MAAA76C,GAEAP,EAAA,iCAAAO,KAGAo4C,EAAAr3C,UAAA65C,4BAAA,WACA,MAAAvnC,MAAAolC,mBAvSA,kBAySAL,EAAAr3C,UAAAu3C,gBAAA,WAEA,MAAArkC,IAAAE,SAMAikC,EAAAI,cAAA,OACAJ,KCxTA4C,GAAA,WACA,QAAAC,GAAAC,EAAAC,GACA9nC,KAAA6nC,sBACA7nC,KAAA8nC,gBA2JA,MAnJAF,GAAAl6C,UAAAq6C,YAAA,SAAArQ,EAAA5pC,GACA,GAAA4S,GAAAV,IACA,OAAAA,MAAA6nC,oBACA7D,SAAAtM,EAAA5pC,GACAgY,KAAA,SAAAy+B,GACA,MAAA7jC,GAAAsnC,qBAAAtQ,EAAA5pC,EAAAy2C,MASAqD,EAAAl6C,UAAAu6C,aAAA,SAAAvQ,EAAApgB,GACA,GAAA5W,GAAAV,KACAswB,KACAr/B,EAAAwE,GAUA,OATA6hB,GAAA5oB,QAAA,SAAAZ,GACAwiC,EAAA33B,KAAA+H,EAAAqnC,YAAArQ,EAAA5pC,GAAAgY,KAAA,SAAAiP,GAEAA,IACAA,EAAA,GAAA5N,IAAArZ,EAAAklB,GAAAK,kBAEApiB,IAAAwW,OAAA3Z,EAAAinB,QAGA7a,GAAAm1B,QAAAiB,GAAAxqB,KAAA,WAAsE,MAAA7U,MAGtE22C,EAAAl6C,UAAAy2C,0BAAA,SAAAzM,EAAA/4B,GACA,MAAAoH,IAAAE,cAAAtH,EAAAnI,MACAwJ,KAAAkoC,kCAAAxQ,EAAA/4B,EAAAnI,MAGAwJ,KAAAmoC,oCAAAzQ,EAAA/4B,IAGAipC,EAAAl6C,UAAAw6C,kCAAA,SAAAxQ,EAAAnnB,GAEA,MAAAvQ,MAAA+nC,YAAArQ,EAAA,GAAA3xB,IAAAwK,IAAAzK,KAAA,SAAAiP,GACA,GAAAlmB,GAAA8G,GAIA,OAHAof,aAAAxO,MACA1X,IAAA4Y,OAAAsN,EAAAjnB,IAAAinB,IAEAlmB,KAGA+4C,EAAAl6C,UAAAy6C,oCAAA,SAAAzQ,EAAA/4B,GACA,GAKA1N,GALAyP,EAAAV,IAMA,OAAAA,MAAA6nC,oBACA1D,0BAAAzM,EAAA/4B,GACAmH,KAAA,SAAAsiC,GACA,MAAA1nC,GAAA2nC,sBAAA3Q,EAAA0Q,KAEAtiC,KAAA,SAAAwiC,GAIA,MAHAr3C,GAAAq3C,EAGA5nC,EAAAonC,cAAArG,oCAAA/J,EAAA/4B,KAEAmH,KAAA,SAAAyiC,GAEA,OADAC,GAAAzyC,KACA3K,EAAA,EAAAq9C,EAAAF,EAAiFn9C,EAAAq9C,EAAAn9C,OAAuCF,IAExH,OADA2rC,GAAA0R,EAAAr9C,GACAujB,EAAA,EAAAiB,EAAAmnB,EAAA+C,UAAsDnrB,EAAAiB,EAAAtkB,OAAgBqjB,IAAA,CACtE,GAAAyR,GAAAxQ,EAAAjB,EAGA1d,GAAAyG,IAAA0oB,EAAAtyB,OACA06C,IAAAvpC,IAAAmhB,EAAAtyB,MAKA,GAAAwiC,KAQA,OAPAkY,GAAA95C,QAAA,SAAAZ,GACAwiC,EAAA33B,KAAA+H,EAAAqnC,YAAArQ,EAAA5pC,GAAAgY,KAAA,SAAAtH,GACAA,YAAA+H,MACAtV,IAAAwW,OAAAjJ,EAAA1Q,IAAA0Q,SAIAtE,GAAAm1B,QAAAiB,KAEAxqB,KAAA,WAQA,MALA7U,GAAAvC,QAAA,SAAAZ,EAAA0Q,GACAG,EAAAsR,QAAAzR,KACAvN,IAAA2W,OAAA9Z,MAGAmD,KAYA22C,EAAAl6C,UAAAs6C,qBAAA,SAAAtQ,EAAAwJ,EAAApiB,GACA,MAAA9e,MAAA8nC,cACA7G,0CAAAvJ,EAAAwJ,GACAp7B,KAAA,SAAAg8B,GACA,OAAA12C,GAAA,EAAA62C,EAAAH,EAAiD12C,EAAA62C,EAAA32C,OAAuBF,IAAA,CACxE,GAAA2rC,GAAAkL,EAAA72C,EACA0zB,GAAAiY,EAAAphB,iBAAAurB,EAAApiB,GAEA,MAAAA,MAWA8oB,EAAAl6C,UAAA26C,sBAAA,SAAA3Q,EAAA/7B,GACA,GAAA+E,GAAAV,KACAswB,IAcA,OAbA30B,GAAAjN,QAAA,SAAAZ,EAAA0Q,GACA8xB,EAAA33B,KAAA+H,EAAAsnC,qBAAAtQ,EAAA5pC,EAAA0Q,GAAAsH,KAAA,SAAA4iC,GACAA,YAAAniC,IACA5K,IAAA8L,OAAAihC,EAAA56C,IAAA46C,GAEAA,YAAAvhC,IACAxL,IAAAiM,OAAA8gC,EAAA56C,KAGAlB,EAAA,0BAAA87C,QAIAxuC,GAAAm1B,QAAAiB,GAAAxqB,KAAA,WAAsE,MAAAnK,MAEtEisC,KC3JAe,GAAA,WACA,QAAAC,GAAAf,GACA7nC,KAAA6nC,sBACA7nC,KAAA2qB,QAAAl1B,IAiDA,MA9CAmzC,GAAAl7C,UAAAk2C,SAAA,SAAAC,GACA,GAAAlZ,GAAA3qB,KAAA6oC,eACA7oC,MAAA2qB,UAAAljB,OAAAo8B,EAAA/1C,IAAA+1C,IAcA+E,EAAAl7C,UAAAs2C,SAAA,SAAAtM,EAAAwJ,GACA,GAAAvW,GAAA3qB,KAAA6oC,gBACAC,EAAAne,EAAAjzB,IAAAwpC,EACA,OAAA4H,GACA5uC,GAAAC,QAAA2uC,GAGA9oC,KAAA6nC,oBAAA7D,SAAAtM,EAAAwJ,IAOA0H,EAAAl7C,UAAAzB,MAAA,SAAAyrC,GACA,GAAAh3B,GAAAV,KACA2qB,EAAA3qB,KAAA6oC,gBACAvY,IAMA,OALA3F,GAAAj8B,QAAA,SAAAZ,EAAAinB,GACAub,EAAA33B,KAAA+H,EAAAmnC,oBAAAjE,SAAAlM,EAAA3iB,MAGA/U,KAAA2qB,QAAA,KACAzwB,GAAAm1B,QAAAiB,IAGAsY,EAAAl7C,UAAAm7C,cAAA,WAEA,MADA77C,GAAA,OAAAgT,KAAA2qB,QAAA,sCACA3qB,KAAA2qB,SAEAie,KCDAG,GAAA,WACA,QAAA7V,GAEA8V,EAAAC,EAMAxX,GACAzxB,KAAAgpC,cACAhpC,KAAAyxB,mBAIAzxB,KAAAkpC,oBAAA,GAAA/X,IAEAnxB,KAAAga,aAEAha,KAAAm2B,kBAAAxD,GAAAM,gBAWAjzB,KAAAmpC,oBACAnpC,KAAA8nC,cAAAkB,EAAAjD,iBAAAkD,GACAjpC,KAAAopC,gBAAAJ,EAAA/C,yBACAjmC,KAAAqpC,WAAAL,EAAAhD,gBACAhmC,KAAAspC,eAAA,GAAA3B,IAAA3nC,KAAAopC,gBAAAppC,KAAA8nC,eACA9nC,KAAAyxB,iBAAAzB,iBAAAhwB,KAAAkpC,qBACAlpC,KAAAyxB,iBAAAzB,iBAAAhwB,KAAAqpC,YACArpC,KAAAyxB,iBAAAzB,iBAAAhwB,KAAA8nC,eAgjBA,MA7iBA5U,GAAAxlC,UAAA8K,MAAA,WACA,GAAAkI,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,4BAAA38B,GACA,MAAA8F,GAAA6oC,mBAAA3uC,GAAAkL,KAAA,WAAmE,MAAApF,GAAA8oC,gBAAA5uC,QASnEs4B,EAAAxlC,UAAA+rC,iBAAA,SAAAC,GACA,GAAAh5B,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,8BAAA38B,GAGA,GAAA6uC,EACA,OAAA/oC,GAAAonC,cACAhH,sBAAAlmC,GACAkL,KAAA,SAAA4jC,GAKA,MAJAD,GAAAC,EACAhpC,EAAA+wB,iBAAAtB,oBAAAzvB,EAAAonC,eACApnC,EAAAonC,cAAApnC,EAAAsoC,YAAAjD,iBAAArM,GACAh5B,EAAA+wB,iBAAAzB,iBAAAtvB,EAAAonC,eACApnC,EAAA6oC,mBAAA3uC,KAEAkL,KAAA,WAIA,MADApF,GAAA4oC,eAAA,GAAA3B,IAAAjnC,EAAA0oC,gBAAA1oC,EAAAonC,eACApnC,EAAAonC,cAAAhH,sBAAAlmC,KAEAkL,KAAA,SAAA6jC,GAGA,OADAC,GAAA7zC,KACA3K,EAAA,EAAAujB,GAAA86B,EAAAE,GAA+Dv+C,EAAAujB,EAAArjB,OAAgBF,IAE/E,OADA02C,GAAAnzB,EAAAvjB,GACAwkB,EAAA,EAAAqyB,EAAAH,EAAyDlyB,EAAAqyB,EAAA32C,OAAuBskB,IAEhF,OADAmnB,GAAAkL,EAAAryB,GACAC,EAAA,EAAAg6B,EAAA9S,EAAA+C,UAA8DjqB,EAAAg6B,EAAAv+C,OAAgBukB,IAAA,CAC9E,GAAAuQ,GAAAypB,EAAAh6B,EACA+5B,KAAA3qC,IAAAmhB,EAAAtyB,KAMA,MAAA4S,GAAA4oC,eAAArB,aAAArtC,EAAAgvC,QAIA1W,EAAAxlC,UAAA87C,gBAAA,SAAA5uC,GACA,GAAA8F,GAAAV,IACA,OAAAA,MAAAqpC,WAAA7wC,MAAAoC,GAAAkL,KAAA,WACA,GAAA8N,GAAAlT,EAAA2oC,WAAAzG,oBACAliC,GAAAy1B,kBAAAxD,GAAAM,cAAArf,MAGAsf,EAAAxlC,UAAA67C,mBAAA,SAAA3uC,GACA,GAAA8F,GAAAV,IACA,OAAAA,MAAA8nC,cACAtvC,MAAAoC,GACAkL,KAAA,WAOA,MADApF,GAAAyoC,oBACAzoC,EAAAonC,cAAA7H,8BAAArlC,KAEAkL,KAAA,SAAAgkC,GAIA,MAAAA,KAAAnQ,GACAj5B,EAAAonC,cAAA9G,oCAAApmC,EAAAkvC,GAGA5vC,GAAAC,cAGA2L,KAAA,SAAAikC,GACA,MAAAA,GAAAz+C,OAAA,EACAoV,EAAAonC,cAAAjG,sBAAAjnC,EAAAmvC,GAGA7vC,GAAAC,aAKA+4B,EAAAxlC,UAAAupC,WAAA,SAAA6C,GACA,GAAAp5B,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,mCAAA38B,GACA,GAAAm8B,GACA3qB,EAAA4F,GAAAI,KACA,OAAA1R,GAAAonC,cACA1H,iBAAAxlC,EAAAwR,EAAA0tB,GACAh0B,KAAA,SAAAkkC,GACAjT,EAAAiT,CAIA,IAAA1yB,GAAAyf,EAAAzf,MACA,OAAA5W,GAAA4oC,eAAArB,aAAArtC,EAAA0c,KAEAxR,KAAA,SAAAmkC,GACA,OAAwB9S,QAAAJ,EAAAI,QAAAxM,QAAAsf,QAkBxB/W,EAAAxlC,UAAA8qC,iBAAA,SAAAuB,GACA,GAAAr5B,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,6BAAA38B,GACA,GAAAsvC,EACA,OAAAxpC,GAAAonC,cACAtP,iBAAA59B,EAAAm/B,EAAAhD,MAAAgD,EAAAQ,aACAz0B,KAAA,WACA,GAAApF,EAAAypC,sBAAApQ,EAAAO,eAGA,MAFA55B,GAAAyoC,iBAAAxwC,KAAAohC,GACAmQ,EAAAn0C,KACAmE,GAAAC,SAGA,IAAAiwC,GAAA,GAAAzB,IAAAjoC,EAAA0oC,gBACA,OAAA1oC,GAAA2pC,oBAAAzvC,GAAAm/B,GAAAqQ,GAAAtkC,KAAA,SAAAwkC,GAEA,MADAJ,GAAAI,EACAF,EAAAn+C,MAAA2O,OAIAkL,KAAA,WACA,MAAApF,GAAAonC,cAAAzF,wBAAAznC,KAEAkL,KAAA,WACA,MAAApF,GAAA4oC,eAAArB,aAAArtC,EAAAsvC,QAUAhX,EAAAxlC,UAAAgrC,YAAA,SAAAvB,GACA,GAAAz2B,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,wBAAA38B,GACA,GAAA2vC,GACAC,CACA,OAAA9pC,GAAAonC,cACArH,oBAAA7lC,EAAAu8B,GACArxB,KAAA,SAAA2kC,GAGA,MAFAz9C,GAAA,MAAAy9C,EAAA,wCACAF,EAAAE,EACA/pC,EAAAonC,cACA7H,8BAAArlC,GACAkL,KAAA,SAAA4kC,GAEA,MADA19C,GAAAmqC,EAAAuT,EAAA,2CACAH,MAGAzkC,KAAA,WACA,MAAApF,GAAAiqC,oBAAA/vC,EAAA2vC,KAEAzkC,KAAA,SAAAwkC,GAEA,MADAE,GAAAF,EACA5pC,EAAAonC,cAAAzF,wBAAAznC,KAEAkL,KAAA,WACA,MAAApF,GAAA4oC,eAAArB,aAAArtC,EAAA4vC,QAKAtX,EAAAxlC,UAAAwyC,mBAAA,WACA,GAAAx/B,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,iCAAA38B,GACA,MAAA8F,GAAAonC,cAAA5H,mBAAAtlC,MAQAs4B,EAAAxlC,UAAAyyC,mBAAA,SAAA5F,GACA,GAAA75B,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,iCAAA38B,GACA,MAAA8F,GAAAonC,cAAA3H,mBAAAvlC,EAAA2/B,MAOArH,EAAAxlC,UAAAm1C,6BAAA,WACA,MAAA7iC,MAAAqpC,WAAAxG,gCAUA3P,EAAAxlC,UAAAoqC,iBAAA,SAAAC,GACA,GAAAr3B,GAAAV,KACA4qC,EAAA,GAAAjC,IAAA3oC,KAAAopC,gBACA,OAAAppC,MAAAgpC,YAAAzR,eAAA,8BAAA38B,GACA,GAAA01B,KACAjiC,GAAA0pC,EAAAvf,cAAA,SAAA5E,EAAA1d,GAEA,GAAAosB,GAAA5hB,EAAAsZ,UAAApG,EACA,IAAA0O,EAAA,CAEA,GAAA1J,GAAA1iB,EAAA0iB,OACA,IAAAA,EAEA,GAAAA,YAAAC,IACAyX,EAAA33B,KAAA+H,EAAA2oC,WACAlG,8BAAAvoC,EAAAgZ,GACA9N,KAAA,WACA,MAAApF,GAAA2oC,WAAA/F,gBAAA1oC,EAAAge,EAAAjd,UAAAiY,UAGA,MAAAgF,YAAAO,KAQA,MAAAvsB,GAAA,yBAAA+D,KAAAC,UAAAgoB,GAPA0X,GAAA33B,KAAA+H,EAAA2oC,WACA9F,mBAAA3oC,EAAAge,EAAAS,iBAAAzF,GACA9N,KAAA,WACA,MAAApF,GAAA2oC,WAAA/F,gBAAA1oC,EAAAge,EAAAQ,eAAAxF,MASA,GAAAzd,GAAAD,EAAAC,WACAA,GAAA7K,OAAA,IACAg3B,IAAAvO,QACA5d,cACA2d,gBAAA5d,EAAA4d,kBAEApT,EAAAsZ,UAAApG,GAAA0O,EACAgO,EAAA33B,KAAA+H,EAAA2oC,WAAAtG,aAAAnoC,EAAA0nB,OAGA,IAAAuoB,GAAA90C,IACAgiC,GAAAtf,gBAAA/pB,QAAA,SAAAZ,EAAA0Q,GACAqsC,IAAA5rC,IAAAnR,GACAwiC,EAAA33B,KAAAiyC,EAAA5G,SAAAppC,EAAA9M,GAAAgY,KAAA,SAAAglC,GAKA,MAAAA,GACAtsC,EAAAiI,QAAA1U,OAAAihB,GAAAM,MACA9U,EAAAiI,QAAAlD,UAAAunC,EAAArkC,UAAA,EACAmkC,EAAAhH,SAAAplC,GAGAxT,EApXA,aAoXA,sCAAA8C,EAAA,qBAAAg9C,EAAArkC,QAAA,kBAAAjI,EAAAiI,SAIA/F,EAAA+wB,iBAAArB,uBAAAtiC,OAOA,IAAAi9C,GAAArqC,EAAA2oC,WAAAxG,+BACAmI,EAAAjT,EAAAjkB,eACAk3B,GAAAj5C,OAAAihB,GAAAM,OACAtmB,EAAAg+C,EAAAznC,UAAAwnC,IAAA,kDACAC,EACA,MACAD,GACAza,EAAA33B,KAAA+H,EAAA2oC,WAAAvG,6BAAAloC,EAAAowC,IAEA,IAAAC,EACA,OAAA/wC,IAAAm1B,QAAAiB,GACAxqB,KAAA,WAAmC,MAAApF,GAAAwqC,wBAAAtwC,EAAAgwC,KACnC9kC,KAAA,SAAAqlC,GAEA,MADAF,GAAAE,EACAP,EAAA3+C,MAAA2O,KAEAkL,KAAA,WACA,MAAApF,GAAA4oC,eAAArB,aAAArtC,EAAAiwC,EAAA5yB,UAAAgzB,SAOA/X,EAAAxlC,UAAA6rC,uBAAA,SAAA6R,GACA,GAAA1qC,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,qCAAA38B,GAYA,OAXA01B,MAWAllC,EAAA,EAAAigD,EAAAD,EAAyDhgD,EAAAigD,EAAA//C,OAA2BF,IAAA,CACpF,GAAAiqC,GAAAgW,EAAAjgD,IAXA,SAAAiqC,GACA/E,EAAA33B,KAAA+H,EAAA2oC,WACAjG,aAAAxoC,EAAAy6B,EAAA12B,OACAmH,KAAA,SAAAwc,GACAt1B,EAAA,OAAAs1B,EAAA,gDACA,IAAA1O,GAAA0O,EAAA1O,QACAlT,GAAAwoC,oBAAAtX,cAAAyD,EAAAtE,UAAAnd,GACAlT,EAAAwoC,oBAAAnX,iBAAAsD,EAAArE,YAAApd,OAKAyhB,GAEA,MAAAn7B,IAAAm1B,QAAAiB,MASA4C,EAAAxlC,UAAA49C,kBAAA,SAAAC,GACA,GAAA7qC,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,mCAAA38B,GAIA,WAHAxM,KAAAm9C,IACAA,EAAA5R,IAEAj5B,EAAAonC,cAAAnH,iCAAA/lC,EAAA2wC,MAOArY,EAAAxlC,UAAA89C,aAAA,SAAA19C,GACA,GAAA4S,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,yBAAA38B,GACA,MAAA8F,GAAA4oC,eAAAvB,YAAAntC,EAAA9M,MAQAolC,EAAAxlC,UAAA2oC,cAAA,SAAA13B,GACA,GAAA+B,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,0BAAA38B,GACA,GAAA0nB,EACA,OAAA5hB,GAAA2oC,WACAjG,aAAAxoC,EAAA+D,GACAmH,KAAA,SAAA2lC,GACA,GAAAA,EAKA,MADAnpB,GAAAmpB,EACAvxC,GAAAC,SAGA,IAAAyZ,GAAAlT,EAAAy1B,kBAAArwB,MAEA,OADAwc,GAAA,GAAA5O,IAAA/U,EAAAiV,EAAA/I,GAAA4X,QACA/hB,EAAA2oC,WAAAtG,aAAAnoC,EAAA0nB,KAGAxc,KAAA,WAGA,MAFA9Y,IAAA0T,EAAAsZ,UAAAsI,EAAA1O,UAAA,iDAAAjV,GACA+B,EAAAsZ,UAAAsI,EAAA1O,UAAA0O,EACAA,OAKA4Q,EAAAxlC,UAAAkpC,aAAA,SAAAj4B,GACA,GAAA+B,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,yBAAA38B,GACA,MAAA8F,GAAA2oC,WACAjG,aAAAxoC,EAAA+D,GACAmH,KAAA,SAAAwc,GAIA,MAHAt1B,GAAA,MAAAs1B,EAAA,uCAAA3jB,GACA+B,EAAAwoC,oBAAAlX,sBAAA1P,EAAA1O,gBACAlT,GAAAsZ,UAAAsI,EAAA1O,UACAlT,EAAA+wB,iBAAA5B,QACAnvB,EAAA2oC,WAAAnG,gBAAAtoC,EAAA0nB,GAGApoB,GAAAC,YAGA2L,KAAA,WAGA,GAAAnX,EAAA+R,EAAAsZ,WAAA,CACA,GAAA0xB,GAAA,GAAA/C,IAAAjoC,EAAA0oC,gBACA,OAAA1oC,GAAAwqC,wBAAAtwC,EAAA8wC,GAAA5lC,KAAA,WACA4lC,EAAAz/C,MAAA2O,KAIA,MAAAV,IAAAC,eASA+4B,EAAAxlC,UAAA4oC,aAAA,SAAA33B,GACA,GAAA+B,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,yBAAA38B,GACA,MAAA8F,GAAA4oC,eAAAnF,0BAAAvpC,EAAA+D,MAOAu0B,EAAAxlC,UAAA6oC,mBAAA,SAAA3iB,GACA,GAAAlT,GAAAV,IACA,OAAAA,MAAAgpC,YAAAzR,eAAA,gCAAA38B,GACA,MAAA8F,GAAA2oC,WAAA5F,2BAAA7oC,EAAAgZ,MASAsf,EAAAxlC,UAAA2iC,eAAA,WACA,GAAA3vB,GAAAV,IAGA,OAAAA,MAAAgpC,YAAAzR,eAAA,8BAAA38B,GACA,MAAA8F,GAAA+wB,iBAAApB,eAAAz1B,GAAAkL,KAAA,SAAA6lC,GACA,GAAArb,KAIA,OAHAqb,GAAAj9C,QAAA,SAAAZ,GACAwiC,EAAA33B,KAAA+H,EAAA0oC,gBAAArF,YAAAnpC,EAAA9M,MAEAoM,GAAAm1B,QAAAiB,QAIA4C,EAAAxlC,UAAAw9C,wBAAA,SAAAtwC,EAAAgwC,GAEA,OADAgB,MACAxgD,EAAA,EAAAujB,EAAA3O,KAAAmpC,iBAAoD/9C,EAAAujB,EAAArjB,OAAgBF,IAAA,CACpE,GAAA2uC,GAAAprB,EAAAvjB,EACA,KAAA4U,KAAA6rC,oBAAA9R,EAAAO,eACA,KAEAsR,GAAAjzC,KAAAohC,GAEA,WAAA6R,EAAAtgD,OACA4O,GAAAC,QAAApE,OAGAiK,KAAAmpC,iBAAArd,OAAA,EAAA8f,EAAAtgD,QACA0U,KAAAqqC,oBAAAzvC,EAAAgxC,EAAAhB,KAGA1X,EAAAxlC,UAAAm+C,oBAAA,SAAAplC,GAGA,GAAAskC,GAAA/qC,KAAAqpC,WAAAxG,8BACA,OAAAp8B,GAAAlD,UAAAwnC,IAAA,GACAp8C,EAAAqR,KAAAga,YAEAkZ,EAAAxlC,UAAAy8C,sBAAA,SAAA1jC,GAEA,OAAAzG,KAAA6rC,oBAAAplC,IAAAzG,KAAAmpC,iBAAA79C,OAAA,GAEA4nC,EAAAxlC,UAAA28C,oBAAA,SAAAzvC,EAAAkxC,EAAAlB,GAQA,OAPAlqC,GAAAV,KACA+rC,EAAA7xC,GAAAC,UAMA/O,EAAA,EAAA4gD,EAAAF,EAAuD1gD,EAAA4gD,EAAA1gD,OAA4BF,IAAA,CACnF,GAAA2uC,GAAAiS,EAAA5gD,IANA,SAAA2uC,GACAgS,IAAAjmC,KAAA,WACA,MAAApF,GAAAurC,4BAAArxC,EAAAm/B,EAAA6Q,MAKA7Q,GAEA,MAAAgS,GAAAjmC,KAAA,WACA,MAAApF,GAAAmhC,sBAAAjnC,EAAAkxC,EAAAjgD,IAAA,SAAAgD,GAAwF,MAAAA,GAAAkoC,YAGxF7D,EAAAxlC,UAAAi9C,oBAAA,SAAA/vC,EAAAm8B,GACA,MAAA/2B,MAAA6hC,sBAAAjnC,GAAAm8B,KAGA7D,EAAAxlC,UAAAm0C,sBAAA,SAAAjnC,EAAAknC,GAEA,OADAoK,GAAAn2C,KACA3K,EAAA,EAAA+gD,EAAArK,EAA6C12C,EAAA+gD,EAAA7gD,OAAuBF,IAEpE,OADA2rC,GAAAoV,EAAA/gD,GACAujB,EAAA,EAAAiB,EAAAmnB,EAAA+C,UAAkDnrB,EAAAiB,EAAAtkB,OAAgBqjB,IAAA,CAClE,GAAAyR,GAAAxQ,EAAAjB,GACA7gB,EAAAsyB,EAAAtyB,GACAo+C,KAAAjtC,IAAAnR,GAGA,MAAAkS,MAAA8nC,cACAjG,sBAAAjnC,EAAAknC,GACAh8B,KAAA,WAA+B,MAAAomC,MAE/BhZ,EAAAxlC,UAAAu+C,4BAAA,SAAArxC,EAAAm/B,EAAA6Q,GACA,GAAA7T,GAAAgD,EAAAhD,MACAqV,EAAArV,EAAAzf,OACAy0B,EAAA7xC,GAAAC,SAyBA,OAxBAiyC,GAAA19C,QAAA,SAAA6M,GACAwwC,IACAjmC,KAAA,WACA,MAAA8kC,GAAA5G,SAAAppC,EAAAW,KAEAuK,KAAA,SAAAy+B,GACA,GAAA/lC,GAAA+lC,EACA8H,EAAAtS,EAAAS,YAAA9iC,IAAA6D,EACAvO,GAAA,OAAAq/C,EAAA,wDACA7tC,KAAAiI,QAAAlD,UAAA8oC,GAAA,KACA7tC,EAAAu4B,EAAAthB,sBAAAla,EAAAiD,EAAAu7B,GACAv7B,EAQAosC,EAAAhH,SAAAplC,GAPAxR,GAAAu3C,EAAA,kBACAxN,EACA,wBACAwN,EACA,0BAQAwH,GAEA7Y,KC/oBAoZ,GAAA,WACA,QAAAC,KAKAvsC,KAAA8nC,iBAEA9nC,KAAAw/B,YAAA,EAEAx/B,KAAAwsC,2BAAA7S,GAKA35B,KAAA+6B,gBAAA7tC,IAEA8S,KAAAyxB,iBAAA,KAEAzxB,KAAAysC,qBAAA,GAAAt1B,IAAAma,GAAAzqB,cAySA,MAvSA0lC,GAAA7+C,UAAA8K,MAAA,SAAAk/B,GAWA,MALA,KAAA13B,KAAA8nC,cAAAx8C,SACA0U,KAAAw/B,YAAA,EACAx/B,KAAAwsC,2BAAA7S,IAEA3sC,EAAAgT,KAAAwsC,2BAAAxsC,KAAAw/B,YAAA,gEACAtlC,GAAAC,WAEAoyC,EAAA7+C,UAAAgyC,WAAA,SAAAhI,GACA,MAAAx9B,IAAAC,QAAA,IAAA6F,KAAA8nC,cAAAx8C,SAEAihD,EAAA7+C,UAAAsyC,eAAA,SAAAtI,GACA,MAAAx9B,IAAAC,QAAA6F,KAAAw/B,cAEA+M,EAAA7+C,UAAAuyC,8BAAA,SAAAvI,GACA,MAAAx9B,IAAAC,QAAA6F,KAAAwsC,6BAEAD,EAAA7+C,UAAA8qC,iBAAA,SAAAd,EAAAX,EAAAwD,GACA,GAAApD,GAAAJ,EAAAI,OACAnqC,GAAAmqC,EAAAn3B,KAAAwsC,2BAAA,kDACA,IAAAE,GAAA1sC,KAAA2sC,uBAAAxV,EAAA,gBAEA3sB,EAAAxK,KAAA8nC,cAAA4E,EAQA,OAPA1/C,GAAAmqC,IAAA3sB,EAAA2sB,QAAA,0CACAA,EACA,eACA3sB,EAAA2sB,SACAnqC,GAAAwd,EAAA0vB,cAAA,gDACAl6B,KAAAwsC,2BAAArV,EACAn3B,KAAA+6B,gBAAAR,EACArgC,GAAAC,WAEAoyC,EAAA7+C,UAAAwyC,mBAAA,SAAAxI,GACA,MAAAx9B,IAAAC,QAAA6F,KAAA+6B,kBAEAwR,EAAA7+C,UAAAyyC,mBAAA,SAAAzI,EAAA6C,GAEA,MADAv6B,MAAA+6B,gBAAAR,EACArgC,GAAAC,WAEAoyC,EAAA7+C,UAAA0yC,iBAAA,SAAA1I,EAAAtrB,EAAA0tB,GACA9sC,EAAA,IAAA8sC,EAAAxuC,OAAA,uCACA,IAAA6rC,GAAAn3B,KAAAw/B,WACAx/B,MAAAw/B,cACAx/B,KAAA8nC,cAAAx8C,OAAA,GAEA0B,EADAgT,KAAA8nC,cAAA9nC,KAAA8nC,cAAAx8C,OAAA,GACA6rC,UAAA,2DAEA,IAAAJ,GAAA,GAAA6C,IAAAzC,EAAA/qB,EAAA0tB,EACA95B,MAAA8nC,cAAAnvC,KAAAo+B,EAEA,QAAA3rC,GAAA,EAAAm1C,EAAAzG,EAAiD1uC,EAAAm1C,EAAAj1C,OAAyBF,IAAA,CAC1E,GAAAg1B,GAAAmgB,EAAAn1C,EACA4U,MAAAysC,qBAAAzsC,KAAAysC,qBAAAxtC,IAAA,GAAAqyB,IAAAlR,EAAAtyB,IAAAqpC,IAEA,MAAAj9B,IAAAC,QAAA48B,IAEAwV,EAAA7+C,UAAA+yC,oBAAA,SAAA/I,EAAAP,GACA,MAAAj9B,IAAAC,QAAA6F,KAAA4sC,kBAAAzV,KAEAoV,EAAA7+C,UAAAizC,iCAAA,SAAAjJ,EAAAP,GACA,GAAA9yB,GAAArE,KAAA8nC,cAAAx8C,MAIA6rC,GAAAl2B,KAAA4rC,IAAA1V,EAAA,EAAAn3B,KAAAwsC,2BAMA,KAHA,GAAAM,GAAA9sC,KAAA+sC,eAAA5V,GACA1yB,EAAAqoC,EAAA,IAAAA,EAEcroC,EAAAJ,EAAcI,IAAA,CAC5B,GAAAsyB,GAAA/2B,KAAA8nC,cAAArjC,EACA,KAAAsyB,EAAAmD,cACA,MAAAhgC,IAAAC,QAAA48B,GAGA,MAAA78B,IAAAC,QAAA,OAEAoyC,EAAA7+C,UAAAozC,sBAAA,SAAApJ,GACA,MAAAx9B,IAAAC,QAAA6F,KAAAgtC,qCAAAhtC,KAAA8nC,cAAAx8C,UAEAihD,EAAA7+C,UAAAszC,oCAAA,SAAAtJ,EAAAP,GACA,GAAAlgB,GAAAjX,KAAA8nC,cAAAx8C,OACA2hD,EAAAjtC,KAAA+sC,eAAA5V,EAYA,OAXA8V,GAAA,EACAA,EAAA,EAEAA,GAAAh2B,EACAg2B,EAAAh2B,EAKAg2B,IAEA/yC,GAAAC,QAAA6F,KAAAgtC,qCAAAC,KAEAV,EAAA7+C,UAAAuzC,0CAAA,SAAAvJ,EAAAwJ,GACA,GAAAxgC,GAAAV,KACAxH,EAAA,GAAA84B,IAAA4P,EAAA,GACAzoC,EAAA,GAAA64B,IAAA4P,EAAAzzB,OAAA7B,mBACA/c,IAOA,OANAmR,MAAAysC,qBAAA70B,gBAAApf,EAAAC,GAAA,SAAAk5B,GACA3kC,EAAAk0C,EAAAnvC,OAAA4/B,EAAA7jC,KAAA,kDACA,IAAAipC,GAAAr2B,EAAAksC,kBAAAjb,EAAAa,gBACAxlC,GAAA,OAAA+pC,EAAA,qDACAloC,EAAA8J,KAAAo+B,KAEA78B,GAAAC,QAAAtL,IAEA09C,EAAA7+C,UAAA+zC,oCAAA,SAAA/J,EAAA/4B,GACA,GAAA+B,GAAAV,KAGAglC,EAAArmC,EAAAnI,KACA02C,EAAAlI,EAAA15C,OAAA,EAKA6hD,EAAAnI,CACAj/B,IAAAE,cAAAknC,KACAA,IAAAnpC,MAAA,IAEA,IAAAxL,GAAA,GAAA84B,IAAA,GAAAvrB,IAAAonC,GAAA,GAGAvL,EAAA,GAAAzqB,IAAAvlB,EACAoO,MAAAysC,qBAAA10B,aAAA,SAAA4Z,GACA,GAAAyb,GAAAzb,EAAA7jC,IAAA0I,IACA,SAAAwuC,EAAAtgC,WAAA0oC,KASAA,EAAA9hD,SAAA4hD,IACAtL,IAAA3iC,IAAA0yB,EAAAa,mBAEA,IAESh6B,EAGT,IAAA3J,KAOA,OANA+yC,GAAAlzC,QAAA,SAAAyoC,GACA,GAAAJ,GAAAr2B,EAAAksC,kBAAAzV,EACA,QAAAJ,GACAloC,EAAA8J,KAAAo+B,KAGA78B,GAAAC,QAAAtL,IAEA09C,EAAA7+C,UAAAm0C,sBAAA,SAAAnK,EAAAoK,GACA,GAAAuL,GAAAvL,EAAAx2C,MACA0B,GAAAqgD,EAAA,iDACA,IAAAC,GAAAxL,EAAA,GAAA3K,QACAoW,EAAAvtC,KAAA8nC,cAAAx8C,OAGAkiD,EAAAxtC,KAAA2sC,uBAAAW,EAAA,UACAtgD,GAAAgT,KAAA8nC,cAAA0F,GAAArW,UAAAmW,EAAA,0CAIA,KAFA,GAAAZ,GAAA,EACAe,EAAAD,EAAA,EACAd,EAAAW,GAAAI,EAAAF,GAAA,CACA,GAAAxW,GAAA/2B,KAAA8nC,cAAA2F,EACA1W,GAAAmD,cACAuT,KAGAzgD,EAAA+pC,EAAAI,UAAA2K,EAAA4K,GAAAvV,QAAA,mDACAuV,IACAe,KAKA,OAAAD,EAAA,CACA,KAAkBC,EAAAF,EAAyBE,IAAA,CAC3C,GAAA1W,GAAA/2B,KAAA8nC,cAAA2F,EACA,KAAA1W,EAAAmD,cACA,MAGA,GAAAwT,GAAAD,EAAAD,CACAxtC,MAAA8nC,cAAAhc,OAAA0hB,EAAAE,OAIA,QAAAz7C,GAAAu7C,EAAoCv7C,EAAAw7C,EAAgBx7C,IACpD+N,KAAA8nC,cAAA71C,GAAA+N,KAAA8nC,cAAA71C,GAAAkoC,aAIA,QADAwT,GAAA3tC,KAAAysC,qBACArhD,EAAA,EAAA62C,EAAAH,EAA6C12C,EAAA62C,EAAA32C,OAAuBF,IAGpE,OAFA2rC,GAAAkL,EAAA72C,GACA+rC,EAAAJ,EAAAI,QACAxoB,EAAA,EAAAiB,EAAAmnB,EAAA+C,UAAkDnrB,EAAAiB,EAAAtkB,OAAgBqjB,IAAA,CAClE,GAAAyR,GAAAxQ,EAAAjB,GACA7gB,EAAAsyB,EAAAtyB,GACA,QAAAkS,KAAAyxB,kBACAzxB,KAAAyxB,iBAAArB,uBAAAtiC,EAEA,IAAA6jC,GAAA,GAAAL,IAAAxjC,EAAAqpC,EACAwW,KAAA3uC,OAAA2yB,GAIA,MADA3xB,MAAAysC,qBAAAkB,EACAzzC,GAAAC,WAEAoyC,EAAA7+C,UAAAwiC,oBAAA,SAAAuB,GACAzxB,KAAAyxB,oBAEA8a,EAAA7+C,UAAAkjC,YAAA,SAAAh2B,EAAA9M,GACA,GAAA6jC,GAAA,GAAAL,IAAAxjC,EAAA,GACAwkC,EAAAtyB,KAAAysC,qBAAAz0B,kBAAA2Z,EACA,OAAAz3B,IAAAC,QAAArM,EAAAiE,OAAAugC,KAAAxkC,OAEAy+C,EAAA7+C,UAAA20C,wBAAA,SAAAznC,GAIA,MAHA,KAAAoF,KAAA8nC,cAAAx8C,QACA0B,EAAAgT,KAAAysC,qBAAA99C,UAAA,+EAEAuL,GAAAC,WAOAoyC,EAAA7+C,UAAAs/C,qCAAA,SAAAC,GAEA,OADAp+C,MACAoD,EAAA,EAAuBA,EAAAg7C,EAAch7C,IAAA,CACrC,GAAA8kC,GAAA/2B,KAAA8nC,cAAA71C,EACA8kC,GAAAmD,eACArrC,EAAA8J,KAAAo+B,GAGA,MAAAloC,IAUA09C,EAAA7+C,UAAAi/C,uBAAA,SAAAxV,EAAA9uB,GACA,GAAA5D,GAAAzE,KAAA+sC,eAAA5V,EAEA,OADAnqC,GAAAyX,GAAA,GAAAA,EAAAzE,KAAA8nC,cAAAx8C,OAAA,4BAAA+c,GACA5D,GAWA8nC,EAAA7+C,UAAAq/C,eAAA,SAAA5V,GACA,WAAAn3B,KAAA8nC,cAAAx8C,OAEA,EAOA6rC,EADAn3B,KAAA8nC,cAAA,GAAA3Q,SAOAoV,EAAA7+C,UAAAk/C,kBAAA,SAAAzV,GACA,GAAA1yB,GAAAzE,KAAA+sC,eAAA5V,EACA,IAAA1yB,EAAA,GAAAA,GAAAzE,KAAA8nC,cAAAx8C,OACA,WAEA,IAAAyrC,GAAA/2B,KAAA8nC,cAAArjC,EAEA,OADAzX,GAAA+pC,EAAAI,YAAA,6BACAJ,EAAAmD,cAAA,KAAAnD,GAEAwV,KChUAqB,GAAA,WACA,QAAAC,KAIA7tC,KAAAssB,QAAA,GAAAf,IAAA,SAAAgB,GAAmD,MAAAA,GAAA5c,gBAEnD3P,KAAA07B,0BAAA1oB,GAAAM,IAEAtT,KAAAw7B,gBAAA,EAKAx7B,KAAA2tC,WAAA,GAAAxc,IAuDA,MArDA0c,GAAAngD,UAAA8K,MAAA,SAAAk/B,GAEA,MAAAx9B,IAAAC,WAEA0zC,EAAAngD,UAAAm1C,6BAAA,WACA,MAAA7iC,MAAA07B,2BAEAmS,EAAAngD,UAAAk1C,mBAAA,WACA,MAAA5iC,MAAAw7B,iBAEAqS,EAAAngD,UAAAo1C,6BAAA,SAAApL,EAAA5jB,GAEA,MADA9T,MAAA07B,0BAAA5nB,EACA5Z,GAAAC,WAEA0zC,EAAAngD,UAAAq1C,aAAA,SAAArL,EAAApV,GACAtiB,KAAAssB,QAAAvf,IAAAuV,EAAA3jB,MAAA2jB,EACA,IAAA1O,GAAA0O,EAAA1O,QAIA,OAHAA,GAAA5T,KAAAw7B,kBACAx7B,KAAAw7B,gBAAA5nB,GAEA1Z,GAAAC,WAEA0zC,EAAAngD,UAAAw1C,gBAAA,SAAAxL,EAAApV,GAGA,MAFAtiB,MAAAssB,QAAAttB,OAAAsjB,EAAA3jB,OACAqB,KAAA2tC,WAAA3b,sBAAA1P,EAAA1O,UACA1Z,GAAAC,WAEA0zC,EAAAngD,UAAA01C,aAAA,SAAA1L,EAAA/4B,GACA,GAAA2jB,GAAAtiB,KAAAssB,QAAA50B,IAAAiH,IAAA,IACA,OAAAzE,IAAAC,QAAAmoB,IAEAurB,EAAAngD,UAAA41C,gBAAA,SAAA1oC,EAAA0c,EAAA1D,GAEA,MADA5T,MAAA2tC,WAAA/b,cAAAta,EAAA1D,GACA1Z,GAAAC,WAEA0zC,EAAAngD,UAAA61C,mBAAA,SAAA3oC,EAAA0c,EAAA1D,GAEA,MADA5T,MAAA2tC,WAAA5b,iBAAAza,EAAA1D,GACA1Z,GAAAC,WAEA0zC,EAAAngD,UAAAy1C,8BAAA,SAAAvoC,EAAAgZ,GAEA,MADA5T,MAAA2tC,WAAA3b,sBAAApe,GACA1Z,GAAAC,WAEA0zC,EAAAngD,UAAA+1C,2BAAA,SAAA7oC,EAAAgZ,GACA,GAAA40B,GAAAxoC,KAAA2tC,WAAAtb,gBAAAze,EACA,OAAA1Z,IAAAC,QAAAquC,IAEAqF,EAAAngD,UAAAwiC,oBAAA,SAAAsS,GACAxiC,KAAA2tC,WAAAzd,oBAAAsS,IAEAqL,EAAAngD,UAAAkjC,YAAA,SAAAh2B,EAAA9M,GACA,MAAAkS,MAAA2tC,WAAA/c,YAAAh2B,EAAA9M,IAEA+/C,KCrEAC,GAAA,WACA,QAAAC,KACA/tC,KAAAkZ,KAAAzjB,IA8BA,MA5BAs4C,GAAArgD,UAAAk2C,SAAA,SAAAlM,EAAAmM,GAEA,MADA7jC,MAAAkZ,KAAAlZ,KAAAkZ,KAAAzR,OAAAo8B,EAAA/1C,IAAA+1C,GACA3pC,GAAAC,WAEA4zC,EAAArgD,UAAAq2C,YAAA,SAAArM,EAAAwJ,GAEA,MADAlhC,MAAAkZ,KAAAlZ,KAAAkZ,KAAAtR,OAAAs5B,GACAhnC,GAAAC,WAEA4zC,EAAArgD,UAAAs2C,SAAA,SAAAtM,EAAAwJ,GACA,MAAAhnC,IAAAC,QAAA6F,KAAAkZ,KAAAxhB,IAAAwpC,KAEA6M,EAAArgD,UAAAy2C,0BAAA,SAAAzM,EAAA/4B,GAMA,IALA,GAAA1N,GAAA0E,IAGAqvC,EAAA,GAAAj/B,IAAApH,EAAAnI,KAAAwN,MAAA,KACAgqC,EAAAhuC,KAAAkZ,KAAAtQ,gBAAAo8B,GACAgJ,EAAA3kC,WAAA,CACA,GAAAsF,GAAAq/B,EAAA7kC,UAAArb,EAAA6gB,EAAA7gB,IAAAinB,EAAApG,EAAAzgB,KACA,KAAAyQ,EAAAnI,KAAAkO,WAAA5W,EAAA0I,MACA,KAEAue,aAAAxO,KAAA5H,EAAAsR,QAAA8E,KACA9jB,IAAAwW,OAAAsN,EAAAjnB,IAAAinB,IAGA,MAAA7a,IAAAC,QAAAlJ,IAEA88C,KC1BAE,GAAA,WACA,QAAAC,KAQAluC,KAAAmuC,kBACAnuC,KAAA6nC,oBAAA,GAAAiG,IACA9tC,KAAAqpC,WAAA,GAAAuE,IACA5tC,KAAAqlC,SAAA,EAgCA,MA9BA6I,GAAAxgD,UAAA8K,MAAA,WAIA,MAHAxL,IAAAgT,KAAAqlC,QAAA,qCACArlC,KAAAqlC,SAAA,EAEA3e,QAAAvsB,WAEA+zC,EAAAxgD,UAAAi4C,SAAA,WAIA,MAFA34C,GAAAgT,KAAAqlC,QAAA,6CACArlC,KAAAqlC,SAAA,EACA3e,QAAAvsB,WAEA+zC,EAAAxgD,UAAAq4C,iBAAA,SAAArM,GACA,GAAA0U,GAAApuC,KAAAmuC,eAAAzU,EAAAd,QAKA,OAJAwV,KACAA,EAAA,GAAA9B,IACAtsC,KAAAmuC,eAAAzU,EAAAd,SAAAwV,GAEAA,GAEAF,EAAAxgD,UAAAs4C,cAAA,WACA,MAAAhmC,MAAAqpC,YAEA6E,EAAAxgD,UAAAu4C,uBAAA,WACA,MAAAjmC,MAAA6nC,qBAEAqG,EAAAxgD,UAAA6pC,eAAA,SAAAlvB,EAAA69B,GAEA,MADAl7C,GA9CA,oBA8CA,wBAAAqd,GACA69B,EAAA,GAAAmI,KAAAlf,aAEA+e,KAIAG,GAAA,WACA,QAAAA,MAEA,MAAAA,MCtDAC,GAAA,WACA,QAAAC,KACAvuC,KAAA6vB,SAAA,EAcA,MAZA0e,GAAA7gD,UAAAsiC,iBAAA,SAAAC,KAGAse,EAAA7gD,UAAAyiC,oBAAA,SAAAF,KAGAse,EAAA7gD,UAAA0iC,uBAAA,SAAAtiC,KAGAygD,EAAA7gD,UAAA2iC,eAAA,SAAAz1B,GACA,MAAAV,IAAAC,QAAApE,OAEAw4C,KCvBAC,GAAA,WACA,QAAAA,KACA,GAAA9tC,GAAAV,IACAA,MAAAuvB,QAAA,GAAA7I,SAAA,SAAAvsB,EAAAC,GACAsG,EAAAvG,UACAuG,EAAAtG,WAGA,MAAAo0C,MCIAC,GAAA,WACA,QAAAC,GAMAC,EAKAC,EAMAC,GACA7uC,KAAA2uC,iBACA3uC,KAAA4uC,gBACA5uC,KAAA6uC,aACA7uC,KAAA8uC,QAkDA,MAzCAJ,GAAAhhD,UAAAohD,MAAA,WACA9uC,KAAA+uC,cAAA,GAMAL,EAAAhhD,UAAAshD,WAAA,WACAhvC,KAAA+uC,cAAA/uC,KAAA6uC,YAMAH,EAAAhhD,UAAAuhD,eAAA,WACA,GAAAC,GAAA,GAAAV,IAGAW,EAAAnvC,KAAA+uC,cAAA/uC,KAAAovC,eAiBA,OAhBApvC,MAAA+uC,cAAA,GACA/jD,EA7DA,qBA6DA,mBAAAmkD,EAAA,oBACAnvC,KAAA+uC,cAAA,QAEA/lB,WAAA,WACAkmB,EAAA/0C,WACSg1C,GAGTnvC,KAAA+uC,eAAA/uC,KAAA4uC,cACA5uC,KAAA+uC,cAAA/uC,KAAA2uC,iBACA3uC,KAAA+uC,cAAA/uC,KAAA2uC,gBAEA3uC,KAAA+uC,cAAA/uC,KAAA6uC,aACA7uC,KAAA+uC,cAAA/uC,KAAA6uC,YAEAK,EAAA3f,SAGAmf,EAAAhhD,UAAA0hD,cAAA,WACA,OAAAnuC,KAAAE,SAAA,IAAAnB,KAAA+uC,eAEAL,KbpFAW,GAAArvC,WAAAD,WAAA,WACA,GAAAE,GAAAlS,OAAAmS,iBACUC,uBAAgB1Q,QAAA,SAAA2Q,EAAAC,GAAsCD,EAAAD,UAAAE,IAChE,SAAAD,EAAAC,GAAyB,OAAAC,KAAAD,KAAAzS,eAAA0S,KAAAF,EAAAE,GAAAD,EAAAC,IACzB,iBAAAF,EAAAC,GAEA,QAAAE,KAAuBP,KAAAjP,YAAAqP,EADvBH,EAAAG,EAAAC,GAEAD,EAAA1S,UAAA,OAAA2S,EAAAtS,OAAAyS,OAAAH,IAAAE,EAAA7S,UAAA2S,EAAA3S,UAAA,GAAA6S,SAUA,SAAAmyB,GAMAA,IAAA,qBAMAA,IAAA,eAKAA,IAAA,eAMAA,IAAA,iBAOAA,IAAA,qBAIAA,IAAA,sBACCA,YAKD,IjCOAh2B,IiCPA4yC,GAAA,IAEAC,GAAA,IACAC,GAAA,IAkCAC,GAAA,WACA,QAAAC,GAAAtB,EAAAuB,EAAAC,EAEAC,GACA7vC,KAAAouC,QACApuC,KAAA2vC,aACA3vC,KAAA4vC,sBACA5vC,KAAA8vC,MAAA,EACA9vC,KAAA+vC,OAAA,KACA/vC,KAAA6sB,SAAA,KACA7sB,KAAAgwC,QAAA,GAAAvB,IAAAoB,GAAAP,GAAAE,GAAAD,IACAvvC,KAAA+Z,MAAA2Y,GAAAud,QAsPA,MA7OAP,GAAAhiD,UAAAwiD,UAAA,WACA,MAAAlwC,MAAA+Z,QAAA2Y,GAAAyd,SACAnwC,KAAA+Z,QAAA2Y,GAAA0d,MACApwC,KAAA+Z,QAAA2Y,GAAA2d,MAMAX,EAAAhiD,UAAA4iD,OAAA,WACA,MAAAtwC,MAAA+Z,QAAA2Y,GAAA2d,MASAX,EAAAhiD,UAAA8K,MAAA,SAAAq0B,GACA,GAAA7sB,KAAA+Z,QAAA2Y,GAAA3lC,MAEA,WADAiT,MAAAuwC,eAAA1jB,EAGA7/B,GAAAgT,KAAA+Z,QAAA2Y,GAAAud,QAAA,mBACAjwC,KAAA6sB,WACA7sB,KAAAwwC,QAQAd,EAAAhiD,UAAA+iD,KAAA,WACAzwC,KAAAkwC,aACAlwC,KAAAklB,MAAAwN,GAAAge,UAWAhB,EAAAhiD,UAAAijD,eAAA,WACA3jD,GAAAgT,KAAAkwC,YAAA,+CACAlwC,KAAA+Z,MAAA2Y,GAAAud,QACAjwC,KAAAgwC,QAAAlB,SAMAY,EAAAhiD,UAAAkjD,SAAA,WACA,GAAAlwC,GAAAV,IACAA,MAAA8vC,MAAA,EACA9vC,KAAAouC,MACAyC,SAAA,WACA,MAAAnwC,GAAAowC,wBAjHA,KAmHAhiB,MAAA,SAAAxJ,GAKAt4B,EAAAs4B,EAAAnxB,OAAA3G,GAAA6G,UAAA,mFAAAixB,MAIAoqB,EAAAhiD,UAAAqjD,YAAA,SAAA7lD,GACA8U,KAAAgxC,kBACAhxC,KAAA+vC,OAAA5qB,KAAAj6B,IAGAwkD,EAAAhiD,UAAAojD,qBAAA,WACA,MAAA9wC,MAAAswC,UAAAtwC,KAAA8vC,KAGA9vC,KAAAklB,MAAAwN,GAAAud,SAEAvpB,QAAAvsB,WAGAu1C,EAAAhiD,UAAAsjD,gBAAA,WACAhxC,KAAA8vC,MAAA,GAgBAJ,EAAAhiD,UAAAw3B,MAAA,SAAA+rB,EAAA3kD,GACAU,EAAAikD,GAAAve,GAAA3lC,OAAAkG,EAAA3G,GAAA,sDACA0T,KAAAgxC,kBACAC,GAAAve,GAAA3lC,MAEAiT,KAAAgwC,QAAAlB,QAEAxiD,KAAA6H,OAAA3G,GAAAgH,qBAEApI,EAAAE,MACAF,EAAA,mEACA4T,KAAAgwC,QAAAhB,cAGA,OAAAhvC,KAAA+vC,SACA/vC,KAAAkxC,WACAlxC,KAAA+vC,OAAA7qB,QACAllB,KAAA+vC,OAAA,MAIA/vC,KAAA+Z,MAAAk3B,CACA,IAAApkB,GAAA7sB,KAAA6sB,QAKA,OAHA7sB,MAAA6sB,SAAA,KAGAokB,GAAAve,GAAAge,QACA7jB,EAAA7H,QAAA14B,GAGAo6B,QAAAvsB,WAOAu1C,EAAAhiD,UAAAwjD,SAAA,aACAxB,EAAAhiD,UAAA8iD,KAAA,WACA,GAAA9vC,GAAAV,IACAhT,GAAAgT,KAAA+Z,QAAA2Y,GAAAud,QAAA,oCACAjwC,KAAA+Z,MAAA2Y,GAAA0d,KACApwC,KAAA4vC,oBAAAuB,UAAA,GAAAhkB,KAAA,SAAAzyB,GAIAgG,EAAA0wC,YAAA12C,IACS,SAAApO,GACToU,EAAA0tC,MAAAyC,SAAA,WACA,GAAAnwC,EAAAqZ,QAAA2Y,GAAAge,QAAA,CAEA,GAAAW,GAAA,GAAA9jD,IAAAC,GAAA8G,QAAA,+BAAAhI,EAAAQ,QACA,OAAA4T,GAAA4wC,kBAAAD,GAGA,MAAA3qB,SAAAvsB,eAKAu1C,EAAAhiD,UAAA0jD,YAAA,SAAA12C,GACA,GAAAgG,GAAAV,IACA,IAAAA,KAAA+Z,QAAA2Y,GAAAge,QAAA,CAIA1jD,EAAAgT,KAAA+Z,QAAA2Y,GAAA0d,KAAA,6CAIA,IAAAmB,GAAA,SAAAxB,EAAAzhD,GACAoS,EAAA0tC,MAAAyC,SAAA,WAEA,MAAAnwC,GAAAqvC,WACAzhD,IAGAo4B,QAAAvsB,YAKA,WAAA6F,KAAA6sB,SAAA,CACA,GAAA2kB,GAAAxxC,KAAAyxC,SAAA/2C,EACAsF,MAAA+vC,OAAAyB,EACAxxC,KAAA+vC,OAAAjrB,OAAA,WACAysB,EAAAC,EAAA,WAGA,MAFAxkD,GAAA0T,EAAAqZ,QAAA2Y,GAAA0d,KAAA,gDAAA1vC,EAAAqZ,OACArZ,EAAAqZ,MAAA2Y,GAAA2d,KACA3vC,EAAAmsB,SAAA/H,aAGA9kB,KAAA+vC,OAAA/qB,QAAA,SAAA14B,GACAilD,EAAAC,EAAA,WACA,MAAA9wC,GAAA4wC,kBAAAhlD,OAGA0T,KAAA+vC,OAAA9qB,UAAA,SAAA/5B,GACAqmD,EAAAC,EAAA,WACA,MAAA9wC,GAAAukB,UAAA/5B,UAKAwkD,EAAAhiD,UAAA6iD,eAAA,SAAA1jB,GACA,GAAAnsB,GAAAV,IACAhT,GAAAgT,KAAA+Z,QAAA2Y,GAAA3lC,MAAA,gDACAiT,KAAA+Z,MAAA2Y,GAAAyd,QACAnwC,KAAAgwC,QAAAf,iBAAA9hB,KAAA,WAGAzsB,EAAA0tC,MAAAyC,SAAA,WACA,MAAAnwC,GAAAqZ,QAAA2Y,GAAAge,QAEAhqB,QAAAvsB,WAEAuG,EAAAqZ,MAAA2Y,GAAAud,QACAvvC,EAAAlI,MAAAq0B,GACA7/B,EAAA0T,EAAAwvC,YAAA,wCACAxpB,QAAAvsB,gBAIAu1C,EAAAhiD,UAAA4jD,kBAAA,SAAAhlD,GAQA,MAPAU,GAAAgT,KAAAkwC,YAAA,mDACAllD,EAxUA,mBAwUA,qBAAAsB,GACA0T,KAAA+vC,OAAA,KAKA/vC,KAAAklB,MAAAwN,GAAA3lC,MAAAT,IAEAojD,KAUAgC,GAAA,SAAAjxC,GAEA,QAAAixC,GAAA/nB,EAAAykB,EAAAuB,EAAA9zC,EAAAsjC,EAAA0Q,GACA,GAAAnvC,GAAAD,EAAAzS,KAAAgS,KAAAouC,EAAAuB,EAAA9zC,EAAAg0C,IAAA7vC,IAGA,OAFAU,GAAAipB,eACAjpB,EAAAy+B,aACAz+B,EAsCA,MA3CA2uC,IAAAqC,EAAAjxC,GAOAixC,EAAAhkD,UAAA+jD,SAAA,SAAA/2C,GACA,MAAAsF,MAAA2vC,WAAA7nB,WAAA,SAAAptB,IAEAg3C,EAAAhkD,UAAAu3B,UAAA,SAAA0sB,GAEA3xC,KAAAgwC,QAAAlB,OACA,IAAAt0B,GAAAxa,KAAAm/B,WAAAvf,gBAAA+xB,GACAxzC,EAAA6B,KAAAm/B,WAAAjf,0BAAAyxB,EACA,OAAA3xC,MAAA6sB,SAAA+kB,cAAAp3B,EAAArc,IAQAuzC,EAAAhkD,UAAAmkD,MAAA,SAAAvvB,GACA,GAAAroB,KACAA,GAAAqJ,SAAAtD,KAAAm/B,WAAA7hB,kBACArjB,EAAA63C,UAAA9xC,KAAAm/B,WAAAvc,SAAAN,EACA,IAAAyvB,GAAA/xC,KAAAm/B,WAAA9c,sBAAAC,EACAyvB,KACA93C,EAAA83C,UAEA/xC,KAAA+wC,YAAA92C,IAMAy3C,EAAAhkD,UAAAskD,QAAA,SAAAp+B,GACA,GAAA3Z,KACAA,GAAAqJ,SAAAtD,KAAAm/B,WAAA7hB,kBACArjB,EAAAg4C,aAAAr+B,EACA5T,KAAA+wC,YAAA92C,IAEAy3C,GACCjC,IAmBDyC,GAAA,SAAAzxC,GAEA,QAAA0xC,GAAAxoB,EAAAykB,EAAAuB,EAAA9zC,EAAAsjC,EAAA0Q,GACA,GAAAnvC,GAAAD,EAAAzS,KAAAgS,KAAAouC,EAAAuB,EAAA9zC,EAAAg0C,IAAA7vC,IAIA,OAHAU,GAAAipB,eACAjpB,EAAAy+B,aACAz+B,EAAA0xC,GAAA,EACA1xC,EA0EA,MAhFA2uC,IAAA8C,EAAA1xC,GAQA1S,OAAA4R,eAAAwyC,EAAAzkD,UAAA,qBAKAgK,IAAA,WACA,MAAAsI,MAAAoyC,GAEAzvC,YAAA,EACAC,cAAA,IAGAuvC,EAAAzkD,UAAA8K,MAAA,SAAAq0B,GACA7sB,KAAAoyC,GAAA,EACA3xC,EAAA/S,UAAA8K,MAAAxK,KAAAgS,KAAA6sB,IAEAslB,EAAAzkD,UAAAwjD,SAAA,WACAlxC,KAAAoyC,GACApyC,KAAAqyC,oBAGAF,EAAAzkD,UAAA+jD,SAAA,SAAA/2C,GACA,MAAAsF,MAAA2vC,WAAA7nB,WAAA,QAAAptB,IAEAy3C,EAAAzkD,UAAAu3B,UAAA,SAAAqtB,GAIA,GAFAtlD,IAAAslD,EAAA/X,YAAA,+CACAv6B,KAAA+6B,gBAAAuX,EAAA/X,YACAv6B,KAAAoyC,EAMA,CAIApyC,KAAAgwC,QAAAlB,OACA,IAAA79C,GAAA+O,KAAAm/B,WAAAne,iBAAAsxB,EAAAC,cACAjY,EAAAt6B,KAAAm/B,WAAAviB,YAAA01B,EAAAE,WACA,OAAAxyC,MAAA6sB,SAAA4lB,iBAAAnY,EAAArpC,GATA,MAFAjE,IAAAslD,EAAAC,cAAA,IAAAD,EAAAC,aAAAjnD,OAAA,sCACA0U,KAAAoyC,GAAA,EACApyC,KAAA6sB,SAAA6lB,uBAiBAP,EAAAzkD,UAAAilD,eAAA,WACA3lD,EAAAgT,KAAAswC,SAAA,+CACAtjD,GAAAgT,KAAAoyC,EAAA,8BAGA,IAAAn4C,KACAA,GAAAqJ,SAAAtD,KAAAm/B,WAAA7hB,kBACAtd,KAAA+wC,YAAA92C,IAGAk4C,EAAAzkD,UAAA2kD,eAAA,SAAAvY,GACA,GAAAp5B,GAAAV,IACAhT,GAAAgT,KAAAswC,SAAA,+CACAtjD,EAAAgT,KAAAoyC,EAAA,uDACAplD,EAAAgT,KAAA+6B,gBAAAzvC,OAAA,6CACA,IAAA2O,IAGAsgC,YAAAv6B,KAAA+6B,gBACA6X,OAAA9Y,EAAAjuC,IAAA,SAAAu0B,GAAuD,MAAA1f,GAAAy+B,WAAAhf,WAAAC,KAEvDpgB,MAAA+wC,YAAA92C,IAEAk4C,GACC1C,IcnfDoD,GAAA,WACA,QAAAC,GAAAnpB,EAAAykB,EAAAuB,EAAA9zC,EAAAsjC,EAAA0Q,GACA7vC,KAAA2pB,eACA3pB,KAAAouC,QACApuC,KAAA2vC,aACA3vC,KAAAnE,cACAmE,KAAAm/B,aACAn/B,KAAA6vC,sBAuDA,MArDAiD,GAAAplD,UAAAqlD,yBAAA,WACA,UAAAb,IAAAlyC,KAAA2pB,aAAA3pB,KAAAouC,MAAApuC,KAAA2vC,WAAA3vC,KAAAnE,YAAAmE,KAAAm/B,WAAAn/B,KAAA6vC,sBAEAiD,EAAAplD,UAAAslD,yBAAA,WACA,UAAAtB,IAAA1xC,KAAA2pB,aAAA3pB,KAAAouC,MAAApuC,KAAA2vC,WAAA3vC,KAAAnE,YAAAmE,KAAAm/B,WAAAn/B,KAAA6vC,sBAEAiD,EAAAplD,UAAAmqC,OAAA,SAAAiC,GACA,GAAAp5B,GAAAV,KACAizC,GACA3vC,SAAAtD,KAAAm/B,WAAA7hB,kBACAs1B,OAAA9Y,EAAAjuC,IAAA,SAAA44C,GAAgD,MAAA/jC,GAAAy+B,WAAAhf,WAAAskB,KAEhD,OAAAzkC,MAAAsmB,UAAA,SAAA2sB,GAAA9lB,KAAA,SAAA+lB,GACA,MAAAxyC,GAAAy+B,WAAAne,iBAAAkyB,EAAAX,iBAGAO,EAAAplD,UAAAylD,OAAA,SAAA77B,GACA,GAAA5W,GAAAV,KACAizC,GACA3vC,SAAAtD,KAAAm/B,WAAA7hB,kBACA3hB,UAAA2b,EAAAzrB,IAAA,SAAAyc,GAA8C,MAAA5H,GAAAy+B,WAAAjiB,OAAA5U,KAE9C,OAAAtI,MAAA6nB,mBAAA,oBAAAorB,GAAA9lB,KAAA,SAAA+lB,GACA,GAAAh6B,GAAAzjB,GACAy9C,GAAAxkD,QAAA,SAAAiyB,GACA,GAAAniB,GAAAkC,EAAAy+B,WAAA9f,kBAAAsB,EACAzH,KAAAzR,OAAAjJ,EAAA1Q,IAAA0Q,IAEA,IAAA3P,KAMA,OALAyoB,GAAA5oB,QAAA,SAAAZ,GACA,GAAA0Q,GAAA0a,EAAAxhB,IAAA5J,EACAd,KAAAwR,EAAA,wCAAA1Q,GACAe,EAAA8J,KAAA6F,KAEA3P,KAIAikD,EAAAplD,UAAA44B,UAAA,SAAAC,EAAAtsB,GACA,GAAAyG,GAAAV,IAEA,OAAAA,MAAAnE,YAAAs1C,UAAA,GAAAhkB,KAAA,SAAAzyB,GACA,MAAAgG,GAAAivC,WAAArpB,UAAAC,EAAAtsB,EAAAS,MAIAo4C,EAAAplD,UAAAm6B,mBAAA,SAAAtB,EAAAtsB,GACA,GAAAyG,GAAAV,IAEA,OAAAA,MAAAnE,YAAAs1C,UAAA,GAAAhkB,KAAA,SAAAzyB,GACA,MAAAgG,GAAAivC,WAAA9nB,mBAAAtB,EAAAtsB,EAAAS,MAGAo4C,KC7DAM,GAAA,WACA,QAAAC,GAAAC,GACAtzC,KAAAszC,YAEAtzC,KAAAuzC,aAAA19C,KACAmK,KAAA85B,aACA95B,KAAAwzC,WAAA,EAgGA,MA9FAH,GAAA3lD,UAAA+lD,cAAA,SAAAj1C,GACA,GAAAk1C,GAAAl1C,EAAAiI,OACAjI,aAAA2I,MAEAusC,EAAA1gC,GAAAK,gBAEA,IAAAsgC,GAAA3zC,KAAAuzC,aAAA77C,IAAA8G,EAAA1Q,IACA,WAAA6lD,GACA,IAAAD,EAAA3hD,OAAA4hD,GAEA,SAAApmD,IAAAC,GAAAwH,QAAA,mDAIAgL,MAAAuzC,aAAAvzC,KAAAuzC,aAAA9rC,OAAAjJ,EAAA1Q,IAAA4lD,IAGAL,EAAA3lD,UAAAylD,OAAA,SAAA77B,GACA,GAAA5W,GAAAV,IACA,OAAAA,MAAAwzC,UACA9sB,QAAAtsB,OAAA,sCAEA4F,KAAA85B,UAAAxuC,OAAA,EACAo7B,QAAAtsB,OAAA,kDAEA4F,KAAAszC,UAAAH,OAAA77B,GAAA6V,KAAA,SAAAjU,GAEA,MADAA,GAAAxqB,QAAA,SAAA8P,GAAyC,MAAAkC,GAAA+yC,cAAAj1C,KACzC0a,KAGAm6B,EAAA3lD,UAAAopC,MAAA,SAAAgD,GACA,GAAA95B,KAAAwzC,UACA,SAAAjmD,IAAAC,GAAAuH,oBAAA,qCAEAiL,MAAA85B,UAAA95B,KAAA85B,UAAA3tC,OAAA2tC,IAMAuZ,EAAA3lD,UAAA8nB,aAAA,SAAA1nB,GACA,GAAA2Y,GAAAzG,KAAAuzC,aAAA77C,IAAA5J,EACA,OAAA2Y,GACAiO,GAAAE,WAAAnO,GAGAiO,GAAAO,MAMAo+B,EAAA3lD,UAAAkmD,sBAAA,SAAA9lD,GACA,GAAA2Y,GAAAzG,KAAAuzC,aAAA77C,IAAA5J,EACA,IAAA2Y,KAAA1U,OAAAihB,GAAAK,iBAEA,SAAA9lB,IAAAC,GAAAuH,oBAAA,8CAEA,OAAA0R,GAEAiO,GAAAE,WAAAnO,GAKAiO,GAAAG,QAAA,IAGAw+B,EAAA3lD,UAAAqf,IAAA,SAAAjf,EAAA4Y,GACA1G,KAAA82B,MAAApwB,EAAAmtC,YAAA/lD,EAAAkS,KAAAwV,aAAA1nB,MAEAulD,EAAA3lD,UAAAqmB,OAAA,SAAAjmB,EAAA4Y,GACA1G,KAAA82B,MAAApwB,EAAAmtC,YAAA/lD,EAAAkS,KAAA4zC,sBAAA9lD,MAEAulD,EAAA3lD,UAAAsR,OAAA,SAAAlR,GACAkS,KAAA82B,OAAA,GAAAjgB,IAAA/oB,EAAAkS,KAAAwV,aAAA1nB,MAGAkS,KAAAuzC,aAAAvzC,KAAAuzC,aAAA9rC,OAAA3Z,EAAAklB,GAAAK,kBAEAggC,EAAA3lD,UAAAmqC,OAAA,WACA,GAAAn3B,GAAAV,KACA8zC,EAAA9zC,KAAAuzC,YAKA,OAHAvzC,MAAA85B,UAAAprC,QAAA,SAAA0xB,GACA0zB,IAAAlsC,OAAAwY,EAAAtyB,OAEAgmD,EAAAnlD,UAGAqR,KAAAszC,UAAAzb,OAAA73B,KAAA85B,WAAA3M,KAAA,WACAzsB,EAAA8yC,WAAA,IAHA9sB,QAAAtsB,OAAArN,MAAA,gEAMAsmD,KCpEAU,GAAA,WACA,QAAAC,GAKAze,EAEA+d,EAAAW,GACAj0C,KAAAu1B,aACAv1B,KAAAszC,YACAtzC,KAAAi0C,qBACAj0C,KAAAk0C,iBACAl0C,KAAAm0C,cAAAxa,GAUA35B,KAAAoa,iBAeApa,KAAAqa,0BACAra,KAAAo0C,2BACAp0C,KAAAq0C,YAAA,KACAr0C,KAAAs0C,YAAA,KAKAt0C,KAAAu0C,uBAAAxqB,GAAA0C,QAEAzsB,KAAAw0C,oBAAA,EAEAx0C,KAAAy0C,mBAAA,EAmhBA,MA7gBAT,GAAAtmD,UAAA8K,MAAA,WACA,MAAAwH,MAAA00C,iBAEAV,EAAAtmD,UAAAinD,wBAAA,WACA30C,KAAAy0C,mBAAA,EACAz0C,KAAA40C,8BAAA7qB,GAAA8qB,UAEAb,EAAAtmD,UAAAonD,wBAAA,WAOA90C,KAAAw0C,oBAAA,EACAx0C,KAAA40C,8BAAA7qB,GAAA0C,UAEAunB,EAAAtmD,UAAAqnD,8BAAA,WAIA/0C,KAAAu0C,yBAAAxqB,GAAA8qB,QACA70C,KAAA80C,4BAGA90C,KAAAw0C,qBArGA,IAuGAx0C,KAAAy0C,oBACAroD,EAAA,sCACA4T,KAAAy0C,mBAAA,GAEAz0C,KAAA40C,8BAAA7qB,GAAAqE,UAIA4lB,EAAAtmD,UAAAknD,8BAAA,SAAApoB,GACA,GAAAwoB,GAAAh1C,KAAAu0C,yBAAA/nB,CACAxsB,MAAAu0C,uBAAA/nB,EACAwoB,GACAh1C,KAAAi0C,mBAAAznB,IAGAwnB,EAAAtmD,UAAAunD,iBAAA,WAEA,MADAjoD,GAAA,MAAAgT,KAAAq0C,cAAA,MAAAr0C,KAAAs0C,aAAA,+DACA,MAAAt0C,KAAAq0C,aAGAL,EAAAtmD,UAAAgnD,cAAA,WACA,GAAAh0C,GAAAV,IAOA,OANAhT,GAAA,MAAAgT,KAAAq0C,YAAA,qDACArnD,EAAA,MAAAgT,KAAAs0C,YAAA,qDAEAt0C,KAAAq0C,YAAAr0C,KAAAszC,UAAAN,2BACAhzC,KAAAs0C,YAAAt0C,KAAAszC,UAAAP,2BAEA/yC,KAAAu1B,WAAA2K,qBAAA/S,KAAA,SAAAzyB,GAMA,MALAgG,GAAA4zC,YAAAvZ,gBAAArgC,EACAgG,EAAAw0C,0BACAx0C,EAAAy0C,mBAEAz0C,EAAAk0C,8BAAA7qB,GAAA0C,SACA/rB,EAAA22B,uBAIA2c,EAAAtmD,UAAA0nD,eAAA,WAUA,MATAp1C,MAAA40C,8BAAA7qB,GAAAqE,QAGApuB,KAAAq0C,YAAA5D,OACAzwC,KAAAs0C,YAAA7D,OACAzwC,KAAAq1C,0BACAr1C,KAAAs1C,0BACAt1C,KAAAs0C,YAAA,KACAt0C,KAAAq0C,YAAA,KACA3tB,QAAAvsB,WAEA65C,EAAAtmD,UAAAi4C,SAAA,WAGA,MAFA36C,GAlKA,cAkKA,8BACAgV,KAAAo1C,iBACA1uB,QAAAvsB,YAAA/L,KAGA4lD,EAAAtmD,UAAAo7B,OAAA,SAAAxG,GACAt1B,GAAAa,EAAAmS,KAAAoa,cAAAkI,EAAA1O,UAAA,0CAEA5T,KAAAoa,cAAAkI,EAAA1O,UAAA0O,EACAtiB,KAAAk1C,yBAEAl1C,KAAAm1C,mBAEAn1C,KAAAi1C,oBAAAj1C,KAAAq0C,YAAA/D,UACAtwC,KAAAu1C,iBAAAjzB,IAIA0xB,EAAAtmD,UAAA0/B,SAAA,SAAAxZ,GACA5mB,EAAAa,EAAAmS,KAAAoa,cAAAxG,GAAA,+CACA5T,KAAAoa,cAAAxG,SACA5T,MAAAoa,cAAAxG,GACA5T,KAAAi1C,oBAAAj1C,KAAAq0C,YAAA/D,WACAtwC,KAAAw1C,mBAAA5hC,GACAjlB,EAAAqR,KAAAoa,gBACApa,KAAAq0C,YAAAzD,aAQAoD,EAAAtmD,UAAA6nD,iBAAA,SAAAjzB,GACAtiB,KAAAy1C,2BAAAnzB,EAAA1O,UACA5T,KAAAq0C,YAAAxC,MAAAvvB,IAOA0xB,EAAAtmD,UAAA8nD,mBAAA,SAAA5hC,GACA5T,KAAAy1C,2BAAA7hC,GACA5T,KAAAq0C,YAAArC,QAAAp+B,IAMAogC,EAAAtmD,UAAA+nD,2BAAA,SAAA7hC,GAEA5T,KAAAqa,uBAAAzG,IACA5T,KAAAqa,uBAAAzG,IAAA,MAEAogC,EAAAtmD,UAAAynD,iBAAA,WACAnoD,EAAAgT,KAAAk1C,yBAAA,qEACAl1C,KAAAq0C,YAAA77C,OACAssB,OAAA9kB,KAAA01C,kBAAA9+C,KAAAoJ,MACAglB,QAAAhlB,KAAA21C,mBAAA/+C,KAAAoJ,MACA4xC,cAAA5xC,KAAA41C,oBAAAh/C,KAAAoJ,SAOAg0C,EAAAtmD,UAAAwnD,uBAAA,WACA,MAAAl1C,MAAAi1C,qBACAj1C,KAAAq0C,YAAAnE,cACAvhD,EAAAqR,KAAAoa,gBAEA45B,EAAAtmD,UAAA2nD,wBAAA,WAKAr1C,KAAAo0C,2BACAp0C,KAAAqa,2BAEA25B,EAAAtmD,UAAAgoD,kBAAA,WACA,GAAAh1C,GAAAV,IAMA,OAHA3R,GAAA2R,KAAAoa,cAAA,SAAAxG,EAAA0O,GACA5hB,EAAA60C,iBAAAjzB,KAEAoE,QAAAvsB,WAEA65C,EAAAtmD,UAAAioD,mBAAA,SAAArpD,GAcA,MAbAU,GAAAgT,KAAAi1C,mBAAA,0EACAj1C,KAAAq1C,0BAEAr1C,KAAAk1C,0BACAl1C,KAAA+0C,gCACA/0C,KAAAm1C,oBAMAn1C,KAAA80C,0BAEApuB,QAAAvsB,WAEA65C,EAAAtmD,UAAAkoD,oBAAA,SAAAp7B,EAAA1G,GAGA,GADA9T,KAAA20C,0BACAn6B,YAAAX,KACAW,EAAAT,QAAAf,GAAA1hB,SACAkjB,EAAAP,MAGA,MAAAja,MAAA61C,kBAAAr7B,EAMA,IADAxa,KAAAo0C,wBAAAz7C,KAAA6hB,IACA1G,EAAA/hB,OAAAihB,GAAAM,MACAQ,EAAAvQ,UAAAvD,KAAAu1B,WAAAsN,iCAAA,GACA,GAAAlY,GAAA3qB,KAAAo0C,uBAEA,OADAp0C,MAAAo0C,2BACAp0C,KAAA81C,uBAAAhiC,EAAA6W,GAGA,MAAAjE,SAAAvsB,WAQA65C,EAAAtmD,UAAAooD,uBAAA,SAAAhiC,EAAA6W,GACA,GAAAjqB,GAAAV,KACA+1C,EAAA,GAAA77B,IAAApG,EAAA9T,KAAAoa,cAAApa,KAAAqa,uBACA07B,GAAAn7B,WAAA+P,EACA,IAAAoN,GAAAge,EAAAj7B,mBAEA9a,MAAAqa,uBAAA07B,EAAA17B,sBACA,IAAAiW,KAoEA,OAlEAjiC,GAAA0nD,EAAAz7B,iBAAA,SAAA1G,EAAA3O,GACA,GAAAqd,GAAA5hB,EAAA0Z,cAAAxG,EACA,IAAA0O,EAAA,CAIA,GAAA3jB,GAAA2jB,EAAA3jB,KACA,IAAAA,EAAAlD,kBACA,OAAAwJ,EAAAgS,MAAA,CAOA,GAAAnpB,GAAA,GAAAiY,IAAApH,EAAAnI,MACAw/C,EAAA,GAAA7uC,IAAArZ,EAAAgmB,EACAikB,GAAArf,kBAAAs9B,OAGAhpD,GAAA,IAAAiY,EAAAgS,MAAA,gDAAAhS,EAAAgS,WAGA,CAEA,GAAAsY,GAAA7uB,EAAA60B,WACAgB,mBAAA3iB,GACAuZ,KAAA,SAAA8oB,GACA,GAAAle,EAAAvf,cAAA5E,GAAA,CACA,GAAAgF,GAAAmf,EAAAvf,cAAA5E,GAAAgF,OACA,QAAAA,IACAA,YAAAO,IACA88B,EAAAr9B,EAAAU,cAAA28B,IAGAjpD,EAAA4rB,YAAAC,IAAA,mEACAD,GACAq9B,EAAAr9B,EAAAjd,YAIA,GAAAs6C,EAAA5xC,OAAAY,EAAAgS,MAAA,CAGA8gB,EAAApf,8BAAA/E,EAGA,IAAAsiC,GAAA,GAAAxiC,IAAA/U,EAAAiV,EAAA0O,EAAAzO,QACAnT,GAAA0Z,cAAAxG,GAAAsiC,EAKAx1C,EAAA80C,mBAAA5hC,EAMA,IAAAuiC,GAAA,GAAAziC,IAAA/U,EAAAiV,EAAA/I,GAAA6X,wBACAhiB,GAAA60C,iBAAAY,KAGA7lB,GAAA33B,KAAA42B,OAGA7I,QAAA4I,IAAAgB,GAAAnD,KAAA,WAgBA,MAbA9+B,GAAA0pC,EAAAvf,cAAA,SAAA5E,EAAA1d,GACA,GAAAA,EAAAC,YAAA7K,OAAA,GACA,GAAAg3B,GAAA5hB,EAAA0Z,cAAAxG,EAEA0O,KACA5hB,EAAA0Z,cAAAxG,GAAA0O,EAAAvO,QACA5d,YAAAD,EAAAC,YACA2d,gBAAA5d,EAAA4d,sBAMApT,EAAA2rB,WAAAyL,iBAAAC,MAIAic,EAAAtmD,UAAAmoD,kBAAA,SAAAr7B,GACA,GAAA9Z,GAAAV,IACAhT,KAAAwtB,EAAAP,MAAA,wCACA,IAAA3tB,GAAAkuB,EAAAP,MACA8xB,EAAArlB,QAAAvsB,SAaA,OAZAqgB,GAAAR,UAAAtrB,QAAA,SAAAklB,GACAm4B,IAAA5e,KAAA,WACA,MAAAt/B,GAAA6S,EAAA0Z,cAAAxG,UACAlT,GAAA0Z,cAAAxG,GACAlT,EAAA2rB,WAAA4L,aAAArkB,EAAAtnB,IAIAo6B,QAAAvsB,cAIA4xC,GAEAiI,EAAAtmD,UAAA4nD,wBAAA,WACAt1C,KAAAm0C,cAAAxa,GACA35B,KAAAk0C,kBAMAF,EAAAtmD,UAAA2pC,kBAAA,WACA,GAAA32B,GAAAV,IACA,OAAAA,MAAAo2C,oBAIAp2C,KAAAu1B,WACA+V,kBAAAtrC,KAAAm0C,eACAhnB,KAAA,SAAA4J,GACA,cAAAA,GACA,GAAAr2B,EAAAwzC,cAAA5oD,QACAoV,EAAA4zC,YAAA1D,WAEAlqB,QAAAvsB,YAGAuG,EAAAm3B,OAAAd,GACAr2B,EAAA22B,uBAdA3Q,QAAAvsB,WA6BA65C,EAAAtmD,UAAA0oD,kBAAA,WACA,MAAAp2C,MAAAi1C,oBAAAj1C,KAAAk0C,cAAA5oD,OAjcA,IAocA0oD,EAAAtmD,UAAA2oD,kBAAA,WACA,MAAAr2C,MAAAk0C,cAAA5oD,QAOA0oD,EAAAtmD,UAAAmqC,OAAA,SAAAd,GACA/pC,EAAAgT,KAAAo2C,oBAAA,+CACAp2C,KAAAm0C,cAAApd,EAAAI,QACAn3B,KAAAk0C,cAAAv7C,KAAAo+B,GACA/2B,KAAAs2C,yBACAt2C,KAAAu2C,mBAEAv2C,KAAAi1C,oBAAAj1C,KAAAs0C,YAAAkC,mBACAx2C,KAAAs0C,YAAAjC,eAAAtb,EAAA+C,YAGAka,EAAAtmD,UAAA4oD,uBAAA,WACA,MAAAt2C,MAAAi1C,qBACAj1C,KAAAs0C,YAAApE,aACAlwC,KAAAk0C,cAAA5oD,OAAA,GAEA0oD,EAAAtmD,UAAA6oD,iBAAA,WACAvpD,EAAAgT,KAAAs2C,yBAAA,qEACAt2C,KAAAs0C,YAAA97C,OACAssB,OAAA9kB,KAAAy2C,kBAAA7/C,KAAAoJ,MACAglB,QAAAhlB,KAAA02C,mBAAA9/C,KAAAoJ,MACA0yC,oBAAA1yC,KAAA22C,yBAAA//C,KAAAoJ,MACAyyC,iBAAAzyC,KAAAyyC,iBAAA77C,KAAAoJ,SAGAg0C,EAAAtmD,UAAA+oD,kBAAA,WAEA,MADAz2C,MAAAs0C,YAAA3B,iBACAjsB,QAAAvsB,WAEA65C,EAAAtmD,UAAAipD,yBAAA,WACA,GAAAj2C,GAAAV,IAEA,OAAAA,MAAAu1B,WACA4K,mBAAAngC,KAAAs0C,YAAAvZ,iBACA5N,KAAA,WAcA,OAAA/hC,GAAA,EAAAujB,EAAAjO,EAAAwzC,cAAsD9oD,EAAAujB,EAAArjB,OAAgBF,IAAA,CACtE,GAAA2rC,GAAApoB,EAAAvjB,EACAsV,GAAA4zC,YAAAjC,eAAAtb,EAAA+C,eAIAka,EAAAtmD,UAAA+kD,iBAAA,SAAAnY,EAAArpC,GACA,GAAAyP,GAAAV,IAGAhT,GAAAgT,KAAAk0C,cAAA5oD,OAAA,wCACA,IAAAyrC,GAAA/2B,KAAAk0C,cAAA0C,QACAC,EAAAzc,GAAA3Y,KAAAsV,EAAAuD,EAAArpC,EAAA+O,KAAAs0C,YAAAvZ,gBACA,OAAA/6B,MAAAqsB,WAAAgM,qBAAAwe,GAAA1pB,KAAA,WAGA,MAAAzsB,GAAA22B,uBAGA2c,EAAAtmD,UAAAgpD,mBAAA,SAAApqD,GACA,GAAAoU,GAAAV,IAIA,IAHAhT,EAAAgT,KAAAi1C,mBAAA,0EAGA3oD,GAAA0T,KAAAk0C,cAAA5oD,OAAA,GACA0B,IAAAV,EAAA,uEAEA,IAAAwqD,OAAA,EAWA,OARAA,GAFA92C,KAAAs0C,YAAAkC,kBAEAx2C,KAAA+2C,iBAAAzqD,GAMA0T,KAAAg3C,qBAAA1qD,GAEAwqD,EAAA3pB,KAAA,WAGAzsB,EAAA41C,0BACA51C,EAAA61C,qBAMA,MAAA7vB,SAAAvsB,WAGA65C,EAAAtmD,UAAAspD,qBAAA,SAAA1qD,GAGA,MAAA4H,GAAA5H,EAAA6H,OAAA7H,EAAA6H,OAAA3G,GAAAwH,SACAhK,EArjBA,cAqjBA,yEAA6EgV,KAAAs0C,YAAAvZ,iBAC7E/6B,KAAAs0C,YAAAvZ,gBAAA7tC,IACA8S,KAAAu1B,WAAA4K,mBAAAjzC,MAKAw5B,QAAAvsB,WAGA65C,EAAAtmD,UAAAqpD,iBAAA,SAAAzqD,GACA,GAAAoU,GAAAV,IACA,IAAA9L,EAAA5H,EAAA6H,MAAA,CAGA,GAAA4iC,GAAA/2B,KAAAk0C,cAAA0C,OAKA,OADA52C,MAAAs0C,YAAA3D,iBACA3wC,KAAAqsB,WACAoM,kBAAA1B,EAAAI,QAAA7qC,GACA6gC,KAAA,WAGA,MAAAzsB,GAAA22B,sBAKA,MAAA3Q,SAAAvsB,WAGA65C,EAAAtmD,UAAAiqC,kBAAA,WACA,UAAAyb,IAAApzC,KAAAszC,YAEAU,EAAAtmD,UAAA+rC,iBAAA,SAAAC,GAMA,MALA1uC,GA1lBA,cA0lBA,mCAAA0uC,EAAA2F,KAIAr/B,KAAAo1C,iBACAp1C,KAAA00C,iBAEAV,KC7lBAiD,GAAA,WACA,QAAAC,GAAA3qD,EAAAo9B,EAAA9tB,EASAs7C,GACAn3C,KAAAzT,WACAyT,KAAA2pB,eACA3pB,KAAAnE,cACAmE,KAAAm3C,aAuPA,MAnNAD,GAAAxpD,UAAA8K,MAAA,SAAA4+C,GACA,GAAA12C,GAAAV,KAQAq3C,EAAA,GAAA7I,IAOA8I,EAAA,GAAA9I,IACA+I,GAAA,CAqBA,OApBAv3C,MAAAnE,YAAA27C,sBAAA,SAAA9d,GACA6d,EAOA72C,EAAAy2C,WAAAtG,SAAA,WACA,MAAAnwC,GAAA+4B,iBAAAC,MAPA6d,GAAA,EACA72C,EAAA+2C,sBAAAL,EAAAE,GACAnqB,KAAA,WAAuC,MAAAzsB,GAAAg3C,eAAAhe,KACvCvM,KAAAkqB,EAAAl9C,QAAAk9C,EAAAj9C,WASA4F,KAAAm3C,WAAAtG,SAAA,WACA,MAAAwG,GAAA9nB,UAKA+nB,EAAA/nB,SAGA2nB,EAAAxpD,UAAAgnD,cAAA,WACA,GAAAh0C,GAAAV,IACA,OAAAA,MAAAm3C,WAAAtG,SAAA,WACA,MAAAnwC,GAAA80B,YAAAkf,mBAoBAwC,EAAAxpD,UAAA+pD,sBAAA,SAAAL,EAAAE,GACA,GAAA52C,GAAAV,IACA,OAAAo3C,GACAp3C,KAAA23C,4BACAxqB,KAAAmqB,EAAAn9C,SACA20B,MAAA,SAAAxiC,GAKA,MAFAgrD,GAAAl9C,OAAA9N,GAEAoU,EAAAk3C,YAAAtrD,IAGAP,QAAA8rD,KAAA,qEAEAvrD,GACAoU,EAAAo3C,0BALApxB,QAAAtsB,OAAA9N,MAaAgrD,EAAAn9C,UACA6F,KAAA83C,2BAGAZ,EAAAxpD,UAAAkqD,YAAA,SAAAtrD,GACA,MAAAA,GAAA6H,OAAA3G,GAAAuH,qBACAzI,EAAA6H,OAAA3G,GAAAoF,eAOAskD,EAAAxpD,UAAAiqD,0BAAA,WAGA33C,KAAAyxB,iBAAA,GAAA6c,GACA,IAAAyJ,GAAAjT,GAAAsB,mBAAApmC,KAAA2pB,cAEAwV,EAAA,GAAApjB,IAAA/b,KAAA2pB,aAAA7mB,YACAmZ,eAAA,GAGA,OADAjc,MAAAgpC,YAAA,GAAAlE,IAAAiT,EAAA5Y,GACAn/B,KAAAgpC,YAAAxwC,SAOA0+C,EAAAxpD,UAAAoqD,uBAAA,WAGA,MAFA93C,MAAAyxB,iBAAA,GAAA9B,IACA3vB,KAAAgpC,YAAA,GAAAiF,IACAjuC,KAAAgpC,YAAAxwC,SAOA0+C,EAAAxpD,UAAAgqD,eAAA,SAAAhe,GACA,GAAAh5B,GAAAV,IACA,OAAAA,MAAAzT,SACAm9B,eAAA1pB,KAAA2pB,cACAwD,KAAA,SAAAwiB,GACAjvC,EAAA60B,WAAA,GAAAwT,IAAAroC,EAAAsoC,YAAAtP,EAAAh5B,EAAA+wB,iBACA,IAAA0N,GAAAz+B,EAAAnU,SAAAq9B,cAAAlpB,EAAAipB,aAAA7mB,YACAwwC,EAAA,GAAAT,IAAAnyC,EAAAipB,aAAAjpB,EAAAy2C,WAAAxH,EAAAjvC,EAAA7E,YAAAsjC,GACA6Y,EAAA,SAAAxrB,GACA9rB,EAAAu3C,SAAAjrB,qBAAAR,GAUA,OARA9rB,GAAA80B,YAAA,GAAAue,IAAArzC,EAAA60B,WAAA+d,EAAA0E,GACAt3C,EAAA2rB,WAAA,GAAAiJ,IAAA50B,EAAA60B,WAAA70B,EAAA80B,YAAAkE,GAEAh5B,EAAA80B,YAAAnJ,WAAA3rB,EAAA2rB,WACA3rB,EAAAu3C,SAAA,GAAA9rB,IAAAzrB,EAAA2rB,YAIA3rB,EAAA60B,WAAA/8B,UAEA20B,KAAA,WACA,MAAAzsB,GAAA80B,YAAAh9B,WAGA0+C,EAAAxpD,UAAA+rC,iBAAA,SAAAC,GAGA,MAFA15B,MAAAm3C,WAAAe,4BACAltD,EAnNA,kBAmNA,iBAAA0uC,EAAA2F,KACAr/B,KAAAqsB,WAAAoN,iBAAAC,IAGAwd,EAAAxpD,UAAA0nD,eAAA,WACA,GAAA10C,GAAAV,IACA,OAAAA,MAAAm3C,WAAAtG,SAAA,WACA,MAAAnwC,GAAA80B,YAAA4f,oBAGA8B,EAAAxpD,UAAAi4C,SAAA,WACA,GAAAjlC,GAAAV,IACA,OAAAA,MAAAm3C,WACAtG,SAAA,WAEA,MADAnwC,GAAA7E,YAAAs8C,2BACAz3C,EAAA80B,YAAAmQ,aAEAxY,KAAA,WAEA,MAAAzsB,GAAAsoC,YAAArD,cAGAuR,EAAAxpD,UAAAo7B,OAAA,SAAAnqB,EAAAy5C,EAAA/mD,GACA,GAAAqP,GAAAV,KACA6sB,EAAA,GAAAW,IAAA7uB,EAAAy5C,EAAA/mD,EAIA,OAHA2O,MAAAm3C,WAAAtG,SAAA,WACA,MAAAnwC,GAAAu3C,SAAAnvB,OAAA+D,KAEAA,GAEAqqB,EAAAxpD,UAAA0/B,SAAA,SAAAP,GACA,GAAAnsB,GAAAV,IACAA,MAAAm3C,WAAAtG,SAAA,WACA,MAAAnwC,GAAAu3C,SAAA7qB,SAAAP,MAGAqqB,EAAAxpD,UAAAopC,MAAA,SAAAgD,GACA,GAAAp5B,GAAAV,KACAq4C,EAAA,GAAA7J,GAEA,OADAxuC,MAAAm3C,WAAAtG,SAAA,WAA8C,MAAAnwC,GAAA2rB,WAAAyK,MAAAgD,EAAAue,KAC9CA,EAAA9oB,SAEA2nB,EAAAxpD,UAAAoV,WAAA,WACA,MAAA9C,MAAA2pB,aAAA7mB,YAEAo0C,EAAAxpD,UAAAgqC,YAAA,SAAAF,GACA,GAAA92B,GAAAV,IAEA,OAAAA,MAAAm3C,WACAtG,SAAA,WACA,MAAAnqB,SAAAvsB,YAEAgzB,KAAA,WACA,MAAAzsB,GAAA2rB,WAAAkL,eAAAC,MAGA0f,KCnRAoB,GAAA,WACA,QAAAA,GAAAF,GACAp4C,KAAAo4C,WAKAp4C,KAAAu4C,OAAA,EAqBA,MAnBAD,GAAA5qD,UAAAoY,KAAA,SAAA5X,GACA8R,KAAAw4C,cAAAx4C,KAAAo4C,SAAAtyC,KAAA5X,IAEAoqD,EAAA5qD,UAAApB,MAAA,SAAAA,GACA0T,KAAAw4C,cAAAx4C,KAAAo4C,SAAA9rD,UAEAgsD,EAAA5qD,UAAA+qD,KAAA,WACAz4C,KAAAu4C,OAAA,GAEAD,EAAA5qD,UAAA8qD,cAAA,SAAAE,EAAAp+C,GACA,GAAAoG,GAAAV,IACAA,MAAAu4C,OACAvvB,WAAA,WACAtoB,EAAA63C,OACAG,EAAAp+C,IAEa,IAGbg+C,KC7BAK,GAAA,WACA,QAAAC,KAEA54C,KAAA64C,KAAAnyB,QAAAvsB,UAMA6F,KAAA84C,qBAMA94C,KAAA+4C,uBAAA,EAGA/4C,KAAAg5C,qBAAA,EAoGA,MA3FAJ,GAAAlrD,UAAAmjD,SAAA,SAAAr9C,EAAAylD,GACA,GAAAv4C,GAAAV,IAKA,IAJAA,KAAAnT,SACAD,EAAA,kCACAoT,KAAAnT,QAAAqsD,OAAAl5C,KAAAnT,QAAAC,WAEAmsD,GAAA,MACAj5C,KAAA+4C,wBACA,IAAAI,IACAC,OAAA,KACA5lD,KACA6kD,SAAA,GAAA7J,IAeA,OAbA2K,GAAAC,OAAApwB,WAAA,WACAtoB,EAAA24C,iBAAA,WACA,MAAAF,GAAA3lD,KAAA25B,KAAA,SAAAt+B,GACAsqD,EAAAd,SAAAl+C,QAAAtL,OAGAsqD,EAAAC,OAAA,KAEA,KADA14C,EAAAq4C,yBAEAr4C,EAAAo4C,uBAEaG,GACbj5C,KAAA84C,kBAAAngD,KAAAwgD,GACAA,EAAAd,SAAA9oB,QAGA,MAAAvvB,MAAAq5C,iBAAA7lD,IAGAolD,EAAAlrD,UAAA2rD,iBAAA,SAAA7lD,GACA,GAAAkN,GAAAV,IA0BA,OAzBAA,MAAA64C,KAAA74C,KAAA64C,KAAA1rB,KAAA,WAEA,MADAzsB,GAAAs4C,qBAAA,EACAxlD,IACAs7B,MAAA,SAAAxiC,GACAoU,EAAA7T,QAAAP,EACAoU,EAAAs4C,qBAAA,CACA,IAAAlsD,GAAAR,EAAA4sD,OAAA5sD,EAAAQ,SAAA,EAaA,MAZAV,GAAA,6BAAAU,GAIAA,EAAA0E,QAAA,qCACAw3B,WAAA,WACA,KAAA18B,IACqB,GAKrBA,IAEA6gC,KAAA,WACAzsB,EAAAs4C,qBAAA,MAGAh5C,KAAA64C,MAQAD,EAAAlrD,UAAAwqD,0BAAA,WACAlrD,EAAAgT,KAAAg5C,oBAAA,sEAMAJ,EAAAlrD,UAAA4rD,MAAA,SAAAC,GACA,GAAA74C,GAAAV,IAcA,OAbAA,MAAA84C,kBAAApqD,QAAA,SAAA8qD,GACAA,EAAAJ,SACAK,aAAAD,EAAAJ,QACAG,EACA74C,EAAA24C,iBAAAG,EAAAhmD,IAAA25B,KAAAqsB,EAAAnB,SAAAl+C,QAAAq/C,EAAAnB,SAAAj+C,QAGAo/C,EAAAnB,SAAAj+C,OAAA,GAAA7M,IAAAC,GAAA6G,UAAA,uCAIA2L,KAAA84C,qBACA94C,KAAA+4C,uBAAA,EACA/4C,KAAA6wC,SAAA,WAA0C,MAAAnqB,SAAAvsB,aAE1Cy+C,KCtHAc,GAAA,WACA,QAAAA,GAAAra,GACAr/B,KAAAq/B,MA0BA,MAxBAqa,GAAAhsD,UAAA4xC,kBAAA,WACA,aAAAt/B,KAAAq/B,KAMAqa,EAAAhsD,UAAAkrC,MAAA,WACA,MAAA54B,MAAAs/B,oBACA,iBAGA,OAAAt/B,KAAAq/B,KAGAqa,EAAAhsD,UAAAqE,OAAA,SAAA4nD,GACA,MAAAA,GAAAta,MAAAr/B,KAAAq/B,KAGAqa,EAAA/kD,gBAAA,GAAA+kD,GAAA,MAGAA,EAAAE,mBAAA,GAAAF,GAAA,0BACAA,EAAAG,YAAA,GAAAH,GAAA,mBACAA,KvD7BAI,GAAA,WACA,QAAAA,GAAA5rD,EAAAwrC,GACA15B,KAAA05B,OACA15B,KAAArQ,KAAA,QACAqQ,KAAAqmB,aAA4B0zB,cAAA,UAAA7rD,GAE5B,MAAA4rD,MAIAh+C,GAAA,WACA,QAAAk+C,KAMAh6C,KAAAi6C,aAAA,KAeA,MAbAD,GAAAtsD,UAAAyjD,SAAA,SAAA+I,GACA,MAAAxzB,SAAAvsB,QAAA,OAEA6/C,EAAAtsD,UAAA8pD,sBAAA,SAAA3qB,GACA7/B,GAAAgT,KAAAi6C,aAAA,+CACAj6C,KAAAi6C,aAAAptB,EAEAA,EAAA6sB,GAAA/kD,kBAEAqlD,EAAAtsD,UAAAyqD,yBAAA,WACAnrD,EAAA,OAAAgT,KAAAi6C,aAAA,0DACAj6C,KAAAi6C,aAAA,MAEAD,KAGAG,GAAA,WACA,QAAAC,GAAA96C,GACA,GAAAoB,GAAAV,IACAA,MAAAV,MAKAU,KAAAq6C,cAAA,KAKAr6C,KAAAs6C,YAAA,EAEAt6C,KAAAi6C,aAAA,KAGAj6C,KAAAq6C,cAAA,WACA,GAAAE,GAAA75C,EAAA85C,SACA95C,GAAA+0B,aAAA8kB,EAAAxoD,OAAA2O,EAAA+0B,eACA/0B,EAAA+0B,YAAA8kB,EACA75C,EAAA45C,cACA55C,EAAAu5C,cACAv5C,EAAAu5C,aAAAv5C,EAAA+0B,eAIAz1B,KAAAs6C,YAAA,EAEAt6C,KAAAV,IAAA7K,SAAAgmD,qBAAAz6C,KAAAq6C,eAoDA,MAlDAD,GAAA1sD,UAAAyjD,SAAA,SAAA+I,GACA,GAAAx5C,GAAAV,IACAhT,GAAA,MAAAgT,KAAAq6C,cAAA,oDAIA,IAAAK,GAAA16C,KAAAs6C,WACA,OAAAt6C,MAAAV,IAAA7K,SAAA08C,SAAA+I,GAAA/sB,KAAA,SAAAwtB,GAIA,GAAAj6C,EAAA45C,cAAAI,EACA,SAAAntD,IAAAC,GAAAwH,QAAA,sCAGA,OAAA2lD,IACA3tD,EAAA,gBAAA2tD,GAAAC,YAAA,8CAAAD,GACA,GAAAb,IAAAa,EAAAC,YAAAl6C,EAAA+0B,cAGA,QAKA2kB,EAAA1sD,UAAA8pD,sBAAA,SAAA3qB,GACA7/B,GAAAgT,KAAAi6C,aAAA,+CACAj6C,KAAAi6C,aAAAptB,EAEA7sB,KAAAy1B,aACA5I,EAAA7sB,KAAAy1B,cAGA2kB,EAAA1sD,UAAAyqD,yBAAA,WACAnrD,EAAA,MAAAgT,KAAAq6C,cAAA,2CACArtD,EAAA,OAAAgT,KAAAi6C,aAAA,iEACAj6C,KAAAV,IAAA7K,SAAAomD,wBAAA76C,KAAAq6C,eACAr6C,KAAAq6C,cAAA,KACAr6C,KAAAi6C,aAAA,MAEAG,EAAA1sD,UAAA8sD,QAAA,WAEA,kBAAAx6C,MAAAV,IAAA7K,SAAAqmD,QACAluD,EAAA,oFAGA,IAAAmuD,GAAA/6C,KAAAV,IAAA7K,SAAAqmD,QAEA,OADA9tD,GAAA,OAAA+tD,GAAA,gBAAAA,GAAA,yBAAAA,GACA,GAAArB,IAAAqB,IAEAX,KAUAY,GAAA,WACA,QAAAC,GAAAC,EAAAj/C,GACA+D,KAAAk7C,OACAl7C,KAAA/D,eACA+D,KAAArQ,KAAA,aACAqQ,KAAA05B,KAAAggB,GAAAG,YACA7sD,EAAAgT,KAAAk7C,MACAl7C,KAAAk7C,KAAA,MACAl7C,KAAAk7C,KAAA,kEAYA,MAVAntD,QAAA4R,eAAAs7C,EAAAvtD,UAAA,eACAgK,IAAA,WACA,OACAqiD,cAAA/5C,KAAAk7C,KAAA,yCACAC,kBAAAn7C,KAAA/D,eAGA0G,YAAA,EACAC,cAAA,IAEAq4C,KAQAl/C,GAAA,WACA,QAAAq/C,GAAAF,EAAAj/C,GACA+D,KAAAk7C,OACAl7C,KAAA/D,eACAjP,EAAAgT,KAAAk7C,MACAl7C,KAAAk7C,KAAA,MACAl7C,KAAAk7C,KAAA,kEAYA,MAVAE,GAAA1tD,UAAAyjD,SAAA,SAAA+I,GACA,MAAAxzB,SAAAvsB,QAAA,GAAA6gD,IAAAh7C,KAAAk7C,KAAAl7C,KAAA/D,gBAIAm/C,EAAA1tD,UAAA8pD,sBAAA,SAAA3qB,GAEAA,EAAA6sB,GAAAG,cAEAuB,EAAA1tD,UAAAyqD,yBAAA,aACAiD,KwDhLAC,GAAAr7C,WAAAD,WAAA,WACA,GAAAE,GAAAlS,OAAAmS,iBACUC,uBAAgB1Q,QAAA,SAAA2Q,EAAAC,GAAsCD,EAAAD,UAAAE,IAChE,SAAAD,EAAAC,GAAyB,OAAAC,KAAAD,KAAAzS,eAAA0S,KAAAF,EAAAE,GAAAD,EAAAC,IACzB,iBAAAF,EAAAC,GAEA,QAAAE,KAAuBP,KAAAjP,YAAAqP,EADvBH,EAAAG,EAAAC,GAEAD,EAAA1S,UAAA,OAAA2S,EAAAtS,OAAAyS,OAAAH,IAAAE,EAAA7S,UAAA2S,EAAA3S,UAAA,GAAA6S,QASApD,GAAA,WACA,QAAAA,MAQA,MANAA,GAAA6B,OAAA,WACA,MAAAs8C,IAAA57C,UAEAvC,EAAAo+C,gBAAA,WACA,MAAAC,IAAA97C,UAEAvC,KAGAm+C,GAAA,SAAA76C,GAEA,QAAA66C,KACA,MAAA76C,GAAAzS,KAAAgS,YAIA,MANAq7C,IAAAC,EAAA76C,GAKA66C,EAAA57C,SAAA,GAAA47C,GACAA,GACCn+C,IAEDq+C,GAAA,SAAA/6C,GAEA,QAAA+6C,KACA,MAAA/6C,GAAAzS,KAAAgS,YAIA,MANAq7C,IAAAG,EAAA/6C,GAKA+6C,EAAA97C,SAAA,GAAA87C,GACAA,GACCr+C,IAUDs+C,GAAAtuD,EAAAgQ,GAAA,qCtDxCAu+C,GAAA,WAEAC,GAAA,WACA,QAAAC,GAAAl1C,EAAAoP,EAAAS,GACAvW,KAAA0G,OACA1G,KAAA8V,YACA9V,KAAAuW,kBAeA,MAbAqlC,GAAAluD,UAAAmmD,YAAA,SAAA/lD,EAAA0nB,GACA,GAAAskB,KAUA,OATA,QAAA95B,KAAA8V,UACAgkB,EAAAnhC,KAAA,GAAAid,IAAA9nB,EAAAkS,KAAA0G,KAAA1G,KAAA8V,UAAAN,IAGAskB,EAAAnhC,KAAA,GAAA2c,IAAAxnB,EAAAkS,KAAA0G,KAAA8O,IAEAxV,KAAAuW,gBAAAjrB,OAAA,GACAwuC,EAAAnhC,KAAA,GAAA0d,IAAAvoB,EAAAkS,KAAAuW,kBAEAujB,GAEA8hB,KAIAC,GAAA,WACA,QAAAC,GAAAp1C,EAAAoP,EAAAS,GACAvW,KAAA0G,OACA1G,KAAA8V,YACA9V,KAAAuW,kBAWA,MATAulC,GAAApuD,UAAAmmD,YAAA,SAAA/lD,EAAA0nB,GACA,GAAAskB,IACA,GAAAlkB,IAAA9nB,EAAAkS,KAAA0G,KAAA1G,KAAA8V,UAAAN,GAKA,OAHAxV,MAAAuW,gBAAAjrB,OAAA,GACAwuC,EAAAnhC,KAAA,GAAA0d,IAAAvoB,EAAAkS,KAAAuW,kBAEAujB,GAEAgiB,MASA,SAAAp/C,GACAA,IAAA,aACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,4BACCA,YAcD,IAAAq/C,IAAA,WAuBA,QAAAC,GAAAv/C,EAAAe,EAAAhH,EAAAylD,EAAA1lC,EAAAT,GACA9V,KAAAvD,aACAuD,KAAAxC,aACAwC,KAAAxJ,OACAwJ,KAAAi8C,mBAGA7tD,KAAAmoB,GACAvW,KAAAk8C,eAEAl8C,KAAAi8C,iBAAA7tD,KAAA6tD,KACAj8C,KAAAuW,sBACAvW,KAAA8V,gBAkDA,MAhDAkmC,GAAAtuD,UAAAyuD,qBAAA,SAAA5oD,GACA,GAAA6oD,GAAA,MAAAp8C,KAAAxJ,KAAA,KAAAwJ,KAAAxJ,KAAAwN,MAAAzQ,GACA8J,EAAA,GAAA2+C,GAAAh8C,KAAAvD,WAAAuD,KAAAxC,WAAA4+C,GACA,EAAAp8C,KAAAuW,gBAAAvW,KAAA8V,UAEA,OADAzY,GAAAg/C,oBAAA9oD,GACA8J,GAEA2+C,EAAAtuD,UAAA4uD,yBAAA,SAAA/oD,GACA,GAAA6oD,GAAA,MAAAp8C,KAAAxJ,KAAA,KAAAwJ,KAAAxJ,KAAAwN,MAAAzQ,GACA8J,EAAA,GAAA2+C,GAAAh8C,KAAAvD,WAAAuD,KAAAxC,WAAA4+C,GACA,EAAAp8C,KAAAuW,gBAAAvW,KAAA8V,UAEA,OADAzY,GAAA6+C,eACA7+C,GAEA2+C,EAAAtuD,UAAA6uD,qBAAA,SAAA93C,GAGA,UAAAu3C,GAAAh8C,KAAAvD,WAAAuD,KAAAxC,WACA,MACA,EAAAwC,KAAAuW,gBAAAvW,KAAA8V,YAEAkmC,EAAAtuD,UAAA4P,YAAA,SAAAwpC,GACA,GAAA0V,GAAA,OAAAx8C,KAAAxJ,MAAAwJ,KAAAxJ,KAAA7H,UACA,GACA,oBAAAqR,KAAAxJ,KAAA,GACA,WAAAjJ,IAAAC,GAAAC,iBAAA,YAAAuS,KAAAxC,WAAA,gCACAspC,EACA0V,IAEAR,EAAAtuD,UAAAwuD,aAAA,WAGA,UAAAl8C,KAAAxJ,KAGA,OAAAvE,GAAA,EAAuBA,EAAA+N,KAAAxJ,KAAAlL,OAAsB2G,IAC7C+N,KAAAq8C,oBAAAr8C,KAAAxJ,KAAAkB,IAAAzF,KAGA+pD,EAAAtuD,UAAA2uD,oBAAA,SAAA1kD,GACA,GAAA6E,GAAAwD,KAAAvD,aAAAi/C,GAAAp2C,KAAA3N,GACA,KAAAqI,MAAA1C,YAAA,iDAGA0+C,EAAAtuD,UAAA8O,QAAA,WACA,MAAAwD,MAAAvD,aAAAC,GAAAC,KACAqD,KAAAvD,aAAAC,GAAAG,QAEAm/C,KAOA9+C,GAAA,WACA,QAAAA,GAAA4F,EAAAhV,GACAkS,KAAA8C,aACA9C,KAAAlS,MAEA,MAAAoP,MAOAu/C,GAAA,WACA,QAAAC,GAAAC,GACA38C,KAAA28C,eA4OA,MAzOAD,GAAAhvD,UAAAkvD,aAAA,SAAAp/C,EAAAnN,GACA,GAAAgN,GAAA,GAAA0+C,IAAAr/C,GAAAC,IAAAa,EAAA2H,GAAA/M,WACAgF,IAAA,sCAAAC,EAAAhN,EACA,IAAAwsD,GAAA78C,KAAA88C,UAAAzsD,EAAAgN,EACA,WAAAs+C,IAAAkB,EACA,KAAAx/C,EAAAkZ,kBAGAmmC,EAAAhvD,UAAAqvD,eAAA,SAAAv/C,EAAAnN,GACA,GAAAgN,GAAA,GAAA0+C,IAAAr/C,GAAAE,SAAAY,EAAA2H,GAAA/M,WACAgF,IAAA,sCAAAC,EAAAhN,EACA,IAAAwsD,GAAA78C,KAAA88C,UAAAzsD,EAAAgN,GACAyY,EAAA,GAAA5B,IAAA7W,EAAAyY,UACA,WAAA6lC,IAAAkB,EAAA/mC,EAAAzY,EAAAkZ,kBAGAmmC,EAAAhvD,UAAAsvD,gBAAA,SAAAx/C,EAAAnN,GACA,GAAAqQ,GAAAV,KACA3C,EAAA,GAAA0+C,IAAAr/C,GAAAG,OAAAW,EAAA2H,GAAA/M,WACAgF,IAAA,sCAAAC,EAAAhN,EACA,IAAA4sD,MACAJ,EAAApwC,GAAAnG,KACA5X,GAAA2B,EAAA,SAAAvC,EAAAI,GACA,GAAAsI,GAAAkH,GAAAF,EAAA1P,GACAovD,EAAA7/C,EAAAi/C,yBAAA9lD,EAEA,KADAtI,EAAAwS,EAAAy8C,gBAAAjvD,EAAAgvD,aACA5B,IAEA2B,EAAAtkD,KAAAnC,OAEA,CACA,GAAA4mD,GAAA18C,EAAAo8C,UAAA5uD,EAAAgvD,EACA,OAAAE,IACAH,EAAAtkD,KAAAnC,GACAqmD,IAAA9vC,IAAAvW,EAAA4mD,MAIA,IAAAC,GAAA,GAAAnpC,IAAA+oC,EACA,WAAApB,IAAAgB,EAAAQ,EAAAhgD,EAAAkZ,kBAGAmmC,EAAAhvD,UAAA4vD,mBAAA,SAAA9/C,EAAAjK,EAAArF,EAAAqvD,GACA,GAAAlgD,GAAA,GAAA0+C,IAAAr/C,GAAAG,OAAAW,EAAA2H,GAAA/M,YACAkf,GAAA/Z,GAAAC,EAAAjK,IACAkrB,GAAAvwB,EACA,IAAAqvD,EAAAjyD,OAAA,KACA,SAAAiC,IAAAC,GAAAC,iBAAA,YAAA+P,EAAA,wGAGA,QAAAvL,GAAA,EAAuBA,EAAAsrD,EAAAjyD,OAAgC2G,GAAA,EACvDqlB,EAAA3e,KAAA4E,GAAAC,EAAA+/C,EAAAtrD,KACAwsB,EAAA9lB,KAAA4kD,EAAAtrD,EAAA,GAIA,QAFAgrD,MACAJ,EAAApwC,GAAAnG,MACArU,EAAA,EAAuBA,EAAAqlB,EAAAhsB,SAAiB2G,EAAA,CACxC,GAAAuE,GAAA8gB,EAAArlB,GACAirD,EAAA7/C,EAAAi/C,yBAAA9lD,GACAgnD,EAAAx9C,KAAAm9C,gBAAA1+B,EAAAxsB,GAAAirD,EACA,IAAAM,YAAAlC,IAEA2B,EAAAtkD,KAAAnC,OAEA,CACA,GAAA4mD,GAAAp9C,KAAA88C,UAAAU,EAAAN,EACA,OAAAE,IACAH,EAAAtkD,KAAAnC,GACAqmD,IAAA9vC,IAAAvW,EAAA4mD,KAIA,GAAAC,GAAA,GAAAnpC,IAAA+oC,EACA,WAAApB,IAAAgB,EAAAQ,EAAAhgD,EAAAkZ,kBAMAmmC,EAAAhvD,UAAA+vD,gBAAA,SAAAjgD,EAAAnN,GACA,GAAAgN,GAAA,GAAA0+C,IAAAr/C,GAAAI,WAAAU,EAAA2H,GAAA/M,YACAslD,EAAA19C,KAAA88C,UAAAzsD,EAAAgN,EAGA,OAFArQ,GAAA,MAAA0wD,EAAA,mCACA1wD,EAAA,IAAAqQ,EAAAkZ,gBAAAjrB,OAAA,iDACAoyD,GAGAhB,EAAAhvD,UAAAyvD,gBAAA,SAAA9sD,EAAAgN,GACA,IACA,MAAA2C,MAAA28C,aAAAtsD,GAEA,MAAA1D,GACA,GAAAG,GAAA6Q,GAAAhR,EACA,MAAA0Q,GAAAC,YAAAxQ,KAYA4vD,EAAAhvD,UAAAovD,UAAA,SAAAzsD,EAAAgN,GAEA,IADAhN,EAAA2P,KAAAm9C,gBAAA9sD,EAAAgN,aACA5N,OAAA,CAGA,GAAA4N,EAAA4+C,aACA,KAAA5+C,GAAAC,YAAA,kCAOA,OAHAD,GAAA7G,MACA6G,EAAAyY,UAAAnd,KAAA0E,EAAA7G,MAEAwJ,KAAA29C,WAAAttD,EAAAgN,GAEA,MAAAN,IAAA1M,IACA+M,GAAA,2BAAAC,EAAAhN,GACA2P,KAAA49C,YAAAvtD,EAAAgN,KAKAA,EAAA7G,MACA6G,EAAAyY,UAAAnd,KAAA0E,EAAA7G,MAEAwJ,KAAA69C,iBAAAxtD,EAAAgN,KAGAq/C,EAAAhvD,UAAAiwD,WAAA,SAAAh8C,EAAAtE,GAGA,OAFAxO,MACAivD,EAAA,EACA1yD,EAAA,EAAA2yD,EAAAp8C,EAAyCvW,EAAA2yD,EAAAzyD,OAAqBF,IAAA,CAC9D,GAAAouD,GAAAuE,EAAA3yD,GACA4yD,EAAAh+C,KAAA88C,UAAAtD,EAAAn8C,EAAAk/C,qBAAAuB,GACA,OAAAE,IAGAA,EAAAvqD,GAAAC,UAEA7E,EAAA8J,KAAAqlD,GACAF,IAEA,UAAAzwC,IAAAxe,IAEA6tD,EAAAhvD,UAAAkwD,YAAA,SAAAzyD,EAAAkS,GACA,GAAAqD,GAAAV,KACAnR,EAAA,GAAAwY,IAAAzV,EAOA,OANAlD,GAAAvD,EAAA,SAAA2C,EAAAkd,GACA,GAAAoyC,GAAA18C,EAAAo8C,UAAA9xC,EAAA3N,EAAA8+C,qBAAAruD,GACA,OAAAsvD,IACAvuD,IAAA4Y,OAAA3Z,EAAAsvD,MAGA,GAAA3wC,IAAA5d,IAQA6tD,EAAAhvD,UAAAmwD,iBAAA,SAAA3vD,EAAAmP,GACA,UAAAnP,EACA,MAAAuF,IAAAC,QAEA,oBAAAxF,GACA,MAAAgF,GAAAhF,GACA,GAAAwd,IAAAxd,GAGA,GAAA4F,IAAA5F,EAGA,qBAAAA,GACA,MAAAkd,IAAAE,GAAApd,EAEA,oBAAAA,GACA,UAAA6d,IAAA7d,EAEA,IAAAA,YAAAxC,MACA,UAAAugB,IAAA+F,GAAAM,SAAApkB,GAEA,IAAAA,YAAA8O,IACA,UAAAwP,IAAAte,EAEA,IAAAA,YAAA+O,IACA,UAAAoP,IAAAne,EAEA,IAAAA,YAAAgP,IACA,UAAAoP,IAAApe,EAAA4U,WAAA5U,EAAAJ,IAEA,IAAAI,YAAAiP,IAAA,CACA,GAAAjP,YAAAotD,IAAA,CACA,GAAAj+C,EAAAZ,YAAAC,GAAAE,SACA,WAEA,MAAAS,GAAAZ,aAAAC,GAAAG,QACA7P,EAAA,MAAAqQ,EAAA7G,MAAA6G,EAAA7G,KAAAlL,OAAA,4EAEA+R,EAAAC,YAAA,6EAKAD,EAAAC,YAAA,kFAGA,GAAApP,YAAAstD,IAAA,CACA,IAAAh/C,GAAAa,EAAAZ,YACA,KAAAY,GAAAC,YAAA,wEAGA,WAAAD,EAAA7G,KACA,KAAA6G,GAAAC,YAAA,wEAKA,OAFAD,GAAAkZ,gBAAA5d,KAAA,GAAA2b,IAAAjX,EAAA7G,KAAA6d,GAAA3U,WAEA,KAGA,MAAA9S,GAAA,4BAAAsB,GAIA,KAAAmP,GAAAC,YAAA,4BAAA9M,EAAAtC,KAGAwuD,KC1aAuB,GAAAj+C,WAAAD,WAAA,WACA,GAAAE,GAAAlS,OAAAmS,iBACUC,uBAAgB1Q,QAAA,SAAA2Q,EAAAC,GAAsCD,EAAAD,UAAAE,IAChE,SAAAD,EAAAC,GAAyB,OAAAC,KAAAD,KAAAzS,eAAA0S,KAAAF,EAAAE,GAAAD,EAAAC,IACzB,iBAAAF,EAAAC,GAEA,QAAAE,KAAuBP,KAAAjP,YAAAqP,EADvBH,EAAAG,EAAAC,GAEAD,EAAA1S,UAAA,OAAA2S,EAAAtS,OAAAyS,OAAAH,IAAAE,EAAA7S,UAAA2S,EAAA3S,UAAA,GAAA6S,QA+BA29C,GAAA,2BACAC,IAAA,EAMAC,GAAA,WACA,QAAAC,GAAAC,GACA,OAAAlwD,KAAAkwD,EAAAt7C,KAAA,CACA,OAAA5U,KAAAkwD,EAAAr7C,IACA,SAAA1V,IAAAC,GAAAC,iBAAA,qDAEAuS,MAAAgD,KAAAk7C,GACAl+C,KAAAiD,IAAAk7C,OAGAluD,GAAA,2BAAAquD,EAAAt7C,MACAhD,KAAAgD,KAAAs7C,EAAAt7C,KACA7S,EAAA,2BAAAmuD,EAAAr7C,KACAjD,KAAAiD,IAAAhV,EAAAqwD,EAAAr7C,IAAAk7C,GAEA/sD,GAAA,WAAAktD,GAAA,6BACAnuD,EAAA,kCAAAmuD,EAAAziD,aACAmE,KAAAnE,YAAAyiD,EAAAziD,YAOA,MALAwiD,GAAA3wD,UAAAqE,OAAA,SAAAmQ,GACA,MAAAlC,MAAAgD,OAAAd,EAAAc,MACAhD,KAAAiD,MAAAf,EAAAe,KACAjD,KAAAnE,cAAAqG,EAAArG,aAEAwiD,KAEAE,GAAA,WACA,QAAAA,MAEA,MAAAA,MAKAh/C,GAAA,WACA,QAAAi/C,GAAAC,GACA,GAAA/9C,GAAAV,IACAA,MAAA0+C,EAAA,GAAA/F,IACA34C,KAAAvL,UACAuK,OAAA,WACA,MAAA0B,GAAAi+C,EACAj+C,EAAAi+C,EAAAhZ,WAGAjf,QAAAvsB,WAIAi7C,eAAA,WAAyC,MAAA10C,GAAAi+C,EAAAvJ,kBACzCV,cAAA,WAAwC,MAAAh0C,GAAAi+C,EAAAjK,iBACxCkK,gBAAA,SAAArF,GACA,MAAA74C,GAAAg+C,EAAApF,MAAAC,IAGA,IAAAsF,GAAA,GAAAN,GACA,oBAAAE,GAAAptD,QAAA,CAGA,GAAAiO,GAAAm/C,CACAI,GAAAC,YAAAx/C,EACAu/C,EAAA/7C,WAAA07C,EAAAO,kBAAAz/C,GACAu/C,EAAA97C,eAAA87C,EAAAC,YAAAvvD,KACAsvD,EAAAhjD,YAAA,GAAAs+C,IAAA76C,OAEA,CACA,GAAA0/C,GAAAP,CACA,KAAAO,EAAA37C,UACA,SAAA9V,IAAAC,GAAAC,iBAAA,yBAEAoxD,GAAA/7C,WAAA,GAAAK,IAAA67C,EAAA37C,UAAA27C,EAAA17C,UAEAu7C,EAAA97C,eAAA,YACA87C,EAAAhjD,YAAA,GAAAC,IAEA+iD,EAAAP,SAAA,GAAAF,QACAp+C,KAAAi/C,EAAAJ,EACA7+C,KAAAk/C,YAAAL,EAAA/7C,WA2JA,MAzJA07C,GAAA9wD,UAAA4wD,SAAA,SAAAa,GAGA,GAFArwD,EAAA,qBAAAzD,UAAA,GACAqE,EAAA,gCAAAyvD,GACAtxD,EAAAsxD,EAAA,eACA,SAAA5xD,IAAAC,GAAAC,iBAAA,wFAGA,IAAA2xD,GAAA,GAAAhB,IAAAe,EACA,IAAAn/C,KAAA2+C,IAAA3+C,KAAAi/C,EAAAX,SAAAvsD,OAAAqtD,GACA,SAAA7xD,IAAAC,GAAAuH,oBAAA,qKAIAiL,MAAAi/C,EAAAX,SAAAc,MACAhxD,KAAAgxD,EAAAvjD,cACAmE,KAAAi/C,EAAApjD,YAAAD,GAAAwjD,EAAAvjD,eAGA2iD,EAAA9wD,UAAA2xD,kBAAA,WACA,GAAAr/C,KAAA2+C,EACA,SAAApxD,IAAAC,GAAAuH,oBAAA,6KAIA,OAAAiL,MAAAs/C,iBAAA,IAEAd,EAAA9wD,UAAA6xD,uBAAA,WAIA,MAHAv/C,MAAA2+C,GACA3+C,KAAAs/C,iBAAA,GAEAt/C,KAAA2+C,GAEAH,EAAA9wD,UAAA4xD,gBAAA,SAAAtW,GACA,GAAAtoC,GAAAV,IACAhT,KAAAgT,KAAAi/C,EAAAX,SAAAt7C,KAAA,2CACAhW,GAAAgT,KAAA2+C,EAAA,0CACA,IAAAh1B,GAAA,GAAA9mB,IAAA7C,KAAAi/C,EAAAn8C,WAAA9C,KAAAi/C,EAAAl8C,eAAA/C,KAAAi/C,EAAAX,SAAAt7C,KAAAhD,KAAAi/C,EAAAX,SAAAr7C,KACA05C,EAAA,SAAAzuD,GACA,GAAAA,YAAA+P,IAAA,CACA,GAAAuhD,GAAA9+C,EAAAu+C,EAAAn8C,WACA28C,EAAAvxD,EAAA8P,UAAAihD,EAAAn8C,UACA,KAAA28C,EAAA1tD,OAAAytD,GACA,SAAAjyD,IAAAC,GAAAC,iBAAA,sCACAgyD,EAAAp8C,UAAA,IAAAo8C,EAAAn8C,SAAA,+BACAk8C,EAAAn8C,UAAA,IAAAm8C,EAAAl8C,SAEA,WAAApG,IAAAwD,EAAAu+C,EAAAn8C,WAAA5U,EAAAwxD,GAGA,MAAAxxD,GAKA,OAFA8R,MAAA2/C,eAAA,GAAAlD,IAAAE,GACA38C,KAAA2+C,EAAA,GAAA1H,IAAAzqD,GAAAC,cAAAk9B,EAAA3pB,KAAAi/C,EAAApjD,YAAAmE,KAAA0+C,GACA1+C,KAAA2+C,EAAAnmD,MAAAwwC,IAEAwV,EAAAO,kBAAA,SAAAz/C,GACA,GAAAjO,GAAAiO,EAAAjO,OACA,KAAAxD,EAAAwD,EAAA,cAGA,GAAAxD,EAAAwD,EAAA,eACA,SAAA9D,IAAAC,GAAAC,iBAAA,2EAGA,UAAAF,IAAAC,GAAAC,iBAAA,uDAEA,GAAAI,EAAAwD,EAAA,oBAGA,SAAA9D,IAAAC,GAAAC,iBAAA,wEAGA,IAAA4V,GAAAhS,EAAA,SACA,KAAAgS,GAAA,gBAAAA,GACA,SAAA9V,IAAAC,GAAAC,iBAAA,oDAEA,WAAA0V,IAAAE,IAEAtV,OAAA4R,eAAA6+C,EAAA9wD,UAAA,OACAgK,IAAA,WACA,IAAAsI,KAAAi/C,EAAAH,YACA,SAAAvxD,IAAAC,GAAAuH,oBAAA,+EAGA,OAAAiL,MAAAi/C,EAAAH,aAEAn8C,YAAA,EACAC,cAAA,IAEA47C,EAAA9wD,UAAAkyD,WAAA,SAAAC,GAGA,GAFA/wD,EAAA,uBAAAzD,UAAA,GACAqE,EAAA,kCAAAmwD,IACAA,EACA,SAAAtyD,IAAAC,GAAAC,iBAAA,2DAGA,OADAuS,MAAAu/C,yBACA,GAAAO,IAAA3nD,GAAA6M,WAAA66C,GAAA7/C,OAEAw+C,EAAA9wD,UAAA8Q,IAAA,SAAAqhD,GAGA,GAFA/wD,EAAA,gBAAAzD,UAAA,GACAqE,EAAA,2BAAAmwD,IACAA,EACA,SAAAtyD,IAAAC,GAAAC,iBAAA,kDAGA,OADAuS,MAAAu/C,yBACAthD,GAAA8hD,QAAA5nD,GAAA6M,WAAA66C,GAAA7/C,OAEAw+C,EAAA9wD,UAAA6pC,eAAA,SAAAC,GACA,GAAA92B,GAAAV,IAGA,OAFAlR,GAAA,2BAAAzD,UAAA,GACAqE,EAAA,wCAAA8nC,GACAx3B,KAAAu/C,yBAAA7nB,YAAA,SAAAA,GACA,MAAAF,GAAA,GAAAwoB,IAAAt/C,EAAAg3B,OAGA8mB,EAAA9wD,UAAAqpC,MAAA,WAEA,MADA/2B,MAAAu/C,yBACA,GAAAU,IAAAjgD,OAEAjS,OAAA4R,eAAA6+C,EAAA,YACA9mD,IAAA,WACA,OAAA9M,KACA,IAAAW,IAAAC,MACA,aACA,KAAAD,IAAAc,MACA,aACA,KAAAd,IAAA20D,OACA,cACA,SACA,MAAAtzD,GAAA,sBAAAhC,OAGA+X,YAAA,EACAC,cAAA,IAEA47C,EAAA1zD,YAAA,SAAAq1D,GAGA,OAFArxD,EAAA,wBAAAzD,UAAA,GACAqE,EAAA,mCAAAywD,GACAA,GACA,YACAr1D,EAAAS,GAAAC,MACA,MACA,aACAV,EAAAS,GAAAc,MACA,MACA,cACAvB,EAAAS,GAAA20D,OACA,MACA,SACA,SAAA3yD,IAAAC,GAAAC,iBAAA,sBAAA0yD,KAGA3B,KAMAwB,GAAA,WACA,QAAA3M,GAAA+M,EAAAC,GACArgD,KAAAogD,IACApgD,KAAAqgD,IAwDA,MAtDAhN,GAAA3lD,UAAAgK,IAAA,SAAAqG,GACA,GAAA2C,GAAAV,IACAlR,GAAA,kBAAAzD,UAAA,EACA,IAAAsmC,GAAA7zB,GAAA,kBAAAC,EAAAiC,KAAAogD,EACA,OAAApgD,MAAAqgD,EACAlN,QAAAxhB,EAAA+tB,IACAvyB,KAAA,SAAAjU,GACA,IAAAA,GAAA,IAAAA,EAAA5tB,OACA,MAAAsB,GAAA,kDAEA,IAAA4R,GAAA0a,EAAA,EACA,OAAA1a,aAAA2I,IACA,GAAA1I,IAAAiC,EAAA0/C,EAAAzuB,EAAA+tB,EAAA,SAEA,GAAAjhD,IAAAiC,EAAA0/C,EAAAzuB,EAAA+tB,EAAAlhD,GAAA,MAGA60C,EAAA3lD,UAAAqf,IAAA,SAAAhP,EAAA7P,EAAAmD,GACAjC,EAAA,kBAAA/D,UAAA,IACA,IAAAsmC,GAAA7zB,GAAA,kBAAAC,EAAAiC,KAAAogD,EACA/uD,GAAAuM,GAAA,kBAAAvM,EACA,IAAAqsD,GAAArsD,EAAAwM,MACAmC,KAAAogD,EAAAT,eAAA5C,eAAA,kBAAA7uD,GACA8R,KAAAogD,EAAAT,eAAA/C,aAAA,kBAAA1uD,EAEA,OADA8R,MAAAqgD,EAAAtzC,IAAA4kB,EAAA+tB,EAAAhC,GACA19C,MAEAqzC,EAAA3lD,UAAAqmB,OAAA,SAAAhW,EAAAuiD,EAAApyD,GAEA,OADAqvD,MACAnyD,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CmyD,EAAAnyD,EAAA,GAAAC,UAAAD,EAEA,IAAAumC,GACA+rB,CAaA,OAZA,gBAAA4C,IACAA,YAAA3pD,KACAzH,EAAA,qBAAA7D,UAAA,GACAsmC,EAAA7zB,GAAA,qBAAAC,EAAAiC,KAAAogD,GACA1C,EAAA19C,KAAAogD,EAAAT,eAAArC,mBAAA,qBAAAgD,EAAApyD,EAAAqvD,KAGAzuD,EAAA,qBAAAzD,UAAA,GACAsmC,EAAA7zB,GAAA,qBAAAC,EAAAiC,KAAAogD,GACA1C,EAAA19C,KAAAogD,EAAAT,eAAA3C,gBAAA,qBAAAsD,IAEAtgD,KAAAqgD,EAAAtsC,OAAA4d,EAAA+tB,EAAAhC,GACA19C,MAEAqzC,EAAA3lD,UAAAsR,OAAA,SAAAjB,GACAjP,EAAA,qBAAAzD,UAAA,EACA,IAAAsmC,GAAA7zB,GAAA,qBAAAC,EAAAiC,KAAAogD,EAEA,OADApgD,MAAAqgD,EAAArhD,OAAA2yB,EAAA+tB,GACA1/C,MAEAqzC,KAGA4M,GAAA,WACA,QAAAM,GAAAH,GACApgD,KAAAogD,IACApgD,KAAAwgD,MACAxgD,KAAAygD,IAAA,EA0DA,MAxDAF,GAAA7yD,UAAAqf,IAAA,SAAAhP,EAAA7P,EAAAmD,GACAjC,EAAA,iBAAA/D,UAAA,KACA2U,KAAA0gD,oBACA,IAAA/uB,GAAA7zB,GAAA,iBAAAC,EAAAiC,KAAAogD,EACA/uD,GAAAuM,GAAA,iBAAAvM,EACA,IAAAqsD,GAAArsD,EAAAwM,MACAmC,KAAAogD,EAAAT,eAAA5C,eAAA,iBAAA7uD,GACA8R,KAAAogD,EAAAT,eAAA/C,aAAA,iBAAA1uD,EAEA,OADA8R,MAAAwgD,GAAAxgD,KAAAwgD,GAAAr0D,OAAAuxD,EAAA7J,YAAAliB,EAAA+tB,EAAAhrC,GAAAO,OACAjV,MAEAugD,EAAA7yD,UAAAqmB,OAAA,SAAAhW,EAAAuiD,EAAApyD,GAEA,OADAqvD,MACAnyD,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CmyD,EAAAnyD,EAAA,GAAAC,UAAAD,EAEA4U,MAAA0gD,oBACA,IAAA/uB,GACA+rB,CAaA,OAZA,gBAAA4C,IACAA,YAAA3pD,KACAzH,EAAA,oBAAA7D,UAAA,GACAsmC,EAAA7zB,GAAA,oBAAAC,EAAAiC,KAAAogD,GACA1C,EAAA19C,KAAAogD,EAAAT,eAAArC,mBAAA,oBAAAgD,EAAApyD,EAAAqvD,KAGAzuD,EAAA,oBAAAzD,UAAA,GACAsmC,EAAA7zB,GAAA,oBAAAC,EAAAiC,KAAAogD,GACA1C,EAAA19C,KAAAogD,EAAAT,eAAA3C,gBAAA,oBAAAsD,IAEAtgD,KAAAwgD,GAAAxgD,KAAAwgD,GAAAr0D,OAAAuxD,EAAA7J,YAAAliB,EAAA+tB,EAAAhrC,GAAAG,QAAA,KACA7U,MAEAugD,EAAA7yD,UAAAsR,OAAA,SAAAjB,GACAjP,EAAA,oBAAAzD,UAAA,GACA2U,KAAA0gD,oBACA,IAAA/uB,GAAA7zB,GAAA,oBAAAC,EAAAiC,KAAAogD,EAEA,OADApgD,MAAAwgD,GAAAxgD,KAAAwgD,GAAAr0D,OAAA,GAAA0qB,IAAA8a,EAAA+tB,EAAAhrC,GAAAO,OACAjV,MAEAugD,EAAA7yD,UAAAmqC,OAAA,WAGA,MAFA73B,MAAA0gD,qBACA1gD,KAAAygD,IAAA,EACAzgD,KAAAwgD,GAAAl1D,OAAA,EACA0U,KAAAogD,EAAAb,yBAAAzoB,MAAA92B,KAAAwgD,IAGA95B,QAAAvsB,WAGAomD,EAAA7yD,UAAAgzD,mBAAA,WACA,GAAA1gD,KAAAygD,GACA,SAAAlzD,IAAAC,GAAAuH,oBAAA,wEAIAwrD,KAMAtiD,GAAA,WACA,QAAA0iD,GAAAjB,EAAA1hD,GACAgC,KAAA0/C,IACA1/C,KAAAhC,YACAgC,KAAA2+C,EAAA3+C,KAAAhC,UAAAuhD,yBA2KA,MAzKAoB,GAAAZ,QAAA,SAAAvpD,EAAAwH,GACA,GAAAxH,EAAAlL,OAAA,KACA,SAAAiC,IAAAC,GAAAC,iBAAA,6FAEA+I,EAAAuO,kBAAA,QAAAvO,EAAAlL,OAEA,WAAAq1D,GAAA,GAAA56C,IAAAvP,GAAAwH,IAEAjQ,OAAA4R,eAAAghD,EAAAjzD,UAAA,MACAgK,IAAA,WACA,MAAAsI,MAAA0/C,EAAAlpD,KAAAgO,eAEA7B,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAAghD,EAAAjzD,UAAA,UACAgK,IAAA,WACA,UAAAooD,IAAA9/C,KAAA0/C,EAAAlpD,KAAA8N,UAAAtE,KAAAhC,YAEA2E,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAAghD,EAAAjzD,UAAA,QACAgK,IAAA,WACA,MAAAsI,MAAA0/C,EAAAlpD,KAAAuO,mBAEApC,YAAA,EACAC,cAAA,IAEA+9C,EAAAjzD,UAAAkyD,WAAA,SAAAC,GAGA,GAFA/wD,EAAA,+BAAAzD,UAAA,GACAqE,EAAA,0CAAAmwD,IACAA,EACA,SAAAtyD,IAAAC,GAAAC,iBAAA,2DAEA,IAAA+I,GAAA2B,GAAA6M,WAAA66C,EACA,WAAAC,IAAA9/C,KAAA0/C,EAAAlpD,KAAAwN,MAAAxN,GAAAwJ,KAAAhC,YAEA2iD,EAAAjzD,UAAAkzD,QAAA,SAAA1+C,GACA,KAAAA,YAAAy+C,IACA,KAAAjvD,GAAA,gCAAAwQ,EAEA,OAAAlC,MAAAhC,YAAAkE,EAAAlE,WAAAgC,KAAA0/C,EAAA3tD,OAAAmQ,EAAAw9C,IAEAiB,EAAAjzD,UAAAqf,IAAA,SAAA7e,EAAAmD,GACAjC,EAAA,wBAAA/D,UAAA,KACAgG,EAAAuM,GAAA,wBAAAvM,EACA,IAAAqsD,GAAArsD,EAAAwM,MACAmC,KAAAhC,UAAA2hD,eAAA5C,eAAA,wBAAA7uD,GACA8R,KAAAhC,UAAA2hD,eAAA/C,aAAA,wBAAA1uD,EACA,OAAA8R,MAAA2+C,EAAA7nB,MAAA4mB,EAAA7J,YAAA7zC,KAAA0/C,EAAAhrC,GAAAO,QAEA0rC,EAAAjzD,UAAAqmB,OAAA,SAAAusC,EAAApyD,GAEA,OADAqvD,MACAnyD,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CmyD,EAAAnyD,EAAA,GAAAC,UAAAD,EAEA,IAAAsyD,EAUA,OATA,gBAAA4C,IACAA,YAAA3pD,KACAzH,EAAA,2BAAA7D,UAAA,GACAqyD,EAAA19C,KAAAhC,UAAA2hD,eAAArC,mBAAA,2BAAAgD,EAAApyD,EAAAqvD,KAGAzuD,EAAA,2BAAAzD,UAAA,GACAqyD,EAAA19C,KAAAhC,UAAA2hD,eAAA3C,gBAAA,2BAAAsD,IAEAtgD,KAAA2+C,EAAA7nB,MAAA4mB,EAAA7J,YAAA7zC,KAAA0/C,EAAAhrC,GAAAG,QAAA,MAEA8rC,EAAAjzD,UAAAsR,OAAA,WAEA,MADAlQ,GAAA,2BAAAzD,UAAA,GACA2U,KAAA2+C,EAAA7nB,OACA,GAAAjgB,IAAA7W,KAAA0/C,EAAAhrC,GAAAO,SAGA0rC,EAAAjzD,UAAAmzD,WAAA,WAEA,OADAj1D,MACAR,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CQ,EAAAR,GAAAC,UAAAD,EAEAgE,GAAA,+BAAA/D,UAAA,IACA,IAGA+sD,GAHA/mD,GACAyvD,wBAAA,GAGAC,EAAA,CACA,iBAAAn1D,GAAAm1D,IACA7kD,GAAAtQ,EAAAm1D,MACA1vD,EAAAzF,EAAAm1D,GACA3vD,EAAA,+BAAAC,GACA,2BAEAlB,EAAA,kEAAAkB,EAAAyvD,wBACAC,IAEA,IAAAC,IACAlzB,+BAAAz8B,EAAAyvD,uBACAvyB,4BAAAl9B,EAAAyvD,uBAeA,OAbA5kD,IAAAtQ,EAAAm1D,IACA3I,EAAAxsD,EAAAm1D,IAGArxD,EAAA,0CAAAqxD,EAAAn1D,EAAAm1D,IACA/wD,EAAA,0CAAA+wD,EAAA,EAAAn1D,EAAAm1D,EAAA,IACA/wD,EAAA,0CAAA+wD,EAAA,EAAAn1D,EAAAm1D,EAAA,IACA3I,GACAtyC,KAAAla,EAAAm1D,GACAz0D,MAAAV,EAAAm1D,EAAA,GACAE,SAAAr1D,EAAAm1D,EAAA,KAGA/gD,KAAAkhD,mBAAAF,EAAA5I,IAEAuI,EAAAjzD,UAAAwzD,mBAAA,SAAA7vD,EAAA+mD,GACA,GAAA13C,GAAAV,KACAmhD,EAAA,SAAA77B,GACAv5B,QAAAO,MAAA,gCAAAg5B,GAEA8yB,GAAA9rD,QACA60D,EAAA/I,EAAA9rD,MAAAsK,KAAAwhD,GAEA,IAAAgJ,GAAA,GAAA9I,KACAxyC,KAAA,SAAA3H,GACA,GAAAi6C,EAAAtyC,KAAA,CACA9Y,EAAAmR,EAAA+a,KAAA7U,MAAA,oDACA,IAAA7F,GAAAL,EAAA+a,KAAAxhB,IAAAgJ,EAAAg/C,EACAtH,GAAAtyC,KAAA,GAAArH,IAAAiC,EAAA1C,UAAA0C,EAAAg/C,EAAAlhD,EAAAL,EAAAO,cAGApS,MAAA60D,IAEAE,EAAArhD,KAAA2+C,EAAA71B,OAAApb,GAAAS,OAAAnO,KAAA0/C,EAAAlpD,MAAA4qD,EAAA/vD,EACA,mBACA+vD,EAAA3I,OACA/3C,EAAAi+C,EAAAvxB,SAAAi0B,KAGAV,EAAAjzD,UAAAgK,IAAA,WACA,GAAAgJ,GAAAV,IAEA,OADAlR,GAAA,wBAAAzD,UAAA,GACA,GAAAq7B,SAAA,SAAAvsB,EAAAC,GACA,GAAAgzB,GAAA1sB,EAAAwgD,oBACA3yB,6BAAA,EACAT,gCAAA,EACAO,uBAAA,IAEAvoB,KAAA,SAAA8nB,GAGAR,KACAQ,EAAA/Y,QAAA+Y,EAAA6R,SAAA/gC,UAQAtE,EAAA,GAAA7M,IAAAC,GAAAwH,QAAA,0DAGAmF,EAAAyzB,IAGAthC,MAAA8N,OAIAumD,KAGAliD,GAAA,WACA,QAAA6iD,GAAAlB,EAAAV,EAAA6B,EAAAC,GACAxhD,KAAAogD,IACApgD,KAAA0/C,IACA1/C,KAAAuhD,KACAvhD,KAAAwhD,KAyFA,MAvFAF,GAAA5zD,UAAAgZ,KAAA,WAEA,GADA5X,EAAA,wBAAAzD,UAAA,IACA2U,KAAAuhD,GACA,SAAAh0D,IAAAC,GAAAoH,UAAA,4GAGA,OAAAoL,MAAAyhD,cAAAzhD,KAAAuhD,GAAA76C,OAEA46C,EAAA5zD,UAAAgK,IAAA,SAAAye,GAEA,GADArnB,EAAA,uBAAAzD,UAAA,IACA2U,KAAAuhD,GACA,SAAAh0D,IAAAC,GAAAoH,UAAA,2GAGA,IAAA1G,GAAA8R,KAAAuhD,GAAA76C,KAAAnT,MAAAgK,GAAA,uBAAA4Y,GACA,YAAA/nB,KAAAF,MAAAE,GAAA4R,KAAA0hD,aAAAxzD,IAEAH,OAAA4R,eAAA2hD,EAAA5zD,UAAA,MACAgK,IAAA,WACA,MAAAsI,MAAA0/C,EAAAlpD,KAAAgO,eAEA7B,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAA2hD,EAAA5zD,UAAA,OACAgK,IAAA,WACA,UAAAuG,IAAA+B,KAAA0/C,EAAA1/C,KAAAogD,IAEAz9C,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAA2hD,EAAA5zD,UAAA,UACAgK,IAAA,WACA,cAAAsI,KAAAuhD,IAEA5+C,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAA2hD,EAAA5zD,UAAA,YACAgK,IAAA,WACA,OACAq2B,iBAAA,OAAA/tB,KAAAuhD,IAAAvhD,KAAAuhD,GAAA56C,kBACAjI,UAAAsB,KAAAwhD,KAGA7+C,YAAA,EACAC,cAAA,IAEA0+C,EAAA5zD,UAAA+zD,cAAA,SAAA/6C,GACA,GAAAhG,GAAAV,KACAnR,IAIA,OAHA6X,GAAAhY,QAAA,SAAAZ,EAAAI,GACAW,EAAAf,GAAA4S,EAAAghD,aAAAxzD,KAEAW,GAEAyyD,EAAA5zD,UAAAg0D,aAAA,SAAAxzD,GACA,GAAAA,YAAAue,IACA,MAAAzM,MAAAyhD,cAAAvzD,EAEA,IAAAA,YAAAmf,IACA,MAAArN,MAAA2hD,aAAAzzD,EAEA,IAAAA,YAAAoe,IAAA,CACA,GAAAxe,GAAAI,UACAoV,EAAAtD,KAAAogD,EAAAb,yBAAAz8C,YAUA,OATA5U,GAAA4U,WAAA/Q,OAAAuR,IAEAlX,EAAA,YAAA4T,KAAA0/C,EAAAlpD,KAAA,+DAEAtI,EAAA4U,WAAAO,UAAA,IAAAnV,EAAA4U,WAAAQ,SAAA,wFAEAA,EAAAD,UAAA,IAAAC,WAAA,cAGA,GAAArF,IAAAnQ,EAAAkS,KAAAogD,GAGA,MAAAlyD,YAGAozD,EAAA5zD,UAAAi0D,aAAA,SAAAj7C,GACA,GAAAhG,GAAAV,IACA,OAAA0G,GAAAyE,cAAAtf,IAAA,SAAAqC,GACA,MAAAwS,GAAAghD,aAAAxzD,MAGAozD,KAGAM,GAAA,WACA,QAAAj0C,GAAAk0C,EAAA7jD,GACAgC,KAAA6hD,KACA7hD,KAAAhC,YAuUA,MArUA2P,GAAAjgB,UAAAi0B,MAAA,SAAApuB,EAAAuuD,EAAA5zD,GACAY,EAAA,cAAAzD,UAAA,GACAqE,EAAA,yBAAAoyD,GACA3wD,EAAA,gBAAAjD,EACA,IAAA0Y,GACAuP,EAAA5Y,GAAA,cAAAhK,EACA,IAAA4iB,EAAA3Q,aACA,mBAAAtX,GAAA,CACA,QAAAA,EAAAsD,QAAA,KAEA,SAAAjE,IAAAC,GAAAC,iBAAA,2JAIA,SAAAS,EACA,SAAAX,IAAAC,GAAAC,iBAAA,8JAIA,IAAA+I,GAAAwJ,KAAA6hD,GAAArrD,KAAAwN,MAAA,GAAA7L,KAAAjK,IACAlB,GAAAwJ,EAAAlL,OAAA,sCACAsb,EAAA,GAAA0F,IAAAtM,KAAAhC,UAAAkhD,YAAA,GAAAn5C,IAAAvP,QAEA,MAAAtI,YAAA+P,KAKA,SAAA1Q,IAAAC,GAAAC,iBAAA,2JAGA+C,EAAAtC,GAAA,IAPA,IAAAyjC,GAAAzjC,CACA0Y,GAAA,GAAA0F,IAAAtM,KAAAhC,UAAAkhD,YAAAvtB,EAAA+tB,OAUA94C,GAAA5G,KAAAhC,UAAA2hD,eAAAlC,gBAAA,cAAAvvD,EAEA,IAAA+W,GAAA3R,EAAA6iB,EAAAxiB,GAAAqR,WAAA88C,GAAAl7C,EAEA,OADA5G,MAAA+hD,kBAAA98C,GACA,GAAA0I,GAAA3N,KAAA6hD,GAAA3yC,UAAAjK,GAAAjF,KAAAhC,YAEA2P,EAAAjgB,UAAAkhB,QAAA,SAAArb,EAAAyuD,GACA5yD,EAAA,gBAAA/D,UAAA,KACA2E,EAAA,2BAAAgyD,EACA,IAAA/9B,EACA,QAAA71B,KAAA4zD,GAAA,QAAAA,EACA/9B,EAAAlV,GAAAC,cAEA,aAAAgzC,EAIA,SAAAz0D,IAAAC,GAAAC,iBAAA,mDAAAu0D,EAAA,+BAHA/9B,GAAAlV,GAAAoC,WAMA,UAAAnR,KAAA6hD,GAAA/zC,QACA,SAAAvgB,IAAAC,GAAAC,iBAAA,yGAGA,WAAAuS,KAAA6hD,GAAA9zC,MACA,SAAAxgB,IAAAC,GAAAC,iBAAA,sGAGA,IAAA0oB,GAAA5Y,GAAA,gBAAAhK,GACAqb,EAAA,GAAAH,IAAA0H,EAAA8N,EAEA,OADAjkB,MAAAiiD,mBAAArzC,GACA,GAAAjB,GAAA3N,KAAA6hD,GAAAxyC,WAAAT,GAAA5O,KAAAhC,YAEA2P,EAAAjgB,UAAAyW,MAAA,SAAAuF,GAGA,GAFA5a,EAAA,cAAAzD,UAAA,GACAqE,EAAA,yBAAAga,GACAA,GAAA,EACA,SAAAnc,IAAAC,GAAAC,iBAAA,+BAAAic,EAAA,wCAGA,WAAAiE,GAAA3N,KAAA6hD,GAAAtyC,UAAA7F,GAAA1J,KAAAhC,YAEA2P,EAAAjgB,UAAAogB,QAAA,SAAAo0C,GAEA,OADA9tC,MACAhpB,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CgpB,EAAAhpB,EAAA,GAAAC,UAAAD,EAEA8D,GAAA,gBAAA7D,UAAA,EACA,IAAAokB,GAAAzP,KAAAmiD,qBAAA,gBAAAD,EAAA9tC,GACA,EACA,WAAAzG,GAAA3N,KAAA6hD,GAAAryC,YAAAC,GAAAzP,KAAAhC,YAEA2P,EAAAjgB,UAAA00D,WAAA,SAAAF,GAEA,OADA9tC,MACAhpB,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CgpB,EAAAhpB,EAAA,GAAAC,UAAAD,EAEA8D,GAAA,mBAAA7D,UAAA,EACA,IAAAokB,GAAAzP,KAAAmiD,qBAAA,mBAAAD,EAAA9tC,GACA,EACA,WAAAzG,GAAA3N,KAAA6hD,GAAAryC,YAAAC,GAAAzP,KAAAhC,YAEA2P,EAAAjgB,UAAA20D,UAAA,SAAAH,GAEA,OADA9tC,MACAhpB,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CgpB,EAAAhpB,EAAA,GAAAC,UAAAD,EAEA8D,GAAA,kBAAA7D,UAAA,EACA,IAAAokB,GAAAzP,KAAAmiD,qBAAA,kBAAAD,EAAA9tC,GACA,EACA,WAAAzG,GAAA3N,KAAA6hD,GAAAnyC,UAAAD,GAAAzP,KAAAhC,YAEA2P,EAAAjgB,UAAAqgB,MAAA,SAAAm0C,GAEA,OADA9tC,MACAhpB,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CgpB,EAAAhpB,EAAA,GAAAC,UAAAD,EAEA8D,GAAA,cAAA7D,UAAA,EACA,IAAAokB,GAAAzP,KAAAmiD,qBAAA,cAAAD,EAAA9tC,GACA,EACA,WAAAzG,GAAA3N,KAAA6hD,GAAAnyC,UAAAD,GAAAzP,KAAAhC,YAEA2P,EAAAjgB,UAAAkzD,QAAA,SAAA1+C,GACA,KAAAA,YAAAyL,IACA,KAAAjc,GAAA,oBAAAwQ,EAEA,OAAAlC,MAAAhC,YAAAkE,EAAAlE,WAAAgC,KAAA6hD,GAAA9vD,OAAAmQ,EAAA2/C,KAGAl0C,EAAAjgB,UAAAy0D,qBAAA,SAAA3kD,EAAA0kD,EAAA9tC,EAAA9C,GAEA,GADAngB,EAAAqM,EAAA,EAAA0kD,GACAA,YAAAzjD,IAAA,CACA,GAAA2V,EAAA9oB,OAAA,EACA,SAAAiC,IAAAC,GAAAC,iBAAA,kCAAA+P,EAAA,MAEA,IAAAowB,GAAAs0B,CACA,KAAAt0B,EAAA/Y,OACA,SAAAtnB,IAAAC,GAAAoH,UAAA,uDACA4I,EAAA,MAEA,OAAAwC,MAAAsiD,kBAAA9kD,EAAAowB,EAAA2zB,GAAAjwC,GAGA,GAAAixC,IAAAL,GAAA/1D,OAAAioB,EACA,OAAApU,MAAAwiD,gBAAAhlD,EAAA+kD,EAAAjxC,IAaA3D,EAAAjgB,UAAA40D,kBAAA,SAAA9kD,EAAAgB,EAAA8S,GASA,OARAmxC,MAQAr3D,EAAA,EAAAujB,EAAA3O,KAAA6hD,GAAAjzC,QAAkDxjB,EAAAujB,EAAArjB,OAAgBF,IAAA,CAClE,GAAAwjB,GAAAD,EAAAvjB,EACA,IAAAwjB,EAAArb,MAAAiS,aACAi9C,EAAA9pD,KAAA,GAAA2T,IAAAtM,KAAAhC,UAAAkhD,YAAA1gD,EAAA1Q,UAEA,CACA,GAAAI,GAAAsQ,EAAAjL,MAAAqb,EAAArb,MACA,QAAAnF,KAAAF,EAGA,CACA,GAAAqF,GAAAqb,EAAArb,MAAAwR,iBACA,UAAAxX,IAAAC,GAAAC,iBAAA,+FACA8F,EAAA,2CALAkvD,EAAA9pD,KAAAzK,IAUA,UAAAkjB,IAAAqxC,EAAAnxC,IAKA3D,EAAAjgB,UAAA80D,gBAAA,SAAAhlD,EAAAihB,EAAAnN,GAEA,GAAA1C,GAAA5O,KAAA6hD,GAAAj0C,eACA,IAAA6Q,EAAAnzB,OAAAsjB,EAAAtjB,OACA,SAAAiC,IAAAC,GAAAC,iBAAA,kCAAA+P,EAAA,kGAKA,QADAilD,MACAxwD,EAAA,EAAuBA,EAAAwsB,EAAAnzB,OAAmB2G,IAAA,CAC1C,GAAAywD,GAAAjkC,EAAAxsB,EAEA,IADA2c,EAAA3c,GACAsB,MAAAiS,aAAA,CACA,mBAAAk9C,GACA,SAAAn1D,IAAAC,GAAAC,iBAAA,uDACA+P,EAAA,uBAAAklD,GAEA,SAAAA,EAAAlxD,QAAA,KACA,SAAAjE,IAAAC,GAAAC,iBAAA,+BAAAi1D,EAAA,yBACAllD,EAAA,KAEA,IAAA1P,GAAA,GAAAiY,IAAA/F,KAAA6hD,GAAArrD,KAAAwN,MAAA0+C,GACAD,GAAA9pD,KAAA,GAAA2T,IAAAtM,KAAAhC,UAAAkhD,YAAApxD,QAEA,CACA,GAAA60D,GAAA3iD,KAAAhC,UAAA2hD,eAAAlC,gBAAAjgD,EAAAklD,EACAD,GAAA9pD,KAAAgqD,IAGA,UAAAvxC,IAAAqxC,EAAAnxC,IAEA3D,EAAAjgB,UAAAmzD,WAAA,WAEA,OADAj1D,MACAR,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CQ,EAAAR,GAAAC,UAAAD,EAEAgE,GAAA,mBAAA/D,UAAA,IACA,IACA+sD,GADA/mD,KAEA0vD,EAAA,CAyBA,OAxBA,gBAAAn1D,GAAAm1D,IACA7kD,GAAAtQ,EAAAm1D,MACA1vD,EAAAzF,EAAAm1D,GACA3vD,EAAA,mBAAAC,GACA,8BACA,mCAEAlB,EAAA,8DAAAkB,EAAAy8B,gCACA39B,EAAA,2DAAAkB,EAAAk9B,6BACAwyB,KAEA7kD,GAAAtQ,EAAAm1D,IACA3I,EAAAxsD,EAAAm1D,IAGArxD,EAAA,8BAAAqxD,EAAAn1D,EAAAm1D,IACA/wD,EAAA,8BAAA+wD,EAAA,EAAAn1D,EAAAm1D,EAAA,IACA/wD,EAAA,8BAAA+wD,EAAA,EAAAn1D,EAAAm1D,EAAA,IACA3I,GACAtyC,KAAAla,EAAAm1D,GACAz0D,MAAAV,EAAAm1D,EAAA,GACAE,SAAAr1D,EAAAm1D,EAAA,KAGA/gD,KAAAkhD,mBAAA7vD,EAAA+mD,IAEAzqC,EAAAjgB,UAAAwzD,mBAAA,SAAA7vD,EAAA+mD,GACA,GAAA13C,GAAAV,KACAmhD,EAAA,SAAA77B,GACAv5B,QAAAO,MAAA,gCAAAg5B,GAEA8yB,GAAA9rD,QACA60D,EAAA/I,EAAA9rD,MAAAsK,KAAAwhD,GAEA,IAAAgJ,GAAA,GAAA9I,KACAxyC,KAAA,SAAAjX,GACAupD,EAAAtyC,MACAsyC,EAAAtyC,KAAA,GAAA88C,IAAAliD,EAAA1C,UAAA0C,EAAAmhD,GAAAhzD,KAGAvC,MAAA60D,IAEA0B,EAAA7iD,KAAAhC,UAAAuhD,yBACA8B,EAAAwB,EAAA/5B,OAAA9oB,KAAA6hD,GAAAT,EAAA/vD,EACA,mBACA+vD,EAAA3I,OACAoK,EAAAz1B,SAAAi0B,KAGA1zC,EAAAjgB,UAAAgK,IAAA,WACA,GAAAgJ,GAAAV,IAEA,OADAlR,GAAA,YAAAzD,UAAA,GACA,GAAAq7B,SAAA,SAAAvsB,EAAAC,GACA,GAAAgzB,GAAA1sB,EAAAwgD,oBACApzB,gCAAA,EACAS,6BAAA,EACAF,uBAAA,IAEAvoB,KAAA,SAAAjX,GAGAu+B,IACAjzB,EAAAtL,IAEAvC,MAAA8N,OAIAuT,EAAAjgB,UAAAq0D,kBAAA,SAAA98C,GACA,GAAAA,YAAAhR,KAAAgR,EAAAkK,eAAA,CACA,GAAA2zC,GAAA9iD,KAAA6hD,GAAAxzC,0BACA,WAAAy0C,MAAA/wD,OAAAkT,EAAA1R,OACA,SAAAhG,IAAAC,GAAAC,iBAAA,wIAEAq1D,EAAA,UACA79C,EAAA1R,MAAA,IAEA,IAAA+a,GAAAtO,KAAA6hD,GAAAtzC,sBACA,QAAAD,GACAtO,KAAA+iD,kCAAA99C,EAAA1R,MAAA+a,KAIAX,EAAAjgB,UAAAu0D,mBAAA,SAAArzC,GACA,UAAA5O,KAAA6hD,GAAAtzC,uBAAA,CAEA,GAAAH,GAAApO,KAAA6hD,GAAAxzC,0BACA,QAAAD,GACApO,KAAA+iD,kCAAA30C,EAAAQ,EAAArb,SAIAoa,EAAAjgB,UAAAq1D,kCAAA,SAAAC,EAAAp0C,GACA,IAAAA,EAAA7c,OAAAixD,GACA,SAAAz1D,IAAAC,GAAAC,iBAAA,yFACAu1D,EAAA,+BACAA,EAAA,gFAEAp0C,EAAA,eAGAjB,KAGAi1C,GAAA,WACA,QAAAK,GAAA7C,EAAA8C,EAAAC,GACAnjD,KAAAogD,IACApgD,KAAAkjD,KACAljD,KAAAmjD,KACAnjD,KAAAojD,eAAA,KACApjD,KAAAy/B,UACA/gC,UAAAykD,EAAAzkD,UACAqvB,iBAAAo1B,EAAAp1B,kBAsDA,MAnDAhgC,QAAA4R,eAAAsjD,EAAAv1D,UAAA,QACAgK,IAAA,WACA,GAAA7I,KAEA,OADAmR,MAAAtR,QAAA,SAAA8P,GAAyC,MAAA3P,GAAA8J,KAAA6F,KACzC3P,GAEA8T,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAAsjD,EAAAv1D,UAAA,SACAgK,IAAA,WACA,MAAAsI,MAAAmjD,GAAAjqC,KAAAvqB,WAEAgU,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAAsjD,EAAAv1D,UAAA,QACAgK,IAAA,WACA,MAAAsI,MAAAmjD,GAAAjqC,KAAA7U,MAEA1B,YAAA,EACAC,cAAA,IAEAqgD,EAAAv1D,UAAAgB,QAAA,SAAAq2B,EAAAs+B,GACA,GAAA3iD,GAAAV,IACA5Q,GAAA,wBAAA/D,UAAA,KACAqE,EAAA,qCAAAq1B,GACA/kB,KAAAmjD,GAAAjqC,KAAAxqB,QAAA,SAAA8P,GACAumB,EAAA/2B,KAAAq1D,EAAA3iD,EAAA4iD,sBAAA9kD,OAGAzQ,OAAA4R,eAAAsjD,EAAAv1D,UAAA,SACAgK,IAAA,WACA,UAAAkqD,IAAA5hD,KAAAkjD,GAAAljD,KAAAogD,IAEAz9C,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAAsjD,EAAAv1D,UAAA,cACAgK,IAAA,WAIA,MAHAsI,MAAAojD,iBACApjD,KAAAojD,eAAAllD,GAAA8B,KAAAogD,EAAApgD,KAAAmjD,KAEAnjD,KAAAojD,gBAEAzgD,YAAA,EACAC,cAAA,IAEAqgD,EAAAv1D,UAAA41D,sBAAA,SAAA9kD,GACA,UAAAC,IAAAuB,KAAAogD,EAAA5hD,EAAA1Q,IAAA0Q,EAAAwB,KAAAy/B,SAAA/gC,YAEAukD,KAGAnD,GAAA,SAAAr/C,GAEA,QAAA8iD,GAAA/sD,EAAAwH,GACA,GAAA0C,GAAAD,EAAAzS,KAAAgS,KAAA0N,GAAAS,OAAA3X,GAAAwH,IAAAgC,IACA,IAAAxJ,EAAAlL,OAAA,KACA,SAAAiC,IAAAC,GAAAC,iBAAA,gGAEA+I,EAAAuO,kBAAA,QAAAvO,EAAAlL,OAEA,OAAAoV,GAiDA,MAzDAu9C,IAAAsF,EAAA9iD,GAUA1S,OAAA4R,eAAA4jD,EAAA71D,UAAA,MACAgK,IAAA,WACA,MAAAsI,MAAA6hD,GAAArrD,KAAAgO,eAEA7B,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAA4jD,EAAA71D,UAAA,UACAgK,IAAA,WACA,GAAA8rD,GAAAxjD,KAAA6hD,GAAArrD,KAAA8N,SACA,OAAAk/C,GAAA70D,UACA,KAGA,GAAAsP,IAAA,GAAA8H,IAAAy9C,GAAAxjD,KAAAhC,YAGA2E,YAAA,EACAC,cAAA,IAEA7U,OAAA4R,eAAA4jD,EAAA71D,UAAA,QACAgK,IAAA,WACA,MAAAsI,MAAA6hD,GAAArrD,KAAAuO,mBAEApC,YAAA,EACAC,cAAA,IAEA2gD,EAAA71D,UAAA8Q,IAAA,SAAAqhD,GAQA,GAPAzwD,EAAA,0BAAA/D,UAAA,KAGA,IAAAA,UAAAC,SACAu0D,EAAAj/C,GAAAE,SAEApR,EAAA,qCAAAmwD,GACA,KAAAA,EACA,SAAAtyD,IAAAC,GAAAC,iBAAA,2CAEA,IAAA+I,GAAA2B,GAAA6M,WAAA66C,EACA,OAAA5hD,IAAA8hD,QAAA//C,KAAA6hD,GAAArrD,KAAAwN,MAAAxN,GAAAwJ,KAAAhC,YAEAulD,EAAA71D,UAAAuR,IAAA,SAAA/Q,GACAY,EAAA,0BAAAzD,UAAA,GACAqE,EAAA,qCAAAxB,EACA,IAAAu1D,GAAAzjD,KAAAxB,KACA,OAAAilD,GAAA12C,IAAA7e,GAAAi/B,KAAA,WAAmD,MAAAs2B,MAEnDF,GACC3B,IAsFD8B,GAAAv2D,EAAAoS,GAAA,qCACAokD,GAAAx2D,EAAA6yD,GAAA,sDACA4D,GAAAz2D,EAAA8yD,GAAA,6CACA4D,GAAA12D,EAAA8Q,GAAA,2CACA6lD,GAAA32D,EAAAsR,IACAslD,GAAA52D,EAAAy0D,IACAoC,GAAA72D,EAAAy1D,IACAqB,GAAA92D,EAAA2yD,GAAA,kDC/sCAtgD,IACAg/C,UAAAkF,GACArhD,SAAArF,GACAoE,KAAAgB,GACAixC,YAAAsQ,GACApD,WAAAqD,GACAjD,kBAAAkD,GACAvC,iBAAAwC,GACAn2C,MAAAo2C,GACAd,cAAAe,GACAT,oBAAAU,GACA7+C,UAAAzO,GACAoU,WAAA0wC,GACA3wD,YAAAyU,GAAAzU,YClCAH,GAAA,kBAAA8U,GAqBAA,GAAAG,GAAA,U/B+ygBMskD,IACA,SAAU35D,OAAQC,QAASC,sBmFr0gBjC,SAAA05D,SAAA,WAAwC,QAAAC,GAAAC,GAAc,sBAAAA,GAAyB,QAAAC,OAC/E,QAAAC,IAAAF,GAAe,GAAAhkD,SAAAgkD,EAAe,cAAAhkD,EAAA,KAAAgkD,EAAye,YAApd,IAAAA,YAAA50D,OAAA,aAAoC,IAAA40D,YAAAt2D,QAAA,MAAAsS,EAAgC,IAAAxI,GAAA9J,OAAAL,UAAAiT,SAAA3S,KAAAq2D,EAAwC,uBAAAxsD,EAAA,cAAuC,sBAAAA,GAAA,gBAAAwsD,GAAA/4D,YAAA,KAAA+4D,EAAAv4B,YAAA,KAAAu4B,EAAAG,uBAAAH,EAAAG,qBAAA,uBAA6K,yBAAA3sD,OAAA,KAAAwsD,EAAAr2D,UAAA,KAAAq2D,EAAAG,uBAAAH,EAAAG,qBAAA,6BACnX,gBAAAnkD,OAAA,KAAAgkD,EAAAr2D,KAAA,cAAiE,OAAAqS,GAAS,QAAAqJ,GAAA26C,GAAc,eAAAE,GAAAF,GAAqB,QAAAI,IAAAJ,GAAe,GAAAhkD,GAAAkkD,GAAAF,EAAY,gBAAAhkD,GAAA,UAAAA,GAAA,gBAAAgkD,GAAA/4D,OAAyD,QAAAo5D,IAAAL,GAAe,kBAAAE,GAAAF,GAAwB,QAAA/jD,GAAA+jD,GAAc,GAAAhkD,SAAAgkD,EAAe,iBAAAhkD,GAAA,MAAAgkD,GAAA,YAAAhkD,EAA4F,QAAAskD,IAAAN,EAAAhkD,EAAAxI,GAAmB,MAAAwsD,GAAAr2D,KAAA/B,MAAAo4D,EAAAztD,KAAAvL,WACpX,QAAAu5D,IAAAP,EAAAhkD,EAAAxI,GAAmB,IAAAwsD,EAAA,KAAAt3D,QAAoB,MAAA1B,UAAAC,OAAA,CAAuB,GAAA8U,GAAA3Q,MAAA/B,UAAAwW,MAAAlW,KAAA3C,UAAA,EAA8C,mBAAkB,GAAAwM,GAAApI,MAAA/B,UAAAwW,MAAAlW,KAAA3C,UAA+E,OAAnCoE,OAAA/B,UAAAm3D,QAAA54D,MAAA4L,EAAAuI,GAAmCikD,EAAAp4D,MAAAoU,EAAAxI,IAAqB,kBAAkB,MAAAwsD,GAAAp4D,MAAAoU,EAAAhV,YAA6B,QAAAy5D,GAAAT,EAAAhkD,EAAAxI,GAAmH,MAAjGitD,GAAAC,SAAAr3D,UAAAkJ,OAAA,IAAAmuD,YAAAr3D,UAAAkJ,MAAApF,QAAA,eAAAmzD,GAAAC,GAAiGE,EAAA74D,MAAA,KAAAZ,WACpY,QAAA25D,IAAAX,EAAAhkD,GAAiB,GAAAxI,GAAApI,MAAA/B,UAAAwW,MAAAlW,KAAA3C,UAAA,EAA8C,mBAAkB,GAAAgV,GAAAxI,EAAAqM,OAA0C,OAA1B7D,GAAA1H,KAAA1M,MAAAoU,EAAAhV,WAA0Bg5D,EAAAp4D,MAAA+T,KAAAK,IAAoE,QAAA4kD,GAAAZ,EAAAhkD,GAAgB,QAAAxI,MAAcA,EAAAnK,UAAA2S,EAAA3S,UAAwB22D,EAAAa,EAAA7kD,EAAA3S,UAAgB22D,EAAA32D,UAAA,GAAAmK,GAAkBwsD,EAAA32D,UAAAqD,YAAAszD,EAA0BA,EAAAc,GAAA,SAAAd,EAAAxsD,EAAAsrB,GAAqB,OAAA/iB,GAAA3Q,MAAApE,UAAAC,OAAA,GAAAqB,EAAA,EAAwCA,EAAAtB,UAAAC,OAAmBqB,IAAAyT,EAAAzT,EAAA,GAAAtB,UAAAsB,EAAwB,OAAA0T,GAAA3S,UAAAmK,GAAA5L,MAAAo4D,EAAAjkD,IAAmC,QAAAglD,IAAAf,GAAe,GAAAt3D,MAAAs4D,kBAAAt4D,MAAAs4D,kBAAArlD,KAAAolD,QAA4D,CAAK,GAAA/kD,GAAAtT,QAAAmsD,KAAoB74C,KAAAL,KAAAk5C,MAAA74C,GAAkBgkD,IAAArkD,KAAAlT,QAAAu3D,EAAA/xD,IAAwE,QAAAgzD,IAAAjB,EAAAhkD,GAAiB,OAAAxI,GAAAwsD,EAAAxtD,MAAA,MAAAuJ,EAAA,GAAAzT,EAAA8C,MAAA/B,UAAAwW,MAAAlW,KAAA3C,UAAA,GAAuEsB,EAAArB,QAAA,EAAAuM,EAAAvM,QAAqB8U,GAAAvI,EAAA++C,QAAAjqD,EAAAiqD,OAAwB,OAAAx2C,GAAAvI,EAAApG,KAAA,MAA2I,QAAA8zD,IAAAlB,EAAAhkD,GAAiB,MAAAgkD,GAAAhkD,GAAA,EAAAgkD,EAAAhkD,EAAA,IAAuB,QAAAmlD,IAAAnB,EAAAhkD,GAAiBA,EAAAwkD,QAAAR,GAAae,GAAAp3D,KAAAgS,KAAAslD,GAAAr5D,MAAA,KAAAoU,IAA+BA,EAAAu2C,QAAsD,QAAA6O,IAAApB,EAAAhkD,GAAiB,SAAAmlD,IAAA,WAAAnB,EAAA,KAAAA,EAAA,IAAA50D,MAAA/B,UAAAwW,MAAAlW,KAAA3C,UAAA,IAAgF,QAAAq6D,KAAa,GAAAC,KAAAC,GAAA5lD,KAAAusB,KAAAvsB,KAAAusB,KAAAs5B,KAAA7lD,MAA0CA,KAAA/N,EAAA+N,KAAA/N,EAAc+N,KAAA0lD,EAAA1lD,KAAA0lD,EAC3sC,QAAArpB,IAAAgoB,GAAeA,EAAA,CAAY,OAAThkD,GAAAylD,GAASjuD,EAAAwsD,EAAA/4D,OAAA8U,EAAAgkD,EAAAC,KAAAxtD,MAAA,IAAAwtD,EAAA13D,EAAA,EAA4CA,EAAAkL,EAAIlL,IAAA,GAAAA,IAAAyT,IAAAC,EAAArS,SAAA,GAAAoS,EAAAzT,KAAA03D,GAAA,CAAwChkD,EAAA1T,CAAI,MAAA03D,GAAQhkD,GAAA,EAAK,SAAAA,EAAA,KAAA+jD,EAAAC,KAAAhyD,OAAAgO,GAAAgkD,EAAAhkD,GAAsC,QAAA0lD,IAAA1B,GAAe,IAAA36C,EAAA26C,GAAA,OAAAhkD,GAAAgkD,EAAA/4D,OAAA,EAA8B,GAAA+U,EAAKA,UAAAgkD,GAAAhkD,EAAgBgkD,GAAA/4D,OAAA,EAAW,QAAA06D,IAAA3B,GAAe,MAAA50D,OAAA/B,UAAAvB,OAAAF,SAAAZ,WAAkD,QAAA46D,IAAA5B,GAAe,GAAAhkD,GAAAgkD,EAAA/4D,MAAe,MAAA+U,EAAA,CAAQ,OAAAxI,GAAApI,MAAA4Q,GAAAD,EAAA,EAAuBA,EAAAC,EAAID,IAAAvI,EAAAuI,GAAAikD,EAAAjkD,EAAc,OAAAvI,GAAS,SAA2F,QAAAquD,GAAA7B,GAAc,UAAA8B,EAAA30D,QAAA6yD,GAAwB,QAAA+B,IAAA/B,EAAAhkD,EAAAxI,GAAmB,OAAAuI,KAAAikD,GAAAhkD,EAAArS,KAAA6J,EAAAwsD,EAAAjkD,KAAAikD,GAAkC,QAAAgC,IAAAhC,GAAe,GAAAjkD,GAAAC,KAAAxI,EAAA,CAAe,KAAAuI,IAAAikD,GAAAhkD,EAAAxI,KAAAwsD,EAAAjkD,EAAuB,OAAAC,GAAS,QAAAimD,IAAAjC,GAAe,GAAAjkD,GAAAC,KAAAxI,EAAA,CAAe,KAAAuI,IAAAikD,GAAAhkD,EAAAxI,KAAAuI,CAAoB,OAAAC,GAAS,QAAAkmD,IAAAlC,GAAe,GAAQxsD,GAARwI,IAAW,KAAAxI,IAAAwsD,GAAAhkD,EAAAxI,GAAAwsD,EAAAxsD,EAAqB,OAAAwI,GAC9uB,QAAAmmD,IAAAnC,EAAAhkD,GAAiB,OAAAxI,GAAAuI,EAAAzT,EAAA,EAAgBA,EAAAtB,UAAAC,OAAmBqB,IAAA,CAAKyT,EAAA/U,UAAAsB,EAAe,KAAAkL,IAAAuI,GAAAikD,EAAAxsD,GAAAuI,EAAAvI,EAAqB,QAAAsrB,GAAA,EAAYA,EAAAsjC,GAAAn7D,OAAY63B,IAAAtrB,EAAA4uD,GAAAtjC,GAAAp1B,OAAAL,UAAAE,eAAAI,KAAAoS,EAAAvI,KAAAwsD,EAAAxsD,GAAAuI,EAAAvI,KAAqE,QAAA6uD,IAAArC,GAA0B,MAAXqC,IAAA,KAAArC,GAAWA,EAAoB,QAAAsC,IAAAtC,EAAAhkD,GAAiB,GAAAxI,GAAA+uD,EAAS,OAAA74D,QAAAL,UAAAE,eAAAI,KAAA6J,EAAAwsD,GAAAxsD,EAAAwsD,GAAAxsD,EAAAwsD,GAAAhkD,EAAAgkD,GAA2R,QAAAwC,MAAc,GAAAxC,GAAA/7C,EAAAwW,QAAiB,OAAAulC,KAAAyC,iBAAA,GAE5jB,QAAAC,IAAA1C,GAAe,MAAAsC,IAAAtC,EAAA,WAAuB,OAAAhkD,GAAA,EAAAxI,EAAAmvD,GAAAC,GAAA30D,IAAAuE,MAAA,KAAAuJ,EAAA4mD,GAAA3C,EAAA/xD,IAAAuE,MAAA,KAAAlK,EAAAsU,KAAA4rC,IAAAh1C,EAAAvM,OAAA8U,EAAA9U,QAAA63B,EAAA,EAAqG,GAAA9iB,GAAA8iB,EAAAx2B,EAAUw2B,IAAA,CAAK,GAAA+jC,GAAArvD,EAAAsrB,IAAA,GAAAshB,EAAArkC,EAAA+iB,IAAA,EAA0B,IAAuF,GAApF+jC,EAAA,iBAAAh2D,KAAAg2D,KAAA,aAA0CziB,EAAA,iBAAAvzC,KAAAuzC,KAAA,aAA0C,GAAAyiB,EAAA,GAAA57D,QAAA,GAAAm5C,EAAA,GAAAn5C,OAAA,KAAwC+U,GAAAklD,GAAA,GAAA2B,EAAA,GAAA57D,OAAA,EAAAkD,SAAA04D,EAAA,UAAAziB,EAAA,GAAAn5C,OAAA,EAAAkD,SAAAi2C,EAAA,SAAA8gB,GAAA,GAAA2B,EAAA,GAAA57D,OAAA,GAAAm5C,EAAA,GAAAn5C,SAAAi6D,GAAA2B,EAAA,GAAAziB,EAAA,IAA8HyiB,IAAA,GAAOziB,IAAA,SAAO,GAAApkC,GAAY,UAAAA,IACtF,QAAA8mD,GAAA9C,EAAAhkD,GAAgBL,KAAArQ,KAAA00D,EAAYrkD,KAAAqkD,EAAArkD,KAAAzF,OAAA8F,EAAqBL,KAAAinD,IAAA,EAAgD,QAAAG,IAAA/C,EAAAhkD,GAA2Q,GAA1P8mD,EAAAn5D,KAAAgS,KAAAqkD,IAAA10D,KAAA,IAAyBqQ,KAAAqnD,cAAArnD,KAAAqkD,EAAArkD,KAAAzF,OAAA,KAA2CyF,KAAAsnD,OAAAtnD,KAAAunD,QAAAvnD,KAAAwnD,QAAAxnD,KAAAynD,QAAAznD,KAAA0nD,QAAA,EAAkE1nD,KAAAlS,IAAA,GAAYkS,KAAA2nD,QAAA3nD,KAAA4nD,SAAA5nD,KAAA6nD,OAAA7nD,KAAA8nD,SAAA,EAAuD9nD,KAAA+nD,UAAA,EAAiB/nD,KAAAgoD,YAAA,GAAoBhoD,KAAAnI,EAAA,KAAYwsD,EAAA,CAAM,GAAAxsD,GAAAmI,KAAArQ,KAAA00D,EAAA10D,KAAAyQ,EAAAikD,EAAA4D,eAAA5D,EAAA4D,eAAA,OAA+G,IAA5CjoD,KAAAzF,OAAA8pD,EAAA9pD,QAAA8pD,EAAA6D,WAAmCloD,KAAAqkD,EAAAhkD,EAASA,EAAAgkD,EAAAgD,eAAsB,GAAAc,GAAA,CAAO9D,EAAA,CAAG,IAAIqC,GAAArmD,EAAA+nD,SAAe,IAAAz7D,IAAA,CAAS,MAAA03D,GAAQ,MAAAlhC,IAAUx2B,GAAA,EAAKA,IAAA0T,EAAA,WAAa,aAAAxI,EAAAwI,EACt7BgkD,EAAAgE,YAAA,YAAAxwD,IAAAwI,EAAAgkD,EAAAiE,UAA6CtoD,MAAAqnD,cAAAhnD,EAAqB,OAAAD,GAAAJ,KAAA0nD,YAAA,KAAArD,EAAAqD,QAAArD,EAAAqD,QAAArD,EAAAkE,MAAAvoD,KAAAynD,YAAA,KAAApD,EAAAoD,QAAApD,EAAAoD,QAAApD,EAAAmE,MAAAxoD,KAAAwnD,QAAAnD,EAAAmD,SAAA,EAAAxnD,KAAAunD,QAAAlD,EAAAkD,SAAA,IAAAvnD,KAAA0nD,YAAA,KAAAtnD,EAAAsnD,QAAAtnD,EAAAsnD,QAAAtnD,EAAAmoD,MAAAvoD,KAAAynD,YAAA,KAAArnD,EAAAqnD,QAAArnD,EAAAqnD,QAAArnD,EAAAooD,MAAAxoD,KAAAwnD,QAAApnD,EAAAonD,SAAA,EAAAxnD,KAAAunD,QAAAnnD,EAAAmnD,SAAA,GAA6TvnD,KAAAsnD,OAAAjD,EAAAiD,OAAqBtnD,KAAAlS,IAAAu2D,EAAAv2D,KAAA,GAAmBkS,KAAA8nD,QAAAzD,EAAAyD,QAAuB9nD,KAAA6nD,OAAAxD,EAAAwD,OAAqB7nD,KAAA4nD,SAAAvD,EAAAuD,SAAyB5nD,KAAA2nD,QAC5etD,EAAAsD,QAAU3nD,KAAA+nD,UAAA1D,EAAA0D,WAAA,EAA8B/nD,KAAAgoD,YAAA5D,EAAAC,EAAA2D,aAAA3D,EAAA2D,YAAAS,GAAApE,EAAA2D,cAAA,GAAsEhoD,KAAAnI,EAAAwsD,EAASA,EAAAqE,kBAAA1oD,KAAAK,KAAwU,QAAAsX,IAAA0sC,GAAe,SAAAA,MAAAsE,KAA6B,QAAAC,IAAAvE,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,GAAuBqT,KAAA6sB,SAAAw3B,EAAgBrkD,KAAAqkD,EAAA,KAAYrkD,KAAA6oD,IAAAxoD,EAAWL,KAAArQ,KAAAkI,EAAYmI,KAAA8oD,UAAA1oD,EAAiBJ,KAAA+oD,GAAAp8D,EAAUqT,KAAAlS,MAAA+K,GAAcmH,KAAAgpD,EAAAhpD,KAAAykD,IAAA,EAAkB,QAAAwE,IAAA5E,GAAeA,EAAA2E,GAAA,EAAO3E,EAAAx3B,SAAA,KAAgBw3B,IAAA,KAASA,EAAAwE,IAAA,KAAWxE,EAAA0E,GAAA,KAAW,QAAAG,IAAA7E,GAAerkD,KAAA6oD,IAAAxE,EAAWrkD,KAAAqkD,KAAUrkD,KAAAK,EAAA,EAAiN,QAAA8oD,IAAA9E,EAAAhkD,GAAiB,GAAAxI,GAAAwI,EAAA1Q,IAAa,IAAAkI,IAAAwsD,KAAA,CAAa,GAAAlhC,GAAA/iB,EAAAikD,IAAAxsD,GAAAlL,EAAAy8D,GAAAhpD,EAAAC,IAAyB8iB,EAAA,GAAAx2B,IAAA8C,MAAA/B,UAAAo+B,OAAA99B,KAAAoS,EAAAzT,EAAA,GAA6Cw2B,IAAA8lC,GAAA5oD,GAAA,GAAAgkD,IAAAxsD,GAAAvM,eAAA+4D,KAAAxsD,GAAAwsD,EAAAhkD,OAAoD,QAAAgpD,IAAAhF,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,GAAmE,MAA5C03D,OAAAhkD,MAAoBA,GAAA,EAAKgkD,IAAAhkD,EAAAipD,GAAAjF,EAAAxsD,EAAAuI,EAAAzT,KAAmB,EAAA0T,EAAAgkD,EAAAhkD,GAAA,KAClpC,QAAAipD,IAAAjF,EAAAhkD,EAAAxI,EAAAuI,GAAqB,OAAAzT,GAAA,EAAYA,EAAA03D,EAAA/4D,SAAWqB,EAAA,CAAK,GAAAw2B,GAAAkhC,EAAA13D,EAAW,KAAAw2B,EAAA6lC,GAAA7lC,EAAA0J,UAAAxsB,GAAA8iB,EAAA2lC,WAAAjxD,GAAAsrB,EAAA4lC,IAAA3oD,EAAA,MAAAzT,GAAyD,SAAgE,QAAA48D,IAAAlF,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,GAAuB,GAAAyT,KAAAopD,KAAA,MAAAC,IAAApF,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,EAAkC,IAAA+c,EAAArJ,GAAA,CAAS,OAAA8iB,GAAA,EAAYA,EAAA9iB,EAAA/U,OAAW63B,IAAAomC,GAAAlF,EAAAhkD,EAAA8iB,GAAAtrB,EAAAuI,EAAAzT,EAAqB,aAAoB,MAARkL,GAAA6xD,GAAA7xD,GAAQ8f,GAAA0sC,KAAAC,GAAAjkD,EAAAxI,EAAAyI,EAAAF,OAAA0oD,UAAA1oD,EAAAzT,GAAAg9D,GAAAtF,EAAAhkD,EAAAxI,GAAA,EAAAuI,EAAAzT,GACvT,QAAAg9D,IAAAtF,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,EAAAw2B,GAAyB,IAAA9iB,EAAA,KAAAtT,OAAA,qBAAwC,IAAAm6D,GAAA5mD,EAAA3T,OAAAm8D,UAAAn8D,EAAA83C,EAAAmlB,GAAAvF,EAA6E,IAA1C5f,IAAA4f,EAAAwF,IAAAplB,EAAA,GAAAykB,IAAA7E,IAAuBxsD,EAAA4sC,EAAAxlC,IAAAoB,EAAAxI,EAAAuI,EAAA8mD,EAAA/jC,GAAmBtrB,EAAAwsD,EAAA,MAAAxsD,EAAkD,IAAlCuI,EAAA0pD,KAAOjyD,EAAAwsD,EAAAjkD,EAAMA,EAAAyoD,IAAAxE,EAAQjkD,EAAAysB,SAAAh1B,EAAawsD,EAAAnd,iBAAA6iB,KAAAp9D,EAAAu6D,OAAA,KAAAv6D,OAAA,GAAA03D,EAAAnd,iBAAA7mC,KAAAD,EAAAzT,OAAwF,IAAA03D,EAAA2F,YAAA3F,EAAA2F,YAAAC,GAAA5pD,MAAAD,OAAwD,KAAAikD,EAAA6F,cAAA7F,EAAA8F,eAAyD,KAAAp9D,OAAA,oDAAzDs3D,GAAA6F,YAAA9pD,GAAoI,MAALgqD,MAAKvyD,EACpd,QAAAiyD,MAAc,GAAAzF,GAAAgG,GAAAhqD,EAAAiqD,GAAA,SAAAzyD,GAA0B,MAAAwsD,GAAAr2D,KAAAqS,EAAAwoD,IAAAxoD,EAAAwsB,SAAAh1B,IAAkC,SAAAA,GAA0C,KAA7BA,EAAAwsD,EAAAr2D,KAAAqS,EAAAwoD,IAAAxoD,EAAAwsB,SAAAh1B,IAA6B,MAAAA,GAAgB,OAAAwI,GAAS,QAAAopD,IAAApF,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,GAAuB,GAAA+c,EAAArJ,GAAA,CAAS,OAAA8iB,GAAA,EAAYA,EAAA9iB,EAAA/U,OAAW63B,IAAAsmC,GAAApF,EAAAhkD,EAAA8iB,GAAAtrB,EAAAuI,EAAAzT,EAAqB,aAAoB,MAARkL,GAAA6xD,GAAA7xD,GAAQ8f,GAAA0sC,KAAAqC,GAAArmD,EAAAxI,EAAAyI,EAAAF,OAAA0oD,UAAA1oD,EAAAzT,GAAAg9D,GAAAtF,EAAAhkD,EAAAxI,GAAA,EAAAuI,EAAAzT,GAA+D,QAAA49D,IAAAlG,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,GAAuB,GAAA+c,EAAArJ,GAAA,OAAA8iB,GAAA,EAAoBA,EAAA9iB,EAAA/U,OAAW63B,IAAAonC,GAAAlG,EAAAhkD,EAAA8iB,GAAAtrB,EAAAuI,EAAAzT,OAAqByT,GAAAE,EAAAF,OAAA0oD,UAAA1oD,EAAAvI,EAAA6xD,GAAA7xD,GAAA8f,GAAA0sC,KAAAyB,GAAAzlD,EAAAxI,EAAAuI,EAAAzT,GAAA03D,MAAAuF,GAAAvF,MAAAhkD,EAAAgpD,GAAAhF,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,KAAA69D,GAAAnqD,GACvX,QAAAmqD,IAAAnG,GAAe,mBAAAA,UAAA2E,EAAA,CAAgC,GAAA3oD,GAAAgkD,EAAAwE,GAAY,IAAAlxC,GAAAtX,GAAA8oD,GAAA9oD,EAAAxI,EAAAwsD,OAAmB,CAAK,GAAAxsD,GAAAwsD,EAAA10D,KAAAyQ,EAAAikD,GAAmBhkD,GAAA8mC,oBAAA9mC,EAAA8mC,oBAAAtvC,EAAAuI,EAAAikD,EAAAyE,SAAAzoD,EAAAoqD,YAAApqD,EAAAoqD,YAAAR,GAAApyD,GAAAuI,GAAAC,EAAA6pD,aAAA7pD,EAAA8pD,gBAAA9pD,EAAA8pD,eAAA/pD,GAAqJgqD,MAAKvyD,EAAA+xD,GAAAvpD,KAAA8oD,GAAAtxD,EAAAwsD,GAAA,GAAAxsD,EAAAwI,IAAAxI,EAAAgxD,IAAA,KAAAxoD,EAAAwpD,IAAA,OAAAZ,GAAA5E,KAA4D,QAAA4F,IAAA5F,GAAe,MAAAA,KAAAqG,OAAArG,GAAAqG,GAAArG,GAAA,KAAAA,EAC3U,QAAAsG,IAAAtG,EAAAhkD,EAAAxI,EAAAuI,GAAqB,GAAAzT,IAAA,CAAS,KAAA03D,EAAAuF,GAAAvF,MAAAhkD,EAAAgkD,IAAAhkD,OAAA,IAAAA,IAAAlU,SAAAk4D,EAAA,EAAuDA,EAAAhkD,EAAA/U,OAAW+4D,IAAA,CAAK,GAAAlhC,GAAA9iB,EAAAgkD,EAAWlhC,MAAA2lC,SAAAjxD,IAAAsrB,EAAA6lC,IAAA7lC,EAAAynC,GAAAznC,EAAA/iB,GAAAzT,MAAA,IAAAw2B,GAA+C,MAAAx2B,GAAS,QAAAi+D,IAAAvG,EAAAhkD,GAAiB,GAAAxI,GAAAwsD,EAAAx3B,SAAAzsB,EAAAikD,EAAA0E,IAAA1E,EAAAwE,GAA2C,OAAZxE,GAAAI,IAAA+F,GAAAnG,GAAYxsD,EAAA7J,KAAAoS,EAAAC,GACpO,QAAAgqD,IAAAhG,EAAAhkD,GAAiB,GAAAgkD,EAAA2E,EAAA,QAAgB,KAAAsB,GAAA,CAAQ,IAAAjqD,EAAAgkD,EAAA,CAAShkD,GAAA,iBAAqB,QAAAxI,GAAAyQ,EAAAlI,EAAA,EAAgBA,EAAAC,EAAA/U,OAAW8U,IAAA,UAAAvI,IAAAwI,EAAAD,KAAA,CAA0BC,EAAA,IAAO,MAAAgkD,GAAQhkD,EAAAxI,EAA8B,GAA1BuI,EAAAC,EAAIA,EAAA,GAAA+mD,IAAAhnD,EAAAJ,MAAiBnI,GAAA,IAAK,EAAAuI,EAAAyqD,aAAA,IAAAzqD,EAAA0qD,aAAA,CAA0CzG,EAAA,CAAG,GAAA13D,IAAA,CAAS,OAAAyT,EAAAyqD,QAAA,IAAoBzqD,EAAAyqD,SAAA,CAAa,MAAAxG,GAAQ,MAAA6C,GAASv6D,GAAA,GAAKA,OAAA,IAAAyT,EAAA0qD,eAAA1qD,EAAA0qD,aAAA,GAAkD,IAAL1qD,KAAKzT,EAAA0T,EAAAgkD,EAAU13D,EAAEA,IAAAo+D,WAAA3qD,EAAAzH,KAAAhM,EAAkC,KAAT03D,IAAA10D,KAAShD,EAAAyT,EAAA9U,OAAA,EAAiB,GAAAqB,EAAKA,IAAA,CAAK0T,EAAAgkD,EAAAjkD,EAAAzT,EAAS,IAAAw2B,GAAAwnC,GAAAvqD,EAAAzT,GAAA03D,GAAA,EAAAhkD,EAAsBxI,MAAAsrB,EAAO,IAAAx2B,EAAA,EAAQA,EAAAyT,EAAA9U,OAAWqB,IAAA0T,EAAAgkD,EAAAjkD,EAAAzT,GAAAw2B,EAAAwnC,GAAAvqD,EAAAzT,GAAA03D,GAAA,EAAAhkD,GAAAxI,KAAAsrB,EAAsC,MAAAtrB,GAAS,MAAA+yD,IAAAvG,EACzf,GAAA+C,IAAA/mD,EAAAL,OAAgB,QAAA4pD,IAAAvF,GAAuB,MAARA,KAAAwF,IAAQxF,YAAA6E,IAAA7E,EAAA,KAAoF,QAAAqF,IAAArF,GAAe,MAAAK,IAAAL,MAAkBA,EAAA2G,MAAA3G,EAAA2G,IAAA,SAAA3qD,GAA0B,MAAAgkD,GAAA4G,YAAA5qD,KAA0BgkD,EAAA2G,KAAc,QAAAE,KAAaxF,EAAA13D,KAAAgS,MAAaA,KAAAnI,EAAA,GAAAqxD,IAAAlpD,MAAoBA,KAAAmrD,EAAAnrD,KAAYA,KAAAorD,EAAA,KAGxR,QAAAjG,IAAAd,EAAAhkD,EAAAxI,EAAAuI,GAAwC,KAAnBC,EAAAgkD,EAAAxsD,EAAAwsD,EAAAhkD,EAAA/N,KAAmB,QAAe+N,KAAAlU,QAAa,QAAAQ,IAAA,EAAAw2B,EAAA,EAAiBA,EAAA9iB,EAAA/U,SAAW63B,EAAA,CAAK,GAAA+jC,GAAA7mD,EAAA8iB,EAAW,IAAA+jC,MAAA8B,GAAA9B,EAAA4B,SAAAjxD,EAAA,CAA0B,GAAA4sC,GAAAyiB,EAAAr6B,SAAAtkB,EAAA2+C,EAAA6B,IAAA7B,EAAA2B,GAA+B3B,GAAAzC,IAAA0E,GAAA9E,EAAAxsD,EAAAqvD,GAAgBv6D,GAAA,IAAA83C,EAAAz2C,KAAAua,EAAAnI,IAAAzT,GAAuB,MAAAA,IAAA,GAAAyT,EAAA6mD,GAAmB,QAAAoE,IAAAhH,GAAe,eAAA/+C,KAAA++C,IAAA,4BAAkC/+C,KAAA++C,EAAA9+C,QAAA,wBAAAA,QAAA,mIAA+L,KAAAA,QAAA,0CAA6D,QAAA+lD,IAAAjH,GAA2B,GAAZA,GAAA/xD,GAAY+4D,GAAAhH,GAAA,IAAa,MAAAkH,MAAA,IAAAlH,EAAA,KAAuB,MAAAhkD,IAAU,KAAAtT,OAAA,wBAAAs3D,GAAwC,QAAAmH,IAAAnH,GAAe,GAAAhkD,KAAwB,OAAforD,IAAA,GAAAC,IAAArH,EAAAhkD,GAAeA,EAAA5O,KAAA,IAAkB,QAAAi6D,OAC1rB,QAAAD,IAAApH,EAAAhkD,EAAAxI,GAAmB,SAAAwI,EAAAxI,EAAAc,KAAA,YAA0B,CAAK,mBAAA0H,GAAA,CAAuB,GAAAqJ,EAAArJ,GAAA,CAAS,GAAAD,GAAAC,CAAQA,GAAAD,EAAA9U,OAAWuM,EAAAc,KAAA,IAAY,QAAAhM,GAAA,GAAAw2B,EAAA,EAAiBA,EAAA9iB,EAAI8iB,IAAAtrB,EAAAc,KAAAhM,GAAA8+D,GAAApH,EAAAjkD,EAAA+iB,GAAAtrB,GAAAlL,EAAA,GAA6C,YAAZkL,GAAAc,KAAA,KAAmB,KAAA0H,YAAA/N,SAAA+N,YAAAoN,SAAApN,YAAAsrD,UAAgF,CAAK9zD,EAAAc,KAAA,KAAYhM,EAAA,EAAK,KAAAyT,IAAAC,GAAAtS,OAAAL,UAAAE,eAAAI,KAAAqS,EAAAD,IAAA,mBAAA+iB,EAAA9iB,EAAAD,MAAAvI,EAAAc,KAAAhM,GAAAi/D,GAAAxrD,EAAAvI,KAAAc,KAAA,KAAA8yD,GAAApH,EAAAlhC,EAAAtrB,GAAAlL,EAAA,IAAiJ,YAAZkL,GAAAc,KAAA,KAA3O0H,IAAAwrD,UAA+P,aAAAxrD,IAAiB,aAAAurD,GAAAvrD,EAAAxI,EAAsB,MAAM,cAAAA,EAAAc,KAAA6J,SAAAnC,KACte5R,MAAA4R,KAAA/N,GAAA,OAA4B,MAAM,eAAAuF,EAAAc,KAAA0H,EAAA/N,GAAiC,MAAM,gBAAAuF,EAAAc,KAAA,OAA+B,MAAM,cAAA5L,OAAA,uBAAAsT,MAC9G,QAAAurD,IAAAvH,EAAAhkD,GAAiBA,EAAA1H,KAAA,IAAA0rD,EAAA9+C,QAAAumD,GAAA,SAAAzH,GAAoC,GAAAhkD,GAAA0rD,GAAA1H,EAAgF,OAApEhkD,OAAA,aAAAgkD,EAAA7xD,WAAA,IAAAmO,SAAA,IAAAmS,OAAA,GAAAi5C,GAAA1H,GAAAhkD,GAAoEA,IAAS,KAAQ,QAAA2rD,IAAA3H,EAAAhkD,GAAiBL,KAAAnI,EAAAwsD,EAASrkD,KAAAmjB,EAAA9iB,EAASL,KAAAK,EAAA,EAASL,KAAAqkD,EAAA,KAA+H,QAAA4H,MAAcjsD,KAAAK,EAAAL,KAAAqkD,EAAA,KAAoL,QAAA6H,MAAc,GAAA7H,GAAA8H,GAAA9rD,EAAA,IAAsE,OAAtDgkD,OAAAhkD,EAAAgkD,YAAAv+C,KAAAu+C,QAAAhkD,EAAA,MAAAA,EAAAyF,KAAA,MAAsDzF,EAAS,QAAA+rD,MAAcpsD,KAAA8F,KAAA9F,KAAAK,EAAAL,KAAAqkD,EAAA,KAA0J,QAAAgI,IAAAhI,GAAe/7C,EAAA0gB,WAAA,WAAwB,KAAAq7B,IAAS,GACxzB,QAAAiI,MAAc,GAAAjI,GAAA/7C,EAAAikD,cAC6H,QADtG,KAAAlI,GAAA,mBAAApoB,gBAAAuwB,aAAAvwB,OAAAiL,mBAAAgf,EAAA,YAAA7B,EAAA,WAA8H,GAAAA,GAAAvlC,SAAA2tC,cAAA,SAAuCpI,GAAAqI,MAAAC,QAAA,OAAuBtI,EAAAwE,IAAA,GAAS/pC,SAAA8tC,gBAAAC,YAAAxI,EAAwC,IAAAhkD,GAAAgkD,EAAAyI,aAAsBzI,GAAAhkD,EAAAye,SAAaulC,EAAAz7B,OAASy7B,EAAAvtB,MAAA,IAAYutB,EAAAn/B,OAAU,IAAArtB,GAAA,gBAAAoJ,KAAAE,SAAAf,EAAA,SAAAC,EAAA0sD,SAAAC,SAAA,IAAA3sD,EAAA0sD,SAAAC,SAAA,KAAA3sD,EAAA0sD,SAAA/pD,IAAgHqhD,GAAAS,EAAA,SAAAT,GAAgB,KAAAjkD,GAAAikD,EAAA4I,QAAA7sD,GAAAikD,EAAA39C,MACpd7O,GAAAmI,KAAAktD,MAAAC,aAAyBntD,MAAOK,EAAA6mC,iBAAA,UAAAmd,GAAA,GAAmCrkD,KAAAktD,SAAcltD,KAAAotD,OAAYZ,YAAA,WAAuBnsD,EAAAmsD,YAAA30D,EAAAuI,WAAuB,KAAAikD,IAAA6B,EAAA,aAAAA,EAAA,SAAsD,GAAA7lD,GAAA,GAAAgkD,GAAAxsD,KAAgBuI,EAAAvI,CAA0F,OAArFwI,GAAA6sD,MAAAC,UAAA,WAA6B,YAAAt1D,EAAAiO,KAAA,CAAoBjO,IAAAiO,IAAS,IAAAu+C,GAAAxsD,EAAAw1D,EAAWx1D,GAAAw1D,GAAA,KAAUhJ,MAAM,SAAAA,GAAmBjkD,EAAA0F,MAAQunD,GAAAhJ,GAAMjkD,IAAA0F,KAASzF,EAAA+sD,MAAAZ,YAAA,IAAwB,yBAAA1tC,WAAA,sBAAAA,UAAA2tC,cAAA,mBAAApI,GAAyG,GAAAhkD,GAAAye,SAAA2tC,cAAA,SACtdpsD,GAAAitD,mBAAA,WAAgCjtD,EAAAitD,mBAAA,KAA0BjtD,EAAA0qD,WAAAwC,YAAAltD,GAA4BA,EAAA,KAAOgkD,IAAIA,EAAA,MAAQvlC,SAAA8tC,gBAAAC,YAAAxsD,IAAwC,SAAAgkD,GAAa/7C,EAAA0gB,WAAAq7B,EAAA,IAA2B,QAAAmJ,MAAc,QAAAllD,EAAAoe,QAAAp0B,IAAAd,QAAA,kBAAmD,GAAA6yD,GAAA/7C,EAAAoe,QAAAvsB,YAAA,GAAgCszD,IAAA,WAAcpJ,EAAAl3B,KAAAugC,SAAYD,IAAA,WAAmB,GAAApJ,GAAAqJ,IAAShJ,GAAAp8C,EAAAqlD,eAAArlD,EAAAslD,QAAAtlD,EAAAslD,OAAAlgE,YAAAw4D,EAAA,SAAA59C,EAAAslD,OAAAlgE,UAAAigE,cAAArlD,EAAAqlD,cAAAE,QAAAvB,MAAAuB,GAAAxJ,IAAA/7C,EAAAqlD,aAAAtJ,IAA4K,QAAAqJ,MAAc,OAAArJ,GAAUA,EAAA6H,MAAO,CAAE,IAAI7H,IAAAr2D,KAAAq2D,EAAAhkD,GAAc,MAAAxI,GAASw0D,GAAAx0D,GAAM,GAAAwI,GAAAytD,EAASztD,GAAA8iB,EAAAkhC,GAAO,IAAAhkD,YAAAgkD,EAAAv+C,KAAAzF,EAAAgkD,EAAAhkD,EAAAgkD,KAAkC0J,IAAA,EAAO,QAAAC,IAAA3J,EAAAhkD,GAAiB6qD,EAAAl9D,KAAAgS,MAAaA,KAAAK,EAAAgkD,GAAA,EAAYrkD,KAAAqkD,EAAAhkD,GAAAiI,EAAYtI,KAAAmjB,EAAA2hC,EAAA9kD,KAAAmpD,GAAAnpD,MAAuBA,KAAAiuD,EAAAC,IACpsB,QAAAC,IAAA9J,GAAeA,EAAA+J,GAAA,EAAO/J,EAAAgK,IAAAhK,IAAA5K,aAAA4K,EAAAgK,GAAAhK,EAAAgK,EAAA,MAA+F,QAAAC,IAAAjK,EAAAhkD,EAAAxI,GAAmB,GAAA6sD,GAAAL,GAAAxsD,IAAAwsD,EAAAS,EAAAT,EAAAxsD,QAAuB,KAAAwsD,GAAA,kBAAAA,GAAA4G,YAAiE,KAAAl+D,OAAA,4BAAjEs3D,GAAAS,EAAAT,EAAA4G,YAAA5G,GAA+G,mBAAAhkD,GAAA,EAAAiI,EAAA0gB,WAAAq7B,EAAAhkD,GAAA,GAAqD,QAAAkuD,IAAAlK,EAAAhkD,EAAAxI,GAAmB6tD,EAAA13D,KAAAgS,MAAaA,KAAAmjB,EAAA,MAAAtrB,EAAAitD,EAAAT,EAAAxsD,GAAAwsD,EAAwBrkD,KAAAnI,EAAAwI,EAASL,KAAAK,EAAAykD,EAAA9kD,KAAA2oD,GAAA3oD,MAAuBA,KAAAqkD,KAAgR,QAAAmK,IAAAnK,GAAeA,EAAAoK,EAAAH,GAAAjK,EAAAhkD,EAAAgkD,EAAAxsD,GAAgBwsD,EAAAlhC,EAAAl3B,MAAA,KAAAo4D,KAAqB,QAAAqK,GAAArK,GAAcqB,EAAA13D,KAAAgS,MAAaA,KAAAK,EAAAgkD,EAASrkD,KAAAqkD,KAChf,QAAAsK,IAAAtK,GAAe+B,GAAA/B,IAAA,SAAAA,EAAAxsD,GAAqBmI,KAAAqkD,EAAAz2D,eAAAiK,IAAA2yD,GAAAnG,IAAgCA,GAAIA,OAAwJ,QAAAuK,IAAAvK,EAAAhkD,EAAAxI,GAAmBmI,KAAA8uC,MAAAuV,EAAAhkD,EAAAxI,MAAA,WAAmJ,QAAAg3D,IAAAxK,GAAerkD,KAAAmjB,EAAAkhC,EAASrkD,KAAAK,EAAAL,KAAAnI,EAAAmI,KAAAqkD,EAAA,KAA0B,QAAAyK,GAAAzK,EAAAhkD,GAAgBL,KAAAzQ,KAAA80D,EAAYrkD,KAAA9R,MAAAmS,EAAmL,QAAA0uD,IAAA1K,GAAe,MAAAA,GAAAxsD,EAAAwsD,EAAAxsD,EAAkBwsD,IAAA0K,GAAA1K,MAAsBoB,GAAA,iCAAoC,MACn+B,QAAAuJ,IAAA3K,GAAe4K,QAAA,GAAAJ,IAAA,IAAAK,GAAA,IAAAD,MAAAp3D,EAAAs3D,GAAsC,IAAA9uD,EAAM,MAAAA,EAAA6uD,GAAA7K,IAAA,CAAehkD,EAAA,GAAAwuD,IAAAxK,EAAY,IAAAxsD,GAAAwsD,EAAA+K,YAAA,KAAAhvD,EAAAikD,EAAAvxC,OAAAjb,EAAA,EAAyCA,GAAAm3D,GAAA3K,EAAAvxC,OAAA,EAAAjb,IAAoBA,EAAAwI,IAAAxI,EAAAwI,MAAcxI,EAAAwI,EAAAD,GAAAC,EAASA,EAAAgkD,EAAAxsD,EAAMq3D,GAAA7K,GAAAhkD,EAAQ,MAAAA,GAAU,QAAAgvD,GAAAhL,EAAAhkD,GAAgBgkD,KAAAr4D,IAAAsjE,GAAAjvD,MAAA,IAAsB,QAAAkvD,IAAAlL,EAAAhkD,GAAiBgkD,KAAAr4D,IAAAwjE,GAAAnvD,MAAA,IAAsB,QAAAovD,GAAApL,EAAAhkD,GAAgBgkD,KAAAr4D,IAAA0jE,GAAArvD,MAAA,IAAuB,QAAAsvD,MAAc3vD,KAAAqkD,EAAA2K,GAAA,4CAAsDhvD,KAAAK,GAAA,EAAgD,QAAAuvD,IAAAvL,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,EAAAw2B,GAAyB0sC,EAAAxL,EAAA,WAAe,GAAAA,EAAAhkD,EAAA,GAAA8iB,EAAsB,OAAT+jC,GAAA,GAASziB,EAAAthB,EAAAtsB,MAAA,KAAA0R,EAAA,EAA2BA,EAAAk8B,EAAAn5C,OAAWid,IAAA,CAAK,GAAAunD,GAAArrB,EAAAl8B,GAAA1R,MAAA,IAAsB,MAAAi5D,EAAAxkE,OAAA,CAAe,GAAAykE,GAAAD,EAAA,EAAWA,KAAA,EAAO,IAAAE,GAAAD,EAAAl5D,MAAA,IAAoBqwD,GAAA,GAAA8I,EAAA1kE,QAAA,QAAA0kE,EAAA,GAAA9I,GAAA6I,EAAA,KAAAD,EAAA,IAAA5I,GAAA6I,EAAA,mBAAmE7I,GAAA,SAAYA,GAAA/jC,CAAS,uBAAA/iB,EAAA,cAAAzT,EAAA,MAAA0T,EAAA,KAAAxI,EAAA,KAAAqvD,IACxsB,QAAA+I,IAAA5L,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,EAAAw2B,EAAA+jC,GAA2B2I,EAAAxL,EAAA,WAAe,uBAAAjkD,EAAA,eAAAzT,EAAA,MAAA0T,EAAA,KAAAxI,EAAA,KAAAsrB,EAAA,IAAA+jC,IAAwE,QAAAgJ,IAAA7L,EAAAhkD,EAAAxI,EAAAuI,GAAqByvD,EAAAxL,EAAA,WAAe,uBAAAhkD,EAAA,MAAA8vD,GAAA9L,EAAAxsD,IAAAuI,EAAA,IAAAA,EAAA,MAAsD,QAAAgwD,IAAA/L,EAAAhkD,GAAiBwvD,EAAAxL,EAAA,WAAe,kBAAAhkD,IAAsB,QAAAgwD,GAAAhM,EAAAhkD,GAAgBovD,EAAApL,IAAAhkD,GAAS,QAAAiwD,IAAAjM,EAAAhkD,EAAAxI,IAAmBwsD,UAAAr4D,IAAAw2C,GAAA3qC,GAAA,YAAAwI,GAAoC,QAAAwvD,GAAAxL,EAAAhkD,GAAgBkvD,GAAAlL,IAAAhkD,GAAU,QAAAkwD,IAAAlM,EAAAhkD,IAAiBgkD,UAAAr4D,IAAAw2C,GAAAniC,MAAA,IAC7X,QAAA8vD,IAAA9L,EAAAhkD,GAAiB,IAAAgkD,EAAAhkD,EAAA,MAAAA,EAAiB,KAAAA,EAAA,WAAkB,KAAI,GAAAxI,GAAAlH,KAAA6/D,MAAAnwD,EAAoB,IAAAxI,EAAA,OAAAuI,GAAA,EAAiBA,EAAAvI,EAAAvM,OAAW8U,IAAA,GAAAsJ,EAAA7R,EAAAuI,IAAA,CAAgB,GAAAzT,GAAAkL,EAAAuI,EAAW,QAAAzT,EAAArB,QAAA,CAAkB,GAAA63B,GAAAx2B,EAAA,EAAW,IAAA+c,EAAAyZ,MAAA,EAAAA,EAAA73B,QAAA,CAAwB,GAAA47D,GAAA/jC,EAAA,EAAW,YAAA+jC,GAAA,QAAAA,GAAA,SAAAA,EAAA,OAAAziB,GAAA,EAAgDA,EAAAthB,EAAA73B,OAAWm5C,IAAAthB,EAAAshB,GAAA,KAAc,MAAA+mB,IAAA3zD,GAAa,MAAA0Q,GAAS,MAAA8nD,GAAAhM,EAAA,6DAAAhkD,GAAyF,QAAAowD,IAAApM,GAAe8C,EAAAn5D,KAAAgS,KAAA,qBAAAqkD,GAA4C,QAAAqM,IAAArM,GAAesM,GAAAC,cAAA,GAAAH,IAAAE,GAAAtM,IAA+B,QAAAwM,IAAAxM,GAAe8C,EAAAn5D,KAAAgS,KAAA,YAAAqkD,GAAmC,QAAA+G,GAAA/G,GAAcsM,GAAAC,cAAA,GAAAC,IAAAF,GAAAtM,IAA+B,QAAAyM,IAAAzM,GAAe8C,EAAAn5D,KAAAgS,KAAA,cAAAqkD,GAAqC,QAAA0M,IAAA1M,EAAAhkD,EAAAxI,GAAmB84D,GAAAC,cAAA,GAAAE,IAAAH,GAAAtM,EAAAhkD,EAAAxI,IAAmC,QAAAm5D,IAAA3M,EAAAhkD,GAAiB,IAAAqkD,GAAAL,GAAA,KAAAt3D,OAAA,6CAAoE,OAAAub,GAAA0gB,WAAA,WAA+Bq7B,KAAIhkD,GAAqQ,QAAA4wD,OAAmC,QAAAC,IAAA7M,GAAe,GAAAhkD,EAAuD,QAAjDA,EAAAgkD,OAAAhkD,KAAc8wD,GAAA9M,KAAAhkD,EAAA,MAAAA,EAAA,OAAAA,EAAAgkD,IAAAhkD,GAAmCA,EAAiB,QAAA+wD,OAAwB,QAAAC,IAAAhN,GAAe,OAAAA,EAAA8M,GAAA9M,IAAA,GAAAiN,eAAAjN,GAAA,GAAAkN,gBAAwD,QAAAJ,IAAA9M,GAAe,IAAAA,EAAAhkD,GAAA,mBAAAkxD,iBAAA,mBAAAD,eAAA,CAAgF,OAAAjxD,IAAA,gFAAAxI,EAAA,EAA+FA,EAAAwI,EAAWxI,IAAA,CAAK,GAAAuI,GAAAC,EAAAxI,EAAW,KAAI,UAAAy5D,eAAAlxD,GAAAikD,EAAAhkD,EAAAD,EAAkC,MAAAzT,KAAW,KAAAI,OAAA,8FAA2G,MAAAs3D,GAAAhkD,EAAqB,QAAAguD,GAAAhK,EAAAhkD,EAAAxI,EAAAuI,GAAoBJ,KAAA/N,EAAAoyD,EAASrkD,KAAAK,IAASL,KAAAmjB,EAAAtrB,EAASmI,KAAAwxD,EAAApxD,GAAA,EAAYJ,KAAAyxD,EAAA,GAAA/C,GAAA1uD,MAAmBA,KAAA0xD,EAAAC,GAAUtN,EAAArkD,KAAA6vD,EAAA,GAAA7B,IAAgB3J,EAAAhkD,EAAAuxD,GAAOvN,EAAAgK,GAAAhK,EAAA+J,GAAAD,GAAA9J,KAAA7rD,SAAA6rD,EAAAgK,GAAAF,GAAA9J,GAAsCrkD,KAAA6xD,EAAA,KAAY7xD,KAAAnI,GAAA,EAAUmI,KAAAykC,EAAAzkC,KAAAiuD,EAAAjuD,KAAAknD,EAAAlnD,KAAAorD,EAAAprD,KAAA8uD,EAAA9uD,KAAA8xD,EAAA9xD,KAAA0lD,EAAA,KAAsD1lD,KAAA7N,KAAU6N,KAAAqkD,EAAA,KAAYrkD,KAAAyvD,EAAA,EAASzvD,KAAAokD,EAAApkD,KAAA+xD,EAAA,KAAmB/xD,KAAA0uD,GAAA,EAAU1uD,KAAAkrD,GAAA,EAAUlrD,KAAAmrD,EAAA,EAASnrD,KAAAqwD,EAAA,KAAYrwD,KAAAgyD,GAAA,EACz8D,QAAAC,IAAA5N,EAAAhkD,GAAiB,OAAAgkD,GAAU,qCAAAhkD,EAAA,GAA2C,yCAAyC,sCAAsC,gCAAgG,QAAA6xD,IAAA7N,EAAAhkD,EAAAxI,GAAmBwsD,EAAA+G,EAAA,EAAM/G,EAAA6C,EAAAiL,GAAAjN,EAAA7kD,IAAagkD,EAAA5f,EAAA5sC,EAAMwsD,EAAA2N,GAAA,EAAOI,GAAA/N,EAAA,MAAW,QAAAgO,IAAAhO,EAAAhkD,EAAAxI,EAAAuI,GAAqBikD,EAAA+G,EAAA,EAAM/G,EAAA6C,EAAAiL,GAAAjN,EAAA7kD,IAAagkD,EAAA5f,EAAA,KAAS4f,EAAA2N,EAAAn6D,EAAMu6D,GAAA/N,EAAAjkD,GAC1W,QAAAgyD,IAAA/N,EAAAhkD,GAAiBgkD,EAAAyK,EAAAZ,IAAQoE,GAAAjO,GAAMA,EAAA4J,EAAA/I,EAAAb,EAAA6C,GAAWqL,GAAAlO,EAAA4J,EAAA,IAAA5J,EAAAmN,GAAgBnN,EAAAoL,EAAA,EAAMpL,MAAApyD,EAAAyyD,GAAAL,EAAApyD,EAAA+yD,KAAA3kD,EAAA,MAA4B,EAAAgkD,EAAA8G,IAAA9G,EAAAgM,EAAA,GAAA9B,IAAAzJ,EAAAT,EAAAmO,GAAAnO,SAAA8G,IAAuC9G,EAAAoN,EAAAnN,GAAAD,IAAA,mBAAAA,EAAA4E,IAAoC5oD,EAAAgkD,EAAAwN,EAAAtL,GAAAlC,EAAAwN,MAAiBxN,EAAA5f,GAAA4f,EAAA0N,IAAA1N,EAAA0N,EAAA,QAAA1xD,EAAA,oDAAAgkD,IAAAM,GAAAN,EAAA4J,EAAA5J,EAAA0N,EAAA1N,EAAA5f,EAAApkC,KAAAgkD,EAAA0N,EAAA,MAAA1N,IAAAM,GAAAN,EAAA4J,EAAA5J,EAAA0N,EAAA,KAAA1xD,IAAuIqwD,GAAA,GAAMd,GAAAvL,EAAAhkD,EAAAgkD,EAAA0N,EAAA1N,EAAA4J,EAAA5J,EAAAlhC,EAAAkhC,EAAAmN,EAAAnN,EAAA5f,GAErU,QAAAguB,IAAApO,GAAe,GAAAhkD,GAAA2xD,EAAA3N,KAAAxsD,EAAAwsD,IAAAoC,KAAArmD,EAAAikD,IAAAqO,GAAkC,QAAAryD,GAAA,GAAAA,IAAAsyD,KAAAtO,IAAAuO,KAAA,CAAgCvO,EAAA6G,GAAA,GAAA7qD,GAAA,GAAAxI,GAAA64D,GAAA,GAAA74D,GAAA,GAAAuI,EAAA,KAA0CyyD,GAAAxO,EAAM,IAAA13D,GAAA03D,IAAAqO,GAAcrO,GAAAqK,EAAA/hE,GAAMkL,EAAAwsD,IAAAuO,MAAAvC,EAAAhM,EAAAhkD,EAAA,WAA8B,kCAAAgkD,EAAA4J,EAAA,WAAAthE,IAAqD03D,EAAAxsD,EAAA,KAAAlL,EAAWsjE,GAAA5L,EAAAhkD,EAAAgkD,EAAA0N,EAAA1N,EAAA4J,EAAA5J,EAAAlhC,EAAAkhC,EAAAmN,EAAAnxD,EAAA1T,GAA4B03D,EAAAxsD,GAAAwsD,EAAA2N,GAAAc,GAAAzO,EAAAhkD,EAAAxI,GAAA86D,IAAAtO,EAAAxsD,GAAA,GAAAwI,GAAA0yD,GAAA1O,KAAA6L,GAAA7L,EAAAhkD,EAAAgkD,EAAAlhC,EAAAtrB,EAAA,MAAAm7D,GAAA3O,EAAAxsD,IAAA,GAAAwI,GAAA4yD,GAAA5O,KAAAxsD,IAAAwsD,EAAA6G,IAAA,GAAA7qD,EAAAgkD,EAAApyD,EAAAoqC,GAAAgoB,MAAAxsD,GAAA,EAAAy6D,GAAAjO,OAAA,KAAA13D,GAAA,EAAAkL,EAAArG,QAAA,gBAAA6yD,EAAAD,EAAA,EAAAgH,EAAA,IAAAiE,EAAAhL,EAAAhkD,EAAAgkD,EAAA,wBAAAA,EAAAlhC,EAAA,OAAAkhC,EAAAD,EAAA,EAAAgH,EAAA,IAC/QiE,EAAAhL,EAAAhkD,EAAAgkD,EAAA,sBAAA13D,EAAA,KAAA03D,EAAAlhC,EAAA,MAAA8vC,GAAA5O,GAAA6O,GAAA7O,KAA6D,QAAAyO,IAAAzO,EAAAhkD,EAAAxI,GAAmB,OAAAuI,IAAA,GAAaikD,EAAA6G,GAAA7G,EAAAoL,EAAA53D,EAAAvM,QAAmB,CAAE,GAAAqB,GAAAwmE,GAAA9O,EAAAxsD,EAAc,IAAAlL,GAAAymE,GAAA,CAAU,GAAA/yD,IAAAgkD,EAAAD,EAAA,EAAAgH,EAAA,IAAAhrD,GAAA,GAAyB8vD,GAAA7L,EAAAhkD,EAAAgkD,EAAAlhC,EAAA,6BAAyC,OAAM,GAAAx2B,GAAA0mE,GAAA,CAAehP,EAAAD,EAAA,EAAMgH,EAAA,IAAM8E,GAAA7L,EAAAhkD,EAAAgkD,EAAAlhC,EAAAtrB,EAAA,mBAAgCuI,GAAA,CAAK,OAAM8vD,GAAA7L,EAAAhkD,EAAAgkD,EAAAlhC,EAAAx2B,EAAA,MAAAqmE,GAAA3O,EAAA13D,GAAgC,GAAA0T,GAAA,GAAAxI,EAAAvM,SAAA+4D,EAAAD,EAAA,EAAAgH,EAAA,IAAAhrD,GAAA,GAAsCikD,EAAAxsD,EAAAwsD,EAAAxsD,GAAAuI,EAAWA,IAAA8vD,GAAA7L,EAAAhkD,EAAAgkD,EAAAlhC,EAAAtrB,EAAA,8BAAAo7D,GAAA5O,GAAA6O,GAAA7O,IAC3P,QAAA0O,IAAA1O,GAAeA,EAAAoN,EAAAnN,GAAAD,EAAAwL,EAAA,OAAAxL,EAAAuE,IAAwBvE,EAAAwL,EAAAr3D,QAAY,QAAA26D,IAAA9O,EAAAhkD,GAAiB,GAAAxI,GAAAwsD,EAAAoL,EAAArvD,EAAAC,EAAA7O,QAAA,KAAAqG,EAA8B,WAAAuI,EAAAgzD,IAAmBv7D,GAAAwI,EAAA3P,UAAAmH,EAAAuI,GAA2B3R,MAAAoJ,GAAAw7D,IAAsBjzD,GAAA,GAAKvI,EAAAwI,EAAA/U,OAAA8nE,IAA0B/yD,IAAAyS,OAAA1S,EAAAvI,GAAgBwsD,EAAAoL,EAAArvD,EAAAvI,EAAQwI,IAAiD,QAAAiyD,IAAAjO,GAAeA,EAAAyN,EAAA5D,IAAA7J,EAAAqN,EAAY4B,GAAAjP,IAAAqN,GACvZ,QAAA4B,IAAAjP,EAAAhkD,GAAiB,SAAAgkD,EAAAqB,EAAA,KAAA34D,OAAA,0BAAoDs3D,GAAAqB,EAAAsL,GAAAlM,EAAAT,EAAA1sC,GAAA0sC,GAAAhkD,GAAoB,QAAAwyD,IAAAxO,GAAeA,EAAAqB,IAAAp9C,EAAAmxC,aAAA4K,EAAAqB,GAAArB,EAAAqB,EAAA,MAAwT,QAAAwN,IAAA7O,GAAeA,EAAApyD,EAAA20D,MAAAvC,EAAA6G,GAAA7G,EAAApyD,EAAAoqC,GAAAgoB,GAC/a,QAAA4O,IAAA5O,GAAewO,GAAAxO,EAAM,IAAAhkD,GAAAgkD,EAAAgM,CAAUhwD,IAAA,kBAAAA,GAAA0vD,GAAA1vD,EAAA0vD,IAAiC1L,EAAAgM,EAAA,KAASlC,GAAA9J,EAAAwL,GAAQlB,GAAAtK,EAAAoN,GAAQpN,MAAAhkD,EAAAgkD,QAAA,KAAAhkD,EAAAu8B,QAAAv8B,EAAA0vD,KAAsC,QAAAiD,IAAA3O,EAAAhkD,GAAiB,IAAIgkD,EAAApyD,EAAAk2D,GAAA9D,EAAAhkD,GAAAqwD,GAAA,GAAkB,MAAA74D,GAASy4D,GAAAjM,EAAAhkD,EAAAxI,EAAA,kCAA4C,QAAA07D,IAAAlP,GAAe,GAAAA,EAAA97C,GAAA,kBAAA87C,GAAA97C,EAAA,MAAA87C,GAAA97C,GAA4C,IAAA67C,EAAAC,GAAA,MAAAA,GAAAxtD,MAAA,GAA2B,IAAA4tD,GAAAJ,GAAA,CAAU,OAAAhkD,MAAAxI,EAAAwsD,EAAA/4D,OAAA8U,EAAA,EAA4BA,EAAAvI,EAAIuI,IAAAC,EAAA1H,KAAA0rD,EAAAjkD,GAAiB,OAAAC,GAAS,MAAAgmD,IAAAhC,GACrX,QAAAmP,IAAAnP,EAAAhkD,GAAiB,GAAAgkD,EAAA31D,SAAA,kBAAA21D,GAAA31D,QAAA21D,EAAA31D,QAAA2R,MAAA,QAA+D,IAAAokD,GAAAJ,IAAAD,EAAAC,GAAAoP,GAAApP,EAAAhkD,MAAA,QAAmC,CAAK,GAAAgkD,EAAAqP,GAAA,kBAAArP,GAAAqP,EAAA,GAAA77D,GAAAwsD,EAAAqP,QAA2C,IAAArP,EAAA97C,GAAA,kBAAA87C,GAAA97C,EAAA1Q,MAAA,OAA6C,IAAA4sD,GAAAJ,IAAAD,EAAAC,GAAA,CAAqBxsD,IAAK,QAAAuI,GAAAikD,EAAA/4D,OAAAqB,EAAA,EAAuBA,EAAAyT,EAAIzT,IAAAkL,EAAAc,KAAAhM,OAAckL,GAAAyuD,GAAAjC,EAAajkD,GAAAmzD,GAAAlP,GAAQ13D,EAAAyT,EAAA9U,MAAW,QAAA63B,GAAA,EAAYA,EAAAx2B,EAAIw2B,IAAA9iB,EAAArS,SAAA,GAAAoS,EAAA+iB,GAAAtrB,KAAAsrB,GAAAkhC,IAAoC,QAAAoN,GAAApN,EAAAhkD,GAAgBL,KAAAK,KAAUL,KAAAqkD,KAAUrkD,KAAAnI,EAAA,CAAS,IAAAA,GAAAxM,UAAAC,MAAuB,MAAAuM,EAAA,CAAQ,GAAAA,EAAA,OAAA9K,OAAA,6BAAiD,QAAAqT,GAAA,EAAYA,EAAAvI,EAAIuI,GAAA,EAAAJ,KAAA+M,IAAA1hB,UAAA+U,GAAA/U,UAAA+U,EAAA,QAA2C,IAAAikD,EAAA,CAAWA,YAAAoN,IAAA55D,EAAAwsD,EAAAqP,IAAAtzD,EAAAikD,EAAA97C,MAAA1Q,EAAAyuD,GAAAjC,GAAAjkD,EAAAimD,GAAAhC,GAAmD,QAAA13D,GAAA,EAAYA,EAAAkL,EAAAvM,OAAWqB,IAAAqT,KAAA+M,IAAAlV,EAAAlL,GAAAyT,EAAAzT,KACpnB,QAAAgnE,IAAAtP,GAAeA,EAAAhkD,KAAOgkD,IAAA/4D,OAAA,EAAa+4D,EAAAxsD,EAAA,EAAM,QAAA+7D,IAAAvP,EAAAhkD,GAAiB,QAAAqzD,EAAArP,EAAAhkD,aAAAgkD,GAAAhkD,KAAAgkD,EAAAxsD,IAAAwsD,IAAA/4D,OAAA,EAAA+4D,EAAAxsD,GAAA8zB,GAAA04B,IAAA,GAAoE,QAAA14B,IAAA04B,GAAe,GAAAA,EAAAxsD,GAAAwsD,IAAA/4D,OAAA,CAAoB,OAAA+U,GAAA,EAAAxI,EAAA,EAAgBwI,EAAAgkD,IAAA/4D,QAAa,CAAE,GAAA8U,GAAAikD,IAAAhkD,EAAaqzD,GAAArP,EAAAhkD,EAAAD,KAAAikD,IAAAxsD,KAAAuI,GAAuBC,IAAIgkD,IAAA/4D,OAAAuM,EAAa,GAAAwsD,EAAAxsD,GAAAwsD,IAAA/4D,OAAA,CAAoB,GAAAqB,KAAS,KAAAkL,EAAAwI,EAAA,EAAUA,EAAAgkD,IAAA/4D,QAAa8U,EAAAikD,IAAAhkD,GAAAqzD,EAAA/mE,EAAAyT,KAAAikD,IAAAxsD,KAAAuI,EAAAzT,EAAAyT,GAAA,GAAAC,GAA0CgkD,KAAA/4D,OAAAuM,GACtO,QAAA67D,GAAArP,EAAAhkD,GAAgB,MAAAtS,QAAAL,UAAAE,eAAAI,KAAAq2D,EAAAhkD,GAAgL,QAAAwzD,IAAAxP,EAAAhkD,GAAiB,GAAAgkD,EAAA,CAAMA,IAAAxtD,MAAA,IAAe,QAAAgB,GAAA,EAAYA,EAAAwsD,EAAA/4D,OAAWuM,IAAA,CAAK,GAAAuI,GAAAikD,EAAAxsD,GAAArG,QAAA,KAAA7E,EAAA,IAA+B,OAAAyT,EAAA,CAAS,GAAA+iB,GAAAkhC,EAAAxsD,GAAAnH,UAAA,EAAA0P,EAA0BzT,GAAA03D,EAAAxsD,GAAAnH,UAAA0P,EAAA,OAAsB+iB,GAAAkhC,EAAAxsD,EAAYwI,GAAA8iB,EAAAx2B,EAAAmnE,mBAAAnnE,EAAA4Y,QAAA,kBAAsD,QAAA4lD,GAAA9G,EAAAhkD,GAAgBL,KAAAK,EAAAL,KAAA6xD,EAAA7xD,KAAAmjB,EAAA,GAAwBnjB,KAAA/N,EAAA,KAAY+N,KAAAiuD,EAAAjuD,KAAAqkD,EAAA,GAAiBrkD,KAAAknD,GAAA,CAAU,IAAArvD,EAAMwsD,aAAA8G,IAAAnrD,KAAAknD,MAAA,KAAA7mD,IAAAgkD,EAAA6C,EAAA6M,GAAA/zD,KAAAqkD,EAAAlhC,GAAAnjB,KAAA6xD,EAAAxN,EAAAwN,EAAAmC,GAAAh0D,KAAAqkD,EAAAhkD,GAAA4zD,GAAAj0D,KAAAqkD,EAAApyD,GAAA+N,KAAAqkD,MAAA6P,GAAAl0D,KAAAm0D,GAAA9P,EAAAxsD,IAAAmI,KAAAiuD,EAAA5J,EAAA4J,GAAA5J,IAAAxsD,GAAAwsD,EAAA/xD,IAAA8hE,MAAAC,MAAAr0D,KAAAknD,IAAA7mD,EAAA0zD,GAAA/zD,KAAAnI,EAAA,WAAAmI,KAAA6xD,EAAAyC,GAAAz8D,EAAA,QAAAm8D,GAAAh0D,KAAAnI,EAAA,WAAAo8D,GAAAj0D,KAAAnI,EAAA,IAAAmI,KAAAqkD,EAAAiQ,GAAAz8D,EAAA,WAAAq8D,GAAAl0D,KAAAnI,EAAA,WAAAmI,KAAAiuD,EAAAqG,GAAAz8D,EAAA,UAAAmI,KAAAknD,IAAA7mD,EAAAL,KAAAnI,EAAA,GAAA08D,IAAA,KAAAv0D,KAAAknD,IAG9b,QAAAhC,GAAAb,GAAc,UAAA8G,GAAA9G,GAAgB,QAAA0P,IAAA1P,EAAAhkD,EAAAxI,GAAmBwsD,EAAAlhC,EAAAtrB,EAAAy8D,GAAAj0D,GAAA,GAAAA,EAAiBgkD,EAAAlhC,IAAAkhC,EAAAlhC,EAAAkhC,EAAAlhC,EAAA5d,QAAA,UAAgC,QAAAyuD,IAAA3P,EAAAhkD,EAAAxI,GAAmBwsD,EAAAhkD,EAAAxI,EAAAy8D,GAAAj0D,GAAA,GAAAA,EAAiB,QAAA4zD,IAAA5P,EAAAhkD,GAAiB,GAAAA,EAAA,CAAkB,GAAZA,KAAY5R,MAAA4R,IAAA,EAAAA,EAAA,KAAAtT,OAAA,mBAAAsT,EAAmDgkD,GAAApyD,EAAAoO,MAAMgkD,GAAApyD,EAAA,KAAc,QAAAiiE,IAAA7P,EAAAhkD,EAAAxI,GAAmBwI,YAAAk0D,KAAAlQ,EAAAxsD,EAAAwI,EAAAm0D,GAAAnQ,EAAAxsD,EAAAwsD,EAAA6C,KAAArvD,IAAAwI,EAAAo0D,GAAAp0D,EAAAq0D,KAAArQ,EAAAxsD,EAAA,GAAA08D,IAAAl0D,EAAAgkD,EAAA6C,IACna,QAAAyN,GAAAtQ,EAAAhkD,EAAAxI,GAAkBwsD,EAAAxsD,EAAAkV,IAAA1M,EAAAxI,GAAa,QAAA06D,IAAAlO,EAAAhkD,EAAAxI,GAAmB6R,EAAA7R,UAAAvF,KAAsBsiE,GAAAvQ,EAAAxsD,EAAAwI,EAAAxI,GAAY,QAAAs6D,IAAA9N,GAA2I,MAA5HsQ,GAAAtQ,EAAA,KAAApjD,KAAAC,MAAA,WAAAD,KAAAE,UAAAR,SAAA,IAAAM,KAAA4zD,IAAA5zD,KAAAC,MAAA,WAAAD,KAAAE,UAAA+sD,KAAAvtD,SAAA,KAA4H0jD,EAAS,QAAAyQ,IAAAzQ,GAAe,MAAAA,aAAA8G,GAAAjG,EAAAb,GAAA,GAAA8G,GAAA9G,MAAA,IAA2C,QAAA0Q,IAAA1Q,EAAAhkD,EAAAxI,EAAAuI,GAAqB,GAAAzT,GAAA,GAAAw+D,GAAA,YAAqE,OAA5C9G,IAAA0P,GAAApnE,EAAA03D,GAAWhkD,GAAA2zD,GAAArnE,EAAA0T,GAAWxI,GAAAo8D,GAAAtnE,EAAAkL,GAAWuI,IAAAzT,EAAA03D,EAAAjkD,GAAWzT,EAAS,QAAA2nE,IAAAjQ,EAAAhkD,GAAiB,MAAAgkD,GAAAhkD,EAAA20D,UAAA3Q,EAAA9+C,QAAA,iBAAAuuD,mBAAAzP,GAAA,GACtZ,QAAAoQ,IAAApQ,EAAAhkD,EAAAxI,GAAmB,MAAAusD,GAAAC,MAAA4Q,UAAA5Q,GAAA9+C,QAAAlF,EAAA60D,IAAAr9D,IAAAwsD,IAAA9+C,QAAA,uBAA6E,QAAA8+C,GAAA,KAAoB,QAAA6Q,IAAA7Q,GAAiC,MAAlBA,KAAA7xD,WAAA,GAAkB,KAAA6xD,GAAA,MAAA1jD,SAAA,QAAA0jD,GAAA1jD,SAAA,IAAsH,QAAA4zD,IAAAlQ,EAAAhkD,GAAiBL,KAAAK,EAAAL,KAAAqkD,EAAA,KAAmBrkD,KAAAnI,EAAAwsD,GAAA,KAAerkD,KAAAmjB,IAAA9iB,EAAW,QAAA80D,GAAA9Q,GAAcA,UAAA,GAAAoN,GAAApN,EAAAhkD,EAAA,EAAAgkD,EAAAxsD,GAAAg8D,GAAAxP,EAAAxsD,EAAA,SAAAwI,EAAAxI,GAAgDwsD,EAAAplD,IAAA60D,mBAAAzzD,EAAAkF,QAAA,YAAA1N,MACvQ,QAAAu9D,IAAA/Q,EAAAhkD,GAAiB80D,EAAA9Q,GAAKhkD,EAAAg1D,GAAAhR,EAAAhkD,GAAUqzD,EAAArP,IAAAhkD,OAAAgkD,EAAAxsD,EAAA,KAAAwsD,EAAAhkD,GAAAgkD,IAAA3sD,IAAA2I,GAAA/U,OAAAsoE,GAAAvP,IAAAhkD,IAAwD,QAAAi1D,IAAAjR,EAAAhkD,GAAgC,MAAf80D,GAAA9Q,GAAKhkD,EAAAg1D,GAAAhR,EAAAhkD,GAAUqzD,EAAArP,IAAAhkD,KAExP,QAAAu0D,IAAAvQ,EAAAhkD,EAAAxI,GAAmBu9D,GAAA/Q,EAAAhkD,GAAQ,EAAAxI,EAAAvM,SAAA+4D,EAAAxsD,EAAA,KAAAwsD,IAAAt3C,IAAAsoD,GAAAhR,EAAAhkD,GAAA4lD,GAAApuD,IAAAwsD,EAAAhkD,GAAAxI,EAAAvM,QAAkW,QAAA6oE,IAAA9P,GAAe,GAAAhkD,GAAA,GAAAk0D,GAAmD,OAAtCl0D,GAAAxI,EAAAwsD,EAAAxsD,EAAQwsD,MAAAhkD,EAAAgkD,EAAA,GAAAoN,GAAApN,KAAAhkD,IAAAgkD,EAAAhkD,GAA8BA,EAC/b,QAAAg1D,IAAAhR,EAAAhkD,GAAsD,MAArCA,IAAA/N,GAAY+xD,EAAAlhC,IAAA9iB,IAAAk1D,eAAyBl1D,EAAS,QAAAm0D,IAAAnQ,EAAAhkD,GAAiBA,IAAAgkD,EAAAlhC,IAAAgyC,EAAA9Q,KAAAxsD,EAAA,KAAAwsD,IAAA31D,QAAA,SAAA21D,EAAAhkD,GAAkD,GAAAxI,GAAAwI,EAAAk1D,aAAsBl1D,IAAAxI,IAAAu9D,GAAAp1D,KAAAK,GAAAu0D,GAAA50D,KAAAnI,EAAAwsD,KAAgCA,IAAKA,EAAAlhC,EAAA9iB,EAAO,QAAAm1D,MAAcx1D,KAAAqkD,EAAA6J,IAAsJ,QAAAuH,MAAcC,QAAA,GAAAF,KAAgB,QAAAG,MAAcD,QAAA,GAAAF,KAAyB,QAAAI,OAAsD,QAAAC,MAAc1O,EAAAn5D,KAAAgS,KAAA,KAAyB,QAAA81D,MAAc3O,EAAAn5D,KAAAgS,KAAA,KAAyB,QAAA+1D,IAAA1R,EAAAhkD,GAAiBL,KAAAqkD,IAASrkD,KAAAK,IAASL,KAAAnI,EAAAmI,KAAA/N,EAAA,KAAmB+N,KAAAknD,GAAA,EAAUlnD,KAAAokD,EAAA,KAAYpkD,KAAAmjB,GAAA,EAAUnjB,KAAAykC,EAAAzkC,KAAAiuD,EAAA,KACvoB,QAAA+H,IAAA3R,GAAegM,EAAAhM,EAAAhkD,EAAA,mCAA0C,IAAAA,GAAAgkD,IAAAwL,EAAAxL,CAAc,UAAAhkD,EAAAgwD,EAAAhM,EAAAhkD,EAAA,WAA4B,mBAA2F+qD,EAAA,GAAA/qD,GAAA+qD,EAAA,IAAA6K,GAAA5R,OAAA,KAAA+G,EAAA,IAAA6K,GAAA5R,OAAA,QAAmD,CAAKA,EAAAxsD,EAAA,GAAAw2D,GAAAhK,IAAAhkD,MAAA,WAA+BgkD,EAAAxsD,EAAAg6D,EAAAxN,EAAApyD,CAAU,IAAA4F,GAAAq+D,GAAA7R,MAAA4J,EAAA5J,EAAAD,EAAsBgH,GAAA,GAAKmH,GAAA16D,EAAA,iBAAuB,IAAAuI,GAAAikD,IAAAwN,EAAAllE,EAAA03D,IAAA+G,CAAoBhrD,IAAAzT,GAAAgoE,EAAA98D,EAAAuI,EAAAzT,GAAe0lE,GAAAhO,EAAAxsD,KAAA,EAAAwsD,EAAA4J,IAK5S,QAAAkI,MAAcn2D,KAAAqkD,EAAArkD,KAAAK,EAAA,KAAoB,QAAAqxD,KAAa1xD,KAAAqkD,EAAA,GAAAoN,GAAa,QAAA2E,IAAA/R,GAAe,GAAAhkD,SAAAgkD,EAAe,iBAAAhkD,GAAAgkD,GAAA,YAAAhkD,EAAA,KAAAgkD,EAAA93B,KAAA83B,EAAA93B,KAAAs5B,KAAAxlD,EAAAhO,OAAA,GAAAgyD,EAAkR,QAAAgS,IAAAhS,EAAAhkD,GAAiBL,KAAAqkD,IAASrkD,KAAAK,IAAU,QAAAi2D,IAAAjS,GAAerkD,KAAAiuD,EAAA5J,GAAAkS,GAAav2D,KAAAmjB,EAAA7a,EAAAkuD,IAAAluD,EAAAkuD,GAAA7D,IAAArqD,EAAAkuD,GAAA7D,MAAArqD,EAAAkuD,GAAA7D,KAAAtH,GAAArrD,KAAAiuD,EAAA,EAAuDjuD,KAAAqkD,EAAA,KAAY,EAAArkD,KAAAmjB,IAAAnjB,KAAAqkD,EAAA,GAAAqN,IAAyB1xD,KAAAK,EAAA,KAAYL,KAAAnI,KAAoB,QAAA4+D,IAAApS,EAAAhkD,GAAiBgkD,MAAA,GAAAhkD,EAAA7O,QAAA,aAAA6O,EAAA7O,QAAA,aAAA6O,EAAA7O,QAAA,QAAA6yD,EAAAlhC,EAAAkhC,EAAA4J,EAAA5J,IAAA,GAAAqN,GAAArN,EAAAhkD,IAAAq2D,GAAArS,IAAAhkD,GAAAgkD,EAAAhkD,EAAA,OAAsH,QAAAs2D,IAAAtS,GAAe,QAAAA,EAAAhkD,KAAAgkD,SAAAY,KAAAZ,EAAAlhC,EAAkC,QAAAyzC,IAAAvS,EAAAhkD,GAAiB,MAAAgkD,GAAAhkD,EAAAgkD,EAAAhkD,OAAAgkD,SAAAx2D,SAAAwS,GAAyC,QAAAq2D,IAAArS,EAAAhkD,GAAiBgkD,QAAAplD,IAAAoB,GAAAgkD,EAAAhkD,IACn3B,QAAAw2D,IAAAxS,EAAAhkD,GAAiBgkD,EAAAhkD,GAAAgkD,EAAAhkD,KAAAgkD,EAAAhkD,EAAA,KAAAgkD,SAAAx2D,SAAAwS,IAAAuzD,GAAAvP,MAAA+R,GAAA/1D,IAA6N,QAAAy2D,IAAAzS,GAAe,SAAAA,EAAAhkD,EAAA,MAAAgkD,GAAAxsD,EAAA1L,OAAAk4D,EAAAhkD,EAAAlO,EAAsC,UAAAkyD,KAAA,GAAAA,MAAAxsD,EAAA,CAA0B,GAAAwI,GAAAgkD,EAAAxsD,CAAmD,OAAzC47D,IAAApP,IAAA97C,IAAA,SAAA87C,GAAuBhkD,IAAAlU,OAAAk4D,EAAAlyD,KAAkBkO,EAAS,MAAA4lD,IAAA5B,EAAAxsD,GAAe,QAAAk/D,IAAA1S,EAAAhkD,GAAiBgkD,EAAAxsD,EAAAwsD,EAAAxsD,EAAA1L,OAAAkU,GAAmB,QAAA22D,OAAmJ,QAAAC,MAAcj3D,KAAAqkD,EAAA,GAAA2S,IAAc,QAAAE,IAAA7S,EAAAhkD,EAAAxI,GAAmB,GAAAuI,GAAAvI,GAAA,EAAY,KAAI27D,GAAAnP,EAAA,SAAAA,EAAAxsD,GAAmB,GAAAlL,GAAA03D,CAAQ/jD,GAAA+jD,KAAA13D,EAAA6+D,GAAAnH,IAAgBhkD,EAAA1H,KAAAyH,EAAAvI,EAAA,IAAAs/D,mBAAAxqE,MAAwC,MAAAA,GAAS,KAAA0T,GAAA1H,KAAAyH,EAAA,QAAA+2D,mBAAA,YAAAxqE,GAA2D,QAAAyqE,IAAA/S,EAAAhkD,GAAiB,GAAAxI,GAAA,GAAA83D,GAAaU,GAAAx4D,EAAA,0BAAAwsD,EAAiC,IAAAjkD,GAAA,GAAAi3D,MAAgBj3D,GAAAk3D,OAAAtS,GAAAuS,GAAA1/D,EAAAuI,EAAA,2BAAAC,GAAiDD,EAAA5F,QAAAwqD,GAAAuS,GAAA1/D,EAAAuI,EAAA,0BAAAC,GAAiDD,EAAAm9B,QAAAynB,GAAAuS,GAAA1/D,EAAAuI,EAAA,0BAAAC,GAAiDD,EAAAo3D,UAAAxS,GAAAuS,GAAA1/D,EAAAuI,EAAA,4BAAAC,GAAqDiI,EAAA0gB,WAAA,WAAwB5oB,EAAAo3D,WAAAp3D,EAAAo3D,aAA6B,KAAMp3D,EAAAyoD,IAAAxE,EAAQ,QAAAkT,IAAAlT,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,GAAuB,IAAI0jE,EAAAhM,EAAAxsD,GAAAwI,EAAAi3D,OAAA,KAAAj3D,EAAA7F,QAAA,KAAA6F,EAAAk9B,QAAA,KAAAl9B,EAAAm3D,UAAA,KAAA7qE,EAAAyT,GAAyE,MAAA+iB,GAASmtC,GAAAjM,EAAAlhC,IAAU,QAAAquC,GAAAnN,GAAc6G,EAAAl9D,KAAAgS,MAAaA,KAAAmmB,QAAA,GAAAsrC,GAAmBzxD,KAAAyvD,EAAApL,GAAA,KAAerkD,KAAAmjB,GAAA,EAAUnjB,KAAA8uD,EAAA9uD,KAAAqkD,EAAA,KAAmBrkD,KAAAgyD,EAAAhyD,KAAA7N,EAAA,GAAiB6N,KAAA6xD,EAAA,EAAS7xD,KAAAiuD,EAAA,GAAUjuD,KAAAknD,EAAAlnD,KAAAqwD,EAAArwD,KAAA+xD,EAAA/xD,KAAA6vD,GAAA,EAA+B7vD,KAAAokD,EAAA,EAASpkD,KAAAkrD,EAAA,KAAYlrD,KAAAyxD,EAAAgG,GAAUz3D,KAAA0uD,EAAA1uD,KAAAykC,GAAA,EAGjtC,QAAAizB,IAAArT,GAAe,MAAAsT,IAAA5Q,GAAA,oBAAA1C,GAAAuT,aAAA,KAAAvT,EAAAmT,UAAkE,QAAA1R,IAAAzB,GAAe,sBAAAA,EAAAkR,cAC9H,QAAAsC,IAAAxT,EAAAhkD,GAAiBgkD,EAAAlhC,GAAA,EAAOkhC,QAAA6C,GAAA,EAAA7C,IAAAznB,QAAAynB,EAAA6C,GAAA,GAAiC7C,EAAA4J,EAAA5tD,EAAMgkD,EAAAwN,EAAA,EAAMiG,GAAAzT,GAAM0T,GAAA1T,GAAM,QAAAyT,IAAAzT,GAAeA,EAAAwL,IAAAxL,EAAAwL,GAAA,EAAAxL,EAAAuM,cAAA,YAAAvM,EAAAuM,cAAA,UAEnR,QAAAoH,IAAA3T,GAAe,GAAAA,EAAAlhC,OAAA,KAAA80C,KAAA,GAAA5T,EAAAyK,EAAA,OAAAkD,EAAA3N,IAAA,GAAAA,EAAAqO,IAAAjD,EAAApL,EAAAhkD,EAAAyxD,EAAAzN,EAAA,iDAAqH,IAAAA,EAAA0N,GAAA,GAAAC,EAAA3N,GAAAiK,GAAAjK,EAAA6T,GAAA,EAAA7T,OAAkC,IAAAA,EAAAuM,cAAA,uBAAAoB,EAAA3N,GAAA,CAAqDoL,EAAApL,EAAAhkD,EAAAyxD,EAAAzN,EAAA,qBAA+BA,EAAAlhC,GAAA,CAAO,KAAI,GAAA9iB,GAAAgkD,EAAAqO,GAAYrO,GAAA,OAAAhkD,GAAY,mEAAAxI,IAAA,CAAyE,MAAAwsD,EAAQ,SAAAxsD,GAAA,EAAa,GAAAuI,EAAM,MAAAA,EAAAvI,GAAA,CAAW,GAAAlL,EAAM,IAAAA,EAAA,IAAA0T,EAAA,CAAY,GAAA8iB,IAAAkhC,EAAAlyD,EAAAG,IAAA8hE,MAAAC,IAAA,QAAqC,KAAAlxC,GAAA7a,EAAA6vD,MAAA7vD,EAAA6vD,KAAApL,SAAA,CAAgC,GAAA7F,GAAA5+C,EAAA6vD,KAAApL,SAAAC,QACne7pC,GAAA+jC,EAAAp0C,OAAA,EAAAo0C,EAAA57D,OAAA,GAAyBqB,GAAAyrE,GAAA9yD,KAAA6d,IAAAoyC,cAAA,IAAiCn1D,EAAAzT,EAAIyT,GAAAikD,EAAAuM,cAAA,YAAAvM,EAAAuM,cAAA,aAAAvM,EAAAwN,EAAA,EAAAxN,EAAA4J,EAAA5J,EAAAmC,KAAA,KAAAnC,EAAAqO,IAAA,IAAAoF,GAAAzT,IAAmG,QAAQ0T,GAAA1T,KAAQ,QAAA0T,IAAA1T,EAAAhkD,GAAiB,GAAAgkD,IAAA,CAAQgU,GAAAhU,EAAM,IAAAxsD,GAAAwsD,IAAAjkD,EAAAikD,EAAAyK,EAAA,GAAAxK,GAAA,IAA2BD,KAAA,KAASA,EAAAyK,EAAA,KAASzuD,GAAAgkD,EAAAuM,cAAA,QAA4B,KAAI/4D,EAAAy1D,mBAAAltD,EAAuB,MAAAzT,IAAS03D,IAAAhkD,IAAAgkD,EAAAr4D,IAAAw2C,GAAA,qDAAA71C,EAAAG,YAAA,MAA2F,QAAAurE,IAAAhU,GAAeA,OAAAqK,IAAArK,IAAAmT,UAAA,MAA+BnT,EAAA6G,IAAA5iD,EAAAmxC,aAAA4K,EAAA6G,GAAA7G,EAAA6G,EAAA,MACtc,QAAA8G,GAAA3N,GAAc,MAAAA,SAAAiU,WAAA,EAC6P,QAAAxG,GAAAzN,EAAAhkD,GAAgB,MAAAA,GAAA,KAAAgkD,EAAA2N,EAAA,IAAA3N,EAAAlyD,EAAA,IAAAkyD,EAAAqO,IAAA,IAAyC,QAAA6F,IAAAlU,GAAe,GAAAhkD,GAAA,EAAyD,OAAhD+lD,IAAA/B,EAAA,SAAAA,EAAAjkD,GAAmBC,GAAAD,EAAKC,GAAA,IAAOA,GAAAgkD,EAAKhkD,GAAA,SAAYA,EAAS,QAAAm4D,IAAAnU,EAAAhkD,EAAAxI,GAAmBwsD,EAAA,CAAG,IAAAjkD,IAAAvI,GAAA,CAAY,GAAAuI,IAAA,CAAS,MAAAikD,GAAQjkD,GAAA,EAAK,GAAAA,EAAA,MAAAikD,EAAsB,IAARxsD,EAAA0gE,GAAA1gE,GAAQusD,EAAAC,GAAA,CAAwF,GAA/EhkD,EAAA82D,mBAAA92D,EAAA/N,IAAgCuF,EAAA,MAAAA,EAAA,IAAAs/D,mBAAAt/D,EAAAvF,IAAA,GAA+C+N,GAAAxI,EAAA,CAA6D,GAApDA,EAAAwsD,EAAA7yD,QAAA,KAAiB,EAAAqG,MAAAwsD,EAAA/4D,QAAmC,GAAjB8U,EAAAikD,EAAA7yD,QAAA,OAAiB4O,EAAAvI,EAAA,CAAauI,EAAAvI,CAAI,IAAAlL,GAAA,OAASA,GAAA03D,EAAA3zD,UAAA0P,EAAA,EAAAvI,EAA0BwsD,MAAAvxC,OAAA,EAAA1S,GAAAzT,EAAA03D,EAAAvxC,OAAAjb,IAAgCA,EAAAwsD,EAAA,GAAOA,EAAA,GAAAhkD,EAAAxI,IAAA,IAAAwI,IAAAxI,EAAqBwsD,IAAA,IAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,GAA+B,MAAAA,GAAkB,MAATsQ,GAAAtQ,EAAAhkD,EAAAxI,GAASwsD,EAAU,QAAAoU,IAAApU,GAAerkD,KAAAimD,GAAA,EAAUjmD,KAAAiuD,KAAUjuD,KAAAqkD,EAAA,GAAAsL,IAAc3vD,KAAA6vD,EAAA,GAAAsG,IAAcn2D,KAAAolD,GAAAplD,KAAA+lD,GAAA/lD,KAAAyvD,EAAAzvD,KAAAslD,GAAAtlD,KAAAK,EAAAL,KAAAorD,EAAAprD,KAAA6xD,EAAA7xD,KAAA8xD,EAAA9xD,KAAAknD,EAAAlnD,KAAAgyD,EAAAhyD,KAAA/N,EAAA,KAAqF+N,KAAA04D,GAAA14D,KAAAmrD,EAAA,EAAiBnrD,KAAAgnD,GAAAhnD,KAAAkrD,EAAAlrD,KAAA+xD,EAAA/xD,KAAAykC,EAAAzkC,KAAAokD,EAAApkD,KAAAmjB,EAAA,KAAgDnjB,KAAA7N,EAAA6N,KAAAgmD,GAAAhmD,KAAAyxD,GAAA,EAAyBzxD,KAAAwxD,EAAAxxD,KAAA0lD,EAAA1lD,KAAA0uD,EAAA,EAAuB1uD,KAAA0xD,EAAArN,KAAA/7B,yBAAA,EAAuCtoB,KAAAqwD,EAAA,GAAUrwD,KAAAnI,EAAA,GAAAy+D,IAAAjS,KAAAsU,wBAA2C34D,KAAAulD,GAAA,GAAA0R,IAAej3D,KAAA8uD,GAAAzK,OAAA,KAAAA,EAAAp8B,uBAAAo8B,EAAAp8B,sBAAsEjoB,KAAA+mD,GAAA1C,KAAAuU,gBAAA,EAA+BvU,KAAAkC,IAAAvmD,KAAAqkD,EAAAkC,KAC3uC,QAAAsS,IAAAxU,GAA2C,GAA5BgM,EAAAhM,IAAA,gBAAsByU,GAAAzU,GAAM,GAAAA,EAAAyL,EAAA,CAAW,GAAAzvD,GAAAgkD,EAAA8G,IAAAtzD,EAAAqtD,EAAAb,EAAAoL,EAAqBkF,GAAA98D,EAAA,MAAAwsD,EAAAgM,GAAesE,EAAA98D,EAAA,MAAAwI,GAAas0D,EAAA98D,EAAA,oBAAwBkhE,GAAA1U,EAAAxsD,GAAQwI,EAAA,GAAAguD,GAAAhK,MAAAhkD,MAAA,IAAwBA,EAAA+qD,EAAA,EAAM/qD,EAAA6mD,EAAAiL,GAAAjN,EAAArtD,IAAaA,GAAA,EAAKyQ,EAAAg0B,WAAAh0B,EAAAg0B,UAAA08B,aAAAnhE,EAAAyQ,EAAAg0B,UAAA08B,WAAA34D,KAAA6mD,EAAA,MAAmFrvD,GAAAyQ,EAAA+uD,SAAA,GAAAA,QAAAxO,IAAAxoD,EAAA6mD,EAAArvD,GAAA,GAAwCA,IAAAwI,EAAAgkD,EAAAhkD,EAAApO,EAAAyyD,GAAA,MAAArkD,EAAAgkD,EAAAM,GAAAtkD,EAAA6mD,IAAkC7mD,EAAAyuD,EAAAZ,IAAQoE,GAAAjyD,GAAM44D,GAAA5U,GAC/W,QAAAyU,IAAAzU,GAAeA,EAAA6G,IAAA7G,EAAA6G,EAAAtuB,QAAAynB,EAAA6G,EAAA,MAA4B7G,EAAAhkD,IAAAgkD,EAAAhkD,EAAA64D,SAAA7U,EAAAhkD,EAAA,MAA6BgkD,EAAA5f,IAAAn8B,EAAAmxC,aAAA4K,EAAA5f,GAAA4f,EAAA5f,EAAA,MAAoC00B,GAAA9U,GAAMA,EAAAxsD,EAAAqhE,SAAa7U,EAAAD,IAAA97C,EAAAmxC,aAAA4K,EAAAD,GAAAC,EAAAD,EAAA,MAAoC,QAAAgV,IAAA/U,EAAAhkD,GAAiB,KAAAgkD,EAAA4J,EAAA3iE,QAAAilE,GAAAlM,IAAA,WAAmC,qDAAAmH,GAAAnrD,KAA6DgkD,EAAA4J,EAAAt1D,KAAA,GAAA09D,IAAAhS,EAAAqU,KAAAr4D,IAA2B,GAAAgkD,EAAAyL,GAAAuJ,GAAAhV,GAAgD,QAAAgV,IAAAhV,GAAesS,GAAAtS,EAAAxsD,IAAAwsD,EAAAD,IAAAC,EAAAD,EAAA4M,GAAAlM,EAAAT,EAAAwC,GAAAxC,GAAA,GAAAA,EAAAqK,EAAA,GAC9W,QAAA4K,IAAAjV,EAAAhkD,GAAiB,GAAAxI,GAAAwsD,EAAAxsD,CAAU,QAAAA,EAAAwI,EAAA,EAAAxI,EAAAwsD,EAAAxsD,EAAAwsD,EAAAY,IAAA,IAAAZ,EAAAxsD,EAAAsrB,GAAAkhC,EAAAD,EAAA,MAAAmM,GAAAlM,IAAA,8CAAqGA,EAAAD,GAAAiM,EAAAhM,IAAA,oDAAAA,EAAA4J,EAAA5tD,EAAAlO,EAAAhG,OAAAk4D,EAAA4J,IAAA,KAA+F,GAAA5J,EAAAyL,GAAA,GAAAzL,EAAAyL,GAAA,GAAAzL,EAAAqK,IAAmC2B,EAAAhM,IAAA,uBAA6BA,EAAAD,EAAA4M,GAAAlM,EAAAT,EAAAwC,GAAAxC,EAAAhkD,GAAAk5D,GAAAlV,IAAAqK,IAA8BrK,EAAAqK,IAAM,IAGnU,QAAA8K,IAAAnV,EAAAhkD,GAAiB,GAAAxI,EAAMA,GAAAwI,IAAA8iB,EAAAkhC,EAAA8G,GAAgB,IAAA/qD,GAAA8kD,EAAAb,EAAAoL,EAAakF,GAAAv0D,EAAA,MAAAikD,EAAAgM,GAAesE,EAAAv0D,EAAA,MAAAvI,GAAa88D,EAAAv0D,EAAA,MAAAikD,EAAAoN,GAAesH,GAAA1U,EAAAjkD,GAAQikD,EAAA6C,GAAA7C,EAAApyD,GAAAumE,GAAAp4D,EAAAikD,EAAA6C,EAAA7C,EAAApyD,GAAwB4F,EAAA,GAAAw2D,GAAAhK,MAAAxsD,EAAAwsD,EAAAqK,EAAA,GAAuB,OAAArK,EAAA6C,IAAArvD,EAAAg6D,EAAAxN,EAAApyD,GAAsBoO,IAAAgkD,EAAA4J,EAAA5tD,EAAAlO,EAAAhG,OAAAk4D,EAAA4J,IAAyB5tD,EAAAo5D,GAAApV,EAAAxsD,GAAUA,EAAAmxB,WAAA/nB,KAAAy4D,MAAA,KAAAz4D,KAAAy4D,MAAA,IAAAz4D,KAAAE,WAA4Du1D,GAAArS,EAAAxsD,KAAUq6D,GAAAr6D,EAAAuI,EAAAC,GAAU,QAAA04D,IAAA1U,EAAAhkD,GAAiBgkD,EAAAlhC,GAAAqwC,MAAU,SAAAnP,EAAAjkD,GAAeu0D,EAAAt0D,EAAAD,EAAAikD,KACzU,QAAAoV,IAAApV,EAAAhkD,GAAiB,GAAAxI,GAAAoJ,KAAA4D,IAAAw/C,EAAA4J,EAAA3iE,OAAA,KAAA8U,EAAAikD,EAAAlhC,EAAA2hC,EAAAT,EAAAlhC,EAAAw2C,GAAAtV,EAAAlhC,EAAAkhC,GAAA,IAA0DA,GAAA,OAAA13D,GAAA03D,EAAA4J,EAAA9qC,GAAA,IAAsB,CAAE,GAAA+jC,IAAA,SAAArvD,IAAmB,GAAAsrB,EAAA,EAAAtrB,GAAAsrB,EAAAx2B,EAAA,GAAA03D,EAAA6C,EAAAvuD,KAAA,OAAAwqB,MAAA,EAAA+jC,EAAAvuD,KAAA,OAAAwqB,EAA2D,QAAAshB,IAAA,EAAAl8B,EAAA,EAAiBA,EAAA1Q,EAAI0Q,IAAA,CAAK,GAAAunD,GAAAnjE,EAAA4b,GAAA87C,EAAA0L,EAAApjE,EAAA4b,GAAAlI,CAA2B,OAALyvD,GAAA3sC,GAAKA,EAAAliB,KAAA4rC,IAAA,EAAAlgD,EAAA4b,GAAA87C,EAAA,KAAA5f,GAAA,MAAqC,KAASyyB,GAAAnH,EAAA7I,EAAA,MAAA4I,EAAA,KAAoB,MAAAE,GAAU5vD,KAAA2vD,IAAS,GAAAtrB,EAAA,CAAMrkC,EAAA8mD,EAAAz1D,KAAA,IAAc,MAAA4yD,IAAiC,MAAxBA,KAAA4J,EAAAniC,OAAA,EAAAj0B,GAAkBwI,EAAAlO,EAAAkyD,EAAMjkD,EAAS,QAAAw5D,IAAAvV,GAAe,IAAAA,EAAAhkD,IAAAgkD,EAAA5f,EAAA,CAAe4f,EAAAmN,EAAA,CAAM,IAAAnxD,GAAAgkD,EAAAwV,EAAWpM,KAAAD,KAASO,KAAAN,KAAAM,IAAA,GAAiB5B,GAAAltD,IAAAoB,EAAAgkD,GAAYA,EAAAqB,EAAA,GAC9c,QAAAoU,IAAAzV,GAAe,MAAAA,GAAAhkD,GAAAgkD,EAAA5f,GAAA8rB,GAAAlM,IAAA,qCAA4D,GAAAA,EAAAqB,IAAmB2K,EAAAhM,IAAA,sBAA4BA,EAAAmN,IAAMnN,EAAA5f,EAAAusB,GAAAlM,EAAAT,EAAAwV,GAAAxV,GAAAkV,GAAAlV,IAAAqB,IAA4BrB,EAAAqB,IAAM,IAElK,QAAAuQ,IAAA5R,EAAAhkD,EAAAxI,GAAmBw4D,EAAAhM,IAAA,2BAAkC,IAAAjkD,GAAAC,EAAAokC,CAAUrkC,IAAAq2D,GAAApS,EAAAxsD,EAAAuI,GAAaikD,EAAA2C,GAAAnvD,EAAOwsD,EAAAlyD,EAAAkO,EAAA8iB,EAAQktC,EAAAhM,IAAA,qBAA2BA,EAAAoL,EAAAsK,GAAA1V,IAAAiB,IAAe+T,GAAAhV,GAAM,QAAA2V,IAAA3V,EAAAhkD,GAAiBgwD,EAAAhM,IAAA,0BAAgCA,EAAAlyD,EAAAkO,EAAA8iB,EAAQyvC,EAAAvO,EAAA,GAI5G,QAAA8U,IAAA9U,GAAe,MAAAA,EAAA0N,IAAAzpD,EAAAmxC,aAAA4K,EAAA0N,GAAA1N,EAAA0N,EAAA,MAE8D,QAAAwH,IAAAlV,EAAAhkD,GAAiB,GAAAxI,GAAA,IAAAoJ,KAAAC,MAAA,IAAAD,KAAAE,SAAiF,OAAzCkjD,GAAAuB,OAAAyK,EAAAhM,IAAA,oBAAAxsD,GAAA,GAAyCA,EAAAwI,EACvQ,QAAAuyD,GAAAvO,EAAAhkD,GAAuC,GAAvBwvD,EAAAxL,IAAA,cAAAhkD,GAAuB,GAAAA,EAAA,CAAS,GAAAxI,GAAA,IAAWwsD,GAAAlhC,IAAAtrB,EAAA,KAAc,IAAAuI,GAAA0kD,EAAAT,EAAAiF,GAAAjF,EAAgBxsD,OAAA,GAAAszD,GAAA,wCAAA7iD,EAAAykD,UAAA,QAAAzkD,EAAAykD,SAAAC,UAAA+G,GAAAl8D,EAAA,SAAAs6D,GAAAt6D,IAAkHu/D,GAAAv/D,KAAAuI,OAAmBgrD,GAAA,EAAUiF,GAAAhM,IAAA,wBAAAhkD,GAAiCgkD,EAAAyL,EAAA,EAAMzL,EAAAlhC,GAAAkhC,EAAAlhC,EAAAijC,GAAA/lD,GAAe44D,GAAA5U,GAAMyU,GAAAzU,GACpS,QAAA4U,IAAA5U,GAA4B,GAAbA,EAAAyL,EAAA,EAAMzL,EAAAlyD,GAAA,EAAOkyD,EAAAlhC,EAAA,CAAQ,GAAA9iB,GAAAy2D,GAAAzS,EAAAxsD,EAAc,IAAAwI,EAAA/U,QAAA,GAAA+4D,EAAA4J,EAAA3iE,SAAA+kE,EAAAhM,IAAA,WAA+C,8CAAAhkD,EAAA/U,OAAA,eAAA+4D,EAAA4J,EAAA3iE,SAAiF+4D,EAAAxsD,IAAAvM,OAAA,EAAA26D,GAAA5B,EAAA4J,GAAA5J,EAAA4J,EAAA3iE,OAAA,GAAsC+4D,EAAAlhC,EAAA82C,MAAU,QAAAF,IAAA1V,EAAAhkD,GAAkE,MAAjDA,GAAA65D,GAAA7V,EAAA,KAAAhkD,GAAegwD,EAAAhM,IAAA,yBAAAhkD,GAAkCA,EAAS,QAAA61D,IAAA7R,EAAAhkD,EAAAxI,GAA0E,MAAvDwI,GAAA65D,GAAA7V,IAAAW,KAAA3kD,EAAA,KAAAxI,GAAwBw4D,EAAAhM,IAAA,sBAAAhkD,GAA+BA,EACvX,QAAA65D,IAAA7V,EAAAhkD,EAAAxI,GAAmB,GAAAuI,GAAA00D,GAAAj9D,EAAY,QAAAuI,EAAAC,KAAA2zD,GAAA5zD,EAAAC,EAAA,IAAAD,EAAAC,GAAA4zD,GAAA7zD,IAAAnO,OAAwC,CAAK,GAAAkxB,GAAAx2B,EAAA2b,EAAAykD,QAAmB5pC,GAAA9iB,IAAA,IAAA1T,EAAAwtE,SAAAxtE,EAAAwtE,SAAkC/5D,EAAA20D,GAAApoE,EAAAqgE,SAAA7pC,EAAAx2B,EAAAytE,KAAAviE,GAAoH,MAAxFwsD,GAAAyN,GAAA1L,GAAA/B,EAAAyN,EAAA,SAAAzN,EAAAhkD,GAA0Bs0D,EAAAv0D,EAAAC,EAAAgkD,KAAWhkD,EAAAgkD,EAAAwN,EAAMh6D,EAAAwsD,EAAA+G,EAAM/qD,GAAAxI,GAAA88D,EAAAv0D,EAAAC,EAAAxI,GAAe88D,EAAAv0D,EAAA,MAAAikD,EAAAoB,IAAgBsT,GAAA1U,EAAAjkD,GAAQA,EAAkN,QAAAi6D,OAC/X,QAAAC,IAAAjW,GAAe,OAAAhkD,GAAAhV,UAAA,GAAAwM,EAAA,EAA2BA,EAAAxM,UAAAC,OAAmBuM,IAAA,CAAK,GAAAuI,GAAA/U,UAAAwM,EAAmB,OAAAuI,EAAAgvD,YAAA,OAAA/uD,EAAAD,MAA+B,CAAK,GAAAzT,IAAMA,EAAA,IAAA0T,KAAA1T,EAAA0T,EAAA/U,OAAA,EAAAqB,EAAA,GAAAA,GAAA0T,EAAA7O,QAAA,IAAA7E,OAAsD0T,GAAA1T,EAAAyT,EAAA,IAAAA,GAAiB,MAAAC,GAAU,QAAAk6D,MAAc,GAAA5C,KAAA,KAAAe,IAAA,KAAA3rE,OAAA,gDACtS,QAAA2lE,GAAArO,EAAAhkD,GAAgB6qD,EAAAl9D,KAAAgS,MAAaA,KAAAqkD,EAAA,GAAAoU,IAAAp4D,GAAiBL,KAAAK,EAAAgkD,EAASrkD,KAAA7N,EAAAkO,KAAAm6D,QAAAn6D,EAAAm6D,QAAAF,GAAAt6D,KAAAK,EAAA,QAAgDL,KAAAmjB,EAAA6rC,GAAA,oDAA8DhvD,KAAAiuD,EAAA5tD,KAAAo6D,kBAAA,KAAmCpW,EAAAhkD,KAAAq6D,gBAAA,KAA4Br6D,KAAAs6D,+BAAAtW,IAAA,kCAAAA,GAA6EuW,oBAAA,eAAmC56D,KAAAqkD,EAAApyD,EAAAoyD,EAAWA,EAAAhkD,KAAA8nB,oBAAA,KAAgC9nB,KAAAw6D,qBAAAxW,IAAA,6BAAAhkD,EAAAw6D,mBAAAxW,GAAmFyW,4BAAAz6D,EAAAw6D,qBACld76D,KAAAqkD,EAAA2N,EAAA3N,GAAWA,EAAAhkD,KAAA+nB,6BAAA,cAAA9iB,KAAA++C,KAAArkD,KAAAqkD,EAAA6C,EAAA7C,GAAyErkD,KAAA+xD,EAAA1xD,KAAAioB,yBAAA,EAAuCtoB,KAAAykC,EAAApkC,KAAAgoB,cAAA,GAA4BhoB,OAAA6nB,sBAAA,cAAA5iB,KAAAjF,KAAAL,KAAAqkD,EAAAwN,EAAAxxD,EAAA,QAAAgkD,EAAArkD,KAAAiuD,IAAA5tD,IAAAgkD,OAAArkD,KAAAiuD,EAAA5tD,IAAAgkD,aAAAhkD,GAAAgvD,EAAArvD,KAAAmjB,EAAA,mEAAA9iB,KAA2ML,KAAAknD,EAAA,GAAA6T,IAAA/6D,MAEjE,QAAAg7D,IAAA3W,GAAewR,GAAA7nE,KAAAgS,KAAc,IAAAK,GAAAgkD,EAAA4W,MAAe,IAAA56D,EAAA,CAAMgkD,EAAA,CAAG,OAAAxsD,KAAAwI,GAAA,CAAgBgkD,EAAAxsD,CAAI,MAAAwsD,GAAQA,MAAA,IAASrkD,KAAAnI,EAAAwsD,MAAArkD,KAAAnI,EAAAmI,KAAA0G,KAAA,OAAArG,GAAAgkD,IAAAhkD,KAAAgkD,OAAA,IAAArkD,KAAA0G,KAAArG,MAAyEL,MAAA0G,KAAA29C,EACpc,QAAA6W,MAAcpF,GAAA9nE,KAAAgS,MAAcA,KAAA5K,OAAA,EAAuB,QAAA2lE,IAAA1W,GAAerkD,KAAAqkD,IAA0iB,QAAA8W,MAAcn7D,KAAAK,KAAUL,KAAAqkD,KAAU,QAAA+W,IAAA/W,GAA6D,MAA9C,IAAAA,EAAAhkD,EAAA/U,SAAA+4D,EAAAhkD,EAAAgkD,MAAAhkD,EAAAy+B,UAAAulB,QAA8CA,EAAAhkD,EAAA+I,MAA8S,QAAAiyD,IAAAhX,EAAAhkD,GAAuD,GAAtCqlD,EAAA13D,KAAAgS,MAAaA,KAAAknD,EAAA7C,GAAA,EAAYrkD,KAAAnI,EAAAwI,GAAA,GAAaL,KAAAknD,EAAAlnD,KAAAnI,EAAA,KAAA9K,OAAAuuE,GAAiCt7D,MAAAqkD,EAAA,GAAA8W,IAAcn7D,KAAAK,EAAA,GAAAqxD,GAAa1xD,KAAAiuD,EAAA,KAAYjuD,KAAAukD,KACx4B,QAAAgX,IAAAlX,GAAe,qBAAAA,GAAA0L,EAAA1L,EAAA0L,QAAgC,QAAA1vD,KAAAgkD,KAAAhkD,GAAA,KAChG,QAAAm7D,IAAAnX,EAAAhkD,GAAiBL,KAAAqkD,IAASrkD,KAAAK,IAAU,QAAAo7D,IAAApX,GAAyB,GAAVrkD,KAAAqkD,KAAUA,IAAA,CAAQ,GAAAA,YAAAoX,IAAA,CAAoB,GAAAp7D,GAAAgkD,EAAAqP,GAAoB,IAARrP,IAAA97C,IAAQ,GAAAvI,KAAAilD,IAAA,CAAgB,OAAAptD,GAAAmI,KAAAqkD,EAAAjkD,EAAA,EAAqBA,EAAAC,EAAA/U,OAAW8U,IAAAvI,EAAAc,KAAA,GAAA6iE,IAAAn7D,EAAAD,GAAAikD,EAAAjkD,IAA8B,MAAAikD,QAAShkD,GAAAimD,GAAAjC,KAAAgC,GAAAhC,EAAqB,KAAAjkD,EAAA,EAAQA,EAAAC,EAAA/U,OAAW8U,IAAAs7D,GAAA17D,KAAAK,EAAAD,GAAAikD,EAAAjkD,KAAwB,QAAAs7D,IAAArX,EAAAhkD,EAAAxI,GAAmB,GAAAuI,GAAAikD,GAAiD,KAAvCjkD,EAAAzH,KAAA,GAAA6iE,IAAAn7D,EAAAxI,IAAoBwI,EAAAD,EAAA9U,OAAA,EAAa+4D,MAAMxsD,EAAAwsD,EAAAhkD,GAAW,EAAAA,IAAID,EAAAC,EAAA,KAAAgkD,EAAAjkD,GAAAikD,EAAAxsD,EAAAwsD,MAAAhkD,GAAAgkD,EAAAjkD,GAAAC,EAAAD,CAAiDikD,GAAAhkD,GAAAxI,EACvb,QAAA8jE,MAAcF,GAAAztE,KAAAgS,MAAuB,QAAAyuD,GAAApK,EAAAhkD,GAAgBL,KAAAmjB,EAAA,GAAAw4C,IAAcN,GAAArtE,KAAAgS,KAAAqkD,EAAAhkD,GACrC,QAAA2oD,GAAA3E,EAAAhkD,EAAAxI,EAAAuI,GAAoBJ,KAAAokD,EAAAC,EAASrkD,KAAA6xD,IAAAzxD,EAAWquD,EAAAzgE,KAAAgS,KAAAK,EAAAxI,GAjGzM,GAAAo2D,GAAAgK,cAAmB3vD,EAAAtI,KAE+QusB,EAAA,oBAAAtrB,KAAAE,WAAA,GAAA0kD,GAAA,EAE5JqI,EAAAxiE,KAAA0mB,KAAA,WAA2B,UAAA1mB,MAAgau5D,GAAAG,GAAAr4D,OAAYq4D,GAAA13D,UAAA6B,KAAA,aAA2L,IAAAy3D,IAAA10D,OAAA5E,UAAAkuE,KAAA,SAAAvX,GAAyC,MAAAA,GAAAuX,QAAgB,SAAAvX,GAAa,MAAAA,GAAA9+C,QAAA,6BAA8J0/C,GAAAO,GAAAJ,IAASI,GAAA93D,UAAA6B,KAAA,gBAAuN,IAAAo2D,IAAA,EAAAC,KAAeF,GAAAh4D,UAAAuE,GAAA,EAAiByzD,EAAAh4D,UAAAqiE,EAAA,WAAyB,IAAA/vD,KAAA/N,IAAA+N,KAAA/N,GAAA,EAAA+N,KAAAmnD,IAAA,GAAAxB,IAAA,CAAwC,GAAAtB,GAAArkD,KAAAusB,KAAAvsB,KAAAusB,KAAAs5B,UAA8BD,IAAAvB,KAAeqB,EAAAh4D,UAAAy5D,EAAA,WAAyB,GAAAnnD,KAAA0lD,EAAA,KAAe1lD,KAAA0lD,EAAAp6D,QAAc0U,KAAA0lD,EAAA9O,UAAmB,IAAAwS,IAAA35D,MAAA/B,UAAA8D,QAAA,SAAA6yD,EAAAhkD,GAA6C,MAAA5Q,OAAA/B,UAAA8D,QAAAxD,KAAAq2D,EAAAhkD,MAAA,KAAgD,SAAAgkD,EAAAhkD,GAAe,GAAA+jD,EAAAC,GAAA,MAAAD,GAAA/jD,IAAA,GAAAA,EAAA/U,OAAA+4D,EAAA7yD,QAAA6O,EAAA,KAAmD,QAAAxI,GAAA,EAAYA,EAAAwsD,EAAA/4D,OAAWuM,IAAA,GAAAA,IAAAwsD,MAAAxsD,KAAAwI,EAAA,MAAAxI,EAAiC,WAAS47D,GAAAhkE,MAAA/B,UAAAgB,QAAA,SAAA21D,EAAAhkD,EAAAxI,GAA4CpI,MAAA/B,UAAAgB,QAAAV,KAAAq2D,EAAAhkD,EAAAxI,IAAoC,SAAAwsD,EAAAhkD,EAAAxI,GAAiB,OAAAuI,GAAAikD,EAAA/4D,OAAAqB,EAAAy3D,EAAAC,KAAAxtD,MAAA,IAAAwtD,EAAAlhC,EAAA,EAA4CA,EAAA/iB,EAAI+iB,QAAAx2B,IAAA0T,EAAArS,KAAA6J,EAAAlL,EAAAw2B,KAAAkhC,IACv4C8B,CAAM9B,GAAA,CAAG,GAAAgJ,IAAA/kD,EAAAg0B,SAAmB,IAAA+wB,GAAA,CAAO,GAAA4M,IAAA5M,GAAA9wB,SAAoB,IAAA09B,GAAA,CAAO9T,EAAA8T,EAAK,MAAA5V,IAAS8B,EAAA,GAAiR,GAAAM,IAAA,gGAAA5vD,MAAA,IAC1hB6vD,IAAA,KAAApC,EAAsG,IAAAqO,IAAAzM,EAAA,SAAAyR,EAAAzR,EAAA,YAAAA,EAAA,QAAAgS,GAAAhS,EAAA,QAAAiC,GAAAjC,EAAA,gBAAAC,EAAAoP,cAAA/jE,QAAA,YAAA00D,EAAA,YAAAA,EAAA,YAAAA,EAAA,WAAAA,EAAA,QAAA2T,IAAA,GAAA1T,EAAAoP,cAAA/jE,QAAA,YAAA00D,EAAA,QAAwRe,EAC3lB5C,GAAA,CAAG,GAAAmO,IAAA,GAAAqJ,GAAA,WAAwB,GAAAxX,GAAA8B,CAAQ,OAAAgC,IAAA,qBAA8Bj3D,KAAAmzD,GAAW6T,GAAA,kBAAAhnE,KAAAmzD,GAAsCsT,EAAA,mCAA2CzmE,KAAAmzD,GAAWwV,GAAA,gBAAA3oE,KAAAmzD,GAAoCsO,GAAA,yBAAAzhE,KAAAmzD,OAAA,KAAqE,IAArBwX,KAAArJ,GAAAqJ,MAAA,OAAqBlE,EAAA,CAAM,GAAAmE,IAAAjV,IAAY,UAAAiV,OAAAC,WAAAvJ,IAAA,CAAgCvL,GAAA6U,GAAAxpE,EAAc,MAAA+xD,IAAS4C,GAAAuL,GAAM,GAAA5L,OACyH8R,GAAOiB,GAAArxD,EAAAwW,QAChe45C,IAAAiB,IAAAhC,EAAA9Q,OAAA,cAAA8S,GAAAqC,WAAAxtE,SAAAy4D,GAAA,aAAsE,IAAAgV,IAAAluE,OAAAmuE,QAAA,SAAA7X,GAAkC,MAAAA,IAAUiG,IAAAqN,GAAA,IAAAe,GAAAyD,GAAAxE,IAAA5Q,GAAA,KAAAgD,GAAA,WAAsD,IAAAzhD,EAAA4+B,mBAAAn5C,OAAA4R,eAAA,QAAwD,IAAA0kD,IAAA,EAAAhkD,EAAAtS,OAAA4R,kBAAmC,WAAYjI,IAAA,WAAe2sD,GAAA,IAA2E,OAAnE/7C,GAAA4+B,iBAAA,OAAAod,GAAAjkD,GAAgCiI,EAAA6+B,oBAAA,OAAAmd,GAAAjkD,GAAmCgkD,IAAwE8C,GAAAz5D,UAAA2S,EAAA,WAAyBL,KAAAinD,IAAA,GAErThC,EAAAmC,GAAAD,EAAQ,IAAAsB,IAAAwT,IAAWG,EAAA,QAAAC,EAAA,MAAAC,EAAA,SAA8BlV,IAAA15D,UAAA2S,EAAA,WAA0B+mD,GAAAlC,EAAA7kD,EAAArS,KAAAgS,KAAkB,IAAAqkD,GAAArkD,KAAAnI,CAAa,IAAAwsD,EAAAkY,eAAAlY,EAAAkY,qBAAuC,IAAAlY,EAAAyG,aAAA,EAAAqR,GAAA,KAAgC9X,EAAAyD,SAAA,KAAAzD,EAAAwG,SAAA,KAAAxG,EAAAwG,WAAAxG,EAAAwG,SAAA,GAA0D,MAAAxqD,KAAY,IAAAsoD,IAAA,2BAAA1nD,KAAAE,SAAA,GAAsFtI,GAAA,CAAgQqwD,IAAAx7D,UAAAuR,IAAA,SAAAolD,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,GAAqC,GAAAw2B,GAAAkhC,MAAmBA,EAAArkD,KAAAqkD,EAAAlhC,MAAYkhC,EAAArkD,KAAAqkD,EAAAlhC,MAAAnjB,KAAAK,IAA6B,IAAA6mD,GAAAoC,GAAAjF,EAAAhkD,EAAAD,EAAAzT,EAA6F,QAA3E,EAAAu6D,GAAA7mD,EAAAgkD,EAAA6C,GAAArvD,IAAAwI,EAAAokD,IAAA,KAAApkD,EAAA,GAAAuoD,IAAAvoD,EAAAL,KAAA6oD,IAAA1lC,IAAA/iB,EAAAzT,GAAA0T,EAAAokD,GAAA5sD,EAAAwsD,EAAA1rD,KAAA0H,IAA2EA,EACjyB,IAAAwpD,IAAA,mBAAA5oD,KAAAE,SAAA,GAAAupD,MAAgDN,GAAA,EAM1GY,GAAA,4BAAA/pD,KAAAE,WAAA,EAA+N8jD,GAAAiG,EAAAxF,GAAOwF,EAAAx9D,UAAAi7D,KAAA,EAAmBsF,EAAA/C,EAAAx9D,UAAcugE,EAAA/mB,iBAAA,SAAAmd,EAAAhkD,EAAAxI,EAAAuI,GAAqCmpD,GAAAvpD,KAAAqkD,EAAAhkD,EAAAxI,EAAAuI,IAAkB6tD,EAAA9mB,oBAAA,SAAAkd,EAAAhkD,EAAAxI,EAAAuI,GAAwCmqD,GAAAvqD,KAAAqkD,EAAAhkD,EAAAxI,EAAAuI,IAC3a6tD,EAAA2C,cAAA,SAAAvM,GAA4B,GAAAhkD,GAAAxI,EAAAmI,KAAAorD,CAAe,IAAAvzD,EAAA,IAAAwI,KAAcxI,EAAEA,IAAAuzD,EAAA/qD,EAAA1H,KAAAd,EAAgBA,GAAAmI,KAAAmrD,CAAS,IAAA/qD,GAAAikD,EAAA10D,MAAA00D,CAAgB,IAAAD,EAAAC,KAAA,GAAA8C,GAAA9C,EAAAxsD,OAAqB,IAAAwsD,YAAA8C,GAAA9C,EAAA9pD,OAAA8pD,EAAA9pD,QAAA1C,MAA4C,CAAK,GAAAlL,GAAA03D,CAAQA,GAAA,GAAA8C,GAAA/mD,EAAAvI,GAAa2uD,GAAAnC,EAAA13D,GAAa,GAALA,GAAA,EAAK0T,EAAA,OAAA8iB,GAAA9iB,EAAA/U,OAAA,EAA0B,GAAA63B,EAAKA,IAAA,CAAK,GAAA+jC,GAAA7C,IAAAhkD,EAAA8iB,EAAex2B,GAAAw4D,GAAA+B,EAAA9mD,GAAA,EAAAikD,IAAA13D,EAA8D,GAA5Cu6D,EAAA7C,IAAAxsD,EAAQlL,EAAAw4D,GAAA+B,EAAA9mD,GAAA,EAAAikD,IAAA13D,EAAkBA,EAAAw4D,GAAA+B,EAAA9mD,GAAA,EAAAikD,IAAA13D,EAAkB0T,EAAA,IAAA8iB,EAAA,EAAaA,EAAA9iB,EAAA/U,OAAW63B,IAAA+jC,EAAA7C,IAAAhkD,EAAA8iB,GAAAx2B,EAAAw4D,GAAA+B,EAAA9mD,GAAA,EAAAikD,IAAA13D,CAAiC,OAAAA,IACtXshE,EAAA9G,EAAA,WAAgC,GAAjB+D,EAAAhG,EAAAiC,EAAAn5D,KAAAgS,MAAiBA,KAAAnI,EAAA,CAAW,GAAAA,GAAAwsD,EAAArkD,KAAAnI,EAAAwI,EAAA,CAAmB,KAAAxI,IAAAwsD,KAAA,CAAc,OAAAjkD,GAAAikD,IAAAxsD,GAAAlL,EAAA,EAAqBA,EAAAyT,EAAA9U,OAAWqB,MAAA0T,EAAA4oD,GAAA7oD,EAAAzT,UAAiB03D,KAAAxsD,GAAcwsD,EAAAhkD,KAAOL,KAAAorD,EAAA,MAAa6C,EAAA3J,GAAA,SAAAD,EAAAhkD,EAAAxI,EAAAuI,GAAuB,MAAAJ,MAAAnI,EAAAoH,IAAAolD,EAAA/xD,GAAA+N,GAAA,EAAAxI,EAAAuI,IAAuC6tD,EAAAvH,GAAA,SAAArC,EAAAhkD,EAAAxI,EAAAuI,GAAuB,MAAAJ,MAAAnI,EAAAoH,IAAAolD,EAAA/xD,GAAA+N,GAAA,EAAAxI,EAAAuI,IAAuC6tD,EAAAnI,GAAA,SAAAzB,EAAAhkD,EAAAxI,EAAAuI,GAAuB,GAAAzT,GAAAqT,KAAAnI,CAAoC,KAAvBwsD,GAAA/xD,KAAuB3F,GAAA03D,EAAA,CAAa,GAAAlhC,GAAAx2B,EAAA03D,MAA2B,GAAdhkD,EAAAipD,GAAAnmC,EAAA9iB,EAAAxI,EAAAuI,MAAc6oD,GAAA9lC,EAAA9iB,IAAA5Q,MAAA/B,UAAAo+B,OAAA99B,KAAAm1B,EAAA9iB,EAAA,MAAA8iB,EAAA73B,eAAAqB,GAAA03D,KAAA13D,EAAA0T,OAG9N,IAAA0rD,KAAQyQ,IAAA,MAAAC,KAAA,OAAAC,IAAA,MAAAC,KAAA,MAAAC,KAAA,MAAAC,KAAA,MAAAC,KAAA,MAAAC,KAAA,MAAAC,KAAA,WAAwGlR,GAAA,SAAAxmD,KAAA,4DAClE0mD,IAAAt+D,UAAAgK,IAAA,WAA4B,KAAAsI,KAAAK,EAAA,CAAaL,KAAAK,GAAS,IAAAgkD,GAAArkD,KAAAqkD,CAAarkD,MAAAqkD,IAAAv+C,KAAcu+C,EAAAv+C,KAAA,SAAYu+C,GAAArkD,KAAAnI,GAAgB,OAAAwsD,GAA2C,IAAAyJ,IAAA,GAAA9B,IAAA,WAAyB,UAAAI,KAAc,SAAA/H,GAAaA,EAAAvV,SAAYmd,IAAAv+D,UAAAuR,IAAA,SAAAolD,EAAAhkD,GAA+B,GAAAxI,GAAAi2D,GAAAp2D,KAAeG,GAAAkV,IAAAs3C,EAAAhkD,GAAWL,KAAAK,EAAAL,KAAAK,EAAAyF,KAAAjO,EAAAmI,KAAAqkD,EAAAxsD,EAA8BmI,KAAAK,EAAAxI,GAAkJu0D,GAAA1+D,UAAAqf,IAAA,SAAAs3C,EAAAhkD,GAA+BL,KAAAqkD,IAASrkD,KAAAK,IAASL,KAAA8F,KAAA,MAAgBsmD,GAAA1+D,UAAAohD,MAAA,WAA8B9uC,KAAA8F,KAAA9F,KAAAK,EAAAL,KAAAqkD,EAAA,KAAkF,IAAAwJ,IAG1oBJ,GAAsTM,IAAA,EAAA5B,GAAA,GAAAF,GAAuOhH,GAAA+I,GAAA9C,GAAQ+C,EAAAD,GAAAtgE,UAAeugE,EAAAG,GAAA,EAAOH,EAAAI,EAAA,KAASJ,EAAA9E,GAAA,WAAgB,GAAAnpD,KAAAouD,EAAA,CAAW,GAAA/J,GAAA6J,IAAAluD,KAAAiuD,CAAiB,GAAA5J,KAAA,GAAArkD,KAAAK,EAAAL,KAAAquD,EAAAruD,KAAAqkD,EAAAr7B,WAAAhpB,KAAAmjB,EAAAnjB,KAAAK,EAAAgkD,IAAArkD,KAAAquD,IAAAruD,KAAAqkD,EAAA5K,aAAAz5C,KAAAquD,GAAAruD,KAAAquD,EAAA,MAAAruD,KAAA4wD,cAAA,QAAA5wD,KAAAouD,IAAApuD,KAAAquD,EAAAruD,KAAAqkD,EAAAr7B,WAAAhpB,KAAAmjB,EAAAnjB,KAAAK,GAAAL,KAAAiuD,EAAAC,QAAyMD,EAAAz1D,MAAA,WAAmBwH,KAAAouD,GAAA,EAAUpuD,KAAAquD,IAAAruD,KAAAquD,EAAAruD,KAAAqkD,EAAAr7B,WAAAhpB,KAAAmjB,EAAAnjB,KAAAK,GAAAL,KAAAiuD,EAAAC,MAC58BD,EAAA9G,EAAA,WAAe6G,GAAA9I,EAAAiC,EAAAn5D,KAAAgS,MAAkBmuD,GAAAnuD,YAASA,MAAAqkD,GAA+TY,EAAAsJ,GAAA7I,GAAQuI,EAAAM,GAAA7gE,UAAeugE,EAAArJ,IAAA,EAAQqJ,EAAAQ,EAAA,KAASR,EAAA3D,GAAA,SAAAjG,GAAiBrkD,KAAAqkD,EAAAh5D,UAAiB2U,KAAAyuD,EAAAzuD,KAAA4kD,IAAA,EAAA4J,GAAAxuD,OAA4BiuD,EAAA9G,EAAA,WAAeoH,GAAArJ,EAAAiC,EAAAn5D,KAAAgS,MAAkBA,KAAAyuD,IAAAnmD,EAAAmxC,aAAAz5C,KAAAyuD,GAAAzuD,KAAAyuD,EAAA,KAAAzuD,KAAA4kD,IAAA,EAAA5kD,KAAAqkD,OAAmE4J,EAAAtF,GAAA,WAAgB3oD,KAAAyuD,EAAA,KAAYzuD,KAAA4kD,KAAA5kD,KAAA4kD,IAAA,EAAA4J,GAAAxuD,QAAkIilD,EAAAyJ,EAAAhJ,EAAO,IAAAuX,MAAUvO,GAAAhhE,UAAA42D,GAAA,SAAAD,EAAAhkD,EAAAxI,EAAAuI,GAAiCsJ,EAAArJ,SAAA48D,GAAA,GAAA58D,QAAA48D,GAAqC,QAAAtwE,GAAA,EAAYA,EAAA0T,EAAA/U,OAAWqB,IAAA,CAAK,GAAAw2B,GAAAomC,GAAAlF,EAAAhkD,EAAA1T,GAAAkL,GAAAmI,KAAAirD,YAAA7qD,IAAA,EAAAJ,KAAAK,GAAAL,KAAwD,KAAAmjB,EAAA,KAAYnjB,MAAAqkD,EAAAlhC,EAAAr1B,KAAAq1B,EAAgB,MAAAnjB,OACp9B0uD,EAAAhhE,UAAAo4D,GAAA,SAAAzB,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,GAAmC,GAAA+c,EAAArJ,GAAA,OAAA8iB,GAAA,EAAoBA,EAAA9iB,EAAA/U,OAAW63B,IAAAnjB,KAAA8lD,GAAAzB,EAAAhkD,EAAA8iB,GAAAtrB,EAAAuI,EAAAzT,OAA0BkL,MAAAmI,KAAAirD,YAAA7qD,EAAAE,EAAAF,OAAA0oD,UAAA1oD,EAAAzT,KAAAqT,KAAAK,GAAAL,KAAAnI,EAAA6xD,GAAA7xD,GAAAuI,OAAAC,EAAAsX,GAAA0sC,GAAAgF,GAAAhF,EAAAxsD,EAAAwI,EAAA/N,GAAAuF,EAAAuI,EAAAzT,GAAA03D,MAAAuF,GAAAvF,IAAAgF,GAAAhF,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,GAAA,QAAA69D,GAAAnqD,SAAAL,MAAAqkD,EAAAhkD,EAAAvS,OAAsQ4gE,EAAAhhE,UAAAy5D,EAAA,WAAyBuH,EAAAxJ,EAAAiC,EAAAn5D,KAAAgS,MAAiB2uD,GAAA3uD,OAAU0uD,EAAAhhE,UAAAu9D,YAAA,WAAmC,KAAAl+D,OAAA,6CAA6G6hE,GAAAlhE,UAAA22D,EAAA,IAAoB,IAAA6Y,IAAA,CAAStO,IAAAlhE,UAAAohD,MAAA,SAAAuV,EAAAhkD,EAAAxI,EAAAuI,EAAAzT,GAAuC,gBAAAA,IAAAuwE,KAAyB98D,GAAA8tD,UAAOluD,MAAAqkD,GAA0GyK,EAAAphE,UAAAiT,SAAA,WAAgC,MAAAX,MAAAzQ,KAAkB,IAAAizC,IAAA,GAAAssB,GAAA,cAAAQ,GAAA,GAAAR,GAAA,eAAAU,GAAA,GAAAV,GAAA,YAAAK,GAAA,GAAAL,GAAA,cAAAY,GAAA,GAAAZ,GAAA,WAA2ND,IAAAnhE,UAAA1B,IAAA,SAAAq4D,EAAAhkD,EAAAxI,GAAiC,GAAAwsD,EAAAn2D,OAAA6gE,GAAA/uD,MAAA9R,MAAA,IAAAw2D,GAAArkD,YAAAgkD,EAAA,GAAAuK,IAAAvK,EAAAhkD,EAAA/N,GAAA0N,KAAAmjB,GAAAtrB,IAAAwsD,IAAAxsD,KAAAmI,KAA6FnI,GAAEA,IAAAwsD,EACjoC,IAAA6K,OAASD,GAAA,IAA6YU,IAAAjiE,UAAA64D,GAAA,WAA2BvmD,KAAAK,GAAA,EAEnE,IAAAswD,IAAA,GAAAzF,EAAgEjG,GAAAwL,GAAAtJ,GAAgGlC,EAAA4L,GAAA1J,GAAiGlC,EAAA6L,GAAA3J,EAA2L,IAAAgW,KAAQn2C,SAAA,EAAAqiC,GAAA,EAAAM,GAAA,EAAAD,GAAA,EAAAU,GAAA,EAAAX,GAAA,EAAAG,GAAA,EAAAiS,GAAA,EAAA10C,QAAA,EAAAkjC,GAAA,GAA8D+S,IAAQ1S,GAAA,WAAAE,GAAA,UAAAkR,GAAA,QAAAD,GAAA,QAAArR,GAAA,QAAAG,GAAA,mBAAAxjC,QAAA,UAAA2iC,GAAA,kBAAAS,GAAA,WAAAhB,GAAA,mBAAAyB,GAAA,iBAAiMiG,IAAAvjE,UAAA22D,EAAA,IAAoG,IAAAgZ,GAAsBpY,GAAAmM,GAAAH,IAAgdoM,GAAA,GAAAjM,GAAgV,IAAAO,IAAA,KAAAC,GAAA,IAC/xDyB,MAASD,KAAOnF,GAAAI,EAAA3gE,UAAcugE,EAAAjlC,WAAA,SAAAq7B,GAAyBrkD,KAAA0xD,EAAArN,GACsH4J,EAAAhF,GAAA,SAAA5E,GAAiBA,IAAA9pD,MAAW,IAAA8F,GAAAL,KAAAqwD,CAAahwD,IAAA,GAAA2xD,EAAA3N,IAAAgM,EAAArwD,KAAAK,EAAA,gCAAAA,EAAAiqD,MAAAtqD,KAAAwyD,GAAAnO,IAC1Y4J,EAAAuE,GAAA,SAAAnO,GAAiB,IAAIA,GAAArkD,KAAAqkD,EAAAoO,GAAAzyD,MAAAqvD,EAAArvD,KAAAK,EAAAgkD,EAAA,0CAAwE,MAAAxsD,GAAS,GAAAw4D,EAAArwD,KAAAK,EAAA,8CAAAL,KAAAqkD,GAAArkD,KAAAqkD,EAAAuO,IAAA,CAA8E,GAAAvyD,GAAAL,IAAWswD,IAAAtwD,KAAAK,EAAAxI,EAAA,WAAuB,uBAAAwI,EAAAgkD,EAAAuO,UAAiCtC,IAAAtwD,KAAAK,EAAAxI,EAAA,sBAGvPo2D,EAAArF,GAAA,WAAgB,GAAAvE,GAAA2N,EAAAhyD,KAAAqkD,GAAAhkD,EAAAL,KAAAqkD,EAAAuO,GAA6B5yD,MAAAyvD,EAAApvD,EAAA/U,SAAAunE,GAAA7yD,MAAA8yD,GAAA9yD,KAAAqkD,EAAAhkD,GAAAL,KAAAnI,GAAA,GAAAwsD,GAAAiO,GAAAtyD,QAAuSiuD,EAAAiL,OAAA,WAAoBl5D,KAAAkrD,GAAA,EAAU+H,GAAAjzD,OACtOiuD,EAAAt2C,GAAA,WAAgB3X,KAAA0lD,EAAA,IAAY,IAAArB,GAAA6J,GAAU,IAAA7J,EAAArkD,KAAA8xD,GAAA9xD,KAAAnI,GAAA04D,GAAAvwD,KAAAK,EAAA,qEAAA+vD,GAAApwD,KAAAK,EAAAL,KAAAiuD,GAAA,GAAAjuD,KAAAorD,IAAAsF,GAAA,GAAAtF,EAAA,KAAA6H,GAAAjzD,WAAAokD,EAAA,EAAA8O,GAAAlzD,QAAAqvD,EAAArvD,KAAAK,EAAAgkD,EAAA,mCAAAiP,GAAAtzD,UAAA8xD,EAAAzN,KAE2d4J,EAAAwD,EAAA/jE,UAAcugE,EAAAhJ,EAAA,WAAe,MAAAjlD,MAAAnI,GAAeo2D,EAAA1lD,EAAA,WAAeojB,GAAA3rB,KAAS,QAAAqkD,MAAAhkD,EAAA,EAAiBA,EAAAL,KAAAqkD,EAAA/4D,OAAgB+U,IAAAgkD,EAAA1rD,KAAAqH,KAAAK,EAAAL,KAAAqkD,EAAAhkD,IAA8B,OAAAgkD,IAAU4J,EAAAyF,EAAA,WAAwB,MAAT/nC,IAAA3rB,MAASA,KAAAqkD,EAAAl4D,UACjd8hE,EAAAv2D,IAAA,SAAA2sD,EAAAhkD,GAAoB,MAAAqzD,GAAA1zD,KAAAK,EAAAgkD,GAAArkD,KAAAK,EAAAgkD,GAAAhkD,GAAgC4tD,EAAAlhD,IAAA,SAAAs3C,EAAAhkD,GAAoBqzD,EAAA1zD,KAAAK,EAAAgkD,KAAArkD,KAAAnI,IAAAmI,KAAAqkD,EAAA1rD,KAAA0rD,IAAuCrkD,KAAAK,EAAAgkD,GAAAhkD,GAChd4tD,EAAAv/D,QAAA,SAAA21D,EAAAhkD,GAAwB,OAAAxI,GAAAmI,KAAA0zD,IAAAtzD,EAAA,EAAuBA,EAAAvI,EAAAvM,OAAW8U,IAAA,CAAK,GAAAzT,GAAAkL,EAAAuI,GAAA+iB,EAAAnjB,KAAAtI,IAAA/K,EAAyB03D,GAAAr2D,KAAAqS,EAAA8iB,EAAAx2B,EAAAqT,OAAuF,IAAAq0D,IAAA,0HAC/KlJ,GAAAz9D,UAAAiT,SAAA,WAAgC,GAAA0jD,MAAAhkD,EAAAL,KAAAmjB,CAAkB9iB,IAAAgkD,EAAA1rD,KAAA87D,GAAAp0D,EAAAi9D,IAAA,OAA2B,IAAAzlE,GAAAmI,KAAAK,CAAkW,QAArVxI,GAAA,QAAAwI,KAAAgkD,EAAA1rD,KAAA,OAAA0H,EAAAL,KAAA6xD,IAAAxN,EAAA1rD,KAAA87D,GAAAp0D,EAAAi9D,IAAA,QAAAjZ,EAAA1rD,KAAAw+D,mBAAAt/D,EAAAvF,IAAAiT,QAAA,uBAAiI,eAAA1N,EAAAmI,KAAA/N,IAAAoyD,EAAA1rD,KAAA,IAAAd,EAAAvF,MAAoDuF,EAAAmI,KAAAqkD,KAAArkD,KAAAK,GAAA,KAAAxI,EAAAxF,OAAA,IAAAgyD,EAAA1rD,KAAA,KAAA0rD,EAAA1rD,KAAA87D,GAAA58D,EAAA,KAAAA,EAAAxF,OAAA,GAAAkrE,GAAAC,IAAA,MAA0F3lE,EAAAmI,QAAAnI,IAAAwsD,EAAA1rD,KAAA,IAAAd,IAAqCA,EAAAmI,KAAAiuD,IAAA5J,EAAA1rD,KAAA,IAAA87D,GAAA58D,EAAA4lE,KAAiCpZ,EAAA5yD,KAAA,KAC/a05D,EAAAz9D,UAAAyM,QAAA,SAAAkqD,GAAgC,GAAAhkD,GAAA6kD,EAAAllD,MAAAnI,IAAAwsD,EAAAlhC,CAAsBtrB,GAAAk8D,GAAA1zD,EAAAgkD,EAAAlhC,GAAAtrB,IAAAwsD,EAAAwN,EAAoBh6D,EAAAwI,EAAAwxD,EAAAxN,EAAAwN,EAAAh6D,IAAAwsD,EAAAhkD,EAAkBxI,EAAAm8D,GAAA3zD,EAAAgkD,EAAAhkD,GAAAxI,EAAA,MAAAwsD,EAAApyD,CAAwB,IAAAmO,GAAAikD,GAAU,IAAAxsD,EAAAo8D,GAAA5zD,EAAAgkD,EAAApyD,OAAe,IAAA4F,IAAAwsD,IAAA,CAAiB,QAAAjkD,EAAA/N,OAAA,MAAA2N,KAAAK,IAAAL,KAAAqkD,EAAAjkD,EAAA,IAAAA,MAA+C,CAAK,GAAAzT,GAAA0T,EAAAgkD,EAAA+K,YAAA,MAA2B,GAAAziE,IAAAyT,EAAAC,EAAAgkD,EAAAvxC,OAAA,EAAAnmB,EAAA,GAAAyT,GAAmC,UAAJzT,EAAAyT,IAAI,KAAAzT,EAAAyT,EAAA,OAAwB,QAAAzT,EAAA6E,QAAA,WAAA7E,EAAA6E,QAAA,OAAkD4O,EAAA,GAAAzT,EAAAyiE,YAAA,OAA0BziE,IAAAkK,MAAA,IAAe,QAAAssB,MAAA+jC,EAAA,EAAiBA,EAAAv6D,EAAArB,QAAW,CAAE,GAAAm5C,GAAA93C,EAAAu6D,IAAa,MAAAziB,EAAArkC,GAAA8mD,GAAAv6D,EAAArB,QAAA63B,EAAAxqB,KAAA,UAAA8rC,IAAA,EAAAthB,EAAA73B,QAAA,GAAA63B,EAAA73B,QAAA,IAC9a63B,EAAA,KAAAA,EAAA/Z,MAAAhJ,GAAA8mD,GAAAv6D,EAAArB,QAAA63B,EAAAxqB,KAAA,MAAAwqB,EAAAxqB,KAAA8rC,GAAArkC,GAAA,GAA4DA,EAAA+iB,EAAA1xB,KAAA,SAAc2O,GAAAzT,EAA4E,MAAnEkL,GAAAwI,EAAAgkD,EAAAjkD,EAAAvI,EAAA,IAAAwsD,KAAAxsD,EAA8BA,EAAAq8D,GAAA7zD,EAAA8zD,GAAA9P,EAAAxsD,QAAAwsD,EAAA4J,EAAwBp2D,IAAAwI,EAAA4tD,EAAA5J,EAAA4J,GAAa5tD,EAEoD,IAAAi9D,IAAA,YAAAE,GAAA,UAAAD,GAAA,SAAA7I,GAAA,UAAA+I,GAAA,IAAkPxP,GAAAsG,GAAA7mE,UAAeugE,EAAAhJ,EAAA,WAAuB,MAARkQ,GAAAn1D,MAAQA,KAAAK,GACle4tD,EAAAhvD,IAAA,SAAAolD,EAAAhkD,GAAoB80D,EAAAn1D,MAAQA,KAAAnI,EAAA,KAAYwsD,EAAAgR,GAAAr1D,KAAAqkD,EAAa,IAAAxsD,GAAAmI,KAAAqkD,EAAA3sD,IAAA2sD,EAA8D,OAA1CxsD,IAAAmI,KAAAqkD,EAAAt3C,IAAAs3C,EAAAxsD,MAAsBA,EAAAc,KAAA0H,GAAUL,KAAAK,GAAA,EAAUL,MAAuJiuD,EAAAv/D,QAAA,SAAA21D,EAAAhkD,GAAwB80D,EAAAn1D,MAAQA,KAAAqkD,EAAA31D,QAAA,SAAAmJ,EAAAuI,GAA6BqzD,GAAA57D,EAAA,SAAAA,GAAiBwsD,EAAAr2D,KAAAqS,EAAAxI,EAAAuI,EAAAJ,OAAmBA,OAAOA,OAClXiuD,EAAAyF,EAAA,WAAeyB,EAAAn1D,KAAQ,QAAAqkD,GAAArkD,KAAAqkD,EAAA97C,IAAAlI,EAAAL,KAAAqkD,EAAAqP,IAAA77D,KAAAuI,EAAA,EAA2CA,EAAAC,EAAA/U,OAAW8U,IAAA,OAAAzT,GAAA03D,EAAAjkD,GAAA+iB,EAAA,EAAuBA,EAAAx2B,EAAArB,OAAW63B,IAAAtrB,EAAAc,KAAA0H,EAAAD,GAAiB,OAAAvI,IAAUo2D,EAAA1lD,EAAA,SAAA87C,GAAgB8Q,EAAAn1D,KAAQ,IAAAK,KAAS,IAAA+jD,EAAAC,GAAAiR,GAAAt1D,KAAAqkD,KAAAhkD,EAAA2lD,GAAA3lD,EAAAL,KAAAqkD,EAAA3sD,IAAA29D,GAAAr1D,KAAAqkD,UAAqD,CAAKA,EAAArkD,KAAAqkD,EAAA97C,GAAa,QAAA1Q,GAAA,EAAYA,EAAAwsD,EAAA/4D,OAAWuM,IAAAwI,EAAA2lD,GAAA3lD,EAAAgkD,EAAAxsD,IAAiB,MAAAwI,IAAU4tD,EAAAlhD,IAAA,SAAAs3C,EAAAhkD,GAA4H,MAAxG80D,GAAAn1D,MAAQA,KAAAnI,EAAA,KAAYwsD,EAAAgR,GAAAr1D,KAAAqkD,GAAaiR,GAAAt1D,KAAAqkD,KAAArkD,KAAAK,GAAAL,KAAAqkD,EAAA3sD,IAAA2sD,GAAA/4D,QAA2C0U,KAAAqkD,EAAAt3C,IAAAs3C,GAAAhkD,IAAkBL,KAAAK,GAAA,EAAUL,MAAaiuD,EAAAv2D,IAAA,SAAA2sD,EAAAhkD,GAAqC,MAAjBgkD,KAAArkD,KAAAuI,EAAA87C,MAAiB,EAAAA,EAAA/4D,OAAA+4D,EAAA,GAAA/xD,GAAA+N,GAC3X4tD,EAAAttD,SAAA,WAAsB,GAAAX,KAAAnI,EAAA,MAAAmI,MAAAnI,CAAwB,KAAAmI,KAAAqkD,EAAA,QAAoB,QAAAA,MAAAhkD,EAAAL,KAAAqkD,EAAAqP,IAAA77D,EAAA,EAA8BA,EAAAwI,EAAA/U,OAAWuM,IAAA,CAAK,GAAAuI,GAAAC,EAAAxI,GAAAlL,EAAAwqE,mBAAA/2D,EAAA9N,GAA2C8N,GAAAJ,KAAAuI,EAAAnI,EAAY,QAAA+iB,GAAA,EAAYA,EAAA/iB,EAAA9U,OAAW63B,IAAA,CAAK,GAAA+jC,GAAAv6D,CAAQ,MAAAyT,EAAA+iB,KAAA+jC,GAAA,IAAAiQ,mBAAA/2D,EAAA+iB,GAAA7wB,KAAqD+xD,EAAA1rD,KAAAuuD,IAAW,MAAAlnD,MAAAnI,EAAAwsD,EAAA5yD,KAAA,KACrI,IAAAikE,IAAA,IAAYF,IAAA9nE,UAAAqf,IAAA,SAAAs3C,GAA6BrkD,KAAAqkD,KAAUmR,GAAA9nE,UAAAohD,MAAA,WAA8B9uC,KAAA+M,IAAAmhD,MAAesH,GAAA9nE,UAAAgK,IAAA,WAA4B,MAAAsI,MAAAqkD,GAA2EY,EAAA0Q,GAAAF,GAAwB,IAAAiI,KAAQx0C,KAAA,IAAA2gC,GAAA,IAAAiS,GAAA,IAAA7R,GAAA,IAA8DhF,GAAA4Q,GAAA1O,GAAuClC,EAAA6Q,GAAA3O,GAAiH8G,EAAA8H,GAAAroE,UAAeugE,EAAAkH,EAAA,KACnSlH,EAAAvJ,GAAA,SAAAL,GAAiB,MAAArkD,MAAAqkD,EAAAK,GAAAL,IAAqB4J,EAAArxB,MAAA,WAAmB58B,KAAAnI,IAAAmI,KAAAnI,EAAAqhE,SAAAl5D,KAAAnI,EAAA,MAAsCmI,KAAAmjB,GAAA,GACre8qC,EAAArH,GAAA,WAAgB,UAChBqH,EAAA9F,GAAA,SAAA9D,EAAAhkD,GAA8B,GAAXL,KAAAmjB,EAAAkhC,EAAAqK,EAAW,GAAA1uD,KAAAm1D,EAAA,CAA+D,GAAjD9E,EAAArwD,KAAAK,EAAA,yCAAiDL,KAAAqkD,EAAAyK,IAAAzK,OAAA,CAAuB,GAAAxsD,GAAAwsD,QAAAsZ,kBAAA,8BAA+D39D,MAAAykC,EAAA5sC,GAAA,KAAgBmI,KAAAqkD,EAAAwN,KAAAxN,UAAAsZ,kBAAA,2BAAA39D,KAAAqkD,EAAA+G,EAAA/G,EAAAgL,EAAArvD,KAAAK,EAAAgkD,EAAA,wDAAiJ,GAAAhkD,EAAA,CAAM,IAAI,GAAAD,GAAAJ,KAAAqkD,EAAAkB,GAAAlB,EAAAmM,MAAAnwD,GAA2B,MAAA1T,GAAsC,MAA7B2jE,IAAAtwD,KAAAK,EAAA1T,OAAaqtE,IAAAh6D,KAAAqkD,EAAArkD,MAAuBA,KAAAiuD,EAAA7tD,EAAA,OAAYiwD,GAAArwD,KAAAK,EAAA,qCAAA25D,GAAAh6D,KAAAqkD,EAAArkD,UAAmE,IACrfA,KAAAm1D,IAAAn1D,KAAAknD,EAAAkE,EAAA,GAAsB,SAAA/qD,GAAoB+qD,EAAA,GAAAprD,KAAAknD,GAAA,IAAAyQ,GAAA,KAAAe,MAAA14D,KAAAmjB,EAAA,IAAAnjB,KAAAnI,EAAAqhE,SAAA7I,EAAArwD,KAAAK,EAAA,yDAAoG+qD,EAAA,IAAA6K,GAAAj2D,KAAAqkD,EAAArkD,MAAA,MAAuDorD,EAAA,GAAAprD,KAAAknD,GAAA,KACrM+G,EAAA5xB,GAAA,WAAgBr8B,KAAAmjB,EAAAnjB,KAAAnI,EAAA62D,EAAgB1uD,KAAAnI,IAAA,GAAAmI,KAAAm1D,GAAAn1D,KAAAm1D,EAAA,EAAA9E,EAAArwD,KAAAK,EAAA,sDAAA21D,GAAAh2D,OAAA,GAAAA,KAAAm1D,IAAA9E,EAAArwD,KAAAK,EAAA,gDAAAL,KAAAknD,GAAAmJ,EAAArwD,KAAAK,EAAA,yDAAuN+qD,EAAA,IAAA6K,GAAAj2D,KAAAqkD,EAAArkD,MAAA,KAAAqwD,EAAArwD,KAAAK,EAAA,+CAA0F+qD,EAAA,IAAA6K,GAAAj2D,KAAAqkD,EAAArkD,MAAA,MAAAqwD,EAAArwD,KAAAK,EAAA,4CAAAL,KAAAm1D,GAAA,GAAAn1D,KAAAm1D,EAAA/J,EAAA,MAAAprD,KAAAm1D,GAAA/J,EAAA,GAAA4O,GAAAh6D,KAAAqkD,EAAArkD,QACjViuD,EAAAjJ,GAAA,WAAgB,MAAAhlD,MAAAqkD,EAAAW,MAAoBiJ,EAAArI,GAAA,WAAgB,MAAA5lD,MAAAqkD,EAAAuB,MAAwL8L,EAAAhkE,UAAAu3D,EAAA,WAAyB,MAAAjlD,MAAAqkD,EAAAY,KAAmByM,EAAAhkE,UAAAuR,IAAA,SAAAolD,GAA4BrkD,KAAAqkD,EAAAt3C,IAAAqpD,GAAA/R,OAAqBqN,EAAAhkE,UAAAG,SAAA,SAAAw2D,GAAyC,MAARA,GAAA+R,GAAA/R,GAAQqP,EAAA1zD,KAAAqkD,EAAAhkD,EAAAgkD,IAAsBqN,EAAAhkE,UAAA6a,EAAA,WAAyB,MAAAvI,MAAAqkD,EAAA97C,IAAqM,IAAAguD,IAAA,EAC1hBD,IAAA5oE,UAAAwrE,OAAA,WAA+Bl5D,KAAAnI,EAAAi/D,GAAA92D,MAAgBA,KAAAK,GAAAL,KAAAK,EAAA64D,SAAAl5D,KAAAK,EAAA,MAAAL,KAAAqkD,GAAA,GAAArkD,KAAAqkD,IAAAxsD,IAAA47D,GAAAzzD,KAAAqkD,EAAA97C,IAAA,SAAA87C,GAAuFA,EAAA6U,WAAWvF,GAAA3zD,KAAAqkD,OAA8N2S,GAAAtpE,UAAAkD,UAAA,SAAAyzD,GAAmC,MAAA/7C,GAAA3X,KAAAC,UAAAyzD,MAAA,KAAmC2S,GAAAtpE,UAAA8iE,MAAA,SAAAnM,GAA+B,MAAA/7C,GAAA3X,KAAA6/D,MAAAnM,MAAA,KAAm5BY,EAAAuM,EAAAtG,EAAO,IAAAuM,IAAA,EAAUjG,GAAA9jE,UAAA2S,EAAA2uD,GAAA,iBAAmC,IAAAoJ,IAAA,YAAAwF,IAAA,aAAqC3P,GAAAuD,EAAA9jE,UAC5gDugE,EAAAtJ,GAAA,SAAAN,EAAAhkD,EAAAxI,EAAAuI,GAAuB,GAAAJ,KAAAqkD,EAAA,KAAAt3D,OAAA,0DAAAiT,KAAA7N,EAAA,YAAyFkyD,EAAahkD,OAAAw9D,cAAA,MAA0B79D,KAAA7N,EAAAkyD,EAASrkD,KAAAiuD,EAAA,GAAUjuD,KAAA6xD,EAAA,EAAS7xD,KAAAgyD,EAAA3xD,EAASL,KAAA6vD,GAAA,EAAU7vD,KAAAmjB,GAAA,EAAUnjB,KAAAqkD,EAAAgN,GAAArxD,KAAAyvD,EAAAzvD,KAAAyvD,EAAA4N,IAAgCr9D,KAAA8uD,EAAAoC,GAAAlxD,KAAAyvD,EAAAzvD,KAAAyvD,EAAA4N,IAAgCr9D,KAAAqkD,EAAAiJ,mBAAAxI,EAAA9kD,KAAAk4D,GAAAl4D,KAA0C,KAAIyvD,EAAAzvD,KAAAK,EAAAyxD,EAAA9xD,KAAA,gBAAAA,KAAAqwD,GAAA,EAAArwD,KAAAqkD,EAAAz7B,KAAAvoB,EAAAgkD,EAAA/xD,IAAA,GAAA0N,KAAAqwD,GAAA,EAAgF,MAAAltC,GAAsE,MAA7DssC,GAAAzvD,KAAAK,EAAAyxD,EAAA9xD,KAAA,sBAAAmjB,EAAAr2B,cAAkD+qE,IAAA73D,KAAAmjB,GAAkBkhC,EAAAxsD,GAAA,EAAQ,IAAAlL,GAAA,GAAA8kE,GAAAzxD,KAAAmmB,QACne/lB,IAAAozD,GAAApzD,EAAA,SAAAikD,EAAAhkD,GAAsB1T,EAAAogB,IAAA1M,EAAAgkD,KAAajkD,EAAAi8B,GAAA1vC,EAAA+mE,KAAY77D,EAAAyQ,EAAAw1D,UAAAzZ,YAAA/7C,GAAAw1D,WAAsC,GAAA1U,GAAAwU,GAAAv9D,KAAAD,GAAAvI,GAAAlL,EAAAogB,IAAA,kEAA8FpgB,EAAA+B,QAAA,SAAA21D,EAAAhkD,GAAwBL,KAAAqkD,EAAA0Z,iBAAA19D,EAAAgkD,IAA6BrkD,MAAOA,KAAAyxD,IAAAzxD,KAAAqkD,EAAA2Z,aAAAh+D,KAAAyxD,GAAqC,mBAAAzxD,MAAAqkD,GAAArkD,KAAAqkD,EAAA4Z,kBAAAj+D,KAAAykC,IAAAzkC,KAAAqkD,EAAA4Z,gBAAAj+D,KAAAykC,EAA6F,KAAI4zB,GAAAr4D,MAAA,EAAAA,KAAAokD,IAAApkD,KAAA0uD,EAAAgJ,GAAA13D,KAAAqkD,GAAAoL,EAAAzvD,KAAAK,EAAAyxD,EAAA9xD,KAAA,oBAAAA,KAAAokD,EAAA,0BAAApkD,KAAA0uD,IAAA1uD,KAAA0uD,GAAA1uD,KAAAqkD,EAAAuT,QACrX53D,KAAAokD,EAAApkD,KAAAqkD,EAAAmT,UAAA1S,EAAA9kD,KAAA2mD,GAAA3mD,YAAAkrD,EAAAoD,GAAAtuD,KAAA2mD,GAAA3mD,KAAAokD,EAAApkD,OAAAyvD,EAAAzvD,KAAAK,EAAAyxD,EAAA9xD,KAAA,oBAAAA,KAAA+xD,GAAA,EAAA/xD,KAAAqkD,EAAAl/B,KAAAk/B,GAAArkD,KAAA+xD,GAAA,EAAgJ,MAAA5uC,GAASssC,EAAAzvD,KAAAK,EAAAyxD,EAAA9xD,KAAA,eAAAmjB,EAAAr2B,UAAA+qE,GAAA73D,KAAAmjB,KACzJ8qC,EAAAtH,GAAA,eAAgB,KAAAsR,MAAAj4D,KAAAqkD,IAAArkD,KAAAiuD,EAAA,mBAAAjuD,KAAAokD,EAAA,eAAApkD,KAAA6xD,EAAA,EAAApC,EAAAzvD,KAAAK,EAAAyxD,EAAA9xD,UAAAiuD,IAAAjuD,KAAA4wD,cAAA,WAAA5wD,KAAA48B,MAAA,KAChBqxB,EAAArxB,MAAA,SAAAynB,GAAoBrkD,KAAAqkD,GAAArkD,KAAAmjB,IAAAssC,EAAAzvD,KAAAK,EAAAyxD,EAAA9xD,KAAA,aAAAA,KAAAmjB,GAAA,EAAAnjB,KAAAknD,GAAA,EAAAlnD,KAAAqkD,EAAAznB,QAAA58B,KAAAknD,GAAA,EAAAlnD,KAAA6xD,EAAAxN,GAAA,EAAArkD,KAAA4wD,cAAA,YAAA5wD,KAAA4wD,cAAA,SAAAmH,GAAA/3D,QAA6KiuD,EAAA9G,EAAA,WAAennD,KAAAqkD,IAAArkD,KAAAmjB,IAAAnjB,KAAAmjB,GAAA,EAAAnjB,KAAAknD,GAAA,EAAAlnD,KAAAqkD,EAAAznB,QAAA58B,KAAAknD,GAAA,GAAA6Q,GAAA/3D,MAAA,IAA6EwxD,EAAAtM,EAAAiC,EAAAn5D,KAAAgS,OAAkBiuD,EAAAiK,GAAA,WAAgBl4D,KAAA/N,IAAA+N,KAAAqwD,GAAArwD,KAAA+xD,GAAA/xD,KAAAknD,EAAA8Q,GAAAh4D,WAAAyoD,OAAqDwF,EAAAxF,GAAA,WAAgBuP,GAAAh4D,OAG1ViuD,EAAAyE,EAAA,WAAe,IAAI,SAAAV,EAAAhyD,WAAAqkD,EAAAjvD,QAAA,EAAkC,MAAAivD,GAAS,WAAW4J,EAAAzH,GAAA,WAAgB,IAAI,SAAAwL,EAAAhyD,WAAAqkD,EAAA6Z,WAAA,GAAsC,MAAA7Z,GAAS,MAAAoL,GAAAzvD,KAAAK,EAAA,uBAAAgkD,EAAAv3D,SAAA,KAAuDmhE,EAAA2E,EAAA,WAAe,IAAI,MAAA5yD,MAAAqkD,EAAArkD,KAAAqkD,EAAA8Z,aAAA,GAAqC,MAAA9Z,GAAS,MAAAoL,GAAAzvD,KAAAK,EAAA,6BAAAgkD,EAAAv3D,SAAA,KAC9SmhE,EAAAkO,GAAA,SAAA9X,GAAiB,GAAArkD,KAAAqkD,EAAA,CAAW,GAAAhkD,GAAAL,KAAAqkD,EAAA8Z,YAA0B9Z,IAAA,GAAAhkD,EAAA7O,QAAA6yD,KAAAhkD,IAAA3P,UAAA2zD,EAAA/4D,QAA8C+4D,GAAA,CAAO,GAAJA,EAAAhkD,EAAIiI,EAAA3X,KAAA,IAAc,GAAAkH,GAAAyQ,EAAA3X,KAAA6/D,MAAAnM,EAAsB,MAAAA,GAAQ,MAAAjkD,IAAUvI,EAAAyzD,GAAAjH,GAAQ,MAAAxsD,KAAWo2D,EAAAxH,GAAA,WAAgB,MAAAzmD,MAAA6xD,GAAe5D,EAAAlE,GAAA,WAAgB,MAAA3F,GAAApkD,KAAAiuD,GAAAjuD,KAAAiuD,EAAAjuD,KAAAiuD,EAAA37D,IAA0iC27D,EAAAwK,GAAA/qE,UAC7wCugE,EAAAxI,GAAA,EAAOwI,EAAA6B,EAAA,EACsT7B,EAAArH,GAAA,WAAgB,UAAA5mD,KAAA8vD,GAE7U7B,EAAApH,GAAA,SAAAxC,GAA8D,GAA7CrkD,KAAAokD,EAAA,KAAYiM,EAAArwD,KAAAqkD,EAAA,wBAAiC,GAAArkD,KAAA8vD,EAAA,GAAAzL,EAAAkM,GAAAvwD,KAAAqkD,EAAA,sCAA8D,CAAKgM,EAAArwD,KAAAqkD,EAAA,WAAoBrkD,KAAAmrD,EAAAlqD,KAAAC,MAAA,IAAAD,KAAAE,UAAqCkjD,EAAArkD,KAAAmrD,GAAW,IAAA9qD,GAAA,GAAAguD,GAAAruD,UAAAqkD,QAAA,IAAAxsD,EAAAmI,KAAA/N,CAA2C+N,MAAAgyD,IAAAn6D,KAAA0uD,GAAA1uD,GAAA2uD,GAAA3uD,EAAAmI,KAAAgyD,IAAAn6D,EAAAmI,KAAAgyD,GAA4C,OAAAhyD,KAAAknD,IAAA7mD,EAAAwxD,EAAAh6D,EAAuB,IAAAuI,GAAAq5D,GAAAz5D,KAAAK,GAAA1T,EAAAu4D,EAAAllD,KAAAyvD,EAA6BkF,GAAAhoE,EAAA,MAAA03D,GAAasQ,EAAAhoE,EAAA,WAAeqT,KAAA8uD,GAAA9uD,KAAA6xD,GAAA8C,EAAAhoE,EAAA,oBAAAqT,KAAA6xD,GAAgDkH,GAAA/4D,KAAArT,GAAWqT,KAAAknD,GAAArvD,GAAA2gE,GAAA7rE,EAAAqT,KAAAknD,EAAArvD,GAA0B6+D,GAAA12D,KAAAnI,EAAAwI,GAAaL,KAAA+mD,IAAA4N,EAAAhoE,EAAA,OAAAyT,GAAA8xD,GAAA7xD,EAAA1T,EAAA,OAAAulE,GAAA7xD,EAC9c1T,EAAAyT,GAAKJ,KAAA8vD,EAAA,MAAS,IAAA9vD,KAAA8vD,IAAAzL,EAAAmV,GAAAx5D,KAAAqkD,GAAA,GAAArkD,KAAAiuD,EAAA3iE,OAAA+kE,EAAArwD,KAAAqkD,EAAA,kDAAAsS,GAAA32D,KAAAnI,GAAA04D,GAAAvwD,KAAAqkD,EAAA,kEAAAmV,GAAAx5D,MAAAqwD,EAAArwD,KAAAqkD,EAAA,kDAId4J,EAAA4L,GAAA,WAAgB75D,KAAAykC,EAAA,KAAY4rB,EAAArwD,KAAAqkD,EAAA,4BAAqCrkD,KAAAK,EAAA,GAAAguD,GAAAruD,UAAAqkD,EAAA,MAAArkD,KAAAwxD,GAAuC,OAAAxxD,KAAAknD,IAAAlnD,KAAAK,EAAAwxD,EAAA7xD,KAAA/N,GAAiC+N,KAAAK,EAAA8qD,EAAA,CAAW,IAAA9G,GAAAa,EAAAllD,KAAA+lD,GAAiB4O,GAAAtQ,EAAA,aAAiBsQ,EAAAtQ,EAAA,MAAArkD,KAAAqwD,GAAkBsE,EAAAtQ,EAAA,KAAArkD,KAAAgnD,GAAA,SAA0B2N,EAAAtQ,EAAA,MAAArkD,KAAAyxD,GAAkBsH,GAAA/4D,KAAAqkD,GAAWsQ,EAAAtQ,EAAA,kBAAsBrkD,KAAAknD,GAAAlnD,KAAA/N,GAAAumE,GAAAnU,EAAArkD,KAAAknD,EAAAlnD,KAAA/N,GAAoCogE,GAAAryD,KAAAK,EAAAgkD,GAAA,EAAArkD,KAAAolD,IAAwBiL,EAAArwD,KAAAqkD,EAAA,wBAEjV4J,EAAA9F,GAAA,SAAA9D,EAAAhkD,GAAmB,MAAAL,KAAA8vD,IAAA9vD,KAAAK,GAAAgkD,GAAAuS,GAAA52D,KAAAnI,EAAAwsD,IAAA,GAAArkD,KAAA7N,EAAAkyD,EAAAqK,EAAAkI,GAAA52D,KAAAnI,EAAAwsD,IAAA,GAAArkD,KAAA8vD,EAAA,CAA+E,IAAI,GAAAj4D,GAAAmI,KAAAulD,GAAAlB,EAAAmM,MAAAnwD,GAAyB,MAAA8iB,GAAStrB,EAAA,KAAO,GAAA6R,EAAA7R,IAAA,GAAAA,EAAAvM,OAAA,GAAA+U,EAAAxI,EAAA,GAAAwI,EAAA,GAAAgkD,EAAA,GAAAgM,EAAArwD,KAAAqkD,EAAA,6CAAArkD,KAAAykC,EAAA4rB,EAAArwD,KAAAqkD,EAAA,kDAA6J,CAAK,GAAArkD,KAAAK,EAAA,MAAAL,KAAAK,EAAAyuD,EAAA,IAAAzK,EAAAyK,GAAmE,KAAAzK,EAAnE8U,IAAAn5D,WAAAK,EAAA64D,SAAAl5D,KAAAK,EAAA,SAAgFgvD,GAAArvD,KAAAqkD,IAAA,2CAA4DyV,IAAA95D,MAASorD,EAAA,QAAMprD,MAAAgmD,GAAA3lD,EAAA,MAAAgkD,EAAArkD,KAAAgmD,GAAAhmD,KAAAyxD,KAAApxD,EAC5cA,EAAA,GAAAgwD,EAAArwD,KAAAqkD,EAAAhkD,EAAA,cAAAgkD,EAAA,qDAAAhkD,GAAAL,KAAAgnD,IAAA,GAAAhnD,KAAA0lD,IAAA1lD,KAAA+xD,IAAA/xD,KAAA+xD,EAAAf,GAAAlM,EAAA9kD,KAAAonD,GAAApnD,MAAA,WAAuJqwD,GAAArwD,KAAAqkD,EAAA,mCAAAuO,EAAA5yD,KAAA,QAA4D,IAAAA,KAAAK,GAAAgkD,GAAA8U,GAAAn5D,OAAA,cAAAsF,KAAAjF,GAAA,IAAAA,EAAAxI,EAAAmI,KAAAulD,GAAAlB,EAAAmM,MAAAnwD,GAAAxI,EAAA,EAAkFA,EAAAwI,EAAA/U,OAAWuM,IAAA,CAAK,GAAAuI,GAAAC,EAAAxI,EAA8B,IAAnBmI,KAAAyxD,EAAArxD,EAAA,GAAYA,IAAA,GAAO,GAAAJ,KAAA8vD,EAAA,QAAA1vD,EAAA,IAA2BJ,KAAAqwD,EAAAjwD,EAAA,GAAYJ,KAAAolD,GAAAhlD,EAAA,EAAa,IAAAzT,GAAAyT,EAAA,EAAW,OAAAzT,IAAAqT,KAAAylD,GAAA94D,EAAAkjE,EAAA7vD,KAAAqkD,EAAA,OAAArkD,KAAAylD,KAA8CrlD,IAAA,GAAO,MAAAA,IAAAJ,KAAAimD,GAAA7lD,EAAAyvD,EAAA7vD,KAAAqkD,EAAA,QAAArkD,KAAAimD,KACvcjmD,KAAA8uD,IAAA1uD,EAAAikD,QAAA13D,EAAAyT,EAAAikD,EAAAjkD,EAAAikD,EAAAsZ,kBAAA,iCAAAlH,GAAAz2D,KAAAnI,EAAAlL,GAAAqT,KAAA6xD,KAAAzxD,IAAAikD,EAAAjkD,EAAAikD,EAAAsZ,kBAAA,4BAAA39D,KAAAorD,EAAAhrD,EAAAu0D,EAAA30D,KAAAyvD,EAAAzvD,KAAA6xD,EAAAzxD,IAAAivD,EAAArvD,KAAAqkD,IAAA,yDAAgQrkD,KAAA8vD,EAAA,EAAS9vD,KAAAmjB,GAAAnjB,KAAAmjB,EAAAmjC,KAAoBtmD,KAAA+lD,GAAAmQ,GAAAl2D,UAAAolD,GAAAplD,KAAAslD,IAAiCsU,GAAA55D,UAAS,QAAAI,EAAA,aAAAA,EAAA,IAAAwyD,EAAA5yD,KAAA,OAA2C,IAAAA,KAAA8vD,IAAA,QAAA1vD,EAAA,aAAAA,EAAA,WAAAA,EAAA,GAAAwyD,EAAA5yD,KAAA,GAAA64D,GAAA74D,MAAA,QAAAI,EAAA,IAAAJ,KAAAmjB,GAAAnjB,KAAAmjB,EAAAkjC,GAAAjmD,GAAAJ,KAAA0lD,EAAA,KAClXuI,EAAA7G,GAAA,WAAgB,MAAApnD,KAAA+xD,IAAA/xD,KAAA+xD,EAAA,KAAA/xD,KAAAK,EAAA64D,SAAAl5D,KAAAK,EAAA,KAAAy5D,GAAA95D,MAAAorD,EAAA,MAChB6C,EAAA5xB,GAAA,SAAAgoB,GAAiBgM,EAAArwD,KAAAqkD,EAAA,mBAA6B,IAAAhkD,GAAA,IAAW,IAAAL,KAAAK,GAAAgkD,EAAA,CAAc8U,GAAAn5D,MAASA,KAAAK,EAAA,IAAY,IAAAxI,GAAA,MAAQ,KAAA++D,GAAA52D,KAAAnI,EAAAwsD,GAA4C,MAA5ChkD,GAAAgkD,EAAAlyD,EAAA0kE,GAAA72D,KAAAnI,EAAAwsD,GAAAxsD,EAAA,EAAmE,GAAXmI,KAAA7N,EAAAkyD,EAAAqK,EAAW,GAAA1uD,KAAA8vD,EAAA,GAAAzL,EAAAxsD,EAAA,GAAAA,GAAAk5D,GAAA1M,EAAA5f,EAAA4f,EAAA5f,EAAAn5C,OAAA,EAAA4iE,IAAA7J,EAAAyK,EAAA9uD,KAAA0uD,GAAA2K,GAAAr5D,OAAA45D,GAAA55D,UAAiF,CAAK,GAAAI,GAAAikD,EAAAD,CAAU,OAAAhkD,GAAA,GAAAA,GAAA,EAAAJ,KAAA7N,EAAAk+D,EAAArwD,KAAAqkD,EAAA,sCAAmE,CAAK,GAAA13D,GAAAqT,IAAgF,IAArEqwD,EAAArwD,KAAAqkD,EAAA,WAAoB,qCAAA4N,GAAA7xD,EAAAzT,EAAAwF,KAAiD,GAAA0F,GAAAyhE,GAAAt5D,KAAAqkD,IAAA,GAAAxsD,GAAAiiE,GAAA95D,MAAA,MAA2CqwD,GAAArwD,KAAAqkD,EAAA,kCAC1Y,OADqbhkD,GACrf,EAAAA,EAAA/U,QAAAyrE,GAAA/2D,KAAAnI,EAAAwI,GAAyBgwD,EAAArwD,KAAAqkD,EAAA,8BAAuCjkD,GAAU,OAAAwyD,EAAA5yD,KAAA,EAAiB,MAAM,QAAA4yD,EAAA5yD,KAAA,GAAkB,MAAM,QAAA4yD,EAAA5yD,KAAA,EAAiB,MAAM,SAAA4yD,EAAA5yD,KAAA,MAC0JiuD,EAAA3E,GAAA,SAAAjF,GAAiBA,GAAAwL,EAAA7vD,KAAAqkD,EAAA,kCAAA+G,EAAA,KAAAyE,EAAA7vD,KAAAqkD,EAAA,6BAAA+G,EAAA,KAE7D6C,EAAAvJ,GAAA,SAAAL,GAAiB,GAAAA,IAAArkD,KAAA0xD,EAAA,KAAA3kE,OAAA,sDAAoG,OAAnBs3D,GAAA,GAAAmN,GAAQnN,EAAA5f,EAAAzkC,KAAA0xD,EAAWrN,GAAU4J,EAAArI,GAAA,WAAgB,QAAA5lD,KAAAmjB,IAAA,GAAoB8qC,EAAAjJ,GAAA,WAAgB,MAAAhlD,MAAA0xD,GAAe,GAAAiE,IAAsB1H,EAAAoM,GAAA3sE,UAAeugE,EAAA3H,GAAA,aACre2H,EAAA5H,GAAA,aAAkB4H,EAAA7H,GAAA,aAAkB6H,EAAAgM,GAAA,aAAkBhM,EAAA0L,GAAA,aAAqUY,GAAA7sE,UAAA22D,EAAA,SAAAA,EAAAhkD,GAA6B,UAAAqyD,GAAArO,EAAAhkD,IAElC4kD,EAAAyN,EAAAxH,GACtXwH,EAAAhlE,UAAAmkE,EAAA,WAAyB7xD,KAAAqkD,EAAAlhC,EAAAnjB,KAAAknD,EAAgBlnD,KAAA+xD,IAAA/xD,KAAAqkD,EAAAqN,GAAA,EAAsB,IAAArN,GAAArkD,KAAAqkD,EAAAhkD,EAAAL,KAAA7N,EAAA0F,EAAAmI,KAAAK,EAAAD,EAAAJ,KAAAiuD,OAAA,EAAgDoC,GAAAhM,IAAA,aAAmB+G,EAAA,GAAK/G,EAAAiB,GAAAztD,EAAOwsD,EAAAyN,EAAA1xD,MAAUikD,EAAAyK,IAAAuB,EAAAhM,IAAA,oCAAAA,EAAAwL,EAAAxvD,KAAAgkD,EAAAwL,EAAAxL,GAAA,GAAmEgM,EAAAhM,IAAA,kBAAwBA,EAAA6G,EAAA,GAAA6K,IAAA1R,OAAkB,OAAAA,EAAA6C,IAAA7C,EAAA6G,EAAAj5D,EAAAoyD,EAAApyD,GAAwB4F,EAAAwI,EAAIgkD,EAAA6C,GAAA7C,EAAApyD,IAAA4F,EAAA2gE,GAAAn4D,EAAAgkD,EAAA6C,EAAA7C,EAAApyD,IAA4BoyD,IAAA6G,EAAM7G,EAAAD,EAAAvsD,EAAMwI,EAAA05D,GAAA1V,MAAAD,GAAcgH,EAAA,GAAKvzD,EAAAwsD,IAAAwL,EAAAxvD,EAAU,MAAAxI,GAAAwsD,EAAA4J,EAAAp2D,EAAA,GAAAwsD,EAAA8Q,EAAA,EAAAa,GAAA3R,KAAAkO,GAAAlyD,EAAA,gBAAAgkD,IAAAyK,GAAAzK,IAAAwN,GAAAU,GAAAlyD,EAAA,oBAAAgkD,IAAAwN,GAAAxN,EAAAxsD,EAAA,GAAAw2D,GAAAhK,IAAAhkD,MAAA,WAAAgkD,EAAAxsD,EAAAg6D,EAAAxN,EAAApyD,EAAAogE,GAAAhO,EAAAxsD,EACtWwI,GAAA,QAAAgkD,EAAA8Q,EAAA,IAAmBzC,EAAAhlE,UAAAw3B,MAAA,WAA6B2zC,GAAA74D,KAAAqkD,IAAYqO,EAAAhlE,UAAA02D,EAAA,SAAAC,GAA0B,GAAAD,EAAAC,GAAA,CAAS,GAAAhkD,KAASA,GAAA+9D,SAAA/Z,EAAa+U,GAAAp5D,KAAAqkD,EAAAhkD,OAAaL,MAAAykC,GAAApkC,KAAiBA,EAAA+9D,SAAA5S,GAAAnH,GAAA+U,GAAAp5D,KAAAqkD,EAAAhkD,IAAA+4D,GAAAp5D,KAAAqkD,MAA8CqO,EAAAhlE,UAAAy5D,EAAA,WAAyBnnD,KAAAqkD,EAAAlhC,EAAA,WAAcnjB,MAAAknD,EAAc2R,GAAA74D,KAAAqkD,SAAWrkD,MAAAqkD,EAAcqO,EAAAxN,EAAAiC,EAAAn5D,KAAAgS,OAAsMilD,EAAA+V,GAAAnF,IAC3a5Q,EAAAiW,GAAApF,IAAiC7Q,EAAA8V,GAAAV,IAASU,GAAArtE,UAAA44D,GAAA,WAA2BiJ,GAAAvvD,KAAAqkD,EAAAlhC,EAAA,wBAAAnjB,KAAAqkD,EAAAhkD,GAA8CL,KAAAqkD,EAAAuM,cAAA,MAA2BmK,GAAArtE,UAAA24D,GAAA,SAAAhC,GAA4BrkD,KAAAqkD,EAAAuM,cAAA,GAAAoK,IAAA3W,KAAiC0W,GAAArtE,UAAA04D,GAAA,SAAA/B,GAA4BkL,GAAAvvD,KAAAqkD,EAAAlhC,EAAA,yBAAAnjB,KAAAqkD,EAAAhkD,EAAA,0BAAAgkD,GAA2ErkD,KAAAqkD,EAAAuM,cAAA,GAAAsK,IAAA7W,KAAiC0W,GAAArtE,UAAAusE,GAAA,WAA2B1K,GAAAvvD,KAAAqkD,EAAAlhC,EAAA,wBAAAnjB,KAAAqkD,EAAAhkD,GAA8CL,KAAAqkD,EAAAuM,cAAA,KAA2B,IAAAyN,IAAArZ,GAAA,SAAAX,EAAAhkD,GAAwB,QAAAxI,MAAcA,EAAAnK,UAAA22D,EAAA32D,SAAwB,IAAA0S,GAAA,GAAAvI,EAA+D,OAAnDwsD,GAAAp4D,MAAAmU,EAAA3Q,MAAA/B,UAAAwW,MAAAlW,KAAA3C,UAAA,IAAmD+U,GAASm6D,GAAqHY,IAAAztE,UAAAu3D,EAAA,WAA0B,MAAAjlD,MAAAK,EAAA/U,OAAA0U,KAAAqkD,EAAA/4D,QAAoC6vE,GAAAztE,UAAAG,SAAA,SAAAw2D,GAAkC,UAAA+E,GAAAppD,KAAAK,EAAAgkD,IAAA,GAAA+E,GAAAppD,KAAAqkD,MAAyC8W,GAAAztE,UAAA6a,EAAA,WAA0B,OAAA87C,MAAAhkD,EAAAL,KAAAK,EAAA/U,OAAA,EAA+B,GAAA+U,IAAKA,EAAAgkD,EAAA1rD,KAAAqH,KAAAK,KAAsB,IAAAxI,GAAAmI,KAAAqkD,EAAA/4D,MAAoB,KAAA+U,EAAA,EAAQA,EAAAxI,IAAIwI,EAAAgkD,EAAA1rD,KAAAqH,KAAAqkD,EAAAhkD,GAAsB,OAAAgkD,IAAmJY,EAAAoW,GAAA3V,EAAQ,IAAA4V,IAAA,qDAA6DrN,GAAAoN,GAAA3tE,UAAeugE,EAAApI,GAAA,WAAgB,GAAAxB,GAAA6J,GAAU,YAAAluD,KAAAiuD,GAAA,EAAA5J,EAAArkD,KAAAiuD,GAAA,CAAgC,OAAA5tD,GAAU,EAAAL,KAAAqkD,EAAAY,MAAA5kD,EAAA+6D,GAAAp7D,KAAAqkD,IAAArkD,KAAAyzD,GAAApzD,KAAyCL,KAAAukD,IAA0E,QAA/DlkD,GAAAL,KAAAilD,IAAAjlD,KAAAnI,IAAAwI,EAAAL,KAAA2lD,MAAmCtlD,IAAAL,KAAAiuD,EAAA5J,EAAArkD,KAAAK,EAAApB,IAAAoB,IAA4BA,IAAW4tD,EAAA/E,GAAA,SAAA7E,GAAiB,QAAAuP,GAAA5zD,KAAAK,EAAAgkD,EAAA+R,GAAA/R,MAAArkD,KAAAwlD,GAAAnB,IAAA,IACz6C4J,EAAAzI,GAAA,SAAAnB,GAAiBuP,GAAA5zD,KAAAK,EAAAgkD,EAAA+R,GAAA/R,IAAmBrkD,KAAAyzD,GAAApP,IAAArkD,KAAAilD,IAAAjlD,KAAAnI,EAAAmI,KAAAqkD,IAAA1rD,KAAA0rD,GAAAkX,GAAAlX,IAAoD4J,EAAA1J,GAAA,WAAgB,OAAAF,GAAArkD,KAAAqkD,EAAiBrkD,KAAAilD,IAAAjlD,KAAAknD,GAAgB,CAAE,GAAA7mD,GAAAL,KAAA2lD,IAAgBtB,KAAA1rD,KAAA0H,GAAY,KAAKL,KAAAilD,IAAAjlD,KAAAnI,GAAA,EAAAmI,KAAAqkD,EAAAY,KAA8BsW,GAAAH,GAAA/W,KAAY4J,EAAAtI,GAAA,WAAgB,UAAuFsI,EAAAwF,GAAA,SAAApP,GAAiB,wBAAAA,GAAA4X,IAAA5X,EAAA4X,MAAyChO,EAAApgE,SAAA,SAAAw2D,GAAuB,MAAArkD,MAAAqkD,EAAAx2D,SAAAw2D,IAAArkD,KAAAK,EAAAxS,SAAAw2D,IAA+C4J,EAAAhJ,EAAA,WAAe,MAAAjlD,MAAAqkD,EAAAY,IAAAjlD,KAAAK,EAAA4kD,KAC5cgJ,EAAA9G,EAAA,WAAiC,GAAlBkU,GAAAnW,EAAAiC,EAAAn5D,KAAAgS,MAAkB,EAAAA,KAAAK,EAAA4kD,IAAA,KAAAl4D,OAAA,kDAAwEiT,MAAAK,CAAc,QAAAgkD,GAAArkD,KAAAqkD,EAAiB,GAAAA,EAAAhkD,EAAA/U,QAAA,GAAA+4D,IAAA/4D,QAA6BiwE,GAAAH,GAAA/W,UAAWrkD,MAAAqkD,GAA8ZoX,GAAA/tE,UAAA6a,EAAA,WAA0B,OAAA87C,GAAArkD,KAAAqkD,EAAAhkD,KAAAxI,EAAAwsD,EAAA/4D,OAAA8U,EAAA,EAAqCA,EAAAvI,EAAIuI,IAAAC,EAAA1H,KAAA0rD,EAAAjkD,GAAAC,EAAmB,OAAAA,IACpqBo7D,GAAA/tE,UAAAgmE,EAAA,WAA0B,OAAArP,GAAArkD,KAAAqkD,EAAAhkD,KAAAxI,EAAAwsD,EAAA/4D,OAAA8U,EAAA,EAAqCA,EAAAvI,EAAIuI,IAAAC,EAAA1H,KAAA0rD,EAAAjkD,GAAAikD,EAAmB,OAAAhkD,IAAUo7D,GAAA/tE,UAAAu3D,EAAA,WAA0B,MAAAjlD,MAAAqkD,EAAA/4D,QAAkD25D,EAAA0W,GAAAF,IAAyDxW,EAAAwJ,EAAA4M,IAAQpN,EAAAQ,EAAA/gE,UAAcugE,EAAApI,GAAA,SAAAxB,EAAAhkD,GAAmB,IAAAgkD,EAAA,MAAAoK,GAAAvJ,EAAAW,GAAA73D,KAAAgS,KAA+B07D,IAAA17D,KAAAmjB,MAAA,KAAA9iB,IAAA,IAAAgkD,GAA8BrkD,KAAAopD,MAAW6E,EAAA7E,GAAA,WAAgB,OAAA/E,GAAArkD,KAAAmjB,EAAiB,EAAAkhC,EAAAY,KAAQ,CAAE,GAAA5kD,GAAAL,KAAA6lD,IAAgB,KAAAxlD,EAA2P,KAArP,IAAAxI,GAAAwsD,EAAAjkD,EAAAvI,EAAAwsD,EAAA13D,EAAAyT,EAAA9U,OAAyB63B,EAAA/iB,EAAA,EAAW,OAAAzT,EAAAw2B,MAAA,OAAiB,CAAK,MAAAx2B,EAAAo5D,GAAA3lD,OAAc,CAAKA,EAAA,GAAAA,EAAAgJ,MAAahJ,EAAA,EAAIvI,IAAAwsD,EAAM13D,EAAAkL,EAAAvM,MAAW,QAAA47D,GAAArvD,EAAAuI,GAAeA,EAAAzT,GAAA,GAAO,CAAE,GAAA83C,GAAA,EAAArkC,EAAA,EAAAmI,EAAA,EAAAnI,EAAA,CAA6C,IAAzBqkC,EAAAl8B,EAAA5b,GAAAkL,EAAA0Q,GAAA87C,EAAAxsD,EAAA4sC,GAAA4f,EAAA97C,EAAAk8B,EAAyB5sC,EAAA4sC,GAAA4f,EAAA6C,EAAA7C,EAAA,KAAoBxsD,GAAAuI,GAAAvI,EAAA4sC,GAAUrkC,EAAAqkC,EAAI5sC,EAAAuI,GAAA8mD,EAAO/jC,IAAA9iB,EAAM8iB,EAAAl3B,MAAA+T,MAAAK,MAC1nB4tD,EAAAzI,GAAA,SAAAnB,GAAiBoK,EAAAvJ,EAAAM,GAAAx3D,KAAAgS,KAAAqkD,GAAoBrkD,KAAAopD,MAAW6E,EAAA1J,GAAA,WAAgBkK,EAAAvJ,EAAAX,GAAAv2D,KAAAgS,MAAkBA,KAAAopD,MAAW6E,EAAA9G,EAAA,WAAesH,EAAAvJ,EAAAiC,EAAAn5D,KAAAgS,MAAiBsI,EAAAmxC,iBAAA,IAAuBsM,GAAA/lD,KAAAmjB,EAAAkhC,GAAarkD,KAAAmjB,EAAA,MAAsE8hC,EAAA+D,EAAAyF,GAAOzF,EAAAt7D,UAAAi4D,GAAA,WAA0B,GAAAtB,GAAA,GAAAmN,GAAAnxD,EAAAL,KAAAokD,CAAsF,OAAjE/jD,MAAA3R,QAAA,SAAA2R,EAAAD,GAA2BikD,EAAAl+B,QAAApZ,IAAA3M,EAAAC,KAAqBL,KAAA6xD,IAAAxN,EAAA5f,GAAA,GAAiB4f,GAAU2E,EAAAt7D,UAAA+lE,GAAA,SAAApP,GAA2B,OAAAA,EAAApyD,IAAAoyD,KAAkBkW,GAAA7sE,UAAA86B,iBAAA+xC,GAAA7sE,UAAA22D,EAA6CqO,EAAAhlE,UAAAy3B,KAAAutC,EAAAhlE,UAAA02D,EAA+BsO,EAAAhlE,UAAAk7B,KAAA8pC,EAAAhlE,UAAAmkE,EAA+Ba,EAAAhlE,UAAAw3B,MAAAwtC,EAAAhlE,UAAAw3B,MAAoCi4C,GAAAn2C,SAAA,EAAcm2C,GAAAh2C,QAAA,EAAag2C,GAAA/1C,WAAA,EAAgBg2C,GAAAt2C,SAAA,WAAuB8uC,GAAA3sC,UAAAy0C,GAAgBA,GAAAx0C,KAAA,IAAYw0C,GAAAv0C,MAAA,IAAau0C,GAAArxE,MAAA,IAAaqxE,GAAAt0C,QAAA,IAAe8hC,EAAAx9D,UAAAo7B,OAAAoiC,EAAAx9D,UAAA42D,GAAkC0E,EAAAt7D,UAAAi5B,UAAAqiC,EAAAt7D,UAAAm4D,GAAqCmD,EAAAt7D,UAAAg6B,cAAAshC,EAAAt7D,UAAAw7D,GAAyCsI,EAAA9jE,UAAAm5B,WAAA2qC,EAAA9jE,UAAAg5D,GAAsC8K,EAAA9jE,UAAA+5B,aAAA+pC,EAAA9jE,UAAAq8D,GAAwCyH,EAAA9jE,UAAAq5B,iBAAAyqC,EAAA9jE,UAAA+4D,GACz2B+K,EAAA9jE,UAAA45B,UAAAkqC,EAAA9jE,UAAAglE,EAAoClB,EAAA9jE,UAAA85B,cAAAgqC,EAAA9jE,UAAA84D,GAAyCgL,EAAA9jE,UAAAw5B,gBAAAsqC,EAAA9jE,UAAAyuE,GAA2C3K,EAAA9jE,UAAA65B,gBAAAiqC,EAAA9jE,UAAAklE,EAA0CpB,EAAA9jE,UAAA65B,gBAAAiqC,EAAA9jE,UAAAklE,EAA0CpB,EAAA9jE,UAAAy3B,KAAAqsC,EAAA9jE,UAAAi3D,GAAgCp6D,OAAAC,SAAgB8zE,0BAAAD,GAAAE,UAAApB,GAAAl0C,UAAAm0C,GAAAoB,WAAA5I,GAAA6I,UAAAzV,KAAmFh7D,SAAA,KAAAm2D,cAAA,mBAAAgU,WAAA,mBAAAl8B,qBnFy0gBlTjuC,KAAKxD,QAASC,oBAAoB,QAI5D,MACO,MAAM6B,GACN,KAAUS,OACR","file":"firebase-firestore.js","sourcesContent":["/*!\n * @license Firebase v4.8.1\n * Build: rev-d8c20f0\n * Terms: https://firebase.google.com/terms/\n */\ntry {\n        webpackJsonpFirebase([1],{\n\n/***/ 113:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n__webpack_require__(114);\n\n\n/***/ }),\n\n/***/ 114:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ../app/dist/esm/index.js + 1 modules\nvar esm = __webpack_require__(6);\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/version.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nvar SDK_VERSION = esm[\"default\"].SDK_VERSION;\n\n//# sourceMappingURL=version.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/log.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* tslint:disable:no-console */\n\n\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar logLevel = LogLevel.ERROR;\n// Helper methods are needed because variables can't be exported as read/write\nfunction getLogLevel() {\n    return logLevel;\n}\nfunction setLogLevel(newLevel) {\n    logLevel = newLevel;\n}\nfunction debug(tag, msg) {\n    var obj = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        obj[_i - 2] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.DEBUG) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n    }\n}\nfunction log_error(msg) {\n    var obj = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        obj[_i - 1] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.ERROR) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n    }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    else {\n        var platform = platform_PlatformSupport.getPlatform();\n        try {\n            return platform.formatJSON(obj);\n        }\n        catch (e) {\n            // Converting to JSON failed, just log the object directly\n            return obj;\n        }\n    }\n}\n\n//# sourceMappingURL=log.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/assert.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nfunction fail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n    log_error(message);\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nfunction assert(assertion, message) {\n    if (!assertion) {\n        fail(message);\n    }\n}\n\n//# sourceMappingURL=assert.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform/platform.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nvar platform_PlatformSupport = /** @class */ (function () {\n    function PlatformSupport() {\n    }\n    PlatformSupport.setPlatform = function (platform) {\n        if (PlatformSupport.platform) {\n            fail('Platform already defined');\n        }\n        PlatformSupport.platform = platform;\n    };\n    PlatformSupport.getPlatform = function () {\n        if (!PlatformSupport.platform) {\n            fail('Platform not set');\n        }\n        return PlatformSupport.platform;\n    };\n    return PlatformSupport;\n}());\n\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nfunction emptyByteString() {\n    return platform_PlatformSupport.getPlatform().emptyByteString;\n}\n\n//# sourceMappingURL=platform.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/error.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.\n//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum\nvar Code = {\n    // Causes are copied from:\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n    /** Not an error; returned on success. */\n    OK: 'ok',\n    /** The operation was cancelled (typically by the caller). */\n    CANCELLED: 'cancelled',\n    /** Unknown error or an error from a different error domain. */\n    UNKNOWN: 'unknown',\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    INVALID_ARGUMENT: 'invalid-argument',\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    /** Some requested entity (e.g., file or directory) was not found. */\n    NOT_FOUND: 'not-found',\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    ALREADY_EXISTS: 'already-exists',\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    PERMISSION_DENIED: 'permission-denied',\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    UNAUTHENTICATED: 'unauthenticated',\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operation's execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    FAILED_PRECONDITION: 'failed-precondition',\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    ABORTED: 'aborted',\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    OUT_OF_RANGE: 'out-of-range',\n    /** Operation is not implemented or not supported/enabled in this service. */\n    UNIMPLEMENTED: 'unimplemented',\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    INTERNAL: 'internal',\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    UNAVAILABLE: 'unavailable',\n    /** Unrecoverable data loss or corruption. */\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nvar FirestoreError = /** @class */ (function (_super) {\n    __extends(FirestoreError, _super);\n    function FirestoreError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.name = 'FirebaseError';\n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\n        return _this;\n    }\n    return FirestoreError;\n}(Error));\n\n\n//# sourceMappingURL=error.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/api.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\n\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nfunction makeConstructorPrivate(cls, optionalMessage) {\n    function PublicConstructor() {\n        var error = 'This constructor is private.';\n        if (optionalMessage) {\n            error += ' ';\n            error += optionalMessage;\n        }\n        throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n    }\n    // Make sure instanceof checks work and all methods are exposed on the public\n    // constructor\n    PublicConstructor.prototype = cls.prototype;\n    // Copy any static methods/members\n    for (var staticProperty in cls) {\n        if (cls.hasOwnProperty(staticProperty)) {\n            PublicConstructor[staticProperty] = cls[staticProperty];\n        }\n    }\n    return PublicConstructor;\n}\n\n//# sourceMappingURL=api.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/obj.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction get(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nfunction obj_size(obj) {\n    var count = 0;\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            count++;\n        }\n    }\n    return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nfunction defaulted(value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n}\nfunction forEachNumber(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var num = parseInt(key, 10);\n            if (!isNaN(num)) {\n                fn(num, obj[key]);\n            }\n        }\n    }\n}\nfunction forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\nfunction lookupOrInsert(obj, key, valFn) {\n    if (!contains(obj, key)) {\n        obj[key] = valFn();\n    }\n    return obj[key];\n}\nfunction isEmpty(obj) {\n    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction shallowCopy(obj) {\n    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n    var result = {};\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=obj.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/input_validation.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nfunction validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n    if (args.length !== numberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" +\n            formatPlural(numberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nfunction validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n    if (args.length < minNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" +\n            formatPlural(minNumberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nfunction validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" +\n            (maxNumberOfArgs + \" arguments, but was called with \") +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nfunction validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n    if (!(value instanceof Array) || value.length < minNumberOfElements) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" +\n            'array with at least ' +\n            (formatPlural(minNumberOfElements, 'element') + \".\"));\n    }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nfunction validateArgType(functionName, type, position, argument) {\n    validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nfunction validateOptionalArgType(functionName, type, position, argument) {\n    if (argument !== undefined) {\n        validateArgType(functionName, type, position, argument);\n    }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nfunction validateNamedType(functionName, type, optionName, argument) {\n    validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nfunction validateNamedOptionalType(functionName, type, optionName, argument) {\n    if (argument !== undefined) {\n        validateNamedType(functionName, type, optionName, argument);\n    }\n}\n/** Helper to validate the type of a provided input. */\nfunction validateType(functionName, type, inputName, input) {\n    if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n        var description = valueDescription(input);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" +\n            (\"to be of type \" + type + \", but it was: \" + description));\n    }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nfunction isPlainObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        Object.getPrototypeOf(input) === Object.prototype);\n}\n/** Returns a string describing the type / value of the provided input. */\nfunction valueDescription(input) {\n    if (input === undefined) {\n        return 'undefined';\n    }\n    else if (input === null) {\n        return 'null';\n    }\n    else if (typeof input === 'string') {\n        if (input.length > 20) {\n            input = input.substring(0, 20) + \"...\";\n        }\n        return JSON.stringify(input);\n    }\n    else if (typeof input === 'number' || typeof input === 'boolean') {\n        return '' + input;\n    }\n    else if (typeof input === 'object') {\n        if (input instanceof Array) {\n            return 'an array';\n        }\n        else {\n            var customObjectName = tryGetCustomObjectType(input);\n            if (customObjectName) {\n                return \"a custom \" + customObjectName + \" object\";\n            }\n            else {\n                return 'an object';\n            }\n        }\n    }\n    else if (typeof input === 'function') {\n        return 'a function';\n    }\n    else {\n        return fail('Unknown wrong type: ' + typeof input);\n    }\n}\n/** Hacky method to try to get the constructor name for an object. */\nfunction tryGetCustomObjectType(input) {\n    if (input.constructor) {\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n        var results = funcNameRegex.exec(input.constructor.toString());\n        if (results && results.length > 1) {\n            return results[1];\n        }\n    }\n    return null;\n}\n/** Validates the provided argument is defined. */\nfunction validateDefined(functionName, position, argument) {\n    if (argument === undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" +\n            \"argument, but it was undefined.\");\n    }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nfunction validateOptionNames(functionName, options, optionNames) {\n    forEach(options, function (key, _) {\n        if (optionNames.indexOf(key) < 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" +\n                'Available options: ' +\n                optionNames.join(', '));\n        }\n    });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nfunction invalidClassError(functionName, type, position, argument) {\n    var description = valueDescription(argument);\n    return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" +\n        (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\nfunction ordinal(num) {\n    switch (num) {\n        case 1:\n            return 'first';\n        case 2:\n            return 'second';\n        case 3:\n            return 'third';\n        default:\n            return num + 'th';\n    }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num, str) {\n    return num + \" \" + str + (num === 1 ? '' : 's');\n}\n\n//# sourceMappingURL=input_validation.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/misc.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// tslint:disable-next-line:class-as-namespace\nvar misc_AutoId = /** @class */ (function () {\n    function AutoId() {\n    }\n    AutoId.newId = function () {\n        // Alphanumeric characters\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var autoId = '';\n        for (var i = 0; i < 20; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n        return autoId;\n    };\n    return AutoId;\n}());\n\nfunction primitiveComparator(left, right) {\n    if (left < right)\n        return -1;\n    if (left > right)\n        return 1;\n    return 0;\n}\n/** Helper to compare nullable (or undefined-able) objects using equals(). */\nfunction equals(left, right) {\n    if (left !== null && left !== undefined) {\n        return !!(right && left.equals(right));\n    }\n    else {\n        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n        // smart enough.\n        return left === right;\n    }\n}\n/** Helper to compare arrays using equals(). */\nfunction arrayEquals(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < left.length; i++) {\n        if (!left[i].equals(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nfunction immediatePredecessor(s) {\n    // We can decrement the last character in the string and be done\n    // unless that character is 0 (0x0000), in which case we have to erase the\n    // last character.\n    var lastIndex = s.length - 1;\n    if (s.length === 0) {\n        // Special case the empty string.\n        return '';\n    }\n    else if (s.charAt(lastIndex) === '\\0') {\n        return s.substring(0, lastIndex);\n    }\n    else {\n        return (s.substring(0, lastIndex) +\n            String.fromCharCode(s.charCodeAt(lastIndex) - 1));\n    }\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nfunction immediateSuccessor(s) {\n    // Return the input string, with an additional NUL byte appended.\n    return s + '\\0';\n}\n\n//# sourceMappingURL=misc.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/blob.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!platform_PlatformSupport.getPlatform().base64Available) {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar blob_Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n        validateArgType('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = platform_PlatformSupport.getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return platform_PlatformSupport.getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._equals = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return primitiveComparator(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nvar PublicBlob = makeConstructorPrivate(blob_Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n//# sourceMappingURL=blob.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/geo_point.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar geo_point_GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        validateExactNumberOfArgs('GeoPoint', arguments, 2);\n        validateArgType('GeoPoint', 'number', 1, latitude);\n        validateArgType('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._equals = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (primitiveComparator(this._lat, other._lat) ||\n            primitiveComparator(this._long, other._long));\n    };\n    return GeoPoint;\n}());\n\n\n//# sourceMappingURL=geo_point.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/database_info.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\n\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar database_info_DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.equals = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (primitiveComparator(this.projectId, other.projectId) ||\n            primitiveComparator(this.database, other.database));\n    };\n    return DatabaseId;\n}());\n\n\n//# sourceMappingURL=database_info.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar path___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar path_Path = /** @class */ (function () {\n    function Path(segments, offset, length) {\n        this.init(segments, offset, length);\n    }\n    /**\n     * An initialization method that can be called from outside the constructor.\n     * We need this so that we can have a non-static construct method that returns\n     * the polymorphic `this` type.\n     */\n    Path.prototype.init = function (segments, offset, length) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n        else if (offset > segments.length) {\n            fail('offset ' + offset + ' out of range ' + segments.length);\n        }\n        if (length === undefined) {\n            length = segments.length - offset;\n        }\n        else if (length > segments.length - offset) {\n            fail('length ' + length + ' out of range ' + (segments.length - offset));\n        }\n        this.segments = segments;\n        this.offset = offset;\n        this.len = length;\n    };\n    /**\n     * Constructs a new instance of Path using the same concrete type as `this`.\n     * We need this instead of using the normal constructor, because polymorphic\n     * `this` doesn't work on static methods.\n     */\n    Path.prototype.construct = function (segments, offset, length) {\n        var path = Object.create(Object.getPrototypeOf(this));\n        path.init(segments, offset, length);\n        return path;\n    };\n    Object.defineProperty(Path.prototype, \"length\", {\n        get: function () {\n            return this.len;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.equals = function (other) {\n        return Path.comparator(this, other) === 0;\n    };\n    Path.prototype.child = function (nameOrPath) {\n        var segments = this.segments.slice(this.offset, this.limit());\n        if (nameOrPath instanceof Path) {\n            nameOrPath.forEach(function (segment) {\n                segments.push(segment);\n            });\n        }\n        else if (typeof nameOrPath === 'string') {\n            segments.push(nameOrPath);\n        }\n        else {\n            fail('Unknown parameter type for Path.child(): ' + nameOrPath);\n        }\n        return this.construct(segments);\n    };\n    /** The index of one past the last segment of the path. */\n    Path.prototype.limit = function () {\n        return this.offset + this.length;\n    };\n    Path.prototype.popFirst = function (size) {\n        size = size === undefined ? 1 : size;\n        assert(this.length >= size, \"Can't call popFirst() with less segments\");\n        return this.construct(this.segments, this.offset + size, this.length - size);\n    };\n    Path.prototype.popLast = function () {\n        assert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n        return this.construct(this.segments, this.offset, this.length - 1);\n    };\n    Path.prototype.firstSegment = function () {\n        assert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n        return this.segments[this.offset];\n    };\n    Path.prototype.lastSegment = function () {\n        assert(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n        return this.segments[this.limit() - 1];\n    };\n    Path.prototype.get = function (index) {\n        assert(index < this.length, 'Index out of range');\n        return this.segments[this.offset + index];\n    };\n    Path.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    Path.prototype.isPrefixOf = function (other) {\n        if (other.length < this.length) {\n            return false;\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this.get(i) !== other.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Path.prototype.forEach = function (fn) {\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\n            fn(this.segments[i]);\n        }\n    };\n    Path.prototype.toArray = function () {\n        return this.segments.slice(this.offset, this.limit());\n    };\n    Path.comparator = function (p1, p2) {\n        var len = Math.min(p1.length, p2.length);\n        for (var i = 0; i < len; i++) {\n            var left = p1.get(i);\n            var right = p2.get(i);\n            if (left < right)\n                return -1;\n            if (left > right)\n                return 1;\n        }\n        if (p1.length < p2.length)\n            return -1;\n        if (p1.length > p2.length)\n            return 1;\n        return 0;\n    };\n    return Path;\n}());\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nvar path_ResourcePath = /** @class */ (function (_super) {\n    path___extends(ResourcePath, _super);\n    function ResourcePath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourcePath.prototype.canonicalString = function () {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join('/');\n    };\n    ResourcePath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Creates a resource path from the given slash-delimited string.\n     */\n    ResourcePath.fromString = function (path) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        if (path.indexOf('//') >= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid path (\" + path + \"). Paths must not contain // in them.\");\n        }\n        // We may still have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });\n        return new ResourcePath(segments);\n    };\n    ResourcePath.EMPTY_PATH = new ResourcePath([]);\n    return ResourcePath;\n}(path_Path));\n\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\nvar path_FieldPath = /** @class */ (function (_super) {\n    path___extends(FieldPath, _super);\n    function FieldPath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n    FieldPath.isValidIdentifier = function (segment) {\n        return identifierRegExp.test(segment);\n    };\n    FieldPath.prototype.canonicalString = function () {\n        return this.toArray()\n            .map(function (str) {\n            str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n            if (!FieldPath.isValidIdentifier(str)) {\n                str = '`' + str + '`';\n            }\n            return str;\n        })\n            .join('.');\n    };\n    FieldPath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Returns true if this field references the key of a document.\n     */\n    FieldPath.prototype.isKeyField = function () {\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n    };\n    /**\n     * The field designating the key of a document.\n     */\n    FieldPath.keyField = function () {\n        return new FieldPath([DOCUMENT_KEY_NAME]);\n    };\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n    FieldPath.fromServerFormat = function (path) {\n        var segments = [];\n        var current = '';\n        var i = 0;\n        var addCurrentSegment = function () {\n            if (current.length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\n                    \"with '.', end with '.', or contain '..'\");\n            }\n            segments.push(current);\n            current = '';\n        };\n        var inBackticks = false;\n        while (i < path.length) {\n            var c = path[i];\n            if (c === '\\\\') {\n                if (i + 1 === path.length) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n                }\n                var next = path[i + 1];\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n                }\n                current += next;\n                i += 2;\n            }\n            else if (c === '`') {\n                inBackticks = !inBackticks;\n                i++;\n            }\n            else if (c === '.' && !inBackticks) {\n                addCurrentSegment();\n                i++;\n            }\n            else {\n                current += c;\n                i++;\n            }\n        }\n        addCurrentSegment();\n        if (inBackticks) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n        }\n        return new FieldPath(segments);\n    };\n    FieldPath.EMPTY_PATH = new FieldPath([]);\n    return FieldPath;\n}(path_Path));\n\n\n//# sourceMappingURL=path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document_key.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar document_key_DocumentKey = /** @class */ (function () {\n    function DocumentKey(path) {\n        this.path = path;\n        assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +\n            path.toArray().join('/'));\n    }\n    DocumentKey.prototype.equals = function (other) {\n        return (other !== null && path_ResourcePath.comparator(this.path, other.path) === 0);\n    };\n    DocumentKey.prototype.toString = function () {\n        return this.path.toString();\n    };\n    DocumentKey.comparator = function (k1, k2) {\n        return path_ResourcePath.comparator(k1.path, k2.path);\n    };\n    DocumentKey.isDocumentKey = function (path) {\n        return path.length % 2 === 0;\n    };\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param path The segments of the path to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromSegments = function (segments) {\n        return new DocumentKey(new path_ResourcePath(segments.slice()));\n    };\n    /**\n     * Creates and returns a new document key using '/' to split the string into\n     * segments.\n     *\n     * @param path The slash-separated path string to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromPathString = function (path) {\n        return new DocumentKey(path_ResourcePath.fromString(path));\n    };\n    DocumentKey.EMPTY = new DocumentKey(new path_ResourcePath([]));\n    return DocumentKey;\n}());\n\n\n//# sourceMappingURL=document_key.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar document_Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.equals = function (other) {\n        return (other instanceof Document &&\n            this.key.equals(other.key) &&\n            this.version.equals(other.version) &&\n            this.data.equals(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return document_key_DocumentKey.comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return fail(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar document_NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.equals = function (other) {\n        return (other && other.version.equals(this.version) && other.key.equals(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return document_key_DocumentKey.comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\n\n\n//# sourceMappingURL=document.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/sorted_map.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar sorted_map_SortedMap = /** @class */ (function () {\n    function SortedMap(comparator, root) {\n        this.comparator = comparator;\n        this.root = root ? root : sorted_map_LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator, this.root\n            .insert(key, value, this.comparator)\n            .copy(null, null, sorted_map_LLRBNode.BLACK, null, null));\n    };\n    // Returns a copy of the map, with the specified key removed.\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator, this.root\n            .remove(key, this.comparator)\n            .copy(null, null, sorted_map_LLRBNode.BLACK, null, null));\n    };\n    // Returns the value of the node with the given key, or null.\n    SortedMap.prototype.get = function (key) {\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    // Returns the key of the item *before* the specified key, or null if key is\n    // the first item.\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var node = this.root;\n        var rightParent = null;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty())\n                        node = node.right;\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw fail('Attempted to find predecessor key for a nonexistent key.' +\n            '  What gives?');\n    };\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    SortedMap.prototype.indexOf = function (key) {\n        // Number of nodes that were pruned when descending right\n        var prunedNodes = 0;\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return prunedNodes + node.left.size;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else {\n                // Count all nodes left of the node plus the node itself\n                prunedNodes += node.left.size + 1;\n                node = node.right;\n            }\n        }\n        // Node not found\n        return -1;\n    };\n    SortedMap.prototype.isEmpty = function () {\n        return this.root.isEmpty();\n    };\n    Object.defineProperty(SortedMap.prototype, \"size\", {\n        // Returns the total number of nodes in the map.\n        get: function () {\n            return this.root.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the minimum key in the map.\n    SortedMap.prototype.minKey = function () {\n        return this.root.minKey();\n    };\n    // Returns the maximum key in the map.\n    SortedMap.prototype.maxKey = function () {\n        return this.root.maxKey();\n    };\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root.inorderTraversal(action);\n    };\n    SortedMap.prototype.forEach = function (fn) {\n        this.inorderTraversal(function (k, v) {\n            fn(k, v);\n            return false;\n        });\n    };\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root.reverseTraversal(action);\n    };\n    SortedMap.prototype.getIterator = function (resultGenerator) {\n        return new sorted_map_SortedMapIterator(this.root, null, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n        return new sorted_map_SortedMapIterator(this.root, key, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n        return new sorted_map_SortedMapIterator(this.root, null, this.comparator, true, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n        return new sorted_map_SortedMapIterator(this.root, key, this.comparator, true, resultGenerator);\n    };\n    return SortedMap;\n}()); // end SortedMap\n\n// An iterator over an LLRBNode.\nvar sorted_map_SortedMapIterator = /** @class */ (function () {\n    function SortedMapIterator(node, startKey, comparator, isReverse, resultGenerator) {\n        this.resultGenerator = resultGenerator || null;\n        this.isReverse = isReverse;\n        this.nodeStack = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move\n                // to the next one\n                this.nodeStack.push(node);\n                if (this.isReverse) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');\n        var node = this.nodeStack.pop();\n        var result;\n        if (this.resultGenerator)\n            result = this.resultGenerator(node.key, node.value);\n        else\n            result = { key: node.key, value: node.value };\n        if (this.isReverse) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack.length === 0)\n            return null;\n        var node = this.nodeStack[this.nodeStack.length - 1];\n        if (this.resultGenerator) {\n            return this.resultGenerator(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    };\n    return SortedMapIterator;\n}()); // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nvar sorted_map_LLRBNode = /** @class */ (function () {\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : LLRBNode.EMPTY;\n        this.right = right != null ? right : LLRBNode.EMPTY;\n        this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    // Returns the minimum node in the tree.\n    LLRBNode.prototype.min = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min();\n        }\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.minKey = function () {\n        return this.min().key;\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    // Returns new tree, with the key/value added.\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var n = this;\n        var cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.removeMin = function () {\n        if (this.left.isEmpty()) {\n            return LLRBNode.EMPTY;\n        }\n        var n = this;\n        if (!n.left.isRed() && !n.left.left.isRed())\n            n = n.moveRedLeft();\n        n = n.copy(null, null, null, n.left.removeMin(), null);\n        return n.fixUp();\n    };\n    // Returns new tree, with the specified item removed.\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var smallest;\n        var n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n                n = n.moveRedLeft();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed())\n                n = n.rotateRight();\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n                n = n.moveRedRight();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return LLRBNode.EMPTY;\n                }\n                else {\n                    smallest = n.right.min();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.isRed = function () {\n        return this.color;\n    };\n    // Returns new tree after performing any needed rotations.\n    LLRBNode.prototype.fixUp = function () {\n        var n = this;\n        if (n.right.isRed() && !n.left.isRed())\n            n = n.rotateLeft();\n        if (n.left.isRed() && n.left.left.isRed())\n            n = n.rotateRight();\n        if (n.left.isRed() && n.right.isRed())\n            n = n.colorFlip();\n        return n;\n    };\n    LLRBNode.prototype.moveRedLeft = function () {\n        var n = this.colorFlip();\n        if (n.right.left.isRed()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight());\n            n = n.rotateLeft();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.moveRedRight = function () {\n        var n = this.colorFlip();\n        if (n.left.left.isRed()) {\n            n = n.rotateRight();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.rotateLeft = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    LLRBNode.prototype.rotateRight = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    LLRBNode.prototype.colorFlip = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    // For testing.\n    LLRBNode.prototype.checkMaxDepth = function () {\n        var blackDepth = this.check();\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    LLRBNode.prototype.check = function () {\n        if (this.isRed() && this.left.isRed()) {\n            throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed()) {\n            throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        var blackDepth = this.left.check();\n        if (blackDepth !== this.right.check()) {\n            throw fail('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed() ? 0 : 1);\n        }\n    };\n    LLRBNode.EMPTY = null;\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}()); // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n        this.size = 0;\n    }\n    // Returns a copy of the current node.\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    // Returns a copy of the tree, with the specified key/value added.\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new sorted_map_LLRBNode(key, value);\n    };\n    // Returns a copy of the tree, with the specified key removed.\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.isRed = function () {\n        return false;\n    };\n    // For testing.\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.check = function () {\n        return 0;\n    };\n    return LLRBEmptyNode;\n}()); // end LLRBEmptyNode\n\nsorted_map_LLRBNode.EMPTY = new LLRBEmptyNode();\n\n//# sourceMappingURL=sorted_map.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/field_value.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar field_value___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\nvar TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder || (TypeOrder = {}));\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar field_value_FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\n\nvar NullValue = /** @class */ (function (_super) {\n    field_value___extends(NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function () {\n        return null;\n    };\n    NullValue.prototype.equals = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(field_value_FieldValue));\n\nvar field_value_BooleanValue = /** @class */ (function (_super) {\n    field_value___extends(BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.equals = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return primitiveComparator(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(field_value_FieldValue));\n\n/** Base class for IntegerValue and DoubleValue. */\nvar NumberValue = /** @class */ (function (_super) {\n    field_value___extends(NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(field_value_FieldValue));\n\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar IntegerValue = /** @class */ (function (_super) {\n    field_value___extends(IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(NumberValue));\n\nvar DoubleValue = /** @class */ (function (_super) {\n    field_value___extends(DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(NumberValue));\n\n// TODO(b/37267885): Add truncation support\nvar field_value_StringValue = /** @class */ (function (_super) {\n    field_value___extends(StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    StringValue.prototype.equals = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return primitiveComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(field_value_FieldValue));\n\nvar TimestampValue = /** @class */ (function (_super) {\n    field_value___extends(TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function () {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.equals = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.equals(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(field_value_FieldValue));\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar ServerTimestampValue = /** @class */ (function (_super) {\n    field_value___extends(ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function () {\n        return null;\n    };\n    ServerTimestampValue.prototype.equals = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.equals(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(field_value_FieldValue));\n\nvar BlobValue = /** @class */ (function (_super) {\n    field_value___extends(BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BlobValue.prototype.equals = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(field_value_FieldValue));\n\nvar field_value_RefValue = /** @class */ (function (_super) {\n    field_value___extends(RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function () {\n        return this.key;\n    };\n    RefValue.prototype.equals = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.equals(other.key) && this.databaseId.equals(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : document_key_DocumentKey.comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(field_value_FieldValue));\n\nvar GeoPointValue = /** @class */ (function (_super) {\n    field_value___extends(GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.equals = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(field_value_FieldValue));\n\nvar field_value_ObjectValue = /** @class */ (function (_super) {\n    field_value___extends(ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function () {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value();\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.equals = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = primitiveComparator(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return primitiveComparator(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        assert(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new sorted_map_SortedMap(primitiveComparator));\n    return ObjectValue;\n}(field_value_FieldValue));\n\nvar field_value_ArrayValue = /** @class */ (function (_super) {\n    field_value___extends(ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function () {\n        return this.internalValue.map(function (v) { return v.value(); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.equals = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].equals(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return primitiveComparator(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(field_value_FieldValue));\n\n\n//# sourceMappingURL=field_value.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/types.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nvar MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nvar MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nvar isInteger = NumberAsAny.isInteger ||\n    (function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    });\n/**\n * Returns whether a variable is either undefined or null.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nfunction isSafeInteger(value) {\n    return (isInteger(value) &&\n        value <= MAX_SAFE_INTEGER &&\n        value >= MIN_SAFE_INTEGER);\n}\n/**\n * Safely checks if the number is NaN.\n */\nfunction safeIsNaN(value) {\n    if (NumberAsAny.IsNaN) {\n        return NumberAsAny.IsNaN(value);\n    }\n    else {\n        return typeof value === 'number' && isNaN(value);\n    }\n}\n\n//# sourceMappingURL=types.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/query.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar query_Query = /** @class */ (function () {\n    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\n        if (filters === void 0) { filters = []; }\n        if (limit === void 0) { limit = null; }\n        if (startAt === void 0) { startAt = null; }\n        if (endAt === void 0) { endAt = null; }\n        this.path = path;\n        this.explicitOrderBy = explicitOrderBy;\n        this.filters = filters;\n        this.limit = limit;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.memoizedCanonicalId = null;\n        this.memoizedOrderBy = null;\n        if (this.startAt) {\n            this.assertValidBound(this.startAt);\n        }\n        if (this.endAt) {\n            this.assertValidBound(this.endAt);\n        }\n    }\n    Query.atPath = function (path) {\n        return new Query(path);\n    };\n    Object.defineProperty(Query.prototype, \"orderBy\", {\n        get: function () {\n            if (this.memoizedOrderBy === null) {\n                var inequalityField = this.getInequalityFilterField();\n                var firstOrderByField = this.getFirstOrderByField();\n                if (inequalityField !== null && firstOrderByField === null) {\n                    // In order to implicitly add key ordering, we must also add the\n                    // inequality filter field for it to be a valid query.\n                    // Note that the default inequality field and key ordering is ascending.\n                    if (inequalityField.isKeyField()) {\n                        this.memoizedOrderBy = [KEY_ORDERING_ASC];\n                    }\n                    else {\n                        this.memoizedOrderBy = [\n                            new query_OrderBy(inequalityField),\n                            KEY_ORDERING_ASC\n                        ];\n                    }\n                }\n                else {\n                    assert(inequalityField === null ||\n                        (firstOrderByField !== null &&\n                            inequalityField.equals(firstOrderByField)), 'First orderBy should match inequality field.');\n                    this.memoizedOrderBy = [];\n                    var foundKeyOrdering = false;\n                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n                        var orderBy = _a[_i];\n                        this.memoizedOrderBy.push(orderBy);\n                        if (orderBy.field.isKeyField()) {\n                            foundKeyOrdering = true;\n                        }\n                    }\n                    if (!foundKeyOrdering) {\n                        // The order of the implicit key ordering always matches the last\n                        // explicit order by\n                        var lastDirection = this.explicitOrderBy.length > 0\n                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n                            : Direction.ASCENDING;\n                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING\n                            ? KEY_ORDERING_ASC\n                            : KEY_ORDERING_DESC);\n                    }\n                }\n            }\n            return this.memoizedOrderBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Query.prototype.addFilter = function (filter) {\n        assert(this.getInequalityFilterField() == null ||\n            !(filter instanceof query_RelationFilter) ||\n            !filter.isInequality() ||\n            filter.field.equals(this.getInequalityFilterField()), 'Query must only have one inequality field.');\n        assert(!document_key_DocumentKey.isDocumentKey(this.path), 'No filtering allowed for document query');\n        var newFilters = this.filters.concat([filter]);\n        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.addOrderBy = function (orderBy) {\n        assert(!document_key_DocumentKey.isDocumentKey(this.path), 'No ordering allowed for document query');\n        assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var newOrderBy = this.explicitOrderBy.concat([orderBy]);\n        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withLimit = function (limit) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withStartAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);\n    };\n    Query.prototype.withEndAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);\n    };\n    // TODO(b/29183165): This is used to get a unique string from a query to, for\n    // example, use as a dictionary key, but the implementation is subject to\n    // collisions. Make it collision-free.\n    Query.prototype.canonicalId = function () {\n        if (this.memoizedCanonicalId === null) {\n            var canonicalId = this.path.canonicalString();\n            canonicalId += '|f:';\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                canonicalId += filter.canonicalId();\n                canonicalId += ',';\n            }\n            canonicalId += '|ob:';\n            // TODO(dimond): make this collision resistant\n            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {\n                var orderBy = _c[_b];\n                canonicalId += orderBy.canonicalId();\n                canonicalId += ',';\n            }\n            if (!isNullOrUndefined(this.limit)) {\n                canonicalId += '|l:';\n                canonicalId += this.limit;\n            }\n            if (this.startAt) {\n                canonicalId += '|lb:';\n                canonicalId += this.startAt.canonicalId();\n            }\n            if (this.endAt) {\n                canonicalId += '|ub:';\n                canonicalId += this.endAt.canonicalId();\n            }\n            this.memoizedCanonicalId = canonicalId;\n        }\n        return this.memoizedCanonicalId;\n    };\n    Query.prototype.toString = function () {\n        var str = 'Query(' + this.path.canonicalString();\n        if (this.filters.length > 0) {\n            str += \", filters: [\" + this.filters.join(', ') + \"]\";\n        }\n        if (!isNullOrUndefined(this.limit)) {\n            str += ', limit: ' + this.limit;\n        }\n        if (this.explicitOrderBy.length > 0) {\n            str += \", orderBy: [\" + this.explicitOrderBy.join(', ') + \"]\";\n        }\n        if (this.startAt) {\n            str += ', startAt: ' + this.startAt.canonicalId();\n        }\n        if (this.endAt) {\n            str += ', endAt: ' + this.endAt.canonicalId();\n        }\n        return str + ')';\n    };\n    Query.prototype.equals = function (other) {\n        if (this.limit !== other.limit) {\n            return false;\n        }\n        if (this.orderBy.length !== other.orderBy.length) {\n            return false;\n        }\n        for (var i = 0; i < this.orderBy.length; i++) {\n            if (!this.orderBy[i].equals(other.orderBy[i])) {\n                return false;\n            }\n        }\n        if (this.filters.length !== other.filters.length) {\n            return false;\n        }\n        for (var i = 0; i < this.filters.length; i++) {\n            if (!this.filters[i].equals(other.filters[i])) {\n                return false;\n            }\n        }\n        if (!this.path.equals(other.path)) {\n            return false;\n        }\n        if (this.startAt !== null\n            ? !this.startAt.equals(other.startAt)\n            : other.startAt !== null) {\n            return false;\n        }\n        return this.endAt !== null\n            ? this.endAt.equals(other.endAt)\n            : other.endAt === null;\n    };\n    Query.prototype.docComparator = function (d1, d2) {\n        var comparedOnKeyField = false;\n        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            var comp = orderBy.compare(d1, d2);\n            if (comp !== 0)\n                return comp;\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n        }\n        // Assert that we actually compared by key\n        assert(comparedOnKeyField, \"orderBy used that doesn't compare on key field\");\n        return 0;\n    };\n    Query.prototype.matches = function (doc) {\n        return (this.matchesAncestor(doc) &&\n            this.matchesOrderBy(doc) &&\n            this.matchesFilters(doc) &&\n            this.matchesBounds(doc));\n    };\n    Query.prototype.hasLimit = function () {\n        return !isNullOrUndefined(this.limit);\n    };\n    Query.prototype.getFirstOrderByField = function () {\n        return this.explicitOrderBy.length > 0\n            ? this.explicitOrderBy[0].field\n            : null;\n    };\n    Query.prototype.getInequalityFilterField = function () {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (filter instanceof query_RelationFilter && filter.isInequality()) {\n                return filter.field;\n            }\n        }\n        return null;\n    };\n    Query.prototype.isDocumentQuery = function () {\n        return document_key_DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;\n    };\n    Query.prototype.matchesAncestor = function (doc) {\n        var docPath = doc.key.path;\n        if (document_key_DocumentKey.isDocumentKey(this.path)) {\n            // exact match for document queries\n            return this.path.equals(docPath);\n        }\n        else {\n            // shallow ancestor queries by default\n            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);\n        }\n    };\n    /**\n     * A document must have a value for every ordering clause in order to show up\n     * in the results.\n     */\n    Query.prototype.matchesOrderBy = function (doc) {\n        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            // order by key always matches\n            if (!orderBy.field.isKeyField() &&\n                doc.field(orderBy.field) === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Query.prototype.matchesFilters = function (doc) {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (!filter.matches(doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Makes sure a document is within the bounds, if provided.\n     */\n    Query.prototype.matchesBounds = function (doc) {\n        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        return true;\n    };\n    Query.prototype.assertValidBound = function (bound) {\n        assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');\n    };\n    return Query;\n}());\n\nvar query_RelationOp = /** @class */ (function () {\n    function RelationOp(name) {\n        this.name = name;\n    }\n    RelationOp.fromString = function (op) {\n        switch (op) {\n            case '<':\n                return RelationOp.LESS_THAN;\n            case '<=':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case '==':\n                return RelationOp.EQUAL;\n            case '>=':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case '>':\n                return RelationOp.GREATER_THAN;\n            default:\n                return fail('Unknown relation: ' + op);\n        }\n    };\n    RelationOp.prototype.toString = function () {\n        return this.name;\n    };\n    RelationOp.prototype.equals = function (other) {\n        return this.name === other.name;\n    };\n    RelationOp.LESS_THAN = new RelationOp('<');\n    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');\n    RelationOp.EQUAL = new RelationOp('==');\n    RelationOp.GREATER_THAN = new RelationOp('>');\n    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n    return RelationOp;\n}());\n\nvar query_RelationFilter = /** @class */ (function () {\n    function RelationFilter(field, op, value) {\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    RelationFilter.prototype.matches = function (doc) {\n        if (this.field.isKeyField()) {\n            assert(this.value instanceof field_value_RefValue, 'Comparing on key, but filter value not a RefValue');\n            var refValue = this.value;\n            var comparison = document_key_DocumentKey.comparator(doc.key, refValue.key);\n            return this.matchesComparison(comparison);\n        }\n        else {\n            var val = doc.field(this.field);\n            return val !== undefined && this.matchesValue(val);\n        }\n    };\n    RelationFilter.prototype.matchesValue = function (value) {\n        // Only compare types with matching backend order (such as double and int).\n        if (this.value.typeOrder !== value.typeOrder) {\n            return false;\n        }\n        return this.matchesComparison(value.compareTo(this.value));\n    };\n    RelationFilter.prototype.matchesComparison = function (comparison) {\n        switch (this.op) {\n            case query_RelationOp.LESS_THAN:\n                return comparison < 0;\n            case query_RelationOp.LESS_THAN_OR_EQUAL:\n                return comparison <= 0;\n            case query_RelationOp.EQUAL:\n                return comparison === 0;\n            case query_RelationOp.GREATER_THAN:\n                return comparison > 0;\n            case query_RelationOp.GREATER_THAN_OR_EQUAL:\n                return comparison >= 0;\n            default:\n                return fail('Unknown relation op' + this.op);\n        }\n    };\n    RelationFilter.prototype.isInequality = function () {\n        return this.op !== query_RelationOp.EQUAL;\n    };\n    RelationFilter.prototype.canonicalId = function () {\n        // TODO(b/29183165): Technically, this won't be unique if two values have\n        // the same description, such as the int 3 and the string \"3\". So we should\n        // add the types in here somehow, too.\n        return (this.field.canonicalString() + this.op.toString() + this.value.toString());\n    };\n    RelationFilter.prototype.equals = function (other) {\n        if (other instanceof RelationFilter) {\n            return (this.op.equals(other.op) &&\n                this.field.equals(other.field) &&\n                this.value.equals(other.value));\n        }\n        else {\n            return false;\n        }\n    };\n    RelationFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" \" + this.op + \" \" + this.value.value();\n    };\n    return RelationFilter;\n}());\n\n/**\n * Filter that matches 'null' values.\n */\nvar NullFilter = /** @class */ (function () {\n    function NullFilter(field) {\n        this.field = field;\n    }\n    NullFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field);\n        return val !== undefined && val.value() === null;\n    };\n    NullFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS null';\n    };\n    NullFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS null\";\n    };\n    NullFilter.prototype.equals = function (other) {\n        if (other instanceof NullFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NullFilter;\n}());\n\n/**\n * Filter that matches 'NaN' values.\n */\nvar NanFilter = /** @class */ (function () {\n    function NanFilter(field) {\n        this.field = field;\n    }\n    NanFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field).value();\n        return typeof val === 'number' && isNaN(val);\n    };\n    NanFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS NaN';\n    };\n    NanFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS NaN\";\n    };\n    NanFilter.prototype.equals = function (other) {\n        if (other instanceof NanFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NanFilter;\n}());\n\n/**\n * Creates a filter based on the provided arguments.\n */\nfunction fieldFilter(field, op, value) {\n    if (value.equals(NullValue.INSTANCE)) {\n        if (op !== query_RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on null.');\n        }\n        return new NullFilter(field);\n    }\n    else if (value.equals(DoubleValue.NAN)) {\n        if (op !== query_RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on NaN.');\n        }\n        return new NanFilter(field);\n    }\n    else {\n        return new query_RelationFilter(field, op, value);\n    }\n}\n/**\n * The direction of sorting in an order by.\n */\nvar Direction = /** @class */ (function () {\n    function Direction(name) {\n        this.name = name;\n    }\n    Direction.prototype.toString = function () {\n        return this.name;\n    };\n    Direction.ASCENDING = new Direction('asc');\n    Direction.DESCENDING = new Direction('desc');\n    return Direction;\n}());\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nvar query_Bound = /** @class */ (function () {\n    function Bound(position, before) {\n        this.position = position;\n        this.before = before;\n    }\n    Bound.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        var canonicalId = this.before ? 'b:' : 'a:';\n        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {\n            var component = _a[_i];\n            canonicalId += component.toString();\n        }\n        return canonicalId;\n    };\n    /**\n     * Returns true if a document sorts before a bound using the provided sort\n     * order.\n     */\n    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {\n        assert(this.position.length <= orderBy.length, \"Bound has more components than query's orderBy\");\n        var comparison = 0;\n        for (var i = 0; i < this.position.length; i++) {\n            var orderByComponent = orderBy[i];\n            var component = this.position[i];\n            if (orderByComponent.field.isKeyField()) {\n                assert(component instanceof field_value_RefValue, 'Bound has a non-key value where the key path is being used.');\n                comparison = document_key_DocumentKey.comparator(component.key, doc.key);\n            }\n            else {\n                var docValue = doc.field(orderByComponent.field);\n                assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');\n                comparison = component.compareTo(docValue);\n            }\n            if (orderByComponent.dir === Direction.DESCENDING) {\n                comparison = comparison * -1;\n            }\n            if (comparison !== 0) {\n                break;\n            }\n        }\n        return this.before ? comparison <= 0 : comparison < 0;\n    };\n    Bound.prototype.equals = function (other) {\n        if (other === null) {\n            return false;\n        }\n        if (this.before !== other.before ||\n            this.position.length !== other.position.length) {\n            return false;\n        }\n        for (var i = 0; i < this.position.length; i++) {\n            var thisPosition = this.position[i];\n            var otherPosition = other.position[i];\n            return thisPosition.equals(otherPosition);\n        }\n        return true;\n    };\n    return Bound;\n}());\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar query_OrderBy = /** @class */ (function () {\n    function OrderBy(field, dir) {\n        this.field = field;\n        if (dir === undefined) {\n            dir = Direction.ASCENDING;\n        }\n        this.dir = dir;\n        this.isKeyOrderBy = field.isKeyField();\n    }\n    OrderBy.prototype.compare = function (d1, d2) {\n        var comparison = this.isKeyOrderBy\n            ? document_Document.compareByKey(d1, d2)\n            : document_Document.compareByField(this.field, d1, d2);\n        switch (this.dir) {\n            case Direction.ASCENDING:\n                return comparison;\n            case Direction.DESCENDING:\n                return -1 * comparison;\n            default:\n                return fail('Unknown direction: ' + this.dir);\n        }\n    };\n    OrderBy.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        return this.field.canonicalString() + this.dir.toString();\n    };\n    OrderBy.prototype.toString = function () {\n        return this.field.canonicalString() + \" (\" + this.dir + \")\";\n    };\n    OrderBy.prototype.equals = function (other) {\n        return this.dir === other.dir && this.field.equals(other.field);\n    };\n    return OrderBy;\n}());\n\nvar KEY_ORDERING_ASC = new query_OrderBy(path_FieldPath.keyField(), Direction.ASCENDING);\nvar KEY_ORDERING_DESC = new query_OrderBy(path_FieldPath.keyField(), Direction.DESCENDING);\n\n//# sourceMappingURL=query.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/timestamp.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nvar timestamp_Timestamp = /** @class */ (function () {\n    function Timestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n        assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n        assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n        assert(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\n        // This will break in the year 10,000.\n        assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n    }\n    Timestamp.now = function () {\n        return Timestamp.fromEpochMilliseconds(Date.now());\n    };\n    Timestamp.fromDate = function (date) {\n        return Timestamp.fromEpochMilliseconds(date.getTime());\n    };\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.fromISOString = function (utc) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        var nanos = 0;\n        var fraction = isoRegExp.exec(utc);\n        assert(!!fraction, 'invalid timestamp: ' + utc);\n        if (fraction[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            var nanoStr = fraction[1];\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\n            nanos = parseInt(nanoStr, 10);\n        }\n        // Parse the date to get the seconds.\n        var date = new Date(utc);\n        var seconds = Math.floor(date.getTime() / 1000);\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.prototype.toDate = function () {\n        return new Date(this.toEpochMilliseconds());\n    };\n    Timestamp.prototype.toEpochMilliseconds = function () {\n        return this.seconds * 1000 + this.nanos / 1e6;\n    };\n    Timestamp.prototype.compareTo = function (other) {\n        if (this.seconds === other.seconds) {\n            return primitiveComparator(this.nanos, other.nanos);\n        }\n        return primitiveComparator(this.seconds, other.seconds);\n    };\n    Timestamp.prototype.equals = function (other) {\n        return other.seconds === this.seconds && other.nanos === this.nanos;\n    };\n    Timestamp.prototype.toString = function () {\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n    };\n    return Timestamp;\n}());\n\n\n//# sourceMappingURL=timestamp.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/snapshot_version.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar snapshot_version_SnapshotVersion = /** @class */ (function () {\n    function SnapshotVersion(timestamp) {\n        this.timestamp = timestamp;\n    }\n    // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n    // delete this constructor and use a timestamp-backed version everywhere.\n    SnapshotVersion.fromMicroseconds = function (value) {\n        var seconds = Math.floor(value / 1e6);\n        var nanos = (value % 1e6) * 1e3;\n        return new SnapshotVersion(new timestamp_Timestamp(seconds, nanos));\n    };\n    SnapshotVersion.fromTimestamp = function (value) {\n        return new SnapshotVersion(value);\n    };\n    SnapshotVersion.forDeletedDoc = function () {\n        return SnapshotVersion.MIN;\n    };\n    SnapshotVersion.prototype.compareTo = function (other) {\n        return this.timestamp.compareTo(other.timestamp);\n    };\n    SnapshotVersion.prototype.equals = function (other) {\n        return this.timestamp.equals(other.timestamp);\n    };\n    /** Returns a number representation of the version for use in spec tests. */\n    SnapshotVersion.prototype.toMicroseconds = function () {\n        // Convert to microseconds.\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n    };\n    SnapshotVersion.prototype.toString = function () {\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n    };\n    SnapshotVersion.prototype.toTimestamp = function () {\n        return this.timestamp;\n    };\n    SnapshotVersion.MIN = new SnapshotVersion(new timestamp_Timestamp(0, 0));\n    return SnapshotVersion;\n}());\n\n\n//# sourceMappingURL=snapshot_version.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/query_data.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** An enumeration of the different purposes we have for queries. */\nvar QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar query_data_QueryData = /** @class */ (function () {\n    function QueryData(\n        /** The query being listened to. */\n        query, \n        /**\n         * The target ID to which the query corresponds; Assigned by the\n         * LocalStore for user listens and by the SyncEngine for limbo watches.\n         */\n        targetId, \n        /** The purpose of the query. */\n        purpose, \n        /** The latest snapshot version seen for this target. */\n        snapshotVersion, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = snapshot_version_SnapshotVersion.MIN; }\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.equals = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.equals(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.equals(other.query));\n    };\n    return QueryData;\n}());\n\n\n//# sourceMappingURL=query_data.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/mutation.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar mutation___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar mutation_FieldMask = /** @class */ (function () {\n    function FieldMask(fields) {\n        this.fields = fields;\n        // TODO(dimond): validation of FieldMask\n    }\n    FieldMask.prototype.equals = function (other) {\n        return arrayEquals(this.fields, other.fields);\n    };\n    return FieldMask;\n}());\n\n/** Transforms a value into a server-generated timestamp. */\nvar ServerTimestampTransform = /** @class */ (function () {\n    function ServerTimestampTransform() {\n    }\n    ServerTimestampTransform.prototype.equals = function (other) {\n        return other instanceof ServerTimestampTransform;\n    };\n    ServerTimestampTransform.instance = new ServerTimestampTransform();\n    return ServerTimestampTransform;\n}());\n\n/** A field path and the TransformOperation to perform upon it. */\nvar FieldTransform = /** @class */ (function () {\n    function FieldTransform(field, transform) {\n        this.field = field;\n        this.transform = transform;\n    }\n    FieldTransform.prototype.equals = function (other) {\n        return (this.field.equals(other.field) && this.transform.equals(other.transform));\n    };\n    return FieldTransform;\n}());\n\n/** The result of successfully applying a mutation to the backend. */\nvar MutationResult = /** @class */ (function () {\n    function MutationResult(\n        /**\n         * The version at which the mutation was committed or null for a delete.\n         */\n        version, \n        /**\n         * The resulting fields returned from the backend after a\n         * TransformMutation has been committed. Contains one FieldValue for each\n         * FieldTransform that was in the mutation.\n         *\n         * Will be null if the mutation was not a TransformMutation.\n         */\n        transformResults) {\n        this.version = version;\n        this.transformResults = transformResults;\n    }\n    return MutationResult;\n}());\n\nvar MutationType;\n(function (MutationType) {\n    MutationType[MutationType[\"Set\"] = 0] = \"Set\";\n    MutationType[MutationType[\"Patch\"] = 1] = \"Patch\";\n    MutationType[MutationType[\"Transform\"] = 2] = \"Transform\";\n    MutationType[MutationType[\"Delete\"] = 3] = \"Delete\";\n})(MutationType || (MutationType = {}));\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar mutation_Precondition = /** @class */ (function () {\n    function Precondition(updateTime, exists) {\n        this.updateTime = updateTime;\n        this.exists = exists;\n        assert(updateTime === undefined || exists === undefined, 'Precondition can specify \"exists\" or \"updateTime\" but not both');\n    }\n    /** Creates a new Precondition with an exists flag. */\n    Precondition.exists = function (exists) {\n        return new Precondition(undefined, exists);\n    };\n    /** Creates a new Precondition based on a version a document exists at. */\n    Precondition.updateTime = function (version) {\n        return new Precondition(version);\n    };\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\n        /** Returns whether this Precondition is empty. */\n        get: function () {\n            return this.updateTime === undefined && this.exists === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns true if the preconditions is valid for the given document\n     * (or null if no document is available).\n     */\n    Precondition.prototype.isValidFor = function (maybeDoc) {\n        if (this.updateTime !== undefined) {\n            return (maybeDoc instanceof document_Document && maybeDoc.version.equals(this.updateTime));\n        }\n        else if (this.exists !== undefined) {\n            if (this.exists) {\n                return maybeDoc instanceof document_Document;\n            }\n            else {\n                return maybeDoc === null || maybeDoc instanceof document_NoDocument;\n            }\n        }\n        else {\n            assert(this.isNone, 'Precondition should be empty');\n            return true;\n        }\n    };\n    Precondition.prototype.equals = function (other) {\n        return (equals(this.updateTime, other.updateTime) &&\n            this.exists === other.exists);\n    };\n    Precondition.NONE = new Precondition();\n    return Precondition;\n}());\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also it version.\n * In the case of Set, Patch, and Transform mutations we preserve the existing\n * version. In the case of Delete mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nvar mutation_Mutation = /** @class */ (function () {\n    function Mutation() {\n    }\n    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {\n        if (maybeDoc != null) {\n            assert(maybeDoc.key.equals(this.key), 'Can only apply a mutation to a document with the same key');\n        }\n    };\n    /**\n     * Returns the version from the given document for use as the result of a\n     * mutation. Mutations are defined to return the version of the base document\n     * only if it is an existing document. Deleted and unknown documents have a\n     * post-mutation version of SnapshotVersion.MIN.\n     */\n    Mutation.getPostMutationVersion = function (maybeDoc) {\n        if (maybeDoc instanceof document_Document) {\n            return maybeDoc.version;\n        }\n        else {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n    };\n    return Mutation;\n}());\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar mutation_SetMutation = /** @class */ (function (_super) {\n    mutation___extends(SetMutation, _super);\n    function SetMutation(key, value, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.value = value;\n        _this.precondition = precondition;\n        _this.type = MutationType.Set;\n        return _this;\n    }\n    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        return new document_Document(this.key, version, this.value, {\n            hasLocalMutations: false\n        });\n    };\n    SetMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        return new document_Document(this.key, version, this.value, {\n            hasLocalMutations: true\n        });\n    };\n    SetMutation.prototype.equals = function (other) {\n        return (other instanceof SetMutation &&\n            this.key.equals(other.key) &&\n            this.value.equals(other.value) &&\n            this.precondition.equals(other.precondition));\n    };\n    return SetMutation;\n}(mutation_Mutation));\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar mutation_PatchMutation = /** @class */ (function (_super) {\n    mutation___extends(PatchMutation, _super);\n    function PatchMutation(key, data, fieldMask, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.data = data;\n        _this.fieldMask = fieldMask;\n        _this.precondition = precondition;\n        _this.type = MutationType.Patch;\n        return _this;\n    }\n    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new document_Document(this.key, version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    PatchMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = mutation_Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new document_Document(this.key, version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    PatchMutation.prototype.equals = function (other) {\n        return (other instanceof PatchMutation &&\n            this.key.equals(other.key) &&\n            this.fieldMask.equals(other.fieldMask) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Patches the data of document if available or creates a new document. Note\n     * that this does not check whether or not the precondition of this patch\n     * holds.\n     */\n    PatchMutation.prototype.patchDocument = function (maybeDoc) {\n        var data;\n        if (maybeDoc instanceof document_Document) {\n            data = maybeDoc.data;\n        }\n        else {\n            data = field_value_ObjectValue.EMPTY;\n        }\n        return this.patchObject(data);\n    };\n    PatchMutation.prototype.patchObject = function (data) {\n        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {\n            var fieldPath = _a[_i];\n            var newValue = this.data.field(fieldPath);\n            if (newValue !== undefined) {\n                data = data.set(fieldPath, newValue);\n            }\n            else {\n                data = data.delete(fieldPath);\n            }\n        }\n        return data;\n    };\n    return PatchMutation;\n}(mutation_Mutation));\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nvar mutation_TransformMutation = /** @class */ (function (_super) {\n    mutation___extends(TransformMutation, _super);\n    function TransformMutation(key, fieldTransforms) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.fieldTransforms = fieldTransforms;\n        _this.type = MutationType.Transform;\n        // NOTE: We set a precondition of exists: true as a safety-check, since we\n        // always combine TransformMutations with a SetMutation or PatchMutation which\n        // (if successful) should end up with an existing document.\n        _this.precondition = mutation_Precondition.exists(true);\n        return _this;\n    }\n    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');\n        var transformResults = mutationResult.transformResults;\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new document_Document(this.key, doc.version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    TransformMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var transformResults = this.localTransformResults(localWriteTime);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new document_Document(this.key, doc.version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    TransformMutation.prototype.equals = function (other) {\n        return (other instanceof TransformMutation &&\n            this.key.equals(other.key) &&\n            arrayEquals(this.fieldTransforms, other.fieldTransforms) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Asserts that the given MaybeDocument is actually a Document and verifies\n     * that it matches the key for this mutation. Since we only support\n     * transformations with precondition exists this method is guaranteed to be\n     * safe.\n     */\n    TransformMutation.prototype.requireDocument = function (maybeDoc) {\n        assert(maybeDoc instanceof document_Document, 'Unknown MaybeDocument type ' + maybeDoc);\n        var doc = maybeDoc;\n        assert(doc.key.equals(this.key), 'Can only transform a document with the same key');\n        return doc;\n    };\n    /**\n     * Creates a list of \"transform results\" (a transform result is a field value\n     * representing the result of applying a transform) for use when applying a\n     * TransformMutation locally.\n     *\n     * @param localWriteTime The local time of the transform mutation (used to\n     *     generate ServerTimestampValues).\n     * @return The transform results list.\n     */\n    TransformMutation.prototype.localTransformResults = function (localWriteTime) {\n        var transformResults = [];\n        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {\n            var fieldTransform = _a[_i];\n            var transform = fieldTransform.transform;\n            if (transform instanceof ServerTimestampTransform) {\n                transformResults.push(new ServerTimestampValue(localWriteTime));\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return transformResults;\n    };\n    TransformMutation.prototype.transformObject = function (data, transformResults) {\n        assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');\n        for (var i = 0; i < this.fieldTransforms.length; i++) {\n            var fieldTransform = this.fieldTransforms[i];\n            var transform = fieldTransform.transform;\n            var fieldPath = fieldTransform.field;\n            if (transform instanceof ServerTimestampTransform) {\n                data = data.set(fieldPath, transformResults[i]);\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return data;\n    };\n    return TransformMutation;\n}(mutation_Mutation));\n\n/** A mutation that deletes the document at the given key. */\nvar mutation_DeleteMutation = /** @class */ (function (_super) {\n    mutation___extends(DeleteMutation, _super);\n    function DeleteMutation(key, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.precondition = precondition;\n        _this.type = MutationType.Delete;\n        return _this;\n    }\n    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        return new document_NoDocument(this.key, snapshot_version_SnapshotVersion.MIN);\n    };\n    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(this.key), 'Can only apply mutation to document with same key');\n        }\n        return new document_NoDocument(this.key, snapshot_version_SnapshotVersion.forDeletedDoc());\n    };\n    DeleteMutation.prototype.equals = function (other) {\n        return (other instanceof DeleteMutation &&\n            this.key.equals(other.key) &&\n            this.precondition.equals(other.precondition));\n    };\n    return DeleteMutation;\n}(mutation_Mutation));\n\n\n//# sourceMappingURL=mutation.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/existence_filter.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExistenceFilter = /** @class */ (function () {\n    // TODO(b/33078163): just use simplest form of existence filter for now\n    function ExistenceFilter(count) {\n        this.count = count;\n    }\n    ExistenceFilter.prototype.equals = function (other) {\n        return other && other.count === this.count;\n    };\n    return ExistenceFilter;\n}());\n\n\n//# sourceMappingURL=existence_filter.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/rpc_error.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nvar RpcCode;\n(function (RpcCode) {\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\nfunction isPermanentError(code) {\n    switch (code) {\n        case Code.OK:\n            return fail('Treated status OK as error');\n        case Code.CANCELLED:\n        case Code.UNKNOWN:\n        case Code.DEADLINE_EXCEEDED:\n        case Code.RESOURCE_EXHAUSTED:\n        case Code.INTERNAL:\n        case Code.UNAVAILABLE:\n        // Unauthenticated means something went wrong with our token and we need\n        // to retry with new credentials which will happen automatically.\n        // TODO(b/37325376): Give up after second unauthenticated error.\n        case Code.UNAUTHENTICATED:\n            return false;\n        case Code.INVALID_ARGUMENT:\n        case Code.NOT_FOUND:\n        case Code.ALREADY_EXISTS:\n        case Code.PERMISSION_DENIED:\n        case Code.FAILED_PRECONDITION:\n        // Aborted might be retried in some scenarios, but that is dependant on\n        // the context and should handled individually by the calling code.\n        // See https://cloud.google.com/apis/design/errors.\n        case Code.ABORTED:\n        case Code.OUT_OF_RANGE:\n        case Code.UNIMPLEMENTED:\n        case Code.DATA_LOSS:\n            return true;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nfunction mapCodeFromRpcStatus(status) {\n    // tslint:disable-next-line:no-any lookup by string\n    var code = RpcCode[status];\n    if (code === undefined) {\n        return undefined;\n    }\n    return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nfunction mapCodeFromRpcCode(code) {\n    if (code === undefined) {\n        // This shouldn't normally happen, but in certain error cases (like trying\n        // to send invalid proto messages) we may get an error with no GRPC code.\n        log_error('GRPC error has no .code');\n        return Code.UNKNOWN;\n    }\n    switch (code) {\n        case RpcCode.OK:\n            return Code.OK;\n        case RpcCode.CANCELLED:\n            return Code.CANCELLED;\n        case RpcCode.UNKNOWN:\n            return Code.UNKNOWN;\n        case RpcCode.DEADLINE_EXCEEDED:\n            return Code.DEADLINE_EXCEEDED;\n        case RpcCode.RESOURCE_EXHAUSTED:\n            return Code.RESOURCE_EXHAUSTED;\n        case RpcCode.INTERNAL:\n            return Code.INTERNAL;\n        case RpcCode.UNAVAILABLE:\n            return Code.UNAVAILABLE;\n        case RpcCode.UNAUTHENTICATED:\n            return Code.UNAUTHENTICATED;\n        case RpcCode.INVALID_ARGUMENT:\n            return Code.INVALID_ARGUMENT;\n        case RpcCode.NOT_FOUND:\n            return Code.NOT_FOUND;\n        case RpcCode.ALREADY_EXISTS:\n            return Code.ALREADY_EXISTS;\n        case RpcCode.PERMISSION_DENIED:\n            return Code.PERMISSION_DENIED;\n        case RpcCode.FAILED_PRECONDITION:\n            return Code.FAILED_PRECONDITION;\n        case RpcCode.ABORTED:\n            return Code.ABORTED;\n        case RpcCode.OUT_OF_RANGE:\n            return Code.OUT_OF_RANGE;\n        case RpcCode.UNIMPLEMENTED:\n            return Code.UNIMPLEMENTED;\n        case RpcCode.DATA_LOSS:\n            return Code.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nfunction mapRpcCodeFromCode(code) {\n    if (code === undefined) {\n        return RpcCode.OK;\n    }\n    switch (code) {\n        case Code.OK:\n            return RpcCode.OK;\n        case Code.CANCELLED:\n            return RpcCode.CANCELLED;\n        case Code.UNKNOWN:\n            return RpcCode.UNKNOWN;\n        case Code.DEADLINE_EXCEEDED:\n            return RpcCode.DEADLINE_EXCEEDED;\n        case Code.RESOURCE_EXHAUSTED:\n            return RpcCode.RESOURCE_EXHAUSTED;\n        case Code.INTERNAL:\n            return RpcCode.INTERNAL;\n        case Code.UNAVAILABLE:\n            return RpcCode.UNAVAILABLE;\n        case Code.UNAUTHENTICATED:\n            return RpcCode.UNAUTHENTICATED;\n        case Code.INVALID_ARGUMENT:\n            return RpcCode.INVALID_ARGUMENT;\n        case Code.NOT_FOUND:\n            return RpcCode.NOT_FOUND;\n        case Code.ALREADY_EXISTS:\n            return RpcCode.ALREADY_EXISTS;\n        case Code.PERMISSION_DENIED:\n            return RpcCode.PERMISSION_DENIED;\n        case Code.FAILED_PRECONDITION:\n            return RpcCode.FAILED_PRECONDITION;\n        case Code.ABORTED:\n            return RpcCode.ABORTED;\n        case Code.OUT_OF_RANGE:\n            return RpcCode.OUT_OF_RANGE;\n        case Code.UNIMPLEMENTED:\n            return RpcCode.UNIMPLEMENTED;\n        case Code.DATA_LOSS:\n            return RpcCode.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction mapCodeFromHttpStatus(status) {\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    //\n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n    switch (status) {\n        case 200:// OK\n            return Code.OK;\n        case 400:// Bad Request\n            return Code.INVALID_ARGUMENT;\n        // Other possibilities based on the forward mapping\n        // return Code.FAILED_PRECONDITION;\n        // return Code.OUT_OF_RANGE;\n        case 401:// Unauthorized\n            return Code.UNAUTHENTICATED;\n        case 403:// Forbidden\n            return Code.PERMISSION_DENIED;\n        case 404:// Not Found\n            return Code.NOT_FOUND;\n        case 409:// Conflict\n            return Code.ABORTED;\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n        case 416:// Range Not Satisfiable\n            return Code.OUT_OF_RANGE;\n        case 429:// Too Many Requests\n            return Code.RESOURCE_EXHAUSTED;\n        case 499:// Client Closed Request\n            return Code.CANCELLED;\n        case 500:// Internal Server Error\n            return Code.UNKNOWN;\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n        case 501:// Unimplemented\n            return Code.UNIMPLEMENTED;\n        case 503:// Service Unavailable\n            return Code.UNAVAILABLE;\n        case 504:// Gateway Timeout\n            return Code.DEADLINE_EXCEEDED;\n        default:\n            if (status >= 200 && status < 300)\n                return Code.OK;\n            if (status >= 400 && status < 500)\n                return Code.FAILED_PRECONDITION;\n            if (status >= 500 && status < 600)\n                return Code.INTERNAL;\n            return Code.UNKNOWN;\n    }\n}\n\n//# sourceMappingURL=rpc_error.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/sorted_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar sorted_set_SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new sorted_map_SortedMap(this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.equals = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\n\n\n//# sourceMappingURL=sorted_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/collections.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar EMPTY_MAYBE_DOCUMENT_MAP = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\nfunction maybeDocumentMap() {\n    return EMPTY_MAYBE_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_MAP = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\nfunction documentMap() {\n    return EMPTY_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_VERSION_MAP = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\nfunction documentVersionMap() {\n    return EMPTY_DOCUMENT_VERSION_MAP;\n}\nvar EMPTY_DOCUMENT_KEY_SET = new sorted_set_SortedSet(document_key_DocumentKey.comparator);\nfunction documentKeySet() {\n    return EMPTY_DOCUMENT_KEY_SET;\n}\n\n//# sourceMappingURL=collections.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/remote_event.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nvar remote_event_RemoteEvent = /** @class */ (function () {\n    function RemoteEvent(\n        /**\n         * The snapshot version this event brings us up to, or MIN if not set.\n         */\n        snapshotVersion, \n        /**\n         * A map from target to changes to the target. See TargetChange.\n         */\n        targetChanges, \n        /**\n         * A set of which documents have changed or been deleted, along with the\n         * doc's new values (if not deleted).\n         */\n        documentUpdates) {\n        this.snapshotVersion = snapshotVersion;\n        this.targetChanges = targetChanges;\n        this.documentUpdates = documentUpdates;\n    }\n    RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n        this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n    };\n    RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n        /*\n         * An existence filter mismatch will reset the query and we need to reset\n         * the mapping to contain no documents and an empty resume token.\n         *\n         * Note:\n         *   * The reset mapping is empty, specifically forcing the consumer of the\n         *     change to forget all keys for this targetID;\n         *   * The resume snapshot for this target must be reset\n         *   * The target must be unacked because unwatching and rewatching\n         *     introduces a race for changes.\n         */\n        this.targetChanges[targetId] = {\n            mapping: new ResetMapping(),\n            snapshotVersion: snapshot_version_SnapshotVersion.MIN,\n            currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n            resumeToken: emptyByteString()\n        };\n    };\n    return RemoteEvent;\n}());\n\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nvar CurrentStatusUpdate;\n(function (CurrentStatusUpdate) {\n    /** The current status is not affected and should not be modified. */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n    /** The target must be marked as no longer \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n    /** The target must be marked as \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate || (CurrentStatusUpdate = {}));\nvar EMPTY_KEY_SET = documentKeySet();\nvar ResetMapping = /** @class */ (function () {\n    function ResetMapping() {\n        this.docs = EMPTY_KEY_SET;\n    }\n    Object.defineProperty(ResetMapping.prototype, \"documents\", {\n        get: function () {\n            return this.docs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetMapping.prototype.add = function (key) {\n        this.docs = this.docs.add(key);\n    };\n    ResetMapping.prototype.delete = function (key) {\n        this.docs = this.docs.delete(key);\n    };\n    ResetMapping.prototype.equals = function (other) {\n        return other !== null && this.docs.equals(other.docs);\n    };\n    return ResetMapping;\n}());\n\nvar UpdateMapping = /** @class */ (function () {\n    function UpdateMapping() {\n        this.addedDocuments = EMPTY_KEY_SET;\n        this.removedDocuments = EMPTY_KEY_SET;\n    }\n    UpdateMapping.prototype.applyToKeySet = function (keys) {\n        var result = keys;\n        this.addedDocuments.forEach(function (key) { return (result = result.add(key)); });\n        this.removedDocuments.forEach(function (key) { return (result = result.delete(key)); });\n        return result;\n    };\n    UpdateMapping.prototype.add = function (key) {\n        this.addedDocuments = this.addedDocuments.add(key);\n        this.removedDocuments = this.removedDocuments.delete(key);\n    };\n    UpdateMapping.prototype.delete = function (key) {\n        this.addedDocuments = this.addedDocuments.delete(key);\n        this.removedDocuments = this.removedDocuments.add(key);\n    };\n    UpdateMapping.prototype.equals = function (other) {\n        return (other !== null &&\n            this.addedDocuments.equals(other.addedDocuments) &&\n            this.removedDocuments.equals(other.removedDocuments));\n    };\n    return UpdateMapping;\n}());\n\n\n//# sourceMappingURL=remote_event.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/watch_change.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nvar DocumentWatchChange = /** @class */ (function () {\n    function DocumentWatchChange(\n        /** The new document applies to all of these targets. */\n        updatedTargetIds, \n        /** The new document is removed from all of these targets. */\n        removedTargetIds, \n        /** The key of the document for this change. */\n        key, \n        /**\n         * The new document or NoDocument if it was deleted. Is null if the\n         * document went out of view without the server sending a new document.\n         */\n        newDoc) {\n        this.updatedTargetIds = updatedTargetIds;\n        this.removedTargetIds = removedTargetIds;\n        this.key = key;\n        this.newDoc = newDoc;\n    }\n    return DocumentWatchChange;\n}());\n\nvar ExistenceFilterChange = /** @class */ (function () {\n    function ExistenceFilterChange(targetId, existenceFilter) {\n        this.targetId = targetId;\n        this.existenceFilter = existenceFilter;\n    }\n    return ExistenceFilterChange;\n}());\n\nvar WatchTargetChangeState;\n(function (WatchTargetChangeState) {\n    WatchTargetChangeState[WatchTargetChangeState[\"NoChange\"] = 0] = \"NoChange\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Added\"] = 1] = \"Added\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Removed\"] = 2] = \"Removed\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Current\"] = 3] = \"Current\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Reset\"] = 4] = \"Reset\";\n})(WatchTargetChangeState || (WatchTargetChangeState = {}));\nvar watch_change_WatchTargetChange = /** @class */ (function () {\n    function WatchTargetChange(\n        /** What kind of change occurred to the watch target. */\n        state, \n        /** The target IDs that were added/removed/set. */\n        targetIds, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken, \n        /** An RPC error indicating why the watch failed. */\n        cause) {\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        if (cause === void 0) { cause = null; }\n        this.state = state;\n        this.targetIds = targetIds;\n        this.resumeToken = resumeToken;\n        this.cause = cause;\n    }\n    return WatchTargetChange;\n}());\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent and other\n * target information.\n */\nvar watch_change_WatchChangeAggregator = /** @class */ (function () {\n    function WatchChangeAggregator(snapshotVersion, listenTargets, pendingTargetResponses) {\n        this.snapshotVersion = snapshotVersion;\n        this.listenTargets = listenTargets;\n        /** The existence filter - if any - for the given target IDs. */\n        this.existenceFilters = {};\n        /** Keeps track of the current target mappings */\n        this.targetChanges = {};\n        /** Keeps track of document to update */\n        this.documentUpdates = maybeDocumentMap();\n        /** Whether this aggregator was frozen and can no longer be modified */\n        this.frozen = false;\n        this.pendingTargetResponses = shallowCopy(pendingTargetResponses);\n    }\n    /** Aggregates a watch change into the current state */\n    WatchChangeAggregator.prototype.add = function (watchChange) {\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        if (watchChange instanceof DocumentWatchChange) {\n            this.addDocumentChange(watchChange);\n        }\n        else if (watchChange instanceof watch_change_WatchTargetChange) {\n            this.addTargetChange(watchChange);\n        }\n        else if (watchChange instanceof ExistenceFilterChange) {\n            this.addExistenceFilterChange(watchChange);\n        }\n        else {\n            fail('Unknown watch change: ' + watchChange);\n        }\n    };\n    /** Aggregates all provided watch changes to the current state in order */\n    WatchChangeAggregator.prototype.addChanges = function (watchChanges) {\n        var _this = this;\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        watchChanges.forEach(function (change) { return _this.add(change); });\n    };\n    /**\n     * Converts the current state into a remote event with the snapshot version\n     * provided via the constructor.\n     */\n    WatchChangeAggregator.prototype.createRemoteEvent = function () {\n        var _this = this;\n        var targetChanges = this.targetChanges;\n        // Remove all the non-active targets from the remote event.\n        forEachNumber(this.targetChanges, function (targetId) {\n            if (!_this.isActiveTarget(targetId)) {\n                delete targetChanges[targetId];\n            }\n        });\n        // Mark this aggregator as frozen so no further modifications are made\n        this.frozen = true;\n        return new remote_event_RemoteEvent(this.snapshotVersion, targetChanges, this.documentUpdates);\n    };\n    WatchChangeAggregator.prototype.ensureTargetChange = function (targetId) {\n        var change = this.targetChanges[targetId];\n        if (!change) {\n            // Create an UpdateMapping by default, since resets are always explicit.\n            change = {\n                currentStatusUpdate: CurrentStatusUpdate.None,\n                snapshotVersion: this.snapshotVersion,\n                mapping: new UpdateMapping(),\n                resumeToken: emptyByteString()\n            };\n            this.targetChanges[targetId] = change;\n        }\n        return change;\n    };\n    /**\n     * We need to wait for watch to ack targets before we process those events,\n     * so to know if a target is active, there must be no pending acks we're\n     * waiting for and it must be in the current list of targets that the client\n     * cares about.\n     *\n     * This method is visible for testing.\n     */\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n        return (!contains(this.pendingTargetResponses, targetId) &&\n            contains(this.listenTargets, targetId));\n    };\n    WatchChangeAggregator.prototype.addDocumentChange = function (docChange) {\n        var relevant = false;\n        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {\n            var targetId = _a[_i];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.add(docChange.key);\n                relevant = true;\n            }\n        }\n        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {\n            var targetId = _c[_b];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.delete(docChange.key);\n                relevant = true;\n            }\n        }\n        // Only update the document if there is a new document to replace to an\n        // active target that is being listened to, this might be just a target\n        // update instead.\n        if (docChange.newDoc && relevant) {\n            this.documentUpdates = this.documentUpdates.insert(docChange.key, docChange.newDoc);\n        }\n    };\n    WatchChangeAggregator.prototype.addTargetChange = function (targetChange) {\n        var _this = this;\n        targetChange.targetIds.forEach(function (targetId) {\n            var change = _this.ensureTargetChange(targetId);\n            switch (targetChange.state) {\n                case WatchTargetChangeState.NoChange:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Creating the change above satisfies the semantics of no-change.\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Added:\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    if (!contains(_this.pendingTargetResponses, targetId)) {\n                        // We have a freshly added target, so we need to reset any state\n                        // that we had previously This can happen e.g. when remove and add\n                        // back a target for existence filter mismatches.\n                        change.mapping = new UpdateMapping();\n                        change.currentStatusUpdate = CurrentStatusUpdate.None;\n                        delete _this.existenceFilters[targetId];\n                    }\n                    applyResumeToken(change, targetChange.resumeToken);\n                    break;\n                case WatchTargetChangeState.Removed:\n                    // We need to keep track of removed targets to we can\n                    // post-filter and remove any target changes.\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');\n                    break;\n                case WatchTargetChangeState.Current:\n                    if (_this.isActiveTarget(targetId)) {\n                        change.currentStatusUpdate = CurrentStatusUpdate.MarkCurrent;\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Reset:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Overwrite any existing target mapping with a reset\n                        // mapping. Every subsequent update will modify the reset\n                        // mapping, not an update mapping.\n                        change.mapping = new ResetMapping();\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                default:\n                    fail('Unknown target watch change state: ' + targetChange.state);\n            }\n        });\n    };\n    /**\n     * Record that we get a watch target add/remove by decrementing the number of\n     * pending target responses that we have.\n     */\n    WatchChangeAggregator.prototype.recordTargetResponse = function (targetId) {\n        var newCount = (this.pendingTargetResponses[targetId] || 0) - 1;\n        if (newCount === 0) {\n            delete this.pendingTargetResponses[targetId];\n        }\n        else {\n            this.pendingTargetResponses[targetId] = newCount;\n        }\n    };\n    WatchChangeAggregator.prototype.addExistenceFilterChange = function (change) {\n        if (this.isActiveTarget(change.targetId)) {\n            this.existenceFilters[change.targetId] = change.existenceFilter;\n        }\n    };\n    return WatchChangeAggregator;\n}());\n\n/**\n * Applies the resume token to the TargetChange, but only when it has a new\n * value. null and empty resumeTokens are discarded.\n */\nfunction applyResumeToken(change, resumeToken) {\n    if (resumeToken.length > 0) {\n        change.resumeToken = resumeToken;\n    }\n}\n\n//# sourceMappingURL=watch_change.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/serializer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DIRECTIONS = (function () {\n    var dirs = {};\n    dirs[Direction.ASCENDING.name] = 'ASCENDING';\n    dirs[Direction.DESCENDING.name] = 'DESCENDING';\n    return dirs;\n})();\nvar OPERATORS = (function () {\n    var ops = {};\n    ops[query_RelationOp.LESS_THAN.name] = 'LESS_THAN';\n    ops[query_RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n    ops[query_RelationOp.GREATER_THAN.name] = 'GREATER_THAN';\n    ops[query_RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n    ops[query_RelationOp.EQUAL.name] = 'EQUAL';\n    return ops;\n})();\nfunction assertPresent(value, description) {\n    assert(!isNullOrUndefined(value), description + ' is missing');\n}\nfunction parseInt64(value) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    if (typeof value === 'number') {\n        return value;\n    }\n    else if (typeof value === 'string') {\n        return parseInt(value, 10);\n    }\n    else {\n        return fail(\"can't parse \" + value);\n    }\n}\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar serializer_JsonProtoSerializer = /** @class */ (function () {\n    function JsonProtoSerializer(databaseId, options) {\n        this.databaseId = databaseId;\n        this.options = options;\n    }\n    JsonProtoSerializer.prototype.emptyByteString = function () {\n        if (this.options.useProto3Json) {\n            return '';\n        }\n        else {\n            return new Uint8Array(0);\n        }\n    };\n    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {\n        // byteStrings can be either string or UInt8Array, but the typings say\n        // it's always a string. Cast as string to avoid type check failing\n        return byteString;\n    };\n    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {\n        var code = status.code === undefined\n            ? Code.UNKNOWN\n            : mapCodeFromRpcCode(status.code);\n        return new FirestoreError(code, status.message || '');\n    };\n    /**\n     * Returns a value for a number (or undefined) that's appropriate to put into\n     * a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be. But GRPC actually\n     * expects a { value: <number> } struct.\n     */\n    JsonProtoSerializer.prototype.toInt32Value = function (val) {\n        if (!isNullOrUndefined(val)) {\n            return { value: val };\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Returns a number (or null) from a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as accepting \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be, but it actually\n     * accepts { value: number } to match our serialization in toInt32Value().\n     */\n    JsonProtoSerializer.prototype.fromInt32Value = function (val) {\n        var result;\n        if (typeof val === 'object') {\n            result = val.value;\n        }\n        else {\n            // We accept raw numbers (without the {value: ... } wrapper) for\n            // compatibility with legacy persisted data.\n            result = val;\n        }\n        return isNullOrUndefined(result) ? null : result;\n    };\n    /**\n     * Returns a value for a Date that's appropriate to put into a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say dates must be. But it's easier and safer\n     * to actually return a Timestamp proto.\n     */\n    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {\n        return {\n            seconds: timestamp.seconds,\n            nanos: timestamp.nanos\n            // tslint:disable-next-line:no-any\n        };\n    };\n    JsonProtoSerializer.prototype.fromTimestamp = function (date) {\n        // The json interface (for the browser) will return an iso timestamp string,\n        // while the proto js library (for node) will return a\n        // google.protobuf.Timestamp instance.\n        if (typeof date === 'string') {\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(this.options.useProto3Json,\n            //   'The timestamp string format requires Proto3.');\n            return timestamp_Timestamp.fromISOString(date);\n        }\n        else {\n            assert(!!date, 'Cannot deserialize null or undefined timestamp.');\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(!this.options.useProto3Json,\n            //   'The timestamp instance format requires Proto JS.');\n            var seconds = parseInt64(date.seconds || '0');\n            var nanos = date.nanos || 0;\n            return new timestamp_Timestamp(seconds, nanos);\n        }\n    };\n    /**\n     * Returns a value for bytes that's appropriate to put in a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say bytes must be. But it should return\n     * an Uint8Array in Node.\n     */\n    JsonProtoSerializer.prototype.toBytes = function (bytes) {\n        if (this.options.useProto3Json) {\n            return bytes.toBase64();\n        }\n        else {\n            // The typings say it's a string, but it needs to be a Uint8Array in Node.\n            return this.unsafeCastProtoByteString(bytes.toUint8Array());\n        }\n    };\n    /**\n     * Parse the blob from the protos into the internal Blob class. Note that the\n     * typings assume all blobs are strings, but they are actually Uint8Arrays\n     * on Node.\n     */\n    JsonProtoSerializer.prototype.fromBlob = function (blob) {\n        if (typeof blob === 'string') {\n            assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');\n            return blob_Blob.fromBase64String(blob);\n        }\n        else {\n            assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');\n            return blob_Blob.fromUint8Array(blob);\n        }\n    };\n    JsonProtoSerializer.prototype.toVersion = function (version) {\n        return this.toTimestamp(version.toTimestamp());\n    };\n    JsonProtoSerializer.prototype.fromVersion = function (version) {\n        assert(!!version, \"Trying to deserialize version that isn't set\");\n        return snapshot_version_SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n    };\n    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {\n        return this.fullyQualifiedPrefixPath(databaseId)\n            .child('documents')\n            .child(path)\n            .canonicalString();\n    };\n    JsonProtoSerializer.prototype.fromResourceName = function (name) {\n        var resource = path_ResourcePath.fromString(name);\n        assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());\n        return resource;\n    };\n    JsonProtoSerializer.prototype.toName = function (key) {\n        return this.toResourceName(this.databaseId, key.path);\n    };\n    JsonProtoSerializer.prototype.fromName = function (name) {\n        var resource = this.fromResourceName(name);\n        assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +\n            resource.get(1) +\n            ' vs ' +\n            this.databaseId.projectId);\n        assert((!resource.get(3) && !this.databaseId.database) ||\n            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +\n            resource.get(3) +\n            ' vs ' +\n            this.databaseId.database);\n        return new document_key_DocumentKey(this.extractLocalPathFromResourceName(resource));\n    };\n    JsonProtoSerializer.prototype.toQueryPath = function (path) {\n        if (path.length === 0) {\n            // If the path is empty, the backend requires we leave off the /documents\n            // at the end.\n            return this.encodedDatabaseId;\n        }\n        return this.toResourceName(this.databaseId, path);\n    };\n    JsonProtoSerializer.prototype.fromQueryPath = function (name) {\n        var resourceName = this.fromResourceName(name);\n        if (resourceName.length === 4) {\n            return path_ResourcePath.EMPTY_PATH;\n        }\n        return this.extractLocalPathFromResourceName(resourceName);\n    };\n    Object.defineProperty(JsonProtoSerializer.prototype, \"encodedDatabaseId\", {\n        get: function () {\n            var path = new path_ResourcePath([\n                'projects',\n                this.databaseId.projectId,\n                'databases',\n                this.databaseId.database\n            ]);\n            return path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {\n        return new path_ResourcePath([\n            'projects',\n            databaseId.projectId,\n            'databases',\n            databaseId.database\n        ]);\n    };\n    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {\n        assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());\n        return resourceName.popFirst(5);\n    };\n    JsonProtoSerializer.prototype.isValidResourceName = function (path) {\n        // Resource names have at least 4 components (project ID, database ID)\n        return (path.length >= 4 &&\n            path.get(0) === 'projects' &&\n            path.get(2) === 'databases');\n    };\n    JsonProtoSerializer.prototype.toValue = function (val) {\n        if (val instanceof NullValue) {\n            return { nullValue: 'NULL_VALUE' };\n        }\n        else if (val instanceof field_value_BooleanValue) {\n            return { booleanValue: val.value() };\n        }\n        else if (val instanceof IntegerValue) {\n            return { integerValue: '' + val.value() };\n        }\n        else if (val instanceof DoubleValue) {\n            var doubleValue = val.value();\n            if (this.options.useProto3Json) {\n                // Proto 3 let's us encode NaN and Infinity as string values as\n                // expected by the backend. This is currently not checked by our unit\n                // tests because they rely on protobuf.js.\n                if (isNaN(doubleValue)) {\n                    return { doubleValue: 'NaN' };\n                }\n                else if (doubleValue === Infinity) {\n                    return { doubleValue: 'Infinity' };\n                }\n                else if (doubleValue === -Infinity) {\n                    return { doubleValue: '-Infinity' };\n                }\n            }\n            return { doubleValue: val.value() };\n        }\n        else if (val instanceof field_value_StringValue) {\n            return { stringValue: val.value() };\n        }\n        else if (val instanceof field_value_ObjectValue) {\n            return { mapValue: this.toMapValue(val) };\n        }\n        else if (val instanceof field_value_ArrayValue) {\n            return { arrayValue: this.toArrayValue(val) };\n        }\n        else if (val instanceof TimestampValue) {\n            return {\n                timestampValue: this.toTimestamp(val.internalValue)\n            };\n        }\n        else if (val instanceof GeoPointValue) {\n            return {\n                geoPointValue: {\n                    latitude: val.value().latitude,\n                    longitude: val.value().longitude\n                }\n            };\n        }\n        else if (val instanceof BlobValue) {\n            return {\n                bytesValue: this.toBytes(val.value())\n            };\n        }\n        else if (val instanceof field_value_RefValue) {\n            return {\n                referenceValue: this.toResourceName(val.databaseId, val.key.path)\n            };\n        }\n        else {\n            return fail('Unknown FieldValue ' + JSON.stringify(val));\n        }\n    };\n    JsonProtoSerializer.prototype.fromValue = function (obj) {\n        var _this = this;\n        // tslint:disable-next-line:no-any\n        var type = obj['value_type'];\n        if (hasTag(obj, type, 'nullValue')) {\n            return NullValue.INSTANCE;\n        }\n        else if (hasTag(obj, type, 'booleanValue')) {\n            return field_value_BooleanValue.of(obj.booleanValue);\n        }\n        else if (hasTag(obj, type, 'integerValue')) {\n            return new IntegerValue(parseInt64(obj.integerValue));\n        }\n        else if (hasTag(obj, type, 'doubleValue')) {\n            if (this.options.useProto3Json) {\n                // Proto 3 uses the string values 'NaN' and 'Infinity'.\n                if (obj.doubleValue === 'NaN') {\n                    return DoubleValue.NAN;\n                }\n                else if (obj.doubleValue === 'Infinity') {\n                    return DoubleValue.POSITIVE_INFINITY;\n                }\n                else if (obj.doubleValue === '-Infinity') {\n                    return DoubleValue.NEGATIVE_INFINITY;\n                }\n            }\n            return new DoubleValue(obj.doubleValue);\n        }\n        else if (hasTag(obj, type, 'stringValue')) {\n            return new field_value_StringValue(obj.stringValue);\n        }\n        else if (hasTag(obj, type, 'mapValue')) {\n            return this.fromFields(obj.mapValue.fields || {});\n        }\n        else if (hasTag(obj, type, 'arrayValue')) {\n            // \"values\" is not present if the array is empty\n            assertPresent(obj.arrayValue, 'arrayValue');\n            var values = obj.arrayValue.values || [];\n            return new field_value_ArrayValue(values.map(function (v) { return _this.fromValue(v); }));\n        }\n        else if (hasTag(obj, type, 'timestampValue')) {\n            assertPresent(obj.timestampValue, 'timestampValue');\n            return new TimestampValue(this.fromTimestamp(obj.timestampValue));\n        }\n        else if (hasTag(obj, type, 'geoPointValue')) {\n            assertPresent(obj.geoPointValue, 'geoPointValue');\n            var latitude = obj.geoPointValue.latitude || 0;\n            var longitude = obj.geoPointValue.longitude || 0;\n            return new GeoPointValue(new geo_point_GeoPoint(latitude, longitude));\n        }\n        else if (hasTag(obj, type, 'bytesValue')) {\n            assertPresent(obj.bytesValue, 'bytesValue');\n            var blob = this.fromBlob(obj.bytesValue);\n            return new BlobValue(blob);\n        }\n        else if (hasTag(obj, type, 'referenceValue')) {\n            assertPresent(obj.referenceValue, 'referenceValue');\n            var resourceName = this.fromResourceName(obj.referenceValue);\n            var dbId = new database_info_DatabaseId(resourceName.get(1), resourceName.get(3));\n            var key = new document_key_DocumentKey(this.extractLocalPathFromResourceName(resourceName));\n            return new field_value_RefValue(dbId, key);\n        }\n        else {\n            return fail('Unknown Value proto ' + JSON.stringify(obj));\n        }\n    };\n    /** Creates an api.Document from key and fields (but no create/update time) */\n    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {\n        return {\n            name: this.toName(key),\n            fields: this.toFields(fields)\n        };\n    };\n    JsonProtoSerializer.prototype.toDocument = function (document) {\n        assert(!document.hasLocalMutations, \"Can't serialize documents with mutations.\");\n        return {\n            name: this.toName(document.key),\n            fields: this.toFields(document.data),\n            updateTime: this.toTimestamp(document.version.toTimestamp())\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocument = function (document) {\n        return new document_Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.toFields = function (fields) {\n        var _this = this;\n        var result = {};\n        fields.forEach(function (key, value) {\n            result[key] = _this.toValue(value);\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromFields = function (object) {\n        var _this = this;\n        // Proto map<string, Value> gets mapped to Object, so cast it.\n        var map = object;\n        var result = field_value_ObjectValue.EMPTY;\n        forEach(map, function (key, value) {\n            result = result.set(new path_FieldPath([key]), _this.fromValue(value));\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.toMapValue = function (map) {\n        return {\n            fields: this.toFields(map)\n        };\n    };\n    JsonProtoSerializer.prototype.toArrayValue = function (array) {\n        var _this = this;\n        var result = [];\n        array.forEach(function (value) {\n            result.push(_this.toValue(value));\n        });\n        return { values: result };\n    };\n    JsonProtoSerializer.prototype.fromFound = function (doc) {\n        assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');\n        assertPresent(doc.found.name, 'doc.found.name');\n        assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n        var key = this.fromName(doc.found.name);\n        var version = this.fromVersion(doc.found.updateTime);\n        var fields = this.fromFields(doc.found.fields || {});\n        return new document_Document(key, version, fields, { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.fromMissing = function (result) {\n        assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');\n        assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');\n        var key = this.fromName(result.missing);\n        var version = this.fromVersion(result.readTime);\n        return new document_NoDocument(key, version);\n    };\n    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {\n        // tslint:disable-next-line:no-any\n        var type = result['result'];\n        if (hasTag(result, type, 'found')) {\n            return this.fromFound(result);\n        }\n        else if (hasTag(result, type, 'missing')) {\n            return this.fromMissing(result);\n        }\n        return fail('invalid batch get response: ' + JSON.stringify(result));\n    };\n    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {\n        switch (state) {\n            case WatchTargetChangeState.Added:\n                return 'ADD';\n            case WatchTargetChangeState.Current:\n                return 'CURRENT';\n            case WatchTargetChangeState.NoChange:\n                return 'NO_CHANGE';\n            case WatchTargetChangeState.Removed:\n                return 'REMOVE';\n            case WatchTargetChangeState.Reset:\n                return 'RESET';\n            default:\n                return fail('Unknown WatchTargetChangeState: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {\n        if (watchChange instanceof ExistenceFilterChange) {\n            return {\n                filter: {\n                    count: watchChange.existenceFilter.count,\n                    targetId: watchChange.targetId\n                }\n            };\n        }\n        if (watchChange instanceof DocumentWatchChange) {\n            if (watchChange.newDoc instanceof document_Document) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentChange: {\n                        document: {\n                            name: this.toName(doc.key),\n                            fields: this.toFields(doc.data),\n                            updateTime: this.toVersion(doc.version)\n                        },\n                        targetIds: watchChange.updatedTargetIds,\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc instanceof document_NoDocument) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentDelete: {\n                        document: this.toName(doc.key),\n                        readTime: this.toVersion(doc.version),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc === null) {\n                return {\n                    documentRemove: {\n                        document: this.toName(watchChange.key),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n        }\n        if (watchChange instanceof watch_change_WatchTargetChange) {\n            var cause = undefined;\n            if (watchChange.cause) {\n                cause = {\n                    code: mapRpcCodeFromCode(watchChange.cause.code),\n                    message: watchChange.cause.message\n                };\n            }\n            return {\n                targetChange: {\n                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n                    targetIds: watchChange.targetIds,\n                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n                    cause: cause\n                }\n            };\n        }\n        return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));\n    };\n    JsonProtoSerializer.prototype.fromWatchChange = function (change) {\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        var watchChange;\n        if (hasTag(change, type, 'targetChange')) {\n            assertPresent(change.targetChange, 'targetChange');\n            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n            // if unset\n            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n            var targetIds = change.targetChange.targetIds || [];\n            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();\n            var causeProto = change.targetChange.cause;\n            var cause = causeProto && this.fromRpcStatus(causeProto);\n            watchChange = new watch_change_WatchTargetChange(state, targetIds, resumeToken, cause || null);\n        }\n        else if (hasTag(change, type, 'documentChange')) {\n            assertPresent(change.documentChange, 'documentChange');\n            assertPresent(change.documentChange.document, 'documentChange.name');\n            assertPresent(change.documentChange.document.name, 'documentChange.document.name');\n            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');\n            var entityChange = change.documentChange;\n            var key = this.fromName(entityChange.document.name);\n            var version = this.fromVersion(entityChange.document.updateTime);\n            var fields = this.fromFields(entityChange.document.fields || {});\n            var doc = new document_Document(key, version, fields, {\n                hasLocalMutations: false\n            });\n            var updatedTargetIds = entityChange.targetIds || [];\n            var removedTargetIds = entityChange.removedTargetIds || [];\n            watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentDelete')) {\n            assertPresent(change.documentDelete, 'documentDelete');\n            assertPresent(change.documentDelete.document, 'documentDelete.document');\n            var docDelete = change.documentDelete;\n            var key = this.fromName(docDelete.document);\n            var version = docDelete.readTime\n                ? this.fromVersion(docDelete.readTime)\n                : snapshot_version_SnapshotVersion.forDeletedDoc();\n            var doc = new document_NoDocument(key, version);\n            var removedTargetIds = docDelete.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentRemove')) {\n            assertPresent(change.documentRemove, 'documentRemove');\n            assertPresent(change.documentRemove.document, 'documentRemove');\n            var docRemove = change.documentRemove;\n            var key = this.fromName(docRemove.document);\n            var removedTargetIds = docRemove.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n        }\n        else if (hasTag(change, type, 'filter')) {\n            // TODO(dimond): implement existence filter parsing with strategy.\n            assertPresent(change.filter, 'filter');\n            assertPresent(change.filter.targetId, 'filter.targetId');\n            var filter = change.filter;\n            var count = filter.count || 0;\n            var existenceFilter = new ExistenceFilter(count);\n            var targetId = filter.targetId;\n            watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n        }\n        else {\n            return fail('Unknown change type ' + JSON.stringify(change));\n        }\n        return watchChange;\n    };\n    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {\n        if (state === 'NO_CHANGE') {\n            return WatchTargetChangeState.NoChange;\n        }\n        else if (state === 'ADD') {\n            return WatchTargetChangeState.Added;\n        }\n        else if (state === 'REMOVE') {\n            return WatchTargetChangeState.Removed;\n        }\n        else if (state === 'CURRENT') {\n            return WatchTargetChangeState.Current;\n        }\n        else if (state === 'RESET') {\n            return WatchTargetChangeState.Reset;\n        }\n        else {\n            return fail('Got unexpected TargetChange.state: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {\n        // We have only reached a consistent snapshot for the entire stream if there\n        // is a read_time set and it applies to all targets (i.e. the list of\n        // targets is empty). The backend is guaranteed to send such responses.\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        if (!hasTag(change, type, 'targetChange')) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        var targetChange = change.targetChange;\n        if (targetChange.targetIds && targetChange.targetIds.length) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        if (!targetChange.readTime) {\n            return snapshot_version_SnapshotVersion.MIN;\n        }\n        return this.fromVersion(targetChange.readTime);\n    };\n    JsonProtoSerializer.prototype.toMutation = function (mutation) {\n        var _this = this;\n        var result;\n        if (mutation instanceof mutation_SetMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.value)\n            };\n        }\n        else if (mutation instanceof mutation_DeleteMutation) {\n            result = { delete: this.toName(mutation.key) };\n        }\n        else if (mutation instanceof mutation_PatchMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.data),\n                updateMask: this.toDocumentMask(mutation.fieldMask)\n            };\n        }\n        else if (mutation instanceof mutation_TransformMutation) {\n            result = {\n                transform: {\n                    document: this.toName(mutation.key),\n                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {\n                        return _this.toFieldTransform(transform);\n                    })\n                }\n            };\n        }\n        else {\n            return fail('Unknown mutation type ' + mutation.type);\n        }\n        if (!mutation.precondition.isNone) {\n            result.currentDocument = this.toPrecondition(mutation.precondition);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromMutation = function (proto) {\n        var _this = this;\n        var precondition = proto.currentDocument\n            ? this.fromPrecondition(proto.currentDocument)\n            : mutation_Precondition.NONE;\n        if (proto.update) {\n            assertPresent(proto.update.name, 'name');\n            var key = this.fromName(proto.update.name);\n            var value = this.fromFields(proto.update.fields || {});\n            if (proto.updateMask) {\n                var fieldMask = this.fromDocumentMask(proto.updateMask);\n                return new mutation_PatchMutation(key, value, fieldMask, precondition);\n            }\n            else {\n                return new mutation_SetMutation(key, value, precondition);\n            }\n        }\n        else if (proto.delete) {\n            var key = this.fromName(proto.delete);\n            return new mutation_DeleteMutation(key, precondition);\n        }\n        else if (proto.transform) {\n            var key = this.fromName(proto.transform.document);\n            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {\n                return _this.fromFieldTransform(transform);\n            });\n            assert(precondition.exists === true, 'Transforms only support precondition \"exists == true\"');\n            return new mutation_TransformMutation(key, fieldTransforms);\n        }\n        else {\n            return fail('unknown mutation proto: ' + JSON.stringify(proto));\n        }\n    };\n    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {\n        assert(!precondition.isNone, \"Can't serialize an empty precondition\");\n        if (precondition.updateTime !== undefined) {\n            return {\n                updateTime: this.toVersion(precondition.updateTime)\n            };\n        }\n        else if (precondition.exists !== undefined) {\n            return { exists: precondition.exists };\n        }\n        else {\n            return fail('Unknown precondition');\n        }\n    };\n    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {\n        if (precondition.updateTime !== undefined) {\n            return mutation_Precondition.updateTime(this.fromVersion(precondition.updateTime));\n        }\n        else if (precondition.exists !== undefined) {\n            return mutation_Precondition.exists(precondition.exists);\n        }\n        else {\n            return mutation_Precondition.NONE;\n        }\n    };\n    JsonProtoSerializer.prototype.fromWriteResult = function (proto) {\n        var _this = this;\n        // NOTE: Deletes don't have an updateTime.\n        var version = proto.updateTime\n            ? this.fromVersion(proto.updateTime)\n            : null;\n        var transformResults = null;\n        if (proto.transformResults && proto.transformResults.length > 0) {\n            transformResults = proto.transformResults.map(function (result) {\n                return _this.fromValue(result);\n            });\n        }\n        return new MutationResult(version, transformResults);\n    };\n    JsonProtoSerializer.prototype.fromWriteResults = function (protos) {\n        var _this = this;\n        return (protos || []).map(function (proto) { return _this.fromWriteResult(proto); });\n    };\n    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {\n        assert(fieldTransform.transform instanceof ServerTimestampTransform, 'Unknown transform: ' + fieldTransform.transform);\n        return {\n            fieldPath: fieldTransform.field.canonicalString(),\n            setToServerValue: 'REQUEST_TIME'\n        };\n    };\n    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {\n        assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown transform proto: ' + JSON.stringify(proto));\n        var fieldPath = path_FieldPath.fromServerFormat(proto.fieldPath);\n        return new FieldTransform(fieldPath, ServerTimestampTransform.instance);\n    };\n    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {\n        return { documents: [this.toQueryPath(query.path)] };\n    };\n    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {\n        var count = documentsTarget.documents.length;\n        assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);\n        var name = documentsTarget.documents[0];\n        return query_Query.atPath(this.fromQueryPath(name));\n    };\n    JsonProtoSerializer.prototype.toQueryTarget = function (query) {\n        // Dissect the path into parent, collectionId, and optional key filter.\n        var result = { structuredQuery: {} };\n        if (query.path.isEmpty()) {\n            result.parent = this.toQueryPath(path_ResourcePath.EMPTY_PATH);\n        }\n        else {\n            var path = query.path;\n            assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');\n            result.parent = this.toQueryPath(path.popLast());\n            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\n        }\n        var where = this.toFilter(query.filters);\n        if (where) {\n            result.structuredQuery.where = where;\n        }\n        var orderBy = this.toOrder(query.orderBy);\n        if (orderBy) {\n            result.structuredQuery.orderBy = orderBy;\n        }\n        var limit = this.toInt32Value(query.limit);\n        if (limit !== undefined) {\n            result.structuredQuery.limit = limit;\n        }\n        if (query.startAt) {\n            result.structuredQuery.startAt = this.toCursor(query.startAt);\n        }\n        if (query.endAt) {\n            result.structuredQuery.endAt = this.toCursor(query.endAt);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {\n        var path = this.fromQueryPath(target.parent);\n        var query = target.structuredQuery;\n        var fromCount = query.from ? query.from.length : 0;\n        if (fromCount > 0) {\n            assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');\n            var from = query.from[0];\n            path = path.child(from.collectionId);\n        }\n        var filterBy = [];\n        if (query.where) {\n            filterBy = this.fromFilter(query.where);\n        }\n        var orderBy = [];\n        if (query.orderBy) {\n            orderBy = this.fromOrder(query.orderBy);\n        }\n        var limit = null;\n        if (query.limit) {\n            limit = this.fromInt32Value(query.limit);\n        }\n        var startAt = null;\n        if (query.startAt) {\n            startAt = this.fromCursor(query.startAt);\n        }\n        var endAt = null;\n        if (query.endAt) {\n            endAt = this.fromCursor(query.endAt);\n        }\n        return new query_Query(path, orderBy, filterBy, limit, startAt, endAt);\n    };\n    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {\n        var value = this.toLabel(queryData.purpose);\n        if (value == null) {\n            return null;\n        }\n        else {\n            return {\n                'goog-listen-tags': value\n            };\n        }\n    };\n    JsonProtoSerializer.prototype.toLabel = function (purpose) {\n        switch (purpose) {\n            case QueryPurpose.Listen:\n                return null;\n            case QueryPurpose.ExistenceFilterMismatch:\n                return 'existence-filter-mismatch';\n            case QueryPurpose.LimboResolution:\n                return 'limbo-document';\n            default:\n                return fail('Unrecognized query purpose: ' + purpose);\n        }\n    };\n    JsonProtoSerializer.prototype.toTarget = function (queryData) {\n        var result;\n        var query = queryData.query;\n        if (query.isDocumentQuery()) {\n            result = { documents: this.toDocumentsTarget(query) };\n        }\n        else {\n            result = { query: this.toQueryTarget(query) };\n        }\n        result.targetId = queryData.targetId;\n        if (queryData.resumeToken.length > 0) {\n            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.toFilter = function (filters) {\n        var _this = this;\n        if (filters.length === 0)\n            return;\n        var protos = filters.map(function (filter) {\n            return filter instanceof query_RelationFilter\n                ? _this.toRelationFilter(filter)\n                : _this.toUnaryFilter(filter);\n        });\n        if (protos.length === 1) {\n            return protos[0];\n        }\n        return { compositeFilter: { op: 'AND', filters: protos } };\n    };\n    JsonProtoSerializer.prototype.fromFilter = function (filter) {\n        var _this = this;\n        if (!filter) {\n            return [];\n        }\n        else if (filter.unaryFilter !== undefined) {\n            return [this.fromUnaryFilter(filter)];\n        }\n        else if (filter.fieldFilter !== undefined) {\n            return [this.fromRelationFilter(filter)];\n        }\n        else if (filter.compositeFilter !== undefined) {\n            return filter.compositeFilter.filters\n                .map(function (f) { return _this.fromFilter(f); })\n                .reduce(function (accum, current) { return accum.concat(current); });\n        }\n        else {\n            return fail('Unknown filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.toOrder = function (orderBys) {\n        var _this = this;\n        if (orderBys.length === 0)\n            return;\n        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {\n        var _this = this;\n        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.toCursor = function (cursor) {\n        var _this = this;\n        return {\n            before: cursor.before,\n            values: cursor.position.map(function (component) { return _this.toValue(component); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromCursor = function (cursor) {\n        var _this = this;\n        var before = !!cursor.before;\n        var position = cursor.values.map(function (component) { return _this.fromValue(component); });\n        return new query_Bound(position, before);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toDirection = function (dir) {\n        return DIRECTIONS[dir.name];\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.fromDirection = function (dir) {\n        switch (dir) {\n            case 'ASCENDING':\n                return Direction.ASCENDING;\n            case 'DESCENDING':\n                return Direction.DESCENDING;\n            default:\n                return undefined;\n        }\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toOperatorName = function (op) {\n        return OPERATORS[op.name];\n    };\n    JsonProtoSerializer.prototype.fromOperatorName = function (op) {\n        switch (op) {\n            case 'EQUAL':\n                return query_RelationOp.EQUAL;\n            case 'GREATER_THAN':\n                return query_RelationOp.GREATER_THAN;\n            case 'GREATER_THAN_OR_EQUAL':\n                return query_RelationOp.GREATER_THAN_OR_EQUAL;\n            case 'LESS_THAN':\n                return query_RelationOp.LESS_THAN;\n            case 'LESS_THAN_OR_EQUAL':\n                return query_RelationOp.LESS_THAN_OR_EQUAL;\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified relation');\n            default:\n                return fail('Unknown relation');\n        }\n    };\n    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {\n        return { fieldPath: path.canonicalString() };\n    };\n    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {\n        return path_FieldPath.fromServerFormat(fieldReference.fieldPath);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {\n        return {\n            field: this.toFieldPathReference(orderBy.field),\n            direction: this.toDirection(orderBy.dir)\n        };\n    };\n    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {\n        return new query_OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {\n        if (filter instanceof query_RelationFilter) {\n            return {\n                fieldFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: this.toOperatorName(filter.op),\n                    value: this.toValue(filter.value)\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {\n        return new query_RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {\n        if (filter instanceof NanFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NAN'\n                }\n            };\n        }\n        else if (filter instanceof NullFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NULL'\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {\n        switch (filter.unaryFilter.op) {\n            case 'IS_NAN':\n                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NanFilter(nanField);\n            case 'IS_NULL':\n                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NullFilter(nullField);\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified filter');\n            default:\n                return fail('Unknown filter');\n        }\n    };\n    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {\n        return {\n            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {\n        var paths = proto.fieldPaths || [];\n        var fields = paths.map(function (path) { return path_FieldPath.fromServerFormat(path); });\n        return new mutation_FieldMask(fields);\n    };\n    return JsonProtoSerializer;\n}());\n\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj, type, tag) {\n    return type === tag || (!type && tag in obj);\n}\n\n//# sourceMappingURL=serializer.js.map\n\n// EXTERNAL MODULE: ../webchannel-wrapper/dist/index.js\nvar dist = __webpack_require__(115);\nvar dist_default = /*#__PURE__*/__webpack_require__.n(dist);\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/stream_bridge.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar stream_bridge_StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.wrappedOnOpen = null;\n        this.wrappedOnClose = null;\n        this.wrappedOnMessage = null;\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        assert(this.wrappedOnOpen !== null, 'Cannot call onOpen because no callback ' + 'was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        assert(this.wrappedOnClose !== null, 'Cannot call onClose because no ' + 'callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        assert(this.wrappedOnMessage !== null, 'Cannot call onMessage because no ' + 'callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\n\n\n//# sourceMappingURL=stream_bridge.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/webchannel_connection.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar LOG_TAG = 'Connection';\nvar RPC_STREAM_SERVICE = 'google.firestore.v1beta1.Firestore';\nvar RPC_URL_VERSION = 'v1beta1';\n/** Maps RPC names to the corresponding REST endpoint name. */\nvar RPC_NAME_REST_MAPPING = {\n    BatchGetDocuments: 'batchGet',\n    Commit: 'commit'\n};\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nvar X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\nvar XHR_TIMEOUT_SECS = 15;\nvar webchannel_connection_WebChannelConnection = /** @class */ (function () {\n    function WebChannelConnection(info) {\n        this.databaseId = info.databaseId;\n        this.pool = new dist[\"XhrIoPool\"]();\n        var proto = info.ssl ? 'https' : 'http';\n        this.baseUrl = proto + '://' + info.host;\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {\n        if (token) {\n            for (var header in token.authHeaders) {\n                if (token.authHeaders.hasOwnProperty(header)) {\n                    headers[header] = token.authHeaders[header];\n                }\n            }\n        }\n        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n        // This header is used to improve routing and project isolation by the\n        // backend.\n        headers['google-cloud-resource-prefix'] =\n            \"projects/\" + this.databaseId.projectId + \"/\" +\n                (\"databases/\" + this.databaseId.database);\n    };\n    WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {\n        var _this = this;\n        var url = this.makeUrl(rpcName);\n        return new Promise(function (resolve, reject) {\n            _this.pool.getObject(function (xhr) {\n                xhr.listenOnce(dist[\"EventType\"].COMPLETE, function () {\n                    try {\n                        switch (xhr.getLastErrorCode()) {\n                            case dist[\"ErrorCode\"].NO_ERROR:\n                                var json = xhr.getResponseJson();\n                                debug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n                                resolve(json);\n                                break;\n                            case dist[\"ErrorCode\"].TIMEOUT:\n                                debug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n                                reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));\n                                break;\n                            case dist[\"ErrorCode\"].HTTP_ERROR:\n                                var status_1 = xhr.getStatus();\n                                debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed with status:', status_1, 'response text:', xhr.getResponseText());\n                                if (status_1 > 0) {\n                                    reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));\n                                }\n                                else {\n                                    // If we received an HTTP_ERROR but there's no status code,\n                                    // it's most probably a connection issue\n                                    debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                                    reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));\n                                }\n                                break;\n                            default:\n                                fail('RPC \"' +\n                                    rpcName +\n                                    '\" failed with unanticipated ' +\n                                    'webchannel error ' +\n                                    xhr.getLastErrorCode() +\n                                    ': ' +\n                                    xhr.getLastError() +\n                                    ', giving up.');\n                        }\n                    }\n                    finally {\n                        debug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n                        _this.pool.releaseObject(xhr);\n                    }\n                });\n                var requestString = JSON.stringify(request);\n                debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n                // Content-Type: text/plain will avoid preflight requests which might\n                // mess with CORS and redirects by proxies. If we add custom headers\n                // we will need to change this code to potentially use the\n                // $httpOverwrite parameter supported by ESF to avoid\n                // triggering preflight requests.\n                var headers = { 'Content-Type': 'text/plain' };\n                _this.modifyHeadersForRequest(headers, token);\n                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n            });\n        });\n    };\n    WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.invokeRPC(rpcName, request, token);\n    };\n    WebChannelConnection.prototype.openStream = function (rpcName, token) {\n        var urlParts = [\n            this.baseUrl,\n            '/',\n            RPC_STREAM_SERVICE,\n            '/',\n            rpcName,\n            '/channel'\n        ];\n        var webchannelTransport = Object(dist[\"createWebChannelTransport\"])();\n        var request = {\n            // Background channel test avoids the initial two test calls and decreases\n            // initial cold start time.\n            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n            // we should monitor closely for any reports.\n            backgroundChannelTest: true,\n            // Required for backend stickiness, routing behavior is based on this\n            // parameter.\n            httpSessionIdParam: 'gsessionid',\n            initMessageHeaders: {},\n            // Send our custom headers as a '$httpHeaders=' url param to avoid CORS\n            // preflight round-trip. This is formally defined here:\n            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L40\n            httpHeadersOverwriteParam: '$httpHeaders',\n            sendRawJson: true,\n            supportsCrossDomainXhr: true\n        };\n        this.modifyHeadersForRequest(request.initMessageHeaders, token);\n        var url = urlParts.join('');\n        debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n        // tslint:disable-next-line:no-any Because listen isn't defined on it.\n        var channel = webchannelTransport.createWebChannel(url, request);\n        // WebChannel supports sending the first message with the handshake - saving\n        // a network round trip. However, it will have to call send in the same\n        // JS event loop as open. In order to enforce this, we delay actually\n        // opening the WebChannel until send is called. Whether we have called\n        // open is tracked with this variable.\n        var opened = false;\n        // A flag to determine whether the stream was closed (by us or through an\n        // error/close event) to avoid delivering multiple close events or sending\n        // on a closed stream\n        var closed = false;\n        // tslint:disable-next-line:no-any\n        var streamBridge = new stream_bridge_StreamBridge({\n            sendFn: function (msg) {\n                if (!closed) {\n                    if (!opened) {\n                        debug(LOG_TAG, 'Opening WebChannel transport.');\n                        channel.open();\n                        opened = true;\n                    }\n                    debug(LOG_TAG, 'WebChannel sending:', msg);\n                    channel.send(msg);\n                }\n                else {\n                    debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n                }\n            },\n            closeFn: function () { return channel.close(); }\n        });\n        // Closure events are guarded and exceptions are swallowed, so catch any\n        // exception and rethrow using a setTimeout so they become visible again.\n        // Note that eventually this function could go away if we are confident\n        // enough the code is exception free.\n        var unguardedEventListen = function (type, fn) {\n            // TODO(dimond): closure typing seems broken because WebChannel does\n            // not implement goog.events.Listenable\n            channel.listen(type, function (param) {\n                try {\n                    fn(param);\n                }\n                catch (e) {\n                    setTimeout(function () {\n                        throw e;\n                    }, 0);\n                }\n            });\n        };\n        unguardedEventListen(dist[\"WebChannel\"].EventType.OPEN, function () {\n            if (!closed) {\n                debug(LOG_TAG, 'WebChannel transport opened.');\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.CLOSE, function () {\n            if (!closed) {\n                closed = true;\n                debug(LOG_TAG, 'WebChannel transport closed');\n                streamBridge.callOnClose();\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.ERROR, function (err) {\n            if (!closed) {\n                closed = true;\n                debug(LOG_TAG, 'WebChannel transport errored:', err);\n                streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));\n            }\n        });\n        unguardedEventListen(dist[\"WebChannel\"].EventType.MESSAGE, function (msg) {\n            if (!closed) {\n                // WebChannel delivers message events as array. If batching\n                // is not enabled (it's off by default) each message will be\n                // delivered alone, resulting in a single element array.\n                var msgData = msg.data[0];\n                assert(!!msgData, 'Got a webchannel message without data.');\n                // TODO(b/35143891): There is a bug in One Platform that caused errors\n                // (and only errors) to be wrapped in an extra array. To be forward\n                // compatible with the bug we need to check either condition. The latter\n                // can be removed once the fix has been rolled out.\n                var error = msgData.error || (msgData[0] && msgData[0].error);\n                if (error) {\n                    debug(LOG_TAG, 'WebChannel received error:', error);\n                    // error.status will be a string like 'OK' or 'NOT_FOUND'.\n                    var status_2 = error.status;\n                    var code = mapCodeFromRpcStatus(status_2);\n                    var message = error.message;\n                    if (code === undefined) {\n                        code = Code.INTERNAL;\n                        message =\n                            'Unknown error status: ' +\n                                status_2 +\n                                ' with message ' +\n                                error.message;\n                    }\n                    // Mark closed so no further events are propagated\n                    closed = true;\n                    streamBridge.callOnClose(new FirestoreError(code, message));\n                    channel.close();\n                }\n                else {\n                    debug(LOG_TAG, 'WebChannel received:', msgData);\n                    streamBridge.callOnMessage(msgData);\n                }\n            }\n        });\n        setTimeout(function () {\n            // Technically we could/should wait for the WebChannel opened event,\n            // but because we want to send the first message with the WebChannel\n            // handshake we pretend the channel opened here (asynchronously), and\n            // then delay the actual open until the first message is sent.\n            streamBridge.callOnOpen();\n        }, 0);\n        return streamBridge;\n    };\n    // visible for testing\n    WebChannelConnection.prototype.makeUrl = function (rpcName) {\n        var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n        assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);\n        var url = [this.baseUrl, '/', RPC_URL_VERSION];\n        url.push('/projects/');\n        url.push(this.databaseId.projectId);\n        url.push('/databases/');\n        url.push(this.databaseId.database);\n        url.push('/documents');\n        url.push(':');\n        url.push(urlRpcName);\n        return url.join('');\n    };\n    return WebChannelConnection;\n}());\n\n\n//# sourceMappingURL=webchannel_connection.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/browser_platform.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar browser_platform_BrowserPlatform = /** @class */ (function () {\n    function BrowserPlatform() {\n        this.emptyByteString = '';\n        this.base64Available = typeof atob !== 'undefined';\n    }\n    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {\n        return Promise.resolve(new webchannel_connection_WebChannelConnection(databaseInfo));\n    };\n    BrowserPlatform.prototype.newSerializer = function (databaseId) {\n        return new serializer_JsonProtoSerializer(databaseId, { useProto3Json: true });\n    };\n    BrowserPlatform.prototype.formatJSON = function (value) {\n        return JSON.stringify(value);\n    };\n    BrowserPlatform.prototype.atob = function (encoded) {\n        return atob(encoded);\n    };\n    BrowserPlatform.prototype.btoa = function (raw) {\n        return btoa(raw);\n    };\n    return BrowserPlatform;\n}());\n\n\n//# sourceMappingURL=browser_platform.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform_browser/browser_init.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nplatform_PlatformSupport.setPlatform(new browser_platform_BrowserPlatform());\n\n//# sourceMappingURL=browser_init.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/field_path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar field_path_FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            validateArgType('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new path_FieldPath(fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(path_FieldPath.keyField().canonicalString());\n    return FieldPath;\n}());\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nfunction fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (field_path_FieldPath.bind.apply(field_path_FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n//# sourceMappingURL=field_path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/types.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Describes the online state of the Firestore client */\nvar OnlineState;\n(function (OnlineState) {\n    /**\n     * The Firestore client is in an unknown online state. This means the client\n     * is either not actively trying to establish a connection or it was\n     * previously in an unknown state and is trying to establish a connection.\n     */\n    OnlineState[OnlineState[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The client is connected and the connections are healthy. This state is\n     * reached after a successful connection and there has been at least one\n     * succesful message received from the backends.\n     */\n    OnlineState[OnlineState[\"Healthy\"] = 1] = \"Healthy\";\n    /**\n     * The client has tried to establish a connection but has failed.\n     * This state is reached after either a connection attempt failed or a\n     * healthy stream was closed for unexpected reasons.\n     */\n    OnlineState[OnlineState[\"Failed\"] = 2] = \"Failed\";\n})(OnlineState || (OnlineState = {}));\n\n//# sourceMappingURL=types.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/view_snapshot.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType || (ChangeType = {}));\nvar SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar view_snapshot_DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            fail('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\n\n\n//# sourceMappingURL=view_snapshot.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/document_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nvar document_set_DocumentSet = /** @class */ (function () {\n    /** The default ordering is by key if the comparator is omitted */\n    function DocumentSet(comp) {\n        // We are adding document key comparator to the end as it's the only\n        // guaranteed unique property of a document.\n        if (comp) {\n            this.comparator = function (d1, d2) {\n                return comp(d1, d2) || document_key_DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        else {\n            this.comparator = function (d1, d2) {\n                return document_key_DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        this.keyedMap = documentMap();\n        this.sortedSet = new sorted_map_SortedMap(this.comparator);\n    }\n    /**\n     * Returns an empty copy of the existing DocumentSet, using the same\n     * comparator.\n     */\n    DocumentSet.emptySet = function (oldSet) {\n        return new DocumentSet(oldSet.comparator);\n    };\n    DocumentSet.prototype.has = function (key) {\n        return this.keyedMap.get(key) != null;\n    };\n    DocumentSet.prototype.get = function (key) {\n        return this.keyedMap.get(key);\n    };\n    DocumentSet.prototype.first = function () {\n        return this.sortedSet.minKey();\n    };\n    DocumentSet.prototype.last = function () {\n        return this.sortedSet.maxKey();\n    };\n    DocumentSet.prototype.isEmpty = function () {\n        return this.sortedSet.isEmpty();\n    };\n    /**\n     * Returns previous document or null if it's a first doc.\n     *\n     * @param key A key that MUST be present in the DocumentSet.\n     */\n    DocumentSet.prototype.prevDoc = function (key) {\n        assert(this.has(key), 'Trying to get a previous document to non-existing key: ' + key);\n        var doc = this.keyedMap.get(key);\n        return this.sortedSet.getPredecessorKey(doc);\n    };\n    /**\n     * Returns the index of the provided key in the document set, or -1 if the\n     * document key is not present in the set;\n     */\n    DocumentSet.prototype.indexOf = function (key) {\n        var doc = this.keyedMap.get(key);\n        return doc ? this.sortedSet.indexOf(doc) : -1;\n    };\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\n        get: function () {\n            return this.sortedSet.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Iterates documents in order defined by \"comparator\" */\n    DocumentSet.prototype.forEach = function (cb) {\n        this.sortedSet.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Inserts or updates a document with the same key */\n    DocumentSet.prototype.add = function (doc) {\n        // First remove the element if we have it.\n        var set = this.delete(doc.key);\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n    };\n    /** Deletes a document with a given key */\n    DocumentSet.prototype.delete = function (key) {\n        var doc = this.get(key);\n        if (!doc) {\n            return this;\n        }\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n    };\n    DocumentSet.prototype.equals = function (other) {\n        if (!(other instanceof DocumentSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.sortedSet.getIterator();\n        var otherIt = other.sortedSet.getIterator();\n        while (thisIt.hasNext()) {\n            var thisDoc = thisIt.getNext().key;\n            var otherDoc = otherIt.getNext().key;\n            if (!thisDoc.equals(otherDoc))\n                return false;\n        }\n        return true;\n    };\n    DocumentSet.prototype.toString = function () {\n        var docStrings = [];\n        this.forEach(function (doc) {\n            docStrings.push(doc.toString());\n        });\n        if (docStrings.length === 0) {\n            return 'DocumentSet ()';\n        }\n        else {\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n        }\n    };\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n        var newSet = new DocumentSet();\n        newSet.comparator = this.comparator;\n        newSet.keyedMap = keyedMap;\n        newSet.sortedSet = sortedSet;\n        return newSet;\n    };\n    return DocumentSet;\n}());\n\n\n//# sourceMappingURL=document_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/obj_map.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nvar obj_map_ObjectMap = /** @class */ (function () {\n    function ObjectMap(mapKeyFn) {\n        this.mapKeyFn = mapKeyFn;\n        /**\n         * The inner map for a key -> value pair. Due to the possibility of\n         * collisions we keep a list of entries that we do a linear search through\n         * to find an actual match. Note that collisions should be rare, so we still\n         * expect near constant time lookups in practice.\n         */\n        this.inner = {};\n    }\n    /** Get a value for this key, or undefined if it does not exist. */\n    ObjectMap.prototype.get = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return undefined;\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];\n            if (otherKey.equals(key)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    ObjectMap.prototype.has = function (key) {\n        return this.get(key) !== undefined;\n    };\n    /** Put this key and value in the map. */\n    ObjectMap.prototype.set = function (key, value) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            this.inner[id] = [[key, value]];\n            return;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                matches[i] = [key, value];\n                return;\n            }\n        }\n        matches.push([key, value]);\n    };\n    /**\n     * Remove this key from the map. Returns a boolean if anything was deleted.\n     */\n    ObjectMap.prototype.delete = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return false;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                if (matches.length === 1) {\n                    delete this.inner[id];\n                }\n                else {\n                    matches.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    ObjectMap.prototype.forEach = function (fn) {\n        forEach(this.inner, function (_, entries) {\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                fn(k, v);\n            }\n        });\n    };\n    ObjectMap.prototype.isEmpty = function () {\n        return isEmpty(this.inner);\n    };\n    return ObjectMap;\n}());\n\n\n//# sourceMappingURL=obj_map.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/event_manager.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nvar QueryListenersInfo = /** @class */ (function () {\n    function QueryListenersInfo() {\n        this.listeners = [];\n    }\n    return QueryListenersInfo;\n}());\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nvar event_manager_EventManager = /** @class */ (function () {\n    function EventManager(syncEngine) {\n        this.syncEngine = syncEngine;\n        this.queries = new obj_map_ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.onlineState = OnlineState.Unknown;\n        this.syncEngine.subscribe(this.onChange.bind(this), this.onError.bind(this));\n    }\n    EventManager.prototype.listen = function (listener) {\n        var query = listener.query;\n        var firstListen = false;\n        var queryInfo = this.queries.get(query);\n        if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n            this.queries.set(query, queryInfo);\n        }\n        queryInfo.listeners.push(listener);\n        listener.onOnlineStateChanged(this.onlineState);\n        if (queryInfo.viewSnap)\n            listener.onViewSnapshot(queryInfo.viewSnap);\n        if (firstListen) {\n            return this.syncEngine.listen(query).then(function (targetId) {\n                queryInfo.targetId = targetId;\n                return targetId;\n            });\n        }\n        else {\n            return Promise.resolve(queryInfo.targetId);\n        }\n    };\n    EventManager.prototype.unlisten = function (listener) {\n        var query = listener.query;\n        var lastListen = false;\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            var i = queryInfo.listeners.indexOf(listener);\n            if (i >= 0) {\n                queryInfo.listeners.splice(i, 1);\n                lastListen = queryInfo.listeners.length === 0;\n            }\n        }\n        if (lastListen) {\n            this.queries.delete(query);\n            return this.syncEngine.unlisten(query);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    EventManager.prototype.onChange = function (viewSnaps) {\n        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n            var viewSnap = viewSnaps_1[_i];\n            var query = viewSnap.query;\n            var queryInfo = this.queries.get(query);\n            if (queryInfo) {\n                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {\n                    var listener = _b[_a];\n                    listener.onViewSnapshot(viewSnap);\n                }\n                queryInfo.viewSnap = viewSnap;\n            }\n        }\n    };\n    EventManager.prototype.onError = function (query, error) {\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onError(error);\n            }\n        }\n        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n        // after an error.\n        this.queries.delete(query);\n    };\n    EventManager.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        this.queries.forEach(function (_, queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onOnlineStateChanged(onlineState);\n            }\n        });\n    };\n    return EventManager;\n}());\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nvar event_manager_QueryListener = /** @class */ (function () {\n    function QueryListener(query, queryObserver, options) {\n        this.query = query;\n        this.queryObserver = queryObserver;\n        /**\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n         * observer. This flag is set to true once we've actually raised an event.\n         */\n        this.raisedInitialEvent = false;\n        this.onlineState = OnlineState.Unknown;\n        this.options = options || {};\n    }\n    QueryListener.prototype.onViewSnapshot = function (snap) {\n        assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');\n        if (!this.options.includeDocumentMetadataChanges) {\n            // Remove the metadata only changes.\n            var docChanges = [];\n            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {\n                var docChange = _a[_i];\n                if (docChange.type !== ChangeType.Metadata) {\n                    docChanges.push(docChange);\n                }\n            }\n            snap = {\n                query: snap.query,\n                docs: snap.docs,\n                oldDocs: snap.oldDocs,\n                docChanges: docChanges,\n                fromCache: snap.fromCache,\n                hasPendingWrites: snap.hasPendingWrites,\n                syncStateChanged: snap.syncStateChanged\n            };\n        }\n        if (!this.raisedInitialEvent) {\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n                this.raiseInitialEvent(snap);\n            }\n        }\n        else if (this.shouldRaiseEvent(snap)) {\n            this.queryObserver.next(snap);\n        }\n        this.snap = snap;\n    };\n    QueryListener.prototype.onError = function (error) {\n        this.queryObserver.error(error);\n    };\n    QueryListener.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        if (this.snap &&\n            !this.raisedInitialEvent &&\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n            this.raiseInitialEvent(this.snap);\n        }\n    };\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n        assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');\n        // Always raise the first event when we're synced\n        if (!snap.fromCache) {\n            return true;\n        }\n        // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n        // or Online if we wait long enough).\n        var maybeOnline = onlineState !== OnlineState.Failed;\n        // Don't raise the event if we're online, aren't synced yet (checked\n        // above) and are waiting for a sync.\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\n            assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');\n            return false;\n        }\n        // Raise data from cache if we have any documents or we are offline\n        return !snap.docs.isEmpty() || onlineState === OnlineState.Failed;\n    };\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\n        // We don't need to handle includeDocumentMetadataChanges here because\n        // the Metadata only changes have already been stripped out if needed.\n        // At this point the only changes we will see are the ones we should\n        // propagate.\n        if (snap.docChanges.length > 0) {\n            return true;\n        }\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\n            return this.options.includeQueryMetadataChanges === true;\n        }\n        // Generally we should have hit one of the cases above, but it's possible\n        // to get here if there were only metadata docChanges and they got\n        // stripped out.\n        return false;\n    };\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\n        assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');\n        snap = {\n            query: snap.query,\n            docs: snap.docs,\n            oldDocs: document_set_DocumentSet.emptySet(snap.docs),\n            docChanges: QueryListener.getInitialViewChanges(snap),\n            fromCache: snap.fromCache,\n            hasPendingWrites: snap.hasPendingWrites,\n            syncStateChanged: true\n        };\n        this.raisedInitialEvent = true;\n        this.queryObserver.next(snap);\n    };\n    /** Returns changes as if all documents in the snap were added. */\n    QueryListener.getInitialViewChanges = function (snap) {\n        var result = [];\n        snap.docs.forEach(function (doc) {\n            result.push({ type: ChangeType.Added, doc: doc });\n        });\n        return result;\n    };\n    return QueryListener;\n}());\n\n\n//# sourceMappingURL=event_manager.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/persistence_promise.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nvar persistence_promise_PersistencePromise = /** @class */ (function () {\n    function PersistencePromise(callback) {\n        var _this = this;\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\n        // not the user's raw next() or catch() callbacks.\n        this.nextCallback = null;\n        this.catchCallback = null;\n        // When the operation resolves, we'll set result or error and mark isDone.\n        this.result = undefined;\n        this.error = null;\n        this.isDone = false;\n        // Set to true when .then() or .catch() are called and prevents additional\n        // chaining.\n        this.callbackAttached = false;\n        callback(function (value) {\n            _this.isDone = true;\n            _this.result = value;\n            if (_this.nextCallback) {\n                // value should be defined unless T is Void, but we can't express\n                // that in the type system.\n                _this.nextCallback(value);\n            }\n        }, function (error) {\n            _this.isDone = true;\n            _this.error = error;\n            if (_this.catchCallback) {\n                _this.catchCallback(error);\n            }\n        });\n    }\n    PersistencePromise.prototype.catch = function (fn) {\n        return this.next(undefined, fn);\n    };\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\n        var _this = this;\n        if (this.callbackAttached) {\n            fail('Called next() or catch() twice for PersistencePromise');\n        }\n        this.callbackAttached = true;\n        if (this.isDone) {\n            if (!this.error) {\n                return this.wrapSuccess(nextFn, this.result);\n            }\n            else {\n                return this.wrapFailure(catchFn, this.error);\n            }\n        }\n        else {\n            return new PersistencePromise(function (resolve, reject) {\n                _this.nextCallback = function (value) {\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\n                };\n                _this.catchCallback = function (error) {\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\n                };\n            });\n        }\n    };\n    PersistencePromise.prototype.toPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.next(resolve, reject);\n        });\n    };\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\n        try {\n            var result = fn();\n            if (result instanceof PersistencePromise) {\n                return result;\n            }\n            else {\n                return PersistencePromise.resolve(result);\n            }\n        }\n        catch (e) {\n            return PersistencePromise.reject(e);\n        }\n    };\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n        if (nextFn) {\n            return this.wrapUserFunction(function () { return nextFn(value); });\n        }\n        else {\n            // If there's no nextFn, then R must be the same as T but we\n            // can't express that in the type system.\n            return PersistencePromise.resolve(value);\n        }\n    };\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n        if (catchFn) {\n            return this.wrapUserFunction(function () { return catchFn(error); });\n        }\n        else {\n            return PersistencePromise.reject(error);\n        }\n    };\n    PersistencePromise.resolve = function (result) {\n        return new PersistencePromise(function (resolve, reject) {\n            resolve(result);\n        });\n    };\n    PersistencePromise.reject = function (error) {\n        return new PersistencePromise(function (resolve, reject) {\n            reject(error);\n        });\n    };\n    PersistencePromise.waitFor = function (all) {\n        return all.reduce(function (promise, nextPromise, idx) {\n            return promise.next(function () {\n                return nextPromise;\n            });\n        }, PersistencePromise.resolve());\n    };\n    PersistencePromise.map = function (all) {\n        var results = [];\n        var first = true;\n        // initial is ignored, so we can cheat on the type.\n        var initial = PersistencePromise.resolve(null);\n        return all\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (!first) {\n                    results.push(result);\n                }\n                first = false;\n                return nextPromise;\n            });\n        }, initial)\n            .next(function (result) {\n            results.push(result);\n            return results;\n        });\n    };\n    return PersistencePromise;\n}());\n\n\n//# sourceMappingURL=persistence_promise.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/eager_garbage_collector.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nvar eager_garbage_collector_EagerGarbageCollector = /** @class */ (function () {\n    function EagerGarbageCollector() {\n        this.isEager = true;\n        /**\n         * The garbage collectible sources to double-check during garbage collection.\n         */\n        this.sources = [];\n        /**\n         * A set of potentially garbage keys.\n         * PORTING NOTE: This would be a mutable set if Javascript had one.\n         */\n        this.potentialGarbage = documentKeySet();\n    }\n    EagerGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        this.sources.push(garbageSource);\n        garbageSource.setGarbageCollector(this);\n    };\n    EagerGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        this.sources.splice(this.sources.indexOf(garbageSource), 1);\n        garbageSource.setGarbageCollector(null);\n    };\n    EagerGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        this.potentialGarbage = this.potentialGarbage.add(key);\n    };\n    EagerGarbageCollector.prototype.collectGarbage = function (txn) {\n        var _this = this;\n        var promises = [];\n        var garbageKeys = documentKeySet();\n        this.potentialGarbage.forEach(function (key) {\n            var hasRefsPromise = _this.documentHasAnyReferences(txn, key);\n            promises.push(hasRefsPromise.next(function (hasRefs) {\n                // If there are no references, get the key.\n                if (!hasRefs) {\n                    garbageKeys = garbageKeys.add(key);\n                }\n                return persistence_promise_PersistencePromise.resolve();\n            }));\n        });\n        // Clear locally retained potential keys and returned confirmed garbage.\n        this.potentialGarbage = documentKeySet();\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return garbageKeys; });\n    };\n    EagerGarbageCollector.prototype.documentHasAnyReferences = function (txn, key) {\n        var initial = persistence_promise_PersistencePromise.resolve(false);\n        return this.sources\n            .map(function (source) { return function () { return source.containsKey(txn, key); }; })\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (result) {\n                    return persistence_promise_PersistencePromise.resolve(true);\n                }\n                else {\n                    return nextPromise();\n                }\n            });\n        }, initial);\n    };\n    return EagerGarbageCollector;\n}());\n\n\n//# sourceMappingURL=eager_garbage_collector.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_view_changes.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nvar local_view_changes_LocalViewChanges = /** @class */ (function () {\n    function LocalViewChanges(query, addedKeys, removedKeys) {\n        this.query = query;\n        this.addedKeys = addedKeys;\n        this.removedKeys = removedKeys;\n    }\n    LocalViewChanges.fromSnapshot = function (viewSnapshot) {\n        var addedKeys = documentKeySet();\n        var removedKeys = documentKeySet();\n        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {\n            var docChange = _a[_i];\n            switch (docChange.type) {\n                case ChangeType.Added:\n                    addedKeys = addedKeys.add(docChange.doc.key);\n                    break;\n                case ChangeType.Removed:\n                    removedKeys = removedKeys.add(docChange.doc.key);\n                    break;\n                default:\n            }\n        }\n        return new LocalViewChanges(viewSnapshot.query, addedKeys, removedKeys);\n    };\n    return LocalViewChanges;\n}());\n\n\n//# sourceMappingURL=local_view_changes.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/reference_set.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nvar reference_set_ReferenceSet = /** @class */ (function () {\n    function ReferenceSet() {\n        // A set of outstanding references to a document sorted by key.\n        this.refsByKey = new sorted_set_SortedSet(reference_set_DocReference.compareByKey);\n        // A set of outstanding references to a document sorted by target id.\n        this.refsByTarget = new sorted_set_SortedSet(reference_set_DocReference.compareByTargetId);\n        /** Keeps track of keys that have references */\n        this.garbageCollector = null;\n    }\n    /** Returns true if the reference set contains no references. */\n    ReferenceSet.prototype.isEmpty = function () {\n        return this.refsByKey.isEmpty();\n    };\n    /** Adds a reference to the given document key for the given ID. */\n    ReferenceSet.prototype.addReference = function (key, id) {\n        var ref = new reference_set_DocReference(key, id);\n        this.refsByKey = this.refsByKey.add(ref);\n        this.refsByTarget = this.refsByTarget.add(ref);\n    };\n    /** Add references to the given document keys for the given ID. */\n    ReferenceSet.prototype.addReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.addReference(key, id); });\n    };\n    /**\n     * Removes a reference to the given document key for the given\n     * ID.\n     */\n    ReferenceSet.prototype.removeReference = function (key, id) {\n        this.removeRef(new reference_set_DocReference(key, id));\n    };\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\n    };\n    /**\n     * Clears all references with a given ID. Calls removeRef() for each key\n     * removed.\n     */\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\n        var _this = this;\n        var emptyKey = document_key_DocumentKey.EMPTY;\n        var startRef = new reference_set_DocReference(emptyKey, id);\n        var endRef = new reference_set_DocReference(emptyKey, id + 1);\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            _this.removeRef(ref);\n        });\n    };\n    ReferenceSet.prototype.removeAllReferences = function () {\n        var _this = this;\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\n    };\n    ReferenceSet.prototype.removeRef = function (ref) {\n        this.refsByKey = this.refsByKey.delete(ref);\n        this.refsByTarget = this.refsByTarget.delete(ref);\n        if (this.garbageCollector !== null) {\n            this.garbageCollector.addPotentialGarbageKey(ref.key);\n        }\n    };\n    ReferenceSet.prototype.referencesForId = function (id) {\n        var emptyKey = document_key_DocumentKey.EMPTY;\n        var startRef = new reference_set_DocReference(emptyKey, id);\n        var endRef = new reference_set_DocReference(emptyKey, id + 1);\n        var keys = documentKeySet();\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            keys = keys.add(ref.key);\n        });\n        return keys;\n    };\n    ReferenceSet.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    ReferenceSet.prototype.containsKey = function (txn, key) {\n        var ref = new reference_set_DocReference(key, 0);\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n        return persistence_promise_PersistencePromise.resolve(firstRef !== null && key.equals(firstRef.key));\n    };\n    return ReferenceSet;\n}());\n\nvar reference_set_DocReference = /** @class */ (function () {\n    function DocReference(key, targetOrBatchId) {\n        this.key = key;\n        this.targetOrBatchId = targetOrBatchId;\n    }\n    /** Compare by key then by ID */\n    DocReference.compareByKey = function (left, right) {\n        return (document_key_DocumentKey.comparator(left.key, right.key) ||\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\n    };\n    /** Compare by ID then by key */\n    DocReference.compareByTargetId = function (left, right) {\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n            document_key_DocumentKey.comparator(left.key, right.key));\n    };\n    return DocReference;\n}());\n\n\n//# sourceMappingURL=reference_set.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/target_id_generator.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\n\n\n//# sourceMappingURL=target_id_generator.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/view.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar AddedLimboDocument = /** @class */ (function () {\n    function AddedLimboDocument(key) {\n        this.key = key;\n    }\n    return AddedLimboDocument;\n}());\n\nvar RemovedLimboDocument = /** @class */ (function () {\n    function RemovedLimboDocument(key) {\n        this.key = key;\n    }\n    return RemovedLimboDocument;\n}());\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nvar view_View = /** @class */ (function () {\n    function View(query, \n        /** Documents included in the remote target */\n        syncedDocuments) {\n        this.query = query;\n        this.syncedDocuments = syncedDocuments;\n        this.syncState = null;\n        /**\n         * A flag whether the view is current with the backend. A view is considered\n         * current after it has seen the current flag from the backend and did not\n         * lose consistency within the watch stream (e.g. because of an existence\n         * filter mismatch).\n         */\n        this.current = false;\n        /** Documents in the view but not in the remote target */\n        this.limboDocuments = documentKeySet();\n        /** Document Keys that have local changes */\n        this.mutatedKeys = documentKeySet();\n        this.documentSet = new document_set_DocumentSet(query.docComparator.bind(query));\n    }\n    /**\n     * Iterates over a set of doc changes, applies the query limit, and computes\n     * what the new results should be, what the changes were, and whether we may\n     * need to go back to the local cache for more results. Does not make any\n     * changes to the view.\n     * @param docChanges The doc changes to apply to this view.\n     * @param previousChanges If this is being called with a refill, then start\n     *        with this set of docs and changes instead of the current view.\n     * @return a new set of docs, changes, and refill flag.\n     */\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n        var _this = this;\n        var changeSet = previousChanges\n            ? previousChanges.changeSet\n            : new view_snapshot_DocumentChangeSet();\n        var oldDocumentSet = previousChanges\n            ? previousChanges.documentSet\n            : this.documentSet;\n        var newMutatedKeys = previousChanges\n            ? previousChanges.mutatedKeys\n            : this.mutatedKeys;\n        var newDocumentSet = oldDocumentSet;\n        var needsRefill = false;\n        // Track the last doc in a (full) limit. This is necessary, because some\n        // update (a delete, or an update moving a doc past the old limit) might\n        // mean there is some other document in the local cache that either should\n        // come (1) between the old last limit doc and the new last document, in the\n        // case of updates, or (2) after the new last document, in the case of\n        // deletes. So we keep this doc at the old limit to compare the updates to.\n        //\n        // Note that this should never get used in a refill (when previousChanges is\n        // set), because there will only be adds -- no deletes or updates.\n        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit\n            ? oldDocumentSet.last()\n            : null;\n        docChanges.inorderTraversal(function (key, newMaybeDoc) {\n            var oldDoc = oldDocumentSet.get(key);\n            var newDoc = newMaybeDoc instanceof document_Document ? newMaybeDoc : null;\n            if (newDoc) {\n                assert(key.equals(newDoc.key), 'Mismatching keys found in document changes: ' +\n                    key +\n                    ' != ' +\n                    newDoc.key);\n                newDoc = _this.query.matches(newDoc) ? newDoc : null;\n            }\n            if (newDoc) {\n                newDocumentSet = newDocumentSet.add(newDoc);\n                if (newDoc.hasLocalMutations) {\n                    newMutatedKeys = newMutatedKeys.add(key);\n                }\n                else {\n                    newMutatedKeys = newMutatedKeys.delete(key);\n                }\n            }\n            else {\n                newDocumentSet = newDocumentSet.delete(key);\n                newMutatedKeys = newMutatedKeys.delete(key);\n            }\n            // Calculate change\n            if (oldDoc && newDoc) {\n                var docsEqual = oldDoc.data.equals(newDoc.data);\n                if (!docsEqual ||\n                    oldDoc.hasLocalMutations !== newDoc.hasLocalMutations) {\n                    // only report a change if document actually changed\n                    if (docsEqual) {\n                        changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n                    }\n                    else {\n                        changeSet.track({ type: ChangeType.Modified, doc: newDoc });\n                    }\n                    if (lastDocInLimit &&\n                        _this.query.docComparator(newDoc, lastDocInLimit) > 0) {\n                        // This doc moved from inside the limit to after the limit.\n                        // That means there may be some doc in the local cache that's\n                        // actually less than this one.\n                        needsRefill = true;\n                    }\n                }\n            }\n            else if (!oldDoc && newDoc) {\n                changeSet.track({ type: ChangeType.Added, doc: newDoc });\n            }\n            else if (oldDoc && !newDoc) {\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n                if (lastDocInLimit) {\n                    // A doc was removed from a full limit query. We'll need to\n                    // requery from the local cache to see if we know about some other\n                    // doc that should be in the results.\n                    needsRefill = true;\n                }\n            }\n        });\n        if (this.query.hasLimit()) {\n            // TODO(klimt): Make DocumentSet size be constant time.\n            while (newDocumentSet.size > this.query.limit) {\n                var oldDoc = newDocumentSet.last();\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n            }\n        }\n        assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');\n        return {\n            documentSet: newDocumentSet,\n            changeSet: changeSet,\n            needsRefill: needsRefill,\n            mutatedKeys: newMutatedKeys\n        };\n    };\n    /**\n     * Updates the view with the given ViewDocumentChanges and updates limbo docs\n     * and sync state from the given (optional) target change.\n     * @param docChanges The set of changes to make to the view's docs.\n     * @param targetChange A target change to apply for computing limbo docs and\n     *        sync state.\n     * @return A new ViewChange with the given docs, changes, and sync state.\n     */\n    View.prototype.applyChanges = function (docChanges, targetChange) {\n        var _this = this;\n        assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');\n        var oldDocs = this.documentSet;\n        this.documentSet = docChanges.documentSet;\n        this.mutatedKeys = docChanges.mutatedKeys;\n        // Sort changes based on type and query comparator\n        var changes = docChanges.changeSet.getChanges();\n        changes.sort(function (c1, c2) {\n            return (compareChangeType(c1.type, c2.type) ||\n                _this.query.docComparator(c1.doc, c2.doc));\n        });\n        var limboChanges = this.applyTargetChange(targetChange);\n        var synced = this.limboDocuments.size === 0 && this.current;\n        var newSyncState = synced ? SyncState.Synced : SyncState.Local;\n        var syncStateChanged = newSyncState !== this.syncState;\n        this.syncState = newSyncState;\n        if (changes.length === 0 && !syncStateChanged) {\n            // no changes\n            return { limboChanges: limboChanges };\n        }\n        else {\n            return {\n                snapshot: {\n                    query: this.query,\n                    docs: docChanges.documentSet,\n                    oldDocs: oldDocs,\n                    docChanges: changes,\n                    fromCache: newSyncState === SyncState.Local,\n                    syncStateChanged: syncStateChanged,\n                    hasPendingWrites: !docChanges.mutatedKeys.isEmpty()\n                },\n                limboChanges: limboChanges\n            };\n        }\n    };\n    /**\n     * Returns whether the doc for the given key should be in limbo.\n     */\n    View.prototype.shouldBeInLimbo = function (key) {\n        // If the remote end says it's part of this query, it's not in limbo.\n        if (this.syncedDocuments.has(key)) {\n            return false;\n        }\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\n        if (!this.documentSet.has(key)) {\n            return false;\n        }\n        // If there are local changes to the doc, they might explain why the server\n        // doesn't know that it's part of the query. So don't put it in limbo.\n        // TODO(klimt): Ideally, we would only consider changes that might actually\n        // affect this specific query.\n        if (this.documentSet.get(key).hasLocalMutations) {\n            return false;\n        }\n        // Everything else is in limbo.\n        return true;\n    };\n    /**\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\n     * Returns the list of changes to which docs are in limbo.\n     */\n    View.prototype.applyTargetChange = function (targetChange) {\n        var _this = this;\n        if (targetChange) {\n            var targetMapping = targetChange.mapping;\n            if (targetMapping instanceof ResetMapping) {\n                this.syncedDocuments = targetMapping.documents;\n            }\n            else if (targetMapping instanceof UpdateMapping) {\n                this.syncedDocuments = targetMapping.applyToKeySet(this.syncedDocuments);\n            }\n            switch (targetChange.currentStatusUpdate) {\n                case CurrentStatusUpdate.MarkCurrent:\n                    this.current = true;\n                    break;\n                case CurrentStatusUpdate.MarkNotCurrent:\n                    this.current = false;\n                    break;\n                case CurrentStatusUpdate.None:\n                    break;\n                default:\n                    fail('Unknown current status update: ' + targetChange.currentStatusUpdate);\n            }\n        }\n        // Recompute the set of limbo docs.\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\n        // updating many documents.\n        var oldLimboDocuments = this.limboDocuments;\n        this.limboDocuments = documentKeySet();\n        if (this.current) {\n            this.documentSet.forEach(function (doc) {\n                if (_this.shouldBeInLimbo(doc.key)) {\n                    _this.limboDocuments = _this.limboDocuments.add(doc.key);\n                }\n            });\n        }\n        // Diff the new limbo docs with the old limbo docs.\n        var changes = [];\n        oldLimboDocuments.forEach(function (key) {\n            if (!_this.limboDocuments.has(key)) {\n                changes.push(new RemovedLimboDocument(key));\n            }\n        });\n        this.limboDocuments.forEach(function (key) {\n            if (!oldLimboDocuments.has(key)) {\n                changes.push(new AddedLimboDocument(key));\n            }\n        });\n        return changes;\n    };\n    return View;\n}());\n\nfunction compareChangeType(c1, c2) {\n    var order = function (change) {\n        switch (change) {\n            case ChangeType.Added:\n                return 1;\n            case ChangeType.Modified:\n                return 2;\n            case ChangeType.Metadata:\n                // A metadata change is converted to a modified change at the public\n                // api layer.  Since we sort by document key and then change type,\n                // metadata and modified changes must be sorted equivalently.\n                return 2;\n            case ChangeType.Removed:\n                return 0;\n            default:\n                return fail('Unknown ChangeType: ' + change);\n        }\n    };\n    return order(c1) - order(c2);\n}\n\n//# sourceMappingURL=view.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/sync_engine.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar sync_engine_LOG_TAG = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nvar QueryView = /** @class */ (function () {\n    function QueryView(\n        /**\n         * The query itself.\n         */\n        query, \n        /**\n         * The target number created by the client that is used in the watch\n         * stream to identify this query.\n         */\n        targetId, \n        /**\n         * An identifier from the datastore backend that indicates the last state\n         * of the results that was received. This can be used to indicate where\n         * to continue receiving new doc changes for the query.\n         */\n        resumeToken, \n        /**\n         * The view is responsible for computing the final merged truth of what\n         * docs are in the query. It gets notified of local and remote changes,\n         * and applies the query filters and limits to determine the most correct\n         * possible results.\n         */\n        view) {\n        this.query = query;\n        this.targetId = targetId;\n        this.resumeToken = resumeToken;\n        this.view = view;\n    }\n    return QueryView;\n}());\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nvar sync_engine_SyncEngine = /** @class */ (function () {\n    function SyncEngine(localStore, remoteStore, currentUser) {\n        this.localStore = localStore;\n        this.remoteStore = remoteStore;\n        this.currentUser = currentUser;\n        this.viewHandler = null;\n        this.errorHandler = null;\n        this.queryViewsByQuery = new obj_map_ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.queryViewsByTarget = {};\n        this.limboTargetsByKey = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\n        this.limboKeysByTarget = {};\n        this.limboDocumentRefs = new reference_set_ReferenceSet();\n        this.limboCollector = new eager_garbage_collector_EagerGarbageCollector();\n        /** Stores user completion handlers, indexed by User and BatchId. */\n        this.mutationUserCallbacks = {};\n        this.targetIdGenerator = TargetIdGenerator.forSyncEngine();\n    }\n    /** Subscribes view and error handler. Can be called only once. */\n    SyncEngine.prototype.subscribe = function (viewHandler, errorHandler) {\n        assert(viewHandler !== null && errorHandler !== null, 'View and error handlers cannot be null');\n        assert(this.viewHandler === null && this.errorHandler === null, 'SyncEngine already has a subscriber.');\n        this.viewHandler = viewHandler;\n        this.errorHandler = errorHandler;\n        this.limboCollector.addGarbageSource(this.limboDocumentRefs);\n    };\n    /**\n     * Initiates the new listen, resolves promise when listen enqueued to the\n     * server. All the subsequent view snapshots or errors are sent to the\n     * subscribed handlers. Returns the targetId of the query.\n     */\n    SyncEngine.prototype.listen = function (query) {\n        var _this = this;\n        this.assertSubscribed('listen()');\n        assert(!this.queryViewsByQuery.has(query), 'We already listen to the query: ' + query);\n        return this.localStore.allocateQuery(query).then(function (queryData) {\n            return _this.localStore\n                .executeQuery(query)\n                .then(function (docs) {\n                return _this.localStore\n                    .remoteDocumentKeys(queryData.targetId)\n                    .then(function (remoteKeys) {\n                    var view = new view_View(query, remoteKeys);\n                    var viewDocChanges = view.computeDocChanges(docs);\n                    var viewChange = view.applyChanges(viewDocChanges);\n                    assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');\n                    assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');\n                    var data = new QueryView(query, queryData.targetId, queryData.resumeToken, view);\n                    _this.queryViewsByQuery.set(query, data);\n                    _this.queryViewsByTarget[queryData.targetId] = data;\n                    _this.viewHandler([viewChange.snapshot]);\n                    _this.remoteStore.listen(queryData);\n                });\n            })\n                .then(function () {\n                return queryData.targetId;\n            });\n        });\n    };\n    /** Stops listening to the query. */\n    SyncEngine.prototype.unlisten = function (query) {\n        var _this = this;\n        this.assertSubscribed('unlisten()');\n        var queryView = this.queryViewsByQuery.get(query);\n        assert(!!queryView, 'Trying to unlisten on query not found:' + query);\n        return this.localStore.releaseQuery(query).then(function () {\n            _this.remoteStore.unlisten(queryView.targetId);\n            return _this.removeAndCleanupQuery(queryView).then(function () {\n                return _this.localStore.collectGarbage();\n            });\n        });\n    };\n    /**\n     * Initiates the write of local mutation batch which involves adding the\n     * writes to the mutation queue, notifying the remote store about new\n     * mutations and raising events for any changes this write caused.\n     *\n     * The promise returned by this call is resolved when the above steps\n     * have completed, *not* when the write was acked by the backend. The\n     * userCallback is resolved once the write was acked/rejected by the\n     * backend (or failed locally for any other reason).\n     */\n    SyncEngine.prototype.write = function (batch, userCallback) {\n        var _this = this;\n        this.assertSubscribed('write()');\n        return this.localStore\n            .localWrite(batch)\n            .then(function (result) {\n            _this.addMutationCallback(result.batchId, userCallback);\n            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);\n        })\n            .then(function () {\n            return _this.remoteStore.fillWritePipeline();\n        });\n    };\n    // TODO(klimt): Wrap the given error in a standard Firestore error object.\n    SyncEngine.prototype.wrapUpdateFunctionError = function (error) {\n        return error;\n    };\n    /**\n     * Takes an updateFunction in which a set of reads and writes can be performed\n     * atomically. In the updateFunction, the client can read and write values\n     * using the supplied transaction object. After the updateFunction, all\n     * changes will be committed. If some other client has changed any of the data\n     * referenced, then the updateFunction will be called again. If the\n     * updateFunction still fails after the given number of retries, then the\n     * transaction will be rejection.\n     *\n     * The transaction object passed to the updateFunction contains methods for\n     * accessing documents and collections. Unlike other datastore access, data\n     * accessed with the transaction will not reflect local changes that have not\n     * been committed. For this reason, it is required that all reads are\n     * performed before any writes. Transactions must be performed while online.\n     *\n     * The promise returned is resolved when the transaction is fully committed.\n     */\n    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {\n        var _this = this;\n        if (retries === void 0) { retries = 5; }\n        assert(retries >= 0, 'Got negative number of retries for transaction.');\n        var transaction = this.remoteStore.createTransaction();\n        var wrappedUpdateFunction = function () {\n            try {\n                var userPromise = updateFunction(transaction);\n                if (isNullOrUndefined(userPromise) ||\n                    !userPromise.catch ||\n                    !userPromise.then) {\n                    return Promise.reject(Error('Transaction callback must return a Promise'));\n                }\n                return userPromise.catch(function (e) {\n                    return Promise.reject(_this.wrapUpdateFunctionError(e));\n                });\n            }\n            catch (e) {\n                return Promise.reject(_this.wrapUpdateFunctionError(e));\n            }\n        };\n        return wrappedUpdateFunction().then(function (result) {\n            return transaction\n                .commit()\n                .then(function () {\n                return result;\n            })\n                .catch(function (error) {\n                if (retries === 0) {\n                    return Promise.reject(error);\n                }\n                // TODO(klimt): Put in a retry delay?\n                return _this.runTransaction(updateFunction, retries - 1);\n            });\n        });\n    };\n    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        this.assertSubscribed('applyRemoteEvent()');\n        // Make sure limbo documents are deleted if there were no results\n        forEachNumber(remoteEvent.targetChanges, function (targetId, targetChange) {\n            var limboKey = _this.limboKeysByTarget[targetId];\n            if (limboKey &&\n                targetChange.currentStatusUpdate ===\n                    CurrentStatusUpdate.MarkCurrent &&\n                !remoteEvent.documentUpdates.get(limboKey)) {\n                // When listening to a query the server responds with a snapshot\n                // containing documents matching the query and a current marker\n                // telling us we're now in sync. It's possible for these to arrive\n                // as separate remote events or as a single remote event.\n                // For a document query, there will be no documents sent in the\n                // response if the document doesn't exist.\n                //\n                // If the snapshot arrives separately from the current marker,\n                // we handle it normally and updateTrackedLimbos will resolve the\n                // limbo status of the document, removing it from limboDocumentRefs.\n                // This works because clients only initiate limbo resolution when\n                // a target is current and because all current targets are\n                // always at a consistent snapshot.\n                //\n                // However, if the document doesn't exist and the current marker\n                // arrives, the document is not present in the snapshot and our\n                // normal view handling would consider the document to remain in\n                // limbo indefinitely because there are no updates to the document.\n                // To avoid this, we specially handle this just this case here:\n                // synthesizing a delete.\n                //\n                // TODO(dimond): Ideally we would have an explicit lookup query\n                // instead resulting in an explicit delete message and we could\n                // remove this special logic.\n                remoteEvent.addDocumentUpdate(new document_NoDocument(limboKey, remoteEvent.snapshotVersion));\n            }\n        });\n        return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n        });\n    };\n    SyncEngine.prototype.rejectListen = function (targetId, err) {\n        var _this = this;\n        this.assertSubscribed('rejectListens()');\n        var limboKey = this.limboKeysByTarget[targetId];\n        if (limboKey) {\n            // Since this query failed, we won't want to manually unlisten to it.\n            // So go ahead and remove it from bookkeeping.\n            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);\n            delete this.limboKeysByTarget[targetId];\n            // TODO(klimt): We really only should do the following on permission\n            // denied errors, but we don't have the cause code here.\n            // It's a limbo doc. Create a synthetic event saying it was deleted.\n            // This is kind of a hack. Ideally, we would have a method in the local\n            // store to purge a document. However, it would be tricky to keep all of\n            // the local store's invariants with another method.\n            var docMap = new sorted_map_SortedMap(document_key_DocumentKey.comparator);\n            docMap = docMap.insert(limboKey, new document_NoDocument(limboKey, snapshot_version_SnapshotVersion.forDeletedDoc()));\n            var event_1 = new remote_event_RemoteEvent(snapshot_version_SnapshotVersion.MIN, {}, docMap);\n            return this.applyRemoteEvent(event_1);\n        }\n        else {\n            var queryView_1 = this.queryViewsByTarget[targetId];\n            assert(!!queryView_1, 'Unknown targetId: ' + targetId);\n            return this.localStore.releaseQuery(queryView_1.query).then(function () {\n                return _this.removeAndCleanupQuery(queryView_1).then(function () {\n                    _this.errorHandler(queryView_1.query, err);\n                });\n            });\n        }\n    };\n    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {\n        var _this = this;\n        this.assertSubscribed('applySuccessfulWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught\n        // up), so we raise user callbacks first so that they consistently happen\n        // before listen events.\n        this.processUserCallback(mutationBatchResult.batch.batchId, \n        /*error=*/ null);\n        return this.localStore\n            .acknowledgeBatch(mutationBatchResult)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {\n        var _this = this;\n        this.assertSubscribed('rejectFailedWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught up),\n        // so we raise user callbacks first so that they consistently happen before\n        // listen events.\n        this.processUserCallback(batchId, error);\n        return this.localStore.rejectBatch(batchId).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        if (!newCallbacks) {\n            newCallbacks = new sorted_map_SortedMap(primitiveComparator);\n        }\n        newCallbacks = newCallbacks.insert(batchId, callback);\n        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    };\n    /**\n     * Resolves or rejects the user callback for the given batch and then discards\n     * it.\n     */\n    SyncEngine.prototype.processUserCallback = function (batchId, error) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        // NOTE: Mutations restored from persistence won't have callbacks, so it's\n        // okay for there to be no callback for this ID.\n        if (newCallbacks) {\n            var callback = newCallbacks.get(batchId);\n            if (callback) {\n                assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');\n                if (error) {\n                    callback.reject(error);\n                }\n                else {\n                    callback.resolve();\n                }\n                newCallbacks = newCallbacks.remove(batchId);\n            }\n            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n        }\n    };\n    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {\n        this.queryViewsByQuery.delete(queryView.query);\n        delete this.queryViewsByTarget[queryView.targetId];\n        this.limboDocumentRefs.removeReferencesForId(queryView.targetId);\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {\n        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n            var limboChange = limboChanges_1[_i];\n            if (limboChange instanceof AddedLimboDocument) {\n                this.limboDocumentRefs.addReference(limboChange.key, targetId);\n                this.trackLimboChange(limboChange);\n            }\n            else if (limboChange instanceof RemovedLimboDocument) {\n                debug(sync_engine_LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n                this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n            }\n            else {\n                fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n            }\n        }\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.trackLimboChange = function (limboChange) {\n        var key = limboChange.key;\n        if (!this.limboTargetsByKey.get(key)) {\n            debug(sync_engine_LOG_TAG, 'New document in limbo: ' + key);\n            var limboTargetId = this.targetIdGenerator.next();\n            var query = query_Query.atPath(key.path);\n            this.limboKeysByTarget[limboTargetId] = key;\n            this.remoteStore.listen(new query_data_QueryData(query, limboTargetId, QueryPurpose.Listen));\n            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);\n        }\n    };\n    SyncEngine.prototype.gcLimboDocuments = function () {\n        var _this = this;\n        // HACK: We can use a null transaction here, because we know that the\n        // reference set is entirely within memory and doesn't need a store engine.\n        return this.limboCollector\n            .collectGarbage(null)\n            .next(function (keys) {\n            keys.forEach(function (key) {\n                var limboTargetId = _this.limboTargetsByKey.get(key);\n                if (limboTargetId === null) {\n                    // This target already got removed, because the query failed.\n                    return;\n                }\n                _this.remoteStore.unlisten(limboTargetId);\n                _this.limboTargetsByKey = _this.limboTargetsByKey.remove(key);\n                delete _this.limboKeysByTarget[limboTargetId];\n            });\n        })\n            .toPromise();\n    };\n    // Visible for testing\n    SyncEngine.prototype.currentLimboDocs = function () {\n        return this.limboTargetsByKey;\n    };\n    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {\n        var _this = this;\n        var newSnaps = [];\n        var docChangesInAllViews = [];\n        var queriesProcessed = [];\n        this.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(Promise.resolve()\n                .then(function () {\n                var viewDocChanges = queryView.view.computeDocChanges(changes);\n                if (!viewDocChanges.needsRefill) {\n                    return viewDocChanges;\n                }\n                // The query has a limit and some docs were removed, so we need\n                // to re-run the query against the local store to make sure we\n                // didn't lose any good docs that had been past the limit.\n                return _this.localStore.executeQuery(queryView.query).then(function (docs) {\n                    return queryView.view.computeDocChanges(docs, viewDocChanges);\n                });\n            })\n                .then(function (viewDocChanges) {\n                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];\n                var viewChange = queryView.view.applyChanges(viewDocChanges, targetChange);\n                return _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges).then(function () {\n                    if (viewChange.snapshot) {\n                        newSnaps.push(viewChange.snapshot);\n                        var docChanges = local_view_changes_LocalViewChanges.fromSnapshot(viewChange.snapshot);\n                        docChangesInAllViews.push(docChanges);\n                    }\n                });\n            }));\n        });\n        return Promise.all(queriesProcessed)\n            .then(function () {\n            _this.viewHandler(newSnaps);\n            return _this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n        })\n            .then(function () {\n            return _this.localStore.collectGarbage();\n        });\n    };\n    SyncEngine.prototype.assertSubscribed = function (fnName) {\n        assert(this.viewHandler !== null && this.errorHandler !== null, 'Trying to call ' + fnName + ' before calling subscribe().');\n    };\n    SyncEngine.prototype.handleUserChange = function (user) {\n        var _this = this;\n        this.currentUser = user;\n        return this.localStore\n            .handleUserChange(user)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        })\n            .then(function () {\n            return _this.remoteStore.handleUserChange(user);\n        });\n    };\n    return SyncEngine;\n}());\n\n\n//# sourceMappingURL=sync_engine.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/model/mutation_batch.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar BATCHID_UNKNOWN = -1;\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nvar mutation_batch_MutationBatch = /** @class */ (function () {\n    function MutationBatch(batchId, localWriteTime, mutations) {\n        this.batchId = batchId;\n        this.localWriteTime = localWriteTime;\n        this.mutations = mutations;\n    }\n    /**\n     * Applies all the mutations in this MutationBatch to the specified document\n     * to create a new remote document\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     * @param batchResult The result of applying the MutationBatch to the\n     * backend.\n     */\n    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(docKey), \"applyToRemoteDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var mutationResults = batchResult.mutationResults;\n        assert(mutationResults.length === this.mutations.length, \"Mismatch between mutations length\\n      (\" + this.mutations.length + \") and mutation results length\\n      (\" + mutationResults.length + \").\");\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                var mutationResult = mutationResults[i];\n                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n            }\n        }\n        return maybeDoc;\n    };\n    /**\n     * Computes the local view of a document given all the mutations in this\n     * batch.\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     */\n    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(docKey), \"applyToLocalDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                maybeDoc = mutation.applyToLocalView(maybeDoc, this.localWriteTime);\n            }\n        }\n        return maybeDoc;\n    };\n    MutationBatch.prototype.keys = function () {\n        var keySet = documentKeySet();\n        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {\n            var mutation = _a[_i];\n            keySet = keySet.add(mutation.key);\n        }\n        return keySet;\n    };\n    MutationBatch.prototype.equals = function (other) {\n        return (this.batchId === other.batchId &&\n            arrayEquals(this.mutations, other.mutations));\n    };\n    /**\n     * Returns true if this mutation batch has already been removed from the\n     * mutation queue.\n     *\n     * Note that not all implementations of the MutationQueue necessarily use\n     * tombstones as part of their implementation and generally speaking no code\n     * outside the mutation queues should really care about this.\n     */\n    MutationBatch.prototype.isTombstone = function () {\n        return this.mutations.length === 0;\n    };\n    /** Converts this batch into a tombstone */\n    MutationBatch.prototype.toTombstone = function () {\n        return new MutationBatch(this.batchId, this.localWriteTime, []);\n    };\n    return MutationBatch;\n}());\n\n/** The result of applying a mutation batch to the backend. */\nvar mutation_batch_MutationBatchResult = /** @class */ (function () {\n    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, \n        /**\n         * A pre-computed mapping from each mutated document to the resulting\n         * version.\n         */\n        docVersions) {\n        this.batch = batch;\n        this.commitVersion = commitVersion;\n        this.mutationResults = mutationResults;\n        this.streamToken = streamToken;\n        this.docVersions = docVersions;\n    }\n    /**\n     * Creates a new MutationBatchResult for the given batch and results. There\n     * must be one result for each mutation in the batch. This static factory\n     * caches a document=>version mapping (docVersions).\n     */\n    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {\n        assert(batch.mutations.length === results.length, 'Mutations sent ' +\n            batch.mutations.length +\n            ' must equal results received ' +\n            results.length);\n        var versionMap = documentVersionMap();\n        var mutations = batch.mutations;\n        for (var i = 0; i < mutations.length; i++) {\n            var version = results[i].version;\n            if (version === null) {\n                // deletes don't have a version, so we substitute the commitVersion\n                // of the entire batch.\n                version = commitVersion;\n            }\n            versionMap = versionMap.insert(mutations[i].key, version);\n        }\n        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);\n    };\n    return MutationBatchResult;\n}());\n\n\n//# sourceMappingURL=mutation_batch.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/encoded_resource_path.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nfunction encode(path) {\n    var result = '';\n    for (var i = 0; i < path.length; i++) {\n        if (result.length > 0) {\n            result = encodeSeparator(result);\n        }\n        result = encodeSegment(path.get(i), result);\n    }\n    return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n    var result = resultBuf;\n    var length = segment.length;\n    for (var i = 0; i < length; i++) {\n        var c = segment.charAt(i);\n        switch (c) {\n            case '\\0':\n                result += escapeChar + encodedNul;\n                break;\n            case escapeChar:\n                result += escapeChar + encodedEscape;\n                break;\n            default:\n                result += c;\n        }\n    }\n    return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n    return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nfunction decode(path) {\n    // Event the empty path must encode as a path of at least length 2. A path\n    // with exactly 2 must be the empty path.\n    var length = path.length;\n    assert(length >= 2, 'Invalid path ' + path);\n    if (length === 2) {\n        assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');\n        return path_ResourcePath.EMPTY_PATH;\n    }\n    // Escape characters cannot exist past the second-to-last position in the\n    // source value.\n    var lastReasonableEscapeIndex = length - 2;\n    var segments = [];\n    var segmentBuilder = '';\n    for (var start = 0; start < length;) {\n        // The last two characters of a valid encoded path must be a separator, so\n        // there must be an end to this segment.\n        var end = path.indexOf(escapeChar, start);\n        if (end < 0 || end > lastReasonableEscapeIndex) {\n            fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        var next = path.charAt(end + 1);\n        switch (next) {\n            case encodedSeparatorChar:\n                var currentPiece = path.substring(start, end);\n                var segment = void 0;\n                if (segmentBuilder.length === 0) {\n                    // Avoid copying for the common case of a segment that excludes \\0\n                    // and \\001\n                    segment = currentPiece;\n                }\n                else {\n                    segmentBuilder += currentPiece;\n                    segment = segmentBuilder;\n                    segmentBuilder = '';\n                }\n                segments.push(segment);\n                break;\n            case encodedNul:\n                segmentBuilder += path.substring(start, end);\n                segmentBuilder += '\\0';\n                break;\n            case encodedEscape:\n                // The escape character can be used in the output to encode itself.\n                segmentBuilder += path.substring(start, end + 1);\n                break;\n            default:\n                fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        start = end + 2;\n    }\n    return new path_ResourcePath(segments);\n}\n/**\n * Computes the prefix successor of the given path, computed by encode above.\n * A prefix successor is the first key that cannot be prefixed by the given\n * path. It's useful for defining the end of a prefix scan such that all keys\n * in the scan have the same prefix.\n *\n * Note that this is not a general prefix successor implementation, which is\n * tricky to get right with Strings, given that they encode down to UTF-8.\n * Instead this relies on the fact that all paths encoded by this class are\n * always terminated with a separator, and so a successor can always be\n * cheaply computed by incrementing the last character of the path.\n */\nfunction prefixSuccessor(path) {\n    var c = path.charCodeAt(path.length - 1);\n    // TODO(mcg): this really should be a general thing, but not worth it right\n    // now\n    assert(c === 1, 'successor may only operate on paths generated by encode');\n    return path.substring(0, path.length - 1) + String.fromCharCode(c + 1);\n}\n\n//# sourceMappingURL=encoded_resource_path.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_schema.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar SCHEMA_VERSION = 1;\n/** Performs database creation and (in the future) upgrades between versions. */\nfunction createOrUpgradeDb(db, oldVersion) {\n    assert(oldVersion === 0, 'Unexpected upgrade from version ' + oldVersion);\n    db.createObjectStore(DbMutationQueue.store, {\n        keyPath: DbMutationQueue.keyPath\n    });\n    // TODO(mikelehen): Get rid of \"as any\" if/when TypeScript fixes their\n    // types. https://github.com/Microsoft/TypeScript/issues/14322\n    db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbMutationBatch.store, { keyPath: DbMutationBatch.keyPath });\n    var targetDocumentsStore = db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbTargetDocument.store, { keyPath: DbTargetDocument.keyPath });\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\n    var targetStore = db.createObjectStore(DbTarget.store, {\n        keyPath: DbTarget.keyPath\n    });\n    // NOTE: This is unique only because the TargetId is the suffix.\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\n    // NOTE: keys for these stores are specified explicitly rather than using a\n    // keyPath.\n    db.createObjectStore(indexeddb_schema_DbDocumentMutation.store);\n    db.createObjectStore(DbRemoteDocument.store);\n    db.createObjectStore(DbOwner.store);\n    db.createObjectStore(DbTargetGlobal.store);\n}\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nvar DbTimestamp = /** @class */ (function () {\n    function DbTimestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n    }\n    return DbTimestamp;\n}());\n\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can be owned by a single tab at a given time. That tab\n * must validate that it is still the owner before every write operation and\n * should regularly write an updated timestamp to prevent other tabs from\n * \"stealing\" ownership of the db.\n */\nvar DbOwner = /** @class */ (function () {\n    function DbOwner(ownerId, leaseTimestampMs) {\n        this.ownerId = ownerId;\n        this.leaseTimestampMs = leaseTimestampMs;\n    }\n    /** Name of the IndexedDb object store. */\n    DbOwner.store = 'owner';\n    return DbOwner;\n}());\n\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nvar DbMutationQueue = /** @class */ (function () {\n    function DbMutationQueue(\n        /**\n         * The normalized user ID to which this queue belongs.\n         */\n        userId, \n        /**\n         * An identifier for the highest numbered batch that has been acknowledged\n         * by the server. All MutationBatches in this queue with batchIds less\n         * than or equal to this value are considered to have been acknowledged by\n         * the server.\n         */\n        lastAcknowledgedBatchId, \n        /**\n         * A stream token that was previously sent by the server.\n         *\n         * See StreamingWriteRequest in datastore.proto for more details about\n         * usage.\n         *\n         * After sending this token, earlier tokens may not be used anymore so\n         * only a single stream token is retained.\n         */\n        lastStreamToken) {\n        this.userId = userId;\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n        this.lastStreamToken = lastStreamToken;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationQueue.store = 'mutationQueues';\n    /** Keys are automatically assigned via the userId property. */\n    DbMutationQueue.keyPath = 'userId';\n    return DbMutationQueue;\n}());\n\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nvar DbMutationBatch = /** @class */ (function () {\n    function DbMutationBatch(\n        /**\n         * The normalized user ID to which this batch belongs.\n         */\n        userId, \n        /**\n         * An identifier for this batch, allocated by the mutation queue in a\n         * monotonically increasing manner.\n         */\n        batchId, \n        /**\n         * The local write time of the batch, stored as milliseconds since the\n         * epoch.\n         */\n        localWriteTimeMs, \n        /**\n         * A list of mutations to apply. All mutations will be applied atomically.\n         *\n         * Mutations are serialized via JsonProtoSerializer.toMutation().\n         */\n        mutations) {\n        this.userId = userId;\n        this.batchId = batchId;\n        this.localWriteTimeMs = localWriteTimeMs;\n        this.mutations = mutations;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationBatch.store = 'mutations';\n    /** Keys are automatically assigned via the userId, batchId properties. */\n    DbMutationBatch.keyPath = ['userId', 'batchId'];\n    return DbMutationBatch;\n}());\n\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nvar indexeddb_schema_DbDocumentMutation = /** @class */ (function () {\n    function DbDocumentMutation() {\n    }\n    /**\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n     * over all of a user's document mutations.\n     */\n    DbDocumentMutation.prefixForUser = function (userId) {\n        return [userId];\n    };\n    /**\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n     * index to iterate over all at document mutations for a given path or lower.\n     */\n    DbDocumentMutation.prefixForPath = function (userId, path) {\n        return [userId, encode(path)];\n    };\n    /**\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\n     * and deleting into the DbDocumentMutations index.\n     */\n    DbDocumentMutation.key = function (userId, path, batchId) {\n        return [userId, encode(path), batchId];\n    };\n    DbDocumentMutation.store = 'documentMutations';\n    /**\n     * Because we store all the useful information for this store in the key,\n     * there is no useful information to store as the value. The raw (unencoded)\n     * path cannot be stored because IndexedDb doesn't store prototype\n     * information.\n     */\n    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n    return DbDocumentMutation;\n}());\n\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nvar DbNoDocument = /** @class */ (function () {\n    function DbNoDocument(path, readTime) {\n        this.path = path;\n        this.readTime = readTime;\n    }\n    return DbNoDocument;\n}());\n\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb. It\n * represents either a cached document (if it exists) or a cached \"no-document\"\n * (if it is known to not exist).\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nvar DbRemoteDocument = /** @class */ (function () {\n    function DbRemoteDocument(\n        /**\n         * Set to an instance of a DbNoDocument if it is known that no document\n         * exists.\n         */\n        noDocument, \n        /**\n         * Set to an instance of a Document if there's a cached version of the\n         * document.\n         */\n        document) {\n        this.noDocument = noDocument;\n        this.document = document;\n    }\n    DbRemoteDocument.store = 'remoteDocuments';\n    return DbRemoteDocument;\n}());\n\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nvar DbTarget = /** @class */ (function () {\n    function DbTarget(\n        /**\n         * An auto-generated sequential numeric identifier for the query.\n         *\n         * Queries are stored using their canonicalId as the key, but these\n         * canonicalIds can be quite long so we additionally assign a unique\n         * queryId which can be used by referenced data structures (e.g.\n         * indexes) to minimize the on-disk cost.\n         */\n        targetId, \n        /**\n         * The canonical string representing this query. This is not unique.\n         */\n        canonicalId, \n        /**\n         * The last readTime received from the Watch Service for this query.\n         *\n         * This is the same value as TargetChange.read_time in the protos.\n         */\n        readTime, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data\n         * that matches the query. The resume token essentially identifies a\n         * point in time from which the server should resume sending results.\n         *\n         * This is related to the snapshotVersion in that the resumeToken\n         * effectively also encodes that value, but the resumeToken is opaque\n         * and sometimes encodes additional information.\n         *\n         * A consequence of this is that the resumeToken should be used when\n         * asking the server to reason about where this client is in the watch\n         * stream, but the client should use the snapshotVersion for its own\n         * purposes.\n         *\n         * This is the same value as TargetChange.resume_token in the protos.\n         */\n        resumeToken, \n        /**\n         * A sequence number representing the last time this query was\n         * listened to, used for garbage collection purposes.\n         *\n         * Conventionally this would be a timestamp value, but device-local\n         * clocks are unreliable and they must be able to create new listens\n         * even while disconnected. Instead this should be a monotonically\n         * increasing number that's incremented on each listen call.\n         *\n         * This is different from the queryId since the queryId is an\n         * immutable identifier assigned to the Query on first use while\n         * lastListenSequenceNumber is updated every time the query is\n         * listened to.\n         */\n        lastListenSequenceNumber, \n        /**\n         * The query for this target.\n         *\n         * Because canonical ids are not unique we must store the actual query. We\n         * use the proto to have an object we can persist without having to\n         * duplicate translation logic to and from a `Query` object.\n         */\n        query) {\n        this.targetId = targetId;\n        this.canonicalId = canonicalId;\n        this.readTime = readTime;\n        this.resumeToken = resumeToken;\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\n        this.query = query;\n    }\n    DbTarget.store = 'targets';\n    /** Keys are automatically assigned via the targetId property. */\n    DbTarget.keyPath = 'targetId';\n    /** The name of the queryTargets index. */\n    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n    /**\n     * The index of all canonicalIds to the targets that they match. This is not\n     * a unique mapping because canonicalId does not promise a unique name for all\n     * possible queries, so we append the targetId to make the mapping unique.\n     */\n    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n    return DbTarget;\n}());\n\n/**\n * An object representing an association between a target and a document.\n * Stored in the targetDocument object store to store the documents tracked by a\n * particular target.\n */\nvar DbTargetDocument = /** @class */ (function () {\n    function DbTargetDocument(\n        /**\n         * The targetId identifying a target.\n         */\n        targetId, \n        /**\n         * The path to the document, as encoded in the key.\n         */\n        path) {\n        this.targetId = targetId;\n        this.path = path;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbTargetDocument.store = 'targetDocuments';\n    /** Keys are automatically assigned via the targetId, path properties. */\n    DbTargetDocument.keyPath = ['targetId', 'path'];\n    /** The index name for the reverse index. */\n    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n    /** We also need to create the reverse index for these properties. */\n    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n    return DbTargetDocument;\n}());\n\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nvar DbTargetGlobal = /** @class */ (function () {\n    function DbTargetGlobal(\n        /**\n         * The highest numbered target id across all targets.\n         *\n         * See DbTarget.targetId.\n         */\n        highestTargetId, \n        /**\n         * The highest numbered lastListenSequenceNumber across all targets.\n         *\n         * See DbTarget.lastListenSequenceNumber.\n         */\n        highestListenSequenceNumber, \n        /**\n         * A global snapshot version representing the last consistent snapshot we\n         * received from the backend. This is monotonically increasing and any\n         * snapshots received from the backend prior to this version (e.g. for\n         * targets resumed with a resumeToken) should be suppressed (buffered)\n         * until the backend has caught up to this snapshot version again. This\n         * prevents our cache from ever going backwards in time.\n         */\n        lastRemoteSnapshotVersion) {\n        this.highestTargetId = highestTargetId;\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    /**\n     * The key string used for the single object that exists in the\n     * DbTargetGlobal store.\n     */\n    DbTargetGlobal.key = 'targetGlobalKey';\n    DbTargetGlobal.store = 'targetGlobal';\n    return DbTargetGlobal;\n}());\n\n/**\n * The list of all IndexedDB stored used by the SDK. This is used when creating\n * transactions so that access across all stores is done atomically.\n */\nvar ALL_STORES = [\n    DbMutationQueue.store,\n    DbMutationBatch.store,\n    indexeddb_schema_DbDocumentMutation.store,\n    DbRemoteDocument.store,\n    DbTarget.store,\n    DbOwner.store,\n    DbTargetGlobal.store,\n    DbTargetDocument.store\n];\n\n//# sourceMappingURL=indexeddb_schema.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/simple_db.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar simple_db_LOG_TAG = 'SimpleDb';\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nvar simple_db_SimpleDb = /** @class */ (function () {\n    function SimpleDb(db) {\n        this.db = db;\n    }\n    /** Opens the specified database, creating or upgrading it if necessary. */\n    SimpleDb.openOrCreate = function (name, version, runUpgrade) {\n        assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');\n        debug(simple_db_LOG_TAG, 'Opening database:', name);\n        return new persistence_promise_PersistencePromise(function (resolve, reject) {\n            // TODO(mikelehen): Investigate browser compatibility.\n            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n            // suggests IE9 and older WebKit browsers handle upgrade\n            // differently.\n            var request = window.indexedDB.open(name, version);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(new SimpleDb(db));\n            };\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onupgradeneeded = function (event) {\n                debug(simple_db_LOG_TAG, 'Database \"' + name + '\" requires upgrade from version:', event.oldVersion);\n                // TODO(mikelehen): If/when we need to do an actual data\n                // migration, we'll want to wrap db in a SimpleDb and have the\n                // runUpgrade function return a PersistencePromise, since we'll\n                // likely need to do async reads and writes. For now we're\n                // cheating and just passing the raw IndexedDB in, since\n                // createObjectStore(), etc. are synchronous.\n                var db = event.target.result;\n                runUpgrade(db, event.oldVersion);\n            };\n        }).toPromise();\n    };\n    /** Deletes the specified database. */\n    SimpleDb.delete = function (name) {\n        debug(simple_db_LOG_TAG, 'Removing database:', name);\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n    };\n    /** Returns true if IndexedDB is available in the current environment. */\n    SimpleDb.isAvailable = function () {\n        if (typeof window === 'undefined' || window.indexedDB == null) {\n            return false;\n        }\n        // We extensively use indexed array values and compound keys,\n        // which IE and Edge do not support. However, they still have indexedDB\n        // defined on the window, so we need to check for them here and make sure\n        // to return that persistence is not enabled for those browsers.\n        // For tracking support of this feature, see here:\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n        // Check the UA string to find out the browser.\n        var ua = window.navigator.userAgent;\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        if (ua.indexOf('MSIE ') > 0 ||\n            ua.indexOf('Trident/') > 0 ||\n            ua.indexOf('Edge/') > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {\n        var transaction = new simple_db_SimpleDbTransaction(this.db, mode, objectStores);\n        var transactionFnResult = transactionFn(transaction)\n            .catch(function (error) {\n            // Abort the transaction if there was an\n            // error.\n            transaction.abort();\n            return persistence_promise_PersistencePromise.reject(error);\n        })\n            .toPromise();\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        return transaction.completionPromise.then(function () { return transactionFnResult; });\n    };\n    SimpleDb.prototype.close = function () {\n        this.db.close();\n    };\n    return SimpleDb;\n}());\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nvar IterationController = /** @class */ (function () {\n    function IterationController(dbCursor) {\n        this.dbCursor = dbCursor;\n        this.shouldStop = false;\n        this.nextKey = null;\n    }\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\n        get: function () {\n            return this.shouldStop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n        get: function () {\n            return this.nextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\n        set: function (value) {\n            this.dbCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This function can be called to stop iteration at any point.\n     */\n    IterationController.prototype.done = function () {\n        this.shouldStop = true;\n    };\n    /**\n     * This function can be called to skip to that next key, which could be\n     * an index or a primary key.\n     */\n    IterationController.prototype.skip = function (key) {\n        this.nextKey = key;\n    };\n    /**\n     * Delete the current cursor value from the object store.\n     *\n     * NOTE: You CANNOT do this with a keysOnly query.\n     */\n    IterationController.prototype.delete = function () {\n        return wrapRequest(this.dbCursor.delete());\n    };\n    return IterationController;\n}());\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nvar simple_db_SimpleDbTransaction = /** @class */ (function () {\n    function SimpleDbTransaction(db, mode, objectStoresNames) {\n        var _this = this;\n        this.aborted = false;\n        this.transaction = db.transaction(objectStoresNames, mode);\n        this.completionPromise = new Promise(function (resolve, reject) {\n            // We consider aborting to be \"normal\" and just resolve the promise.\n            // May need to revisit if/when we actually need to abort transactions.\n            _this.transaction.onabort = _this.transaction.oncomplete = function (event) {\n                resolve();\n            };\n            _this.transaction.onerror = function (event) {\n                reject(event.target.error);\n            };\n        });\n    }\n    SimpleDbTransaction.prototype.abort = function () {\n        if (!this.aborted) {\n            debug(simple_db_LOG_TAG, 'Aborting transaction.');\n            this.aborted = true;\n            this.transaction.abort();\n        }\n    };\n    /**\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n     * operations performed on the SimpleDbStore happen within the context of this\n     * transaction and it cannot be used anymore once the transaction is\n     * completed.\n     *\n     * Note that we can't actually enforce that the KeyType and ValueType are\n     * correct, but they allow type safety through the rest of the consuming code.\n     */\n    SimpleDbTransaction.prototype.store = function (storeName) {\n        var store = this.transaction.objectStore(storeName);\n        assert(!!store, 'Object store not part of transaction: ' + storeName);\n        return new simple_db_SimpleDbStore(store);\n    };\n    return SimpleDbTransaction;\n}());\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nvar simple_db_SimpleDbStore = /** @class */ (function () {\n    function SimpleDbStore(store) {\n        this.store = store;\n    }\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\n        var request;\n        if (value !== undefined) {\n            debug(simple_db_LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n            request = this.store.put(value, keyOrValue);\n        }\n        else {\n            debug(simple_db_LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n            request = this.store.put(keyOrValue);\n        }\n        return wrapRequest(request);\n    };\n    /**\n     * Gets the object with the specified key from the specified store, or null\n     * if no object exists with the specified key.\n     *\n     * @key The key of the object to get.\n     * @return The object with the specified key or null if no object exists.\n     */\n    SimpleDbStore.prototype.get = function (key) {\n        var _this = this;\n        var request = this.store.get(key);\n        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n        return wrapRequest(request).next(function (result) {\n            // Normalize nonexistence to null.\n            if (result === undefined) {\n                result = null;\n            }\n            debug(simple_db_LOG_TAG, 'GET', _this.store.name, key, result);\n            return result;\n        });\n    };\n    SimpleDbStore.prototype.delete = function (key) {\n        debug(simple_db_LOG_TAG, 'DELETE', this.store.name, key);\n        var request = this.store.delete(key);\n        return wrapRequest(request);\n    };\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n        var cursor = this.cursor(this.options(indexOrRange, range));\n        var results = [];\n        return this.iterateCursor(cursor, function (key, value) {\n            results.push(value);\n        }).next(function () {\n            return results;\n        });\n    };\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n        debug(simple_db_LOG_TAG, 'DELETE ALL', this.store.name);\n        var options = this.options(indexOrRange, range);\n        options.keysOnly = false;\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, function (key, value, control) {\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\n            // calling delete() on an object store with a single key\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n            // however, this requires us *not* to use a keysOnly cursor\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n            // may want to compare the performance of each method.\n            return control.delete();\n        });\n    };\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n        var options;\n        if (!callback) {\n            options = {};\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, callback);\n    };\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n        var results = [];\n        return new persistence_promise_PersistencePromise(function (resolve, reject) {\n            cursorRequest.onerror = function (event) {\n                reject(event.target.error);\n            };\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                    resolve();\n                    return;\n                }\n                var controller = new IterationController(cursor);\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\n                if (userResult instanceof persistence_promise_PersistencePromise) {\n                    results.push(userResult);\n                }\n                if (controller.isDone) {\n                    resolve();\n                }\n                else if (controller.skipToKey === null) {\n                    cursor.continue();\n                }\n                else {\n                    cursor.continue(controller.skipToKey);\n                }\n            };\n        }).next(function () {\n            return persistence_promise_PersistencePromise.waitFor(results);\n        });\n    };\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\n        var indexName = undefined;\n        if (indexOrRange !== undefined) {\n            if (typeof indexOrRange === 'string') {\n                indexName = indexOrRange;\n            }\n            else {\n                assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');\n                range = indexOrRange;\n            }\n        }\n        return { index: indexName, range: range };\n    };\n    SimpleDbStore.prototype.cursor = function (options) {\n        var direction = 'next';\n        if (options.reverse) {\n            direction = 'prev';\n        }\n        if (options.index) {\n            var index = this.store.index(options.index);\n            if (options.keysOnly) {\n                return index.openKeyCursor(options.range, direction);\n            }\n            else {\n                return index.openCursor(options.range, direction);\n            }\n        }\n        else {\n            return this.store.openCursor(options.range, direction);\n        }\n    };\n    return SimpleDbStore;\n}());\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n    return new persistence_promise_PersistencePromise(function (resolve, reject) {\n        request.onsuccess = function (event) {\n            var result = event.target.result;\n            resolve(result);\n        };\n        request.onerror = function (event) {\n            reject(event.target.error);\n        };\n    });\n}\n\n//# sourceMappingURL=simple_db.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_mutation_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** A mutation queue for a specific user, backed by IndexedDB. */\nvar indexeddb_mutation_queue_IndexedDbMutationQueue = /** @class */ (function () {\n    function IndexedDbMutationQueue(\n        /**\n         * The normalized userId (e.g. null UID => \"\" userId) used to store /\n         * retrieve mutations.\n         */\n        userId, serializer) {\n        this.userId = userId;\n        this.serializer = serializer;\n        this.garbageCollector = null;\n    }\n    /**\n     * Creates a new mutation queue for the given user.\n     * @param user The user for which to create a mutation queue.\n     * @param serializer The serializer to use when persisting to IndexedDb.\n     */\n    IndexedDbMutationQueue.forUser = function (user, serializer) {\n        // TODO(mcg): Figure out what constraints there are on userIDs\n        // In particular, are there any reserved characters? are empty ids allowed?\n        // For the moment store these together in the same mutations table assuming\n        // that empty userIDs aren't allowed.\n        assert(user.uid !== '', 'UserID must not be an empty string.');\n        var userId = user.isUnauthenticated() ? '' : user.uid;\n        return new IndexedDbMutationQueue(userId, serializer);\n    };\n    IndexedDbMutationQueue.prototype.start = function (transaction) {\n        var _this = this;\n        return IndexedDbMutationQueue.loadNextBatchIdFromDb(transaction)\n            .next(function (nextBatchId) {\n            _this.nextBatchId = nextBatchId;\n            return mutationQueuesStore(transaction).get(_this.userId);\n        })\n            .next(function (metadata) {\n            if (!metadata) {\n                metadata = new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, \n                /*lastStreamToken=*/ '');\n            }\n            _this.metadata = metadata;\n            // On restart, nextBatchId may end up lower than\n            // lastAcknowledgedBatchId since it's computed from the queue\n            // contents, and there may be no mutations in the queue. In this\n            // case, we need to reset lastAcknowledgedBatchId (which is safe\n            // since the queue must be empty).\n            if (_this.metadata.lastAcknowledgedBatchId >= _this.nextBatchId) {\n                return _this.checkEmpty(transaction).next(function (empty) {\n                    assert(empty, 'Reset nextBatchID is only possible when the queue is empty');\n                    _this.metadata.lastAcknowledgedBatchId = BATCHID_UNKNOWN;\n                    return mutationQueuesStore(transaction).put(_this.metadata);\n                });\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns one larger than the largest batch ID that has been stored. If there\n     * are no mutations returns 0. Note that batch IDs are global.\n     */\n    IndexedDbMutationQueue.loadNextBatchIdFromDb = function (txn) {\n        var maxBatchId = BATCHID_UNKNOWN;\n        return mutationsStore(txn)\n            .iterate({ reverse: true }, function (key, batch, control) {\n            var userId = key[0], batchId = key[1];\n            if (batchId > maxBatchId) {\n                maxBatchId = batch.batchId;\n            }\n            if (userId === '') {\n                // We can't compute a predecessor for the empty string, since it\n                // is lexographically first. That also means that no other\n                // userIds can come before this one, so we can just exit early.\n                control.done();\n            }\n            else {\n                var nextUser = immediatePredecessor(userId);\n                control.skip([nextUser]);\n            }\n        })\n            .next(function () { return maxBatchId + 1; });\n    };\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n        var empty = true;\n        var range = IDBKeyRange.bound(this.keyForBatchId(Number.NEGATIVE_INFINITY), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, value, control) {\n            empty = false;\n            control.done();\n        })\n            .next(function () { return empty; });\n    };\n    IndexedDbMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.nextBatchId);\n    };\n    IndexedDbMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.metadata.lastAcknowledgedBatchId);\n    };\n    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        this.metadata.lastAcknowledgedBatchId = batchId;\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.metadata.lastStreamToken);\n    };\n    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        var _this = this;\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        var batch = new mutation_batch_MutationBatch(batchId, localWriteTime, mutations);\n        var dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n        return mutationsStore(transaction)\n            .put(dbBatch)\n            .next(function () {\n            var promises = [];\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n                var mutation = mutations_1[_i];\n                var encodedPath = encode(mutation.key.path);\n                var indexKey = indexeddb_schema_DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\n                documentMutationsStore(transaction).put(indexKey, indexeddb_schema_DbDocumentMutation.PLACEHOLDER);\n            }\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            return batch;\n        });\n    };\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        var _this = this;\n        return mutationsStore(transaction)\n            .get(this.keyForBatchId(batchId))\n            .next(function (dbBatch) {\n            return dbBatch ? _this.serializer.fromDbMutationBatch(dbBatch) : null;\n        });\n    };\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.lowerBound(this.keyForBatchId(batchId + 1));\n        var foundBatch = null;\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, dbBatch, control) {\n            if (dbBatch.userId === _this.userId) {\n                assert(dbBatch.batchId > batchId, 'Should have found mutation after ' + batchId);\n                foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);\n            }\n            control.done();\n        })\n            .next(function () { return foundBatch; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(batchId));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        // Scan the document-mutation index starting with a prefix starting with\n        // the given documentKey.\n        var indexPrefix = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        var results = [];\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            // Only consider rows matching exactly the specific key of\n            // interest. Note that because we order by path first, and we\n            // order terminators before path separators, we'll encounter all\n            // the index rows for documentKey contiguously. In particular, all\n            // the rows for documentKey will occur before any rows for\n            // documents nested in a subcollection beneath documentKey so we\n            // can stop as soon as we hit any such row.\n            var path = decode(encodedPath);\n            if (userID !== _this.userId || !documentKey.path.equals(path)) {\n                control.done();\n                return;\n            }\n            var mutationKey = _this.keyForBatchId(batchID);\n            // Look up the mutation batch in the store.\n            // PORTING NOTE: because iteration is callback driven in the web,\n            // we just look up the key instead of keeping an open iterator\n            // like iOS.\n            return mutationsStore(transaction)\n                .get(mutationKey)\n                .next(function (dbBatch) {\n                if (dbBatch === null) {\n                    fail('Dangling document-mutation reference found: ' +\n                        indexKey +\n                        ' which points to ' +\n                        mutationKey);\n                }\n                results.push(_this.serializer.fromDbMutationBatch(dbBatch));\n            });\n        })\n            .next(function () { return results; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        assert(!query.isDocumentQuery(), \"Document queries shouldn't go down this path\");\n        var queryPath = query.path;\n        var immediateChildrenLength = queryPath.length + 1;\n        // TODO(mcg): Actually implement a single-collection query\n        //\n        // This is actually executing an ancestor query, traversing the whole\n        // subtree below the collection which can be horrifically inefficient for\n        // some structures. The right way to solve this is to implement the full\n        // value index, but that's not in the cards in the near future so this is\n        // the best we can do for the moment.\n        //\n        // Since we don't yet index the actual properties in the mutations, our\n        // current approach is to just return all mutation batches that affect\n        // documents in the collection being queried.\n        var indexPrefix = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, queryPath);\n        var encodedQueryPath = indexPrefix[1];\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\n        // scan of the main table.\n        var uniqueBatchIDs = new sorted_set_SortedSet(primitiveComparator);\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            var path = decode(encodedPath);\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n                control.done();\n                return;\n            }\n            // Rows with document keys more than one segment longer than the\n            // query path can't be matches. For example, a query on 'rooms'\n            // can't match the document /rooms/abc/messages/xyx.\n            // TODO(mcg): we'll need a different scanner when we implement\n            // ancestor queries.\n            if (path.length !== immediateChildrenLength) {\n                return;\n            }\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        })\n            .next(function () {\n            var results = [];\n            var promises = [];\n            // TODO(rockwood): Implement this using iterate.\n            uniqueBatchIDs.forEach(function (batchID) {\n                var mutationKey = _this.keyForBatchId(batchID);\n                promises.push(mutationsStore(transaction)\n                    .get(mutationKey)\n                    .next(function (mutation) {\n                    if (mutation === null) {\n                        fail('Dangling document-mutation reference found, ' +\n                            'which points to ' +\n                            mutationKey);\n                    }\n                    results.push(_this.serializer.fromDbMutationBatch(mutation));\n                }));\n            });\n            return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return results; });\n        });\n    };\n    IndexedDbMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var txn = mutationsStore(transaction);\n        var indexTxn = documentMutationsStore(transaction);\n        var promises = [];\n        var _loop_1 = function (batch) {\n            var range = IDBKeyRange.only(this_1.keyForBatchId(batch.batchId));\n            var numDeleted = 0;\n            var removePromise = txn.iterate({ range: range }, function (key, value, control) {\n                numDeleted++;\n                return control.delete();\n            });\n            promises.push(removePromise.next(function () {\n                assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +\n                    batch.batchId);\n            }));\n            for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {\n                var mutation = _a[_i];\n                var indexKey = indexeddb_schema_DbDocumentMutation.key(this_1.userId, mutation.key.path, batch.batchId);\n                promises.push(indexTxn.delete(indexKey));\n                if (this_1.garbageCollector !== null) {\n                    this_1.garbageCollector.addPotentialGarbageKey(mutation.key);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            _loop_1(batch);\n        }\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        var _this = this;\n        return this.checkEmpty(txn).next(function (empty) {\n            if (!empty) {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n            // Verify that there are no entries in the documentMutations index if\n            // the queue is empty.\n            var startRange = IDBKeyRange.lowerBound(indexeddb_schema_DbDocumentMutation.prefixForUser(_this.userId));\n            var danglingMutationReferences = [];\n            return documentMutationsStore(txn)\n                .iterate({ range: startRange }, function (key, _, control) {\n                var userID = key[0];\n                if (userID !== _this.userId) {\n                    control.done();\n                    return;\n                }\n                else {\n                    var path = decode(key[1]);\n                    danglingMutationReferences.push(path);\n                }\n            })\n                .next(function () {\n                assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. Dangling keys: ' +\n                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));\n            });\n        });\n    };\n    IndexedDbMutationQueue.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n        var _this = this;\n        var indexKey = indexeddb_schema_DbDocumentMutation.prefixForPath(this.userId, key.path);\n        var encodedPath = indexKey[1];\n        var startRange = IDBKeyRange.lowerBound(indexKey);\n        var containsKey = false;\n        return documentMutationsStore(txn)\n            .iterate({ range: startRange, keysOnly: true }, function (key, _, control) {\n            var userID = key[0], keyPath = key[1], batchID = key[2];\n            if (userID === _this.userId && keyPath === encodedPath) {\n                containsKey = true;\n            }\n            control.done();\n        })\n            .next(function () { return containsKey; });\n    };\n    /**\n     * Creates a [userId, batchId] key for use with the DbMutationQueue object\n     * store.\n     */\n    IndexedDbMutationQueue.prototype.keyForBatchId = function (batchId) {\n        return [this.userId, batchId];\n    };\n    return IndexedDbMutationQueue;\n}());\n\nfunction validateStreamToken(token) {\n    assert(typeof token === 'string', 'Persisting non-string stream token not supported.');\n    return token;\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n    return getStore(txn, DbMutationBatch.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n    return getStore(txn, indexeddb_schema_DbDocumentMutation.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n    return getStore(txn, DbMutationQueue.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_mutation_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_query_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\nvar indexeddb_query_cache_IndexedDbQueryCache = /** @class */ (function () {\n    function IndexedDbQueryCache(serializer) {\n        this.serializer = serializer;\n        /**\n         * The last received snapshot version. We store this seperately from the\n         * metadata to avoid the extra conversion to/from DbTimestamp.\n         */\n        this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.MIN;\n        /**\n         * A cached copy of the metadata for the query cache.\n         */\n        this.metadata = new DbTargetGlobal(\n        /*highestTargetId=*/ 0, \n        /*lastListenSequenceNumber=*/ 0, snapshot_version_SnapshotVersion.MIN.toTimestamp());\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n    }\n    IndexedDbQueryCache.prototype.start = function (transaction) {\n        var _this = this;\n        return globalTargetStore(transaction)\n            .get(DbTargetGlobal.key)\n            .next(function (metadata) {\n            if (metadata !== null) {\n                _this.metadata = metadata;\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\n                _this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.fromTimestamp(new timestamp_Timestamp(lastSavedVersion.seconds, lastSavedVersion.nanos));\n            }\n            return persistence_promise_PersistencePromise.resolve();\n        });\n    };\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\n        return this.metadata.highestTargetId;\n    };\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, this.metadata);\n    };\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        var _this = this;\n        var targetId = queryData.targetId;\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\n        if (targetId > this.metadata.highestTargetId) {\n            this.metadata.highestTargetId = targetId;\n            return addedQueryPromise.next(function () {\n                return globalTargetStore(transaction).put(DbTargetGlobal.key, _this.metadata);\n            });\n        }\n        else {\n            return addedQueryPromise;\n        }\n    };\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\n            targetsStore(transaction).delete(queryData.targetId);\n        });\n    };\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\n        var _this = this;\n        // Iterating by the canonicalId may yield more than one result because\n        // canonicalId values are not required to be unique per target. This query\n        // depends on the queryTargets index to be efficent.\n        var canonicalId = query.canonicalId();\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n        var result = null;\n        return targetsStore(transaction)\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\n            var found = _this.serializer.fromDbTarget(value);\n            // After finding a potential match, check that the query is\n            // actually equal to the requested query.\n            if (query.equals(found.query)) {\n                result = found;\n                control.done();\n            }\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // Indexeddb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = encode(key.path);\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        var _this = this;\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // IndexedDb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = encode(key.path);\n            promises.push(store.delete([targetId, path]));\n            if (_this.garbageCollector !== null) {\n                _this.garbageCollector.addPotentialGarbageKey(key);\n            }\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        var store = documentTargetStore(txn);\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\n            return store.delete(range);\n        });\n    };\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\n        var _this = this;\n        var store = documentTargetStore(txn);\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\n            // In order to generate garbage events properly, we need to read these\n            // keys before deleting.\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\n                var path = decode(key[1]);\n                var docKey = new document_key_DocumentKey(path);\n                // Paranoid assertion in case the the collector is set to null\n                // during the iteration.\n                assert(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\n            });\n        }\n        else {\n            return persistence_promise_PersistencePromise.resolve();\n        }\n    };\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var promises = [];\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var store = documentTargetStore(txn);\n        var result = documentKeySet();\n        return store\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\n            var path = decode(key[1]);\n            var docKey = new document_key_DocumentKey(path);\n            result = result.add(docKey);\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\n        assert(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\n        var path = encode(key.path);\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var count = 0;\n        return documentTargetStore(txn)\n            .iterate({\n            index: DbTargetDocument.documentTargetsIndex,\n            keysOnly: true,\n            range: range\n        }, function (key, _, control) {\n            count++;\n            control.done();\n        })\n            .next(function () { return count > 0; });\n    };\n    return IndexedDbQueryCache;\n}());\n\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTarget.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTargetGlobal.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n    return indexeddb_query_cache_getStore(txn, DbTargetDocument.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction indexeddb_query_cache_getStore(txn, store) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_query_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof document_Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\n\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof simple_db_SimpleDbTransaction) {\n        return txn.store(DbRemoteDocument.store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n//# sourceMappingURL=indexeddb_remote_document_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_serializer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** Serializer for values stored in the LocalStore. */\nvar local_serializer_LocalSerializer = /** @class */ (function () {\n    function LocalSerializer(remoteSerializer) {\n        this.remoteSerializer = remoteSerializer;\n    }\n    /** Decodes a remote document from storage locally to a Document. */\n    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {\n        if (remoteDoc.document) {\n            return this.remoteSerializer.fromDocument(remoteDoc.document);\n        }\n        else if (remoteDoc.noDocument) {\n            var key = document_key_DocumentKey.fromSegments(remoteDoc.noDocument.path);\n            var readTime = remoteDoc.noDocument.readTime;\n            var timestamp = new timestamp_Timestamp(readTime.seconds, readTime.nanos);\n            return new document_NoDocument(key, snapshot_version_SnapshotVersion.fromTimestamp(timestamp));\n        }\n        else {\n            return fail('Unexpected DbRemoteDocument');\n        }\n    };\n    /** Encodes a document for storage locally. */\n    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {\n        if (maybeDoc instanceof document_Document) {\n            var doc = this.remoteSerializer.toDocument(maybeDoc);\n            return new DbRemoteDocument(null, doc);\n        }\n        else {\n            var path = maybeDoc.key.path.toArray();\n            var timestamp = maybeDoc.version.toTimestamp();\n            var readTime = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n            return new DbRemoteDocument(new DbNoDocument(path, readTime), null);\n        }\n    };\n    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {\n        var _this = this;\n        var serializedMutations = batch.mutations.map(function (m) {\n            return _this.remoteSerializer.toMutation(m);\n        });\n        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toEpochMilliseconds(), serializedMutations);\n    };\n    /** Decodes a DbMutationBatch into a MutationBatch */\n    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {\n        var _this = this;\n        var mutations = dbBatch.mutations.map(function (m) {\n            return _this.remoteSerializer.fromMutation(m);\n        });\n        var timestamp = timestamp_Timestamp.fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n        return new mutation_batch_MutationBatch(dbBatch.batchId, timestamp, mutations);\n    };\n    /** Decodes a DbTarget into QueryData */\n    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {\n        var readTime = new timestamp_Timestamp(dbTarget.readTime.seconds, dbTarget.readTime.nanos);\n        var version = snapshot_version_SnapshotVersion.fromTimestamp(readTime);\n        var query;\n        if (isDocumentQuery(dbTarget.query)) {\n            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n        }\n        else {\n            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n        }\n        return new query_data_QueryData(query, dbTarget.targetId, QueryPurpose.Listen, version, dbTarget.resumeToken);\n    };\n    /** Encodes QueryData into a DbTarget for storage locally. */\n    LocalSerializer.prototype.toDbTarget = function (queryData) {\n        assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' +\n            QueryPurpose.Listen +\n            ' may be stored, got ' +\n            queryData.purpose);\n        var timestamp = queryData.snapshotVersion.toTimestamp();\n        var dbTimestamp = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n        var queryProto;\n        if (queryData.query.isDocumentQuery()) {\n            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n        }\n        else {\n            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n        }\n        assert(typeof queryData.resumeToken === 'string', 'Persisting non-string resume token not supported.');\n        var resumeToken = queryData.resumeToken;\n        // lastListenSequenceNumber is always 0 until we do real GC.\n        return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, 0, queryProto);\n    };\n    return LocalSerializer;\n}());\n\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n    return dbQuery.documents !== undefined;\n}\n\n//# sourceMappingURL=local_serializer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/indexeddb_persistence.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\nvar indexeddb_persistence_LOG_TAG = 'IndexedDbPersistence';\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nvar OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nvar OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nvar ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nvar EXISTING_OWNER_ERROR_MSG = 'There is another tab open with offline' +\n    ' persistence enabled. Only one such tab is allowed at a time. The' +\n    ' other tab must be closed or persistence must be disabled.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +\n    ' IndexedDB or is known to have an incomplete implementation. Offline' +\n    ' persistence has been disabled.';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nvar indexeddb_persistence_IndexedDbPersistence = /** @class */ (function () {\n    function IndexedDbPersistence(prefix, serializer) {\n        this.ownerId = this.generateOwnerId();\n        this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n        this.serializer = new local_serializer_LocalSerializer(serializer);\n        this.localStoragePrefix = prefix;\n    }\n    IndexedDbPersistence.prototype.start = function () {\n        var _this = this;\n        if (!IndexedDbPersistence.isAvailable()) {\n            this.persistenceError = new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n            return Promise.reject(this.persistenceError);\n        }\n        assert(!this.started, 'IndexedDbPersistence double-started!');\n        this.started = true;\n        return simple_db_SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, createOrUpgradeDb)\n            .then(function (db) {\n            _this.simpleDb = db;\n        })\n            .then(function () { return _this.tryAcquireOwnerLease(); })\n            .then(function () {\n            _this.scheduleOwnerLeaseRefreshes();\n            _this.attachWindowUnloadHook();\n        });\n    };\n    IndexedDbPersistence.prototype.shutdown = function () {\n        var _this = this;\n        assert(this.started, 'IndexedDbPersistence shutdown without start!');\n        this.started = false;\n        this.detachWindowUnloadHook();\n        this.stopOwnerLeaseRefreshes();\n        return this.releaseOwnerLease().then(function () {\n            _this.simpleDb.close();\n        });\n    };\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n        return indexeddb_mutation_queue_IndexedDbMutationQueue.forUser(user, this.serializer);\n    };\n    IndexedDbPersistence.prototype.getQueryCache = function () {\n        return new indexeddb_query_cache_IndexedDbQueryCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n        return new indexeddb_remote_document_cache_IndexedDbRemoteDocumentCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.runTransaction = function (action, operation) {\n        var _this = this;\n        if (this.persistenceError) {\n            return Promise.reject(this.persistenceError);\n        }\n        debug(indexeddb_persistence_LOG_TAG, 'Starting transaction:', action);\n        // Do all transactions as readwrite against all object stores, since we\n        // are the only reader/writer.\n        return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {\n            // Verify that we still have the owner lease as part of every transaction.\n            return _this.ensureOwnerLease(txn).next(function () { return operation(txn); });\n        });\n    };\n    IndexedDbPersistence.isAvailable = function () {\n        return simple_db_SimpleDb.isAvailable();\n    };\n    /**\n     * Generates a string used as a prefix when storing data in IndexedDB and\n     * LocalStorage.\n     */\n    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {\n        // Use two different prefix formats:\n        //\n        //   * firestore / persistenceKey / projectID . databaseID / ...\n        //   * firestore / persistenceKey / projectID / ...\n        //\n        // projectIDs are DNS-compatible names and cannot contain dots\n        // so there's no danger of collisions.\n        var database = databaseInfo.databaseId.projectId;\n        if (!databaseInfo.databaseId.isDefaultDatabase) {\n            database += '.' + databaseInfo.databaseId.database;\n        }\n        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n    };\n    /**\n     * Acquires the owner lease if there's no valid owner. Else returns a rejected\n     * promise.\n     */\n    IndexedDbPersistence.prototype.tryAcquireOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (!_this.validOwner(dbOwner)) {\n                    var newDbOwner = new DbOwner(_this.ownerId, Date.now());\n                    debug(indexeddb_persistence_LOG_TAG, 'No valid owner. Acquiring owner lease. Current owner:', dbOwner, 'New owner:', newDbOwner);\n                    return store.put('owner', newDbOwner);\n                }\n                else {\n                    debug(indexeddb_persistence_LOG_TAG, 'Valid owner already. Failing. Current owner:', dbOwner);\n                    _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                    return persistence_promise_PersistencePromise.reject(_this.persistenceError);\n                }\n            });\n        });\n    };\n    /** Checks the owner lease and deletes it if we are the current owner. */\n    IndexedDbPersistence.prototype.releaseOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (dbOwner !== null && dbOwner.ownerId === _this.ownerId) {\n                    debug(indexeddb_persistence_LOG_TAG, 'Releasing owner lease.');\n                    return store.delete('owner');\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Checks the owner lease and returns a rejected promise if we are not the\n     * current owner. This should be included in every transaction to guard\n     * against losing the owner lease.\n     */\n    IndexedDbPersistence.prototype.ensureOwnerLease = function (txn) {\n        var _this = this;\n        var store = txn.store(DbOwner.store);\n        return store.get('owner').next(function (dbOwner) {\n            if (dbOwner === null || dbOwner.ownerId !== _this.ownerId) {\n                _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                return persistence_promise_PersistencePromise.reject(_this.persistenceError);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns true if the provided owner exists, has a recent timestamp, and\n     * isn't zombied.\n     *\n     * NOTE: To determine if the owner is zombied, this method reads from\n     * LocalStorage which could be mildly expensive.\n     */\n    IndexedDbPersistence.prototype.validOwner = function (dbOwner) {\n        var now = Date.now();\n        var minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n        var maxAcceptable = now;\n        if (dbOwner === null) {\n            return false; // no owner.\n        }\n        else if (dbOwner.leaseTimestampMs < minAcceptable) {\n            return false; // owner lease has expired.\n        }\n        else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n            log_error('Persistence owner-lease is in the future. Discarding.', dbOwner);\n            return false;\n        }\n        else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n            return false; // owner's tab closed.\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Schedules a recurring timer to update the owner lease timestamp to prevent\n     * other tabs from taking the lease.\n     */\n    IndexedDbPersistence.prototype.scheduleOwnerLeaseRefreshes = function () {\n        var _this = this;\n        // NOTE: This doesn't need to be scheduled on the async queue and doing so\n        // would increase the chances of us not refreshing on time if the queue is\n        // backed up for some reason.\n        this.ownerLeaseRefreshHandle = setInterval(function () {\n            var txResult = _this.runTransaction('Refresh owner timestamp', function (txn) {\n                // NOTE: We don't need to validate the current owner contents, since\n                // runTransaction does that automatically.\n                var store = txn.store(DbOwner.store);\n                return store.put('owner', new DbOwner(_this.ownerId, Date.now()));\n            });\n            txResult.catch(function (reason) {\n                // Probably means we lost the lease. Report the error and stop trying to\n                // refresh the lease.\n                log_error(reason);\n                _this.stopOwnerLeaseRefreshes();\n            });\n        }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n    };\n    IndexedDbPersistence.prototype.stopOwnerLeaseRefreshes = function () {\n        if (this.ownerLeaseRefreshHandle) {\n            clearInterval(this.ownerLeaseRefreshHandle);\n            this.ownerLeaseRefreshHandle = null;\n        }\n    };\n    /**\n     * Attaches a window.unload handler that will synchronously write our\n     * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n     * by tabs trying to acquire the lease to determine that the lease should be\n     * acquired immediately even if the timestamp is recent. This is particularly\n     * important for the refresh case (so the tab correctly re-acquires the owner\n     * lease). LocalStorage is used for this rather than IndexedDb because it is\n     * a synchronous API and so can be used reliably from an unload handler.\n     */\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n        var _this = this;\n        this.windowUnloadHandler = function () {\n            // Record that we're zombied.\n            _this.setZombiedOwnerId(_this.ownerId);\n            // Attempt graceful shutdown (including releasing our owner lease), but\n            // there's no guarantee it will complete.\n            _this.shutdown();\n        };\n        window.addEventListener('unload', this.windowUnloadHandler);\n    };\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n        if (this.windowUnloadHandler) {\n            window.removeEventListener('unload', this.windowUnloadHandler);\n            this.windowUnloadHandler = null;\n        }\n    };\n    /**\n     * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n     * zombied due to their tab closing) from LocalStorage, or null if no such\n     * record exists.\n     */\n    IndexedDbPersistence.prototype.getZombiedOwnerId = function () {\n        try {\n            var zombiedOwnerId = window.localStorage.getItem(this.zombiedOwnerLocalStorageKey());\n            debug(indexeddb_persistence_LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n            return zombiedOwnerId;\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log_error('Failed to get zombie owner id.', e);\n            return null;\n        }\n    };\n    /**\n     * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n     * or, if passed null, deletes any recorded zombied owner.\n     */\n    IndexedDbPersistence.prototype.setZombiedOwnerId = function (zombieOwnerId) {\n        try {\n            if (zombieOwnerId === null) {\n                window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n            }\n            else {\n                window.localStorage.setItem(this.zombiedOwnerLocalStorageKey(), zombieOwnerId);\n            }\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log_error('Failed to set zombie owner id.', e);\n        }\n    };\n    IndexedDbPersistence.prototype.zombiedOwnerLocalStorageKey = function () {\n        return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n    };\n    IndexedDbPersistence.prototype.generateOwnerId = function () {\n        // For convenience, just use an AutoId.\n        return misc_AutoId.newId();\n    };\n    /**\n     * The name of the main (and currently only) IndexedDB database. this name is\n     * appended to the prefix provided to the IndexedDbPersistence constructor.\n     */\n    IndexedDbPersistence.MAIN_DATABASE = 'main';\n    return IndexedDbPersistence;\n}());\n\n\n//# sourceMappingURL=indexeddb_persistence.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_documents_view.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nvar local_documents_view_LocalDocumentsView = /** @class */ (function () {\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.mutationQueue = mutationQueue;\n    }\n    /**\n     * Get the local view of the document identified by `key`.\n     *\n     * @return Local view of the document or null if we don't have any cached\n     * state for it.\n     */\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n        var _this = this;\n        return this.remoteDocumentCache\n            .getEntry(transaction, key)\n            .next(function (remoteDoc) {\n            return _this.computeLocalDocument(transaction, key, remoteDoc);\n        });\n    };\n    /**\n     * Gets the local view of the documents identified by `keys`.\n     *\n     * If we don't have cached state for a document in `keys`, a NoDocument will\n     * be stored for that key in the resulting set.\n     */\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n        var _this = this;\n        var promises = [];\n        var results = maybeDocumentMap();\n        keys.forEach(function (key) {\n            promises.push(_this.getDocument(transaction, key).next(function (maybeDoc) {\n                // TODO(http://b/32275378): Don't conflate missing / deleted.\n                if (!maybeDoc) {\n                    maybeDoc = new document_NoDocument(key, snapshot_version_SnapshotVersion.forDeletedDoc());\n                }\n                results = results.insert(key, maybeDoc);\n            }));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return results; });\n    };\n    /** Performs a query against the local view of all documents. */\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        if (document_key_DocumentKey.isDocumentKey(query.path)) {\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n        }\n        else {\n            return this.getDocumentsMatchingCollectionQuery(transaction, query);\n        }\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n        // Just do a simple document lookup.\n        return this.getDocument(transaction, new document_key_DocumentKey(docPath)).next(function (maybeDoc) {\n            var result = documentMap();\n            if (maybeDoc instanceof document_Document) {\n                result = result.insert(maybeDoc.key, maybeDoc);\n            }\n            return result;\n        });\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {\n        var _this = this;\n        // Query the remote documents and overlay mutations.\n        // TODO(mikelehen): There may be significant overlap between the mutations\n        // affecting these remote documents and the\n        // getAllMutationBatchesAffectingQuery() mutations. Consider optimizing.\n        var results;\n        return this.remoteDocumentCache\n            .getDocumentsMatchingQuery(transaction, query)\n            .next(function (queryResults) {\n            return _this.computeLocalDocuments(transaction, queryResults);\n        })\n            .next(function (promisedResults) {\n            results = promisedResults;\n            // Now use the mutation queue to discover any other documents that may\n            // match the query after applying mutations.\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n        })\n            .next(function (matchingMutationBatches) {\n            var matchingKeys = documentKeySet();\n            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n                var batch = matchingMutationBatches_1[_i];\n                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                    var mutation = _b[_a];\n                    // TODO(mikelehen): PERF: Check if this mutation actually\n                    // affects the query to reduce work.\n                    if (!results.get(mutation.key)) {\n                        matchingKeys = matchingKeys.add(mutation.key);\n                    }\n                }\n            }\n            // Now add in the results for the matchingKeys.\n            var promises = [];\n            matchingKeys.forEach(function (key) {\n                promises.push(_this.getDocument(transaction, key).next(function (doc) {\n                    if (doc instanceof document_Document) {\n                        results = results.insert(doc.key, doc);\n                    }\n                }));\n            });\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            // Finally, filter out any documents that don't actually match\n            // the query.\n            results.forEach(function (key, doc) {\n                if (!query.matches(doc)) {\n                    results = results.remove(key);\n                }\n            });\n            return results;\n        });\n    };\n    /**\n     * Takes a remote document and applies local mutations to generate the local\n     * view of the document.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the document (necessary when remoteDocument\n     *     is null).\n     * @param document The base remote document to apply mutations to or null.\n     */\n    LocalDocumentsView.prototype.computeLocalDocument = function (transaction, documentKey, document) {\n        return this.mutationQueue\n            .getAllMutationBatchesAffectingDocumentKey(transaction, documentKey)\n            .next(function (batches) {\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n                var batch = batches_1[_i];\n                document = batch.applyToLocalView(documentKey, document);\n            }\n            return document;\n        });\n    };\n    /**\n     * Takes a set of remote documents and applies local mutations to generate the\n     * local view of the documents.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documents The base remote documents to apply mutations to.\n     * @return The local view of the documents.\n     */\n    LocalDocumentsView.prototype.computeLocalDocuments = function (transaction, documents) {\n        var _this = this;\n        var promises = [];\n        documents.forEach(function (key, doc) {\n            promises.push(_this.computeLocalDocument(transaction, key, doc).next(function (mutatedDoc) {\n                if (mutatedDoc instanceof document_Document) {\n                    documents = documents.insert(mutatedDoc.key, mutatedDoc);\n                }\n                else if (mutatedDoc instanceof document_NoDocument) {\n                    documents = documents.remove(mutatedDoc.key);\n                }\n                else {\n                    fail('Unknown MaybeDocument: ' + mutatedDoc);\n                }\n            }));\n        });\n        return persistence_promise_PersistencePromise.waitFor(promises).next(function () { return documents; });\n    };\n    return LocalDocumentsView;\n}());\n\n\n//# sourceMappingURL=local_documents_view.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/remote_document_change_buffer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nvar remote_document_change_buffer_RemoteDocumentChangeBuffer = /** @class */ (function () {\n    function RemoteDocumentChangeBuffer(remoteDocumentCache) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.changes = maybeDocumentMap();\n    }\n    /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {\n        var changes = this.assertChanges();\n        this.changes = changes.insert(maybeDocument.key, maybeDocument);\n    };\n    // NOTE: removeEntry() is not presently necessary and so is omitted.\n    /**\n     * Looks up an entry in the cache. The buffered changes will first be checked,\n     * and if no buffered change applies, this will forward to\n     * `RemoteDocumentCache.getEntry()`.\n     *\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the entry to look up.\n     * @return The cached Document or NoDocument entry, or null if we have nothing\n     * cached.\n     */\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n        var changes = this.assertChanges();\n        var bufferedEntry = changes.get(documentKey);\n        if (bufferedEntry) {\n            return persistence_promise_PersistencePromise.resolve(bufferedEntry);\n        }\n        else {\n            return this.remoteDocumentCache.getEntry(transaction, documentKey);\n        }\n    };\n    /**\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\n     * the provided transaction.\n     */\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n        var _this = this;\n        var changes = this.assertChanges();\n        var promises = [];\n        changes.forEach(function (key, maybeDoc) {\n            promises.push(_this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n        });\n        // We should not be used to buffer any more changes.\n        this.changes = null;\n        return persistence_promise_PersistencePromise.waitFor(promises);\n    };\n    /** Helper to assert this.changes is not null and return it. */\n    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {\n        assert(this.changes !== null, 'Changes have already been applied.');\n        return this.changes;\n    };\n    return RemoteDocumentChangeBuffer;\n}());\n\n\n//# sourceMappingURL=remote_document_change_buffer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/local_store.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar local_store_LOG_TAG = 'LocalStore';\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nvar local_store_LocalStore = /** @class */ (function () {\n    function LocalStore(\n        /** Manages our in-memory or durable persistence. */\n        persistence, initialUser, \n        /**\n         * The garbage collector collects documents that should no longer be\n         * cached (e.g. if they are no longer retained by the above reference sets\n         * and the garbage collector is performing eager collection).\n         */\n        garbageCollector) {\n        this.persistence = persistence;\n        this.garbageCollector = garbageCollector;\n        /**\n         * The set of document references maintained by any local views.\n         */\n        this.localViewReferences = new reference_set_ReferenceSet();\n        /** Maps a targetID to data about its query. */\n        this.targetIds = {};\n        /** Used to generate targetIDs for queries tracked locally. */\n        this.targetIdGenerator = TargetIdGenerator.forLocalStore();\n        /**\n         * A heldBatchResult is a mutation batch result (from a write acknowledgement)\n         * that arrived before the watch stream got notified of a snapshot that\n         * includes the write. So we \"hold\" it until the watch stream catches up. It\n         * ensures that the local write remains visible (latency compensation) and\n         * doesn't temporarily appear reverted because the watch stream is slower than\n         * the write stream and so wasn't reflecting it.\n         *\n         * NOTE: Eventually we want to move this functionality into the remote store.\n         */\n        this.heldBatchResults = [];\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\n        this.queryCache = persistence.getQueryCache();\n        this.localDocuments = new local_documents_view_LocalDocumentsView(this.remoteDocuments, this.mutationQueue);\n        this.garbageCollector.addGarbageSource(this.localViewReferences);\n        this.garbageCollector.addGarbageSource(this.queryCache);\n        this.garbageCollector.addGarbageSource(this.mutationQueue);\n    }\n    /** Performs any initial startup actions required by the local store. */\n    LocalStore.prototype.start = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Start LocalStore', function (txn) {\n            return _this.startMutationQueue(txn).next(function () { return _this.startQueryCache(txn); });\n        });\n    };\n    /**\n     * Tells the LocalStore that the currently authenticated user has changed.\n     *\n     * In response the local store switches the mutation queue to the new user and\n     * returns any resulting document changes.\n     */\n    LocalStore.prototype.handleUserChange = function (user) {\n        var _this = this;\n        return this.persistence.runTransaction('Handle user change', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return _this.mutationQueue\n                .getAllMutationBatches(txn)\n                .next(function (promisedOldBatches) {\n                oldBatches = promisedOldBatches;\n                _this.garbageCollector.removeGarbageSource(_this.mutationQueue);\n                _this.mutationQueue = _this.persistence.getMutationQueue(user);\n                _this.garbageCollector.addGarbageSource(_this.mutationQueue);\n                return _this.startMutationQueue(txn);\n            })\n                .next(function () {\n                // Recreate our LocalDocumentsView using the new\n                // MutationQueue.\n                _this.localDocuments = new local_documents_view_LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue);\n                return _this.mutationQueue.getAllMutationBatches(txn);\n            })\n                .next(function (newBatches) {\n                // Union the old/new changed keys.\n                var changedKeys = documentKeySet();\n                for (var _i = 0, _a = [oldBatches, newBatches]; _i < _a.length; _i++) {\n                    var batches = _a[_i];\n                    for (var _b = 0, batches_1 = batches; _b < batches_1.length; _b++) {\n                        var batch = batches_1[_b];\n                        for (var _c = 0, _d = batch.mutations; _c < _d.length; _c++) {\n                            var mutation = _d[_c];\n                            changedKeys = changedKeys.add(mutation.key);\n                        }\n                    }\n                }\n                // Return the set of all (potentially) changed documents as the\n                // result of the user change.\n                return _this.localDocuments.getDocuments(txn, changedKeys);\n            });\n        });\n    };\n    LocalStore.prototype.startQueryCache = function (txn) {\n        var _this = this;\n        return this.queryCache.start(txn).next(function () {\n            var targetId = _this.queryCache.getHighestTargetId();\n            _this.targetIdGenerator = TargetIdGenerator.forLocalStore(targetId);\n        });\n    };\n    LocalStore.prototype.startMutationQueue = function (txn) {\n        var _this = this;\n        return this.mutationQueue\n            .start(txn)\n            .next(function () {\n            // If we have any leftover mutation batch results from a prior run,\n            // just drop them.\n            // TODO(http://b/33446471): We probably need to repopulate\n            // heldBatchResults or similar instead, but that is not\n            // straightforward since we're not persisting the write ack versions.\n            _this.heldBatchResults = [];\n            return _this.mutationQueue.getHighestAcknowledgedBatchId(txn);\n        })\n            .next(function (highestAck) {\n            // TODO(mikelehen): This is the only usage of\n            // getAllMutationBatchesThroughBatchId(). Consider removing it in\n            // favor of a getAcknowledgedBatches() method.\n            if (highestAck !== BATCHID_UNKNOWN) {\n                return _this.mutationQueue.getAllMutationBatchesThroughBatchId(txn, highestAck);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve([]);\n            }\n        })\n            .next(function (ackedBatches) {\n            if (ackedBatches.length > 0) {\n                return _this.mutationQueue.removeMutationBatches(txn, ackedBatches);\n            }\n            else {\n                return persistence_promise_PersistencePromise.resolve();\n            }\n        });\n    };\n    /* Accept locally generated Mutations and commit them to storage. */\n    LocalStore.prototype.localWrite = function (mutations) {\n        var _this = this;\n        return this.persistence.runTransaction('Locally write mutations', function (txn) {\n            var batch;\n            var localWriteTime = timestamp_Timestamp.now();\n            return _this.mutationQueue\n                .addMutationBatch(txn, localWriteTime, mutations)\n                .next(function (promisedBatch) {\n                batch = promisedBatch;\n                // TODO(koss): This is doing an N^2 update by replaying ALL the\n                // mutations on each document (instead of just the ones added) in\n                // this batch.\n                var keys = batch.keys();\n                return _this.localDocuments.getDocuments(txn, keys);\n            })\n                .next(function (changedDocuments) {\n                return { batchId: batch.batchId, changes: changedDocuments };\n            });\n        });\n    };\n    /**\n     * Acknowledge the given batch.\n     *\n     * On the happy path when a batch is acknowledged, the local store will\n     *\n     *  + remove the batch from the mutation queue;\n     *  + apply the changes to the remote document cache;\n     *  + recalculate the latency compensated view implied by those changes (there\n     *    may be mutations in the queue that affect the documents but haven't been\n     *    acknowledged yet); and\n     *  + give the changed documents back the sync engine\n     *\n     * @returns The resulting (modified) documents.\n     */\n    LocalStore.prototype.acknowledgeBatch = function (batchResult) {\n        var _this = this;\n        return this.persistence.runTransaction('Acknowledge batch', function (txn) {\n            var affected;\n            return _this.mutationQueue\n                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n                .next(function () {\n                if (_this.shouldHoldBatchResult(batchResult.commitVersion)) {\n                    _this.heldBatchResults.push(batchResult);\n                    affected = documentKeySet();\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n                else {\n                    var documentBuffer_1 = new remote_document_change_buffer_RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseBatchResults(txn, [batchResult], documentBuffer_1).next(function (promisedAffectedKeys) {\n                        affected = promisedAffectedKeys;\n                        return documentBuffer_1.apply(txn);\n                    });\n                }\n            })\n                .next(function () {\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affected);\n            });\n        });\n    };\n    /**\n     * Remove mutations from the MutationQueue for the specified batch;\n     * LocalDocuments will be recalculated.\n     *\n     * @returns The resulting modified documents.\n     */\n    LocalStore.prototype.rejectBatch = function (batchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Reject batch', function (txn) {\n            var toReject;\n            var affectedKeys;\n            return _this.mutationQueue\n                .lookupMutationBatch(txn, batchId)\n                .next(function (promisedToReject) {\n                assert(promisedToReject != null, 'Attempt to reject nonexistent batch!');\n                toReject = promisedToReject;\n                return _this.mutationQueue\n                    .getHighestAcknowledgedBatchId(txn)\n                    .next(function (lastAcked) {\n                    assert(batchId > lastAcked, \"Acknowledged batches can't be rejected.\");\n                    return toReject;\n                });\n            })\n                .next(function () {\n                return _this.removeMutationBatch(txn, toReject);\n            })\n                .next(function (promisedAffectedKeys) {\n                affectedKeys = promisedAffectedKeys;\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affectedKeys);\n            });\n        });\n    };\n    /** Returns the last recorded stream token for the current user. */\n    LocalStore.prototype.getLastStreamToken = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Get last stream token', function (txn) {\n            return _this.mutationQueue.getLastStreamToken(txn);\n        });\n    };\n    /**\n     * Sets the stream token for the current user without acknowledging any\n     * mutation batch. This is usually only useful after a stream handshake or in\n     * response to an error that requires clearing the stream token.\n     */\n    LocalStore.prototype.setLastStreamToken = function (streamToken) {\n        var _this = this;\n        return this.persistence.runTransaction('Set last stream token', function (txn) {\n            return _this.mutationQueue.setLastStreamToken(txn, streamToken);\n        });\n    };\n    /**\n     * Returns the last consistent snapshot processed (used by the RemoteStore to\n     * determine whether to buffer incoming snapshots from the backend).\n     */\n    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.queryCache.getLastRemoteSnapshotVersion();\n    };\n    /**\n     * Update the \"ground-state\" (remote) documents. We assume that the remote\n     * event reflects any write batches that have been acknowledged or rejected\n     * (i.e. we do not re-apply local mutations to updates from this event).\n     *\n     * LocalDocuments are re-calculated if there are remaining mutations in the\n     * queue.\n     */\n    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        var documentBuffer = new remote_document_change_buffer_RemoteDocumentChangeBuffer(this.remoteDocuments);\n        return this.persistence.runTransaction('Apply remote event', function (txn) {\n            var promises = [];\n            forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                // Do not ref/unref unassigned targetIds - it may lead to leaks.\n                var queryData = _this.targetIds[targetId];\n                if (!queryData)\n                    return;\n                var mapping = change.mapping;\n                if (mapping) {\n                    // First make sure that all references are deleted\n                    if (mapping instanceof ResetMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeysForTargetId(txn, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.documents, targetId);\n                        }));\n                    }\n                    else if (mapping instanceof UpdateMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeys(txn, mapping.removedDocuments, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.addedDocuments, targetId);\n                        }));\n                    }\n                    else {\n                        return fail('Unknown mapping type: ' + JSON.stringify(mapping));\n                    }\n                }\n                // Update the resume token if the change includes one. Don't clear\n                // any preexisting value.\n                var resumeToken = change.resumeToken;\n                if (resumeToken.length > 0) {\n                    queryData = queryData.update({\n                        resumeToken: resumeToken,\n                        snapshotVersion: change.snapshotVersion\n                    });\n                    _this.targetIds[targetId] = queryData;\n                    promises.push(_this.queryCache.addQueryData(txn, queryData));\n                }\n            });\n            var changedDocKeys = documentKeySet();\n            remoteEvent.documentUpdates.forEach(function (key, doc) {\n                changedDocKeys = changedDocKeys.add(key);\n                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {\n                    // Make sure we don't apply an old document version to the remote\n                    // cache, though we make an exception for SnapshotVersion.MIN which\n                    // can happen for manufactured events (e.g. in the case of a limbo\n                    // document resolution failing).\n                    if (existingDoc == null ||\n                        doc.version.equals(snapshot_version_SnapshotVersion.MIN) ||\n                        doc.version.compareTo(existingDoc.version) >= 0) {\n                        documentBuffer.addEntry(doc);\n                    }\n                    else {\n                        debug(local_store_LOG_TAG, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n                    }\n                    // The document might be garbage because it was unreferenced by\n                    // everything. Make sure to mark it as garbage if it is...\n                    _this.garbageCollector.addPotentialGarbageKey(key);\n                }));\n            });\n            // HACK: The only reason we allow a null snapshot version is so that we\n            // can synthesize remote events when we get permission denied errors while\n            // trying to resolve the state of a locally cached document that is in\n            // limbo.\n            var lastRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion();\n            var remoteVersion = remoteEvent.snapshotVersion;\n            if (!remoteVersion.equals(snapshot_version_SnapshotVersion.MIN)) {\n                assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +\n                    remoteVersion +\n                    ' < ' +\n                    lastRemoteVersion);\n                promises.push(_this.queryCache.setLastRemoteSnapshotVersion(txn, remoteVersion));\n            }\n            var releasedWriteKeys;\n            return persistence_promise_PersistencePromise.waitFor(promises)\n                .next(function () { return _this.releaseHeldBatchResults(txn, documentBuffer); })\n                .next(function (promisedReleasedWriteKeys) {\n                releasedWriteKeys = promisedReleasedWriteKeys;\n                return documentBuffer.apply(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, changedDocKeys.unionWith(releasedWriteKeys));\n            });\n        });\n    };\n    /**\n     * Notify local store of the changed views to locally pin documents.\n     */\n    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {\n        var _this = this;\n        return this.persistence.runTransaction('Notify local view changes', function (txn) {\n            var promises = [];\n            var _loop_1 = function (view) {\n                promises.push(_this.queryCache\n                    .getQueryData(txn, view.query)\n                    .next(function (queryData) {\n                    assert(queryData !== null, 'Local view changes contain unallocated query.');\n                    var targetId = queryData.targetId;\n                    _this.localViewReferences.addReferences(view.addedKeys, targetId);\n                    _this.localViewReferences.removeReferences(view.removedKeys, targetId);\n                }));\n            };\n            for (var _i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n                var view = viewChanges_1[_i];\n                _loop_1(view);\n            }\n            return persistence_promise_PersistencePromise.waitFor(promises);\n        });\n    };\n    /**\n     * Gets the mutation batch after the passed in batchId in the mutation queue\n     * or null if empty.\n     * @param afterBatchId If provided, the batch to search after.\n     * @returns The next mutation or null if there wasn't one.\n     */\n    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Get next mutation batch', function (txn) {\n            if (afterBatchId === undefined) {\n                afterBatchId = BATCHID_UNKNOWN;\n            }\n            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n        });\n    };\n    /**\n     * Read the current value of a Document with a given key or null if not\n     * found - used for testing.\n     */\n    LocalStore.prototype.readDocument = function (key) {\n        var _this = this;\n        return this.persistence.runTransaction('read document', function (txn) {\n            return _this.localDocuments.getDocument(txn, key);\n        });\n    };\n    /**\n     * Assigns the given query an internal ID so that its results can be pinned so\n     * they don't get GC'd. A query must be allocated in the local store before\n     * the store can be used to manage its view.\n     */\n    LocalStore.prototype.allocateQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Allocate query', function (txn) {\n            var queryData;\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (cached) {\n                if (cached) {\n                    // This query has been listened to previously, so reuse the\n                    // previous targetID.\n                    // TODO(mcg): freshen last accessed date?\n                    queryData = cached;\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n                else {\n                    var targetId = _this.targetIdGenerator.next();\n                    queryData = new query_data_QueryData(query, targetId, QueryPurpose.Listen);\n                    return _this.queryCache.addQueryData(txn, queryData);\n                }\n            })\n                .next(function () {\n                assert(!_this.targetIds[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);\n                _this.targetIds[queryData.targetId] = queryData;\n                return queryData;\n            });\n        });\n    };\n    /** Unpin all the documents associated with the given query. */\n    LocalStore.prototype.releaseQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Release query', function (txn) {\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (queryData) {\n                assert(queryData != null, 'Tried to release nonexistent query: ' + query);\n                _this.localViewReferences.removeReferencesForId(queryData.targetId);\n                delete _this.targetIds[queryData.targetId];\n                if (_this.garbageCollector.isEager) {\n                    return _this.queryCache.removeQueryData(txn, queryData);\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            })\n                .next(function () {\n                // If this was the last watch target, then we won't get any more\n                // watch snapshots, so we should release any held batch results.\n                if (isEmpty(_this.targetIds)) {\n                    var documentBuffer_2 = new remote_document_change_buffer_RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseHeldBatchResults(txn, documentBuffer_2).next(function () {\n                        documentBuffer_2.apply(txn);\n                    });\n                }\n                else {\n                    return persistence_promise_PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Runs the specified query against all the documents in the local store and\n     * returns the results.\n     */\n    LocalStore.prototype.executeQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Execute query', function (txn) {\n            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);\n        });\n    };\n    /**\n     * Returns the keys of the documents that are associated with the given\n     * target id in the remote table.\n     */\n    LocalStore.prototype.remoteDocumentKeys = function (targetId) {\n        var _this = this;\n        return this.persistence.runTransaction('Remote document keys', function (txn) {\n            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);\n        });\n    };\n    /**\n     * Collect garbage if necessary.\n     * Should be called periodically by Sync Engine to recover resources. The\n     * implementation must guarantee that GC won't happen in other places than\n     * this method call.\n     */\n    LocalStore.prototype.collectGarbage = function () {\n        var _this = this;\n        // Call collectGarbage regardless of whether isGCEnabled so the referenceSet\n        // doesn't continue to accumulate the garbage keys.\n        return this.persistence.runTransaction('Garbage collection', function (txn) {\n            return _this.garbageCollector.collectGarbage(txn).next(function (garbage) {\n                var promises = [];\n                garbage.forEach(function (key) {\n                    promises.push(_this.remoteDocuments.removeEntry(txn, key));\n                });\n                return persistence_promise_PersistencePromise.waitFor(promises);\n            });\n        });\n    };\n    LocalStore.prototype.releaseHeldBatchResults = function (txn, documentBuffer) {\n        var toRelease = [];\n        for (var _i = 0, _a = this.heldBatchResults; _i < _a.length; _i++) {\n            var batchResult = _a[_i];\n            if (!this.isRemoteUpToVersion(batchResult.commitVersion)) {\n                break;\n            }\n            toRelease.push(batchResult);\n        }\n        if (toRelease.length === 0) {\n            return persistence_promise_PersistencePromise.resolve(documentKeySet());\n        }\n        else {\n            this.heldBatchResults.splice(0, toRelease.length);\n            return this.releaseBatchResults(txn, toRelease, documentBuffer);\n        }\n    };\n    LocalStore.prototype.isRemoteUpToVersion = function (version) {\n        // If there are no watch targets, then we won't get remote snapshots, and\n        // we are always \"up-to-date.\"\n        var lastRemoteVersion = this.queryCache.getLastRemoteSnapshotVersion();\n        return (version.compareTo(lastRemoteVersion) <= 0 ||\n            isEmpty(this.targetIds));\n    };\n    LocalStore.prototype.shouldHoldBatchResult = function (version) {\n        // Check if watcher isn't up to date or prior results are already held.\n        return (!this.isRemoteUpToVersion(version) || this.heldBatchResults.length > 0);\n    };\n    LocalStore.prototype.releaseBatchResults = function (txn, batchResults, documentBuffer) {\n        var _this = this;\n        var promiseChain = persistence_promise_PersistencePromise.resolve();\n        var _loop_2 = function (batchResult) {\n            promiseChain = promiseChain.next(function () {\n                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);\n            });\n        };\n        for (var _i = 0, batchResults_1 = batchResults; _i < batchResults_1.length; _i++) {\n            var batchResult = batchResults_1[_i];\n            _loop_2(batchResult);\n        }\n        return promiseChain.next(function () {\n            return _this.removeMutationBatches(txn, batchResults.map(function (result) { return result.batch; }));\n        });\n    };\n    LocalStore.prototype.removeMutationBatch = function (txn, batch) {\n        return this.removeMutationBatches(txn, [batch]);\n    };\n    /** Removes all the mutation batches named in the given array. */\n    LocalStore.prototype.removeMutationBatches = function (txn, batches) {\n        var affectedDocs = documentKeySet();\n        for (var _i = 0, batches_2 = batches; _i < batches_2.length; _i++) {\n            var batch = batches_2[_i];\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                affectedDocs = affectedDocs.add(key);\n            }\n        }\n        return this.mutationQueue\n            .removeMutationBatches(txn, batches)\n            .next(function () { return affectedDocs; });\n    };\n    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {\n        var batch = batchResult.batch;\n        var docKeys = batch.keys();\n        var promiseChain = persistence_promise_PersistencePromise.resolve();\n        docKeys.forEach(function (docKey) {\n            promiseChain = promiseChain\n                .next(function () {\n                return documentBuffer.getEntry(txn, docKey);\n            })\n                .next(function (remoteDoc) {\n                var doc = remoteDoc;\n                var ackVersion = batchResult.docVersions.get(docKey);\n                assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');\n                if (!doc || doc.version.compareTo(ackVersion) < 0) {\n                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n                    if (!doc) {\n                        assert(!remoteDoc, 'Mutation batch ' +\n                            batch +\n                            ' applied to document ' +\n                            remoteDoc +\n                            ' resulted in null');\n                    }\n                    else {\n                        documentBuffer.addEntry(doc);\n                    }\n                }\n            });\n        });\n        return promiseChain;\n    };\n    return LocalStore;\n}());\n\n\n//# sourceMappingURL=local_store.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_mutation_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\nvar memory_mutation_queue_MemoryMutationQueue = /** @class */ (function () {\n    function MemoryMutationQueue() {\n        /**\n         * The set of all mutations that have been sent but not yet been applied to\n         * the backend.\n         */\n        this.mutationQueue = [];\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\n        this.nextBatchId = 1;\n        /** The highest acknowledged mutation in the queue. */\n        this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        /** The last received stream token from the server, used to acknowledge which\n         * responses the client has processed. Stream tokens are opaque checkpoint\n         * markers whose only real value is their inclusion in the next request.\n         */\n        this.lastStreamToken = emptyByteString();\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n        /** An ordered mapping between documents and the mutations batch IDs. */\n        this.batchesByDocumentKey = new sorted_set_SortedSet(reference_set_DocReference.compareByKey);\n    }\n    MemoryMutationQueue.prototype.start = function (transaction) {\n        // NOTE: The queue may be shutdown / started multiple times, since we\n        // maintain the queue for the duration of the app session in case a user\n        // logs out / back in. To behave like the LevelDB-backed MutationQueue (and\n        // accommodate tests that expect as much), we reset nextBatchId and\n        // highestAcknowledgedBatchId if the queue is empty.\n        if (this.mutationQueue.length === 0) {\n            this.nextBatchId = 1;\n            this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        }\n        assert(this.highestAcknowledgedBatchId < this.nextBatchId, 'highestAcknowledgedBatchId must be less than the nextBatchId');\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.mutationQueue.length === 0);\n    };\n    MemoryMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.nextBatchId);\n    };\n    MemoryMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.highestAcknowledgedBatchId);\n    };\n    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n        // Verify that the batch in the queue is the one to be acknowledged.\n        var check = this.mutationQueue[batchIndex];\n        assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' +\n            batchId +\n            ', got batch ' +\n            check.batchId);\n        assert(!check.isTombstone(), \"Can't acknowledge a previously removed batch\");\n        this.highestAcknowledgedBatchId = batchId;\n        this.lastStreamToken = streamToken;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.lastStreamToken);\n    };\n    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.lastStreamToken = streamToken;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        assert(mutations.length !== 0, 'Mutation batches should not be empty');\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        if (this.mutationQueue.length > 0) {\n            var prior = this.mutationQueue[this.mutationQueue.length - 1];\n            assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');\n        }\n        var batch = new mutation_batch_MutationBatch(batchId, localWriteTime, mutations);\n        this.mutationQueue.push(batch);\n        // Track references by document key.\n        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n            var mutation = mutations_1[_i];\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new reference_set_DocReference(mutation.key, batchId));\n        }\n        return persistence_promise_PersistencePromise.resolve(batch);\n    };\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        return persistence_promise_PersistencePromise.resolve(this.findMutationBatch(batchId));\n    };\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var size = this.mutationQueue.length;\n        // All batches with batchId <= this.highestAcknowledgedBatchId have been\n        // acknowledged so the first unacknowledged batch after batchID will have a\n        // batchID larger than both of these values.\n        batchId = Math.max(batchId + 1, this.highestAcknowledgedBatchId);\n        // The requested batchId may still be out of range so normalize it to the\n        // start of the queue.\n        var rawIndex = this.indexOfBatchId(batchId);\n        var index = rawIndex < 0 ? 0 : rawIndex;\n        // Finally return the first non-tombstone batch.\n        for (; index < size; index++) {\n            var batch = this.mutationQueue[index];\n            if (!batch.isTombstone()) {\n                return persistence_promise_PersistencePromise.resolve(batch);\n            }\n        }\n        return persistence_promise_PersistencePromise.resolve(null);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        return persistence_promise_PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var count = this.mutationQueue.length;\n        var endIndex = this.indexOfBatchId(batchId);\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        else if (endIndex >= count) {\n            endIndex = count;\n        }\n        else {\n            // The endIndex is in the queue so increment to pull everything in the\n            // queue including it.\n            endIndex++;\n        }\n        return persistence_promise_PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(endIndex));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        var start = new reference_set_DocReference(documentKey, 0);\n        var end = new reference_set_DocReference(documentKey, Number.POSITIVE_INFINITY);\n        var result = [];\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n            assert(documentKey.equals(ref.key), \"Should only iterate over a single key's batches\");\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\n            assert(batch !== null, 'Batches in the index must exist in the main table');\n            result.push(batch);\n        });\n        return persistence_promise_PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        // Use the query path as a prefix for testing if a document matches the\n        // query.\n        var prefix = query.path;\n        var immediateChildrenPathLength = prefix.length + 1;\n        // Construct a document reference for actually scanning the index. Unlike\n        // the prefix the document key in this reference must have an even number of\n        // segments. The empty segment can be used a suffix of the query path\n        // because it precedes all other segments in an ordered traversal.\n        var startPath = prefix;\n        if (!document_key_DocumentKey.isDocumentKey(startPath)) {\n            startPath = startPath.child('');\n        }\n        var start = new reference_set_DocReference(new document_key_DocumentKey(startPath), 0);\n        // Find unique batchIDs referenced by all documents potentially matching the\n        // query.\n        var uniqueBatchIDs = new sorted_set_SortedSet(primitiveComparator);\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\n            var rowKeyPath = ref.key.path;\n            if (!prefix.isPrefixOf(rowKeyPath)) {\n                return false;\n            }\n            else {\n                // Rows with document keys more than one segment longer than the query\n                // path can't be matches. For example, a query on 'rooms' can't match\n                // the document /rooms/abc/messages/xyx.\n                // TODO(mcg): we'll need a different scanner when we implement\n                // ancestor queries.\n                if (rowKeyPath.length === immediateChildrenPathLength) {\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n                }\n                return true;\n            }\n        }, start);\n        // Construct an array of matching batches, sorted by batchID to ensure that\n        // multiple mutations affecting the same document key are applied in order.\n        var result = [];\n        uniqueBatchIDs.forEach(function (batchId) {\n            var batch = _this.findMutationBatch(batchId);\n            if (batch !== null) {\n                result.push(batch);\n            }\n        });\n        return persistence_promise_PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var batchCount = batches.length;\n        assert(batchCount > 0, 'Should not remove mutations when none exist.');\n        var firstBatchId = batches[0].batchId;\n        var queueCount = this.mutationQueue.length;\n        // Find the position of the first batch for removal. This need not be the\n        // first entry in the queue.\n        var startIndex = this.indexOfExistingBatchId(firstBatchId, 'removed');\n        assert(this.mutationQueue[startIndex].batchId === firstBatchId, 'Removed batches must exist in the queue');\n        // Check that removed batches are contiguous (while excluding tombstones).\n        var batchIndex = 1;\n        var queueIndex = startIndex + 1;\n        while (batchIndex < batchCount && queueIndex < queueCount) {\n            var batch = this.mutationQueue[queueIndex];\n            if (batch.isTombstone()) {\n                queueIndex++;\n                continue;\n            }\n            assert(batch.batchId === batches[batchIndex].batchId, 'Removed batches must be contiguous in the queue');\n            batchIndex++;\n            queueIndex++;\n        }\n        // Only actually remove batches if removing at the front of the queue.\n        // Previously rejected batches may have left tombstones in the queue, so\n        // expand the removal range to include any tombstones.\n        if (startIndex === 0) {\n            for (; queueIndex < queueCount; queueIndex++) {\n                var batch = this.mutationQueue[queueIndex];\n                if (!batch.isTombstone()) {\n                    break;\n                }\n            }\n            var length_1 = queueIndex - startIndex;\n            this.mutationQueue.splice(startIndex, length_1);\n        }\n        else {\n            // Mark the tombstones\n            for (var i = startIndex; i < queueIndex; i++) {\n                this.mutationQueue[i] = this.mutationQueue[i].toTombstone();\n            }\n        }\n        var references = this.batchesByDocumentKey;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            var batchId = batch.batchId;\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                if (this.garbageCollector !== null) {\n                    this.garbageCollector.addPotentialGarbageKey(key);\n                }\n                var ref = new reference_set_DocReference(key, batchId);\n                references = references.delete(ref);\n            }\n        }\n        this.batchesByDocumentKey = references;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n        var ref = new reference_set_DocReference(key, 0);\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n        return persistence_promise_PersistencePromise.resolve(key.equals(firstRef && firstRef.key));\n    };\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        if (this.mutationQueue.length === 0) {\n            assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');\n        }\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    /**\n     * A private helper that collects all the mutations batches in the queue up to\n     * but not including the given endIndex. All tombstones in the queue are\n     * excluded.\n     */\n    MemoryMutationQueue.prototype.getAllLiveMutationBatchesBeforeIndex = function (endIndex) {\n        var result = [];\n        for (var i = 0; i < endIndex; i++) {\n            var batch = this.mutationQueue[i];\n            if (!batch.isTombstone()) {\n                result.push(batch);\n            }\n        }\n        return result;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue and asserts that\n     * the resulting index is within the bounds of the queue.\n     *\n     * @param batchId The batchId to search for\n     * @param action A description of what the caller is doing, phrased in passive\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n     */\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n        var index = this.indexOfBatchId(batchId);\n        assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);\n        return index;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue. This operation\n     * is O(1).\n     *\n     * @return The computed index of the batch with the given batchId, based on\n     * the state of the queue. Note this index can be negative if the requested\n     * batchId has already been remvoed from the queue or past the end of the\n     * queue if the batchId is larger than the last added batch.\n     */\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n        if (this.mutationQueue.length === 0) {\n            // As an index this is past the end of the queue\n            return 0;\n        }\n        // Examine the front of the queue to figure out the difference between the\n        // batchId and indexes in the array. Note that since the queue is ordered\n        // by batchId, if the first batch has a larger batchId then the requested\n        // batchId doesn't exist in the queue.\n        var firstBatchId = this.mutationQueue[0].batchId;\n        return batchId - firstBatchId;\n    };\n    /**\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\n     * other functions that uses this code easier to read and more efficent.\n     */\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n        var index = this.indexOfBatchId(batchId);\n        if (index < 0 || index >= this.mutationQueue.length) {\n            return null;\n        }\n        var batch = this.mutationQueue[index];\n        assert(batch.batchId === batchId, 'If found batch must match');\n        return batch.isTombstone() ? null : batch;\n    };\n    return MemoryMutationQueue;\n}());\n\n\n//# sourceMappingURL=memory_mutation_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_query_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar memory_query_cache_MemoryQueryCache = /** @class */ (function () {\n    function MemoryQueryCache() {\n        /**\n         * Maps a query to the data about that query\n         */\n        this.queries = new obj_map_ObjectMap(function (q) { return q.canonicalId(); });\n        /** The last received snapshot version. */\n        this.lastRemoteSnapshotVersion = snapshot_version_SnapshotVersion.MIN;\n        /** The highest numbered target ID encountered. */\n        this.highestTargetId = 0;\n        /**\n         * A ordered bidirectional mapping between documents and the remote target\n         * IDs.\n         */\n        this.references = new reference_set_ReferenceSet();\n    }\n    MemoryQueryCache.prototype.start = function (transaction) {\n        // Nothing to do.\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    MemoryQueryCache.prototype.getHighestTargetId = function () {\n        return this.highestTargetId;\n    };\n    MemoryQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        this.queries.set(queryData.query, queryData);\n        var targetId = queryData.targetId;\n        if (targetId > this.highestTargetId) {\n            this.highestTargetId = targetId;\n        }\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        this.queries.delete(queryData.query);\n        this.references.removeReferencesForId(queryData.targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {\n        var queryData = this.queries.get(query) || null;\n        return persistence_promise_PersistencePromise.resolve(queryData);\n    };\n    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        this.references.addReferences(keys, targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        this.references.removeReferences(keys, targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        this.references.removeReferencesForId(targetId);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var matchingKeys = this.references.referencesForId(targetId);\n        return persistence_promise_PersistencePromise.resolve(matchingKeys);\n    };\n    MemoryQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.references.setGarbageCollector(gc);\n    };\n    MemoryQueryCache.prototype.containsKey = function (txn, key) {\n        return this.references.containsKey(txn, key);\n    };\n    return MemoryQueryCache;\n}());\n\n\n//# sourceMappingURL=memory_query_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_remote_document_cache.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar memory_remote_document_cache_MemoryRemoteDocumentCache = /** @class */ (function () {\n    function MemoryRemoteDocumentCache() {\n        this.docs = maybeDocumentMap();\n    }\n    MemoryRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        this.docs = this.docs.insert(maybeDocument.key, maybeDocument);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        this.docs = this.docs.remove(documentKey);\n        return persistence_promise_PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        return persistence_promise_PersistencePromise.resolve(this.docs.get(documentKey));\n    };\n    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var prefix = new document_key_DocumentKey(query.path.child(''));\n        var iterator = this.docs.getIteratorFrom(prefix);\n        while (iterator.hasNext()) {\n            var _a = iterator.getNext(), key = _a.key, maybeDoc = _a.value;\n            if (!query.path.isPrefixOf(key.path)) {\n                break;\n            }\n            if (maybeDoc instanceof document_Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        }\n        return persistence_promise_PersistencePromise.resolve(results);\n    };\n    return MemoryRemoteDocumentCache;\n}());\n\n\n//# sourceMappingURL=memory_remote_document_cache.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/memory_persistence.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar memory_persistence_LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar memory_persistence_MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new memory_remote_document_cache_MemoryRemoteDocumentCache();\n        this.queryCache = new memory_query_cache_MemoryQueryCache();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        assert(!this.started, 'MemoryPersistence double-started!');\n        this.started = true;\n        // No durable state to read on startup.\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        // No durable state to ensure is closed on shutdown.\n        assert(this.started, 'MemoryPersistence shutdown without start!');\n        this.started = false;\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new memory_mutation_queue_MemoryMutationQueue();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        debug(memory_persistence_LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\n\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n//# sourceMappingURL=memory_persistence.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/local/no_op_garbage_collector.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar no_op_garbage_collector_NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return persistence_promise_PersistencePromise.resolve(documentKeySet());\n    };\n    return NoOpGarbageCollector;\n}());\n\n\n//# sourceMappingURL=no_op_garbage_collector.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/promise.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\n\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nfunction sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n//# sourceMappingURL=promise.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/backoff.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar backoff_LOG_TAG = 'ExponentialBackoff';\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar backoff_ExponentialBackoff = /** @class */ (function () {\n    function ExponentialBackoff(\n        /**\n         * The initial delay (used as the base delay on the first retry attempt).\n         * Note that jitter will still be applied, so the actual delay could be as\n         * little as 0.5*initialDelayMs.\n         */\n        initialDelayMs, \n        /**\n         * The multiplier to use to determine the extended base delay after each\n         * attempt.\n         */\n        backoffFactor, \n        /**\n         * The maximum base delay after which no further backoff is performed.\n         * Note that jitter will still be applied, so the actual delay could be as\n         * much as 1.5*maxDelayMs.\n         */\n        maxDelayMs) {\n        this.initialDelayMs = initialDelayMs;\n        this.backoffFactor = backoffFactor;\n        this.maxDelayMs = maxDelayMs;\n        this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */\n    ExponentialBackoff.prototype.reset = function () {\n        this.currentBaseMs = 0;\n    };\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n    ExponentialBackoff.prototype.resetToMax = function () {\n        this.currentBaseMs = this.maxDelayMs;\n    };\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     */\n    ExponentialBackoff.prototype.backoffAndWait = function () {\n        var def = new Deferred();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        var delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            debug(backoff_LOG_TAG, \"Backing off for \" + delayWithJitterMs + \" ms \" +\n                (\"(base delay: \" + this.currentBaseMs + \" ms)\"));\n        }\n        setTimeout(function () {\n            def.resolve();\n        }, delayWithJitterMs);\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        if (this.currentBaseMs < this.initialDelayMs) {\n            this.currentBaseMs = this.initialDelayMs;\n        }\n        if (this.currentBaseMs > this.maxDelayMs) {\n            this.currentBaseMs = this.maxDelayMs;\n        }\n        return def.promise;\n    };\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\n        return (Math.random() - 0.5) * this.currentBaseMs;\n    };\n    return ExponentialBackoff;\n}());\n\n\n//# sourceMappingURL=backoff.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/persistent_stream.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar persistent_stream___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\nvar persistent_stream_LOG_TAG = 'PersistentStream';\nvar PersistentStreamState;\n(function (PersistentStreamState) {\n    /**\n     * The streaming RPC is not running and there's no error condition.\n     * Calling `start` will start the stream immediately without backoff.\n     * While in this state isStarted will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Initial\"] = 0] = \"Initial\";\n    /**\n     * The stream is starting, and is waiting for an auth token to attach to\n     * the initial request. While in this state, isStarted will return\n     * true but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Auth\"] = 1] = \"Auth\";\n    /**\n     * The streaming RPC is up and running. Requests and responses can flow\n     * freely. Both isStarted and isOpen will return true.\n     */\n    PersistentStreamState[PersistentStreamState[\"Open\"] = 2] = \"Open\";\n    /**\n     * The stream encountered an error. The next start attempt will back off.\n     * While in this state isStarted() will return false.\n     *\n     */\n    PersistentStreamState[PersistentStreamState[\"Error\"] = 3] = \"Error\";\n    /**\n     * An in-between state after an error where the stream is waiting before\n     * re-starting. After\n     * waiting is complete, the stream will try to open. While in this\n     * state isStarted() will return YES but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Backoff\"] = 4] = \"Backoff\";\n    /**\n     * The stream has been explicitly stopped; no further events will be emitted.\n     */\n    PersistentStreamState[PersistentStreamState[\"Stopped\"] = 5] = \"Stopped\";\n})(PersistentStreamState || (PersistentStreamState = {}));\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nvar BACKOFF_INITIAL_DELAY_MS = 1000;\n/** Maximum backoff time in milliseconds */\nvar BACKOFF_MAX_DELAY_MS = 60 * 1000;\nvar BACKOFF_FACTOR = 1.5;\n/** The time a stream stays open after it is marked idle. */\nvar IDLE_TIMEOUT_MS = 60 * 1000;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be `start`ed before messages can\n * be sent and received. The PersistentStream will call the onOpen function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a `start` fail, PersistentStream will call the registered\n * onClose with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nvar persistent_stream_PersistentStream = /** @class */ (function () {\n    function PersistentStream(queue, connection, credentialsProvider, \n        // Used for faster retries in testing\n        initialBackoffDelay) {\n        this.queue = queue;\n        this.connection = connection;\n        this.credentialsProvider = credentialsProvider;\n        this.idle = false;\n        this.stream = null;\n        this.listener = null;\n        this.backoff = new backoff_ExponentialBackoff(initialBackoffDelay ? initialBackoffDelay : BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);\n        this.state = PersistentStreamState.Initial;\n    }\n    /**\n     * Returns true if `start` has been called and no error has occurred. True\n     * indicates the stream is open or in the process of opening (which\n     * encompasses respecting backoff, getting auth tokens, and starting the\n     * actual RPC). Use `isOpen` to determine if the stream is open and ready for\n     * outbound requests.\n     */\n    PersistentStream.prototype.isStarted = function () {\n        return (this.state === PersistentStreamState.Backoff ||\n            this.state === PersistentStreamState.Auth ||\n            this.state === PersistentStreamState.Open);\n    };\n    /**\n     * Returns true if the underlying RPC is open (the openHandler has been\n     * called) and the stream is ready for outbound requests.\n     */\n    PersistentStream.prototype.isOpen = function () {\n        return this.state === PersistentStreamState.Open;\n    };\n    /**\n     * Starts the RPC. Only allowed if isStarted returns false. The stream is\n     * not immediately ready for use: onOpen will be invoked when the RPC is ready\n     * for outbound requests, at which point isOpen will return true.\n     *\n     *  When start returns, isStarted will return true.\n     */\n    PersistentStream.prototype.start = function (listener) {\n        if (this.state === PersistentStreamState.Error) {\n            this.performBackoff(listener);\n            return;\n        }\n        assert(this.state === PersistentStreamState.Initial, 'Already started');\n        this.listener = listener;\n        this.auth();\n    };\n    /**\n     * Stops the RPC. This call is idempotent and allowed regardless of the\n     * current isStarted state.\n     *\n     * When stop returns, isStarted and isOpen will both return false.\n     */\n    PersistentStream.prototype.stop = function () {\n        if (this.isStarted()) {\n            this.close(PersistentStreamState.Stopped);\n        }\n    };\n    /**\n     * After an error the stream will usually back off on the next attempt to\n     * start it. If the error warrants an immediate restart of the stream, the\n     * sender can use this to indicate that the receiver should not back off.\n     *\n     * Each error will call the onClose function. That function can decide to\n     * inhibit backoff if required.\n     */\n    PersistentStream.prototype.inhibitBackoff = function () {\n        assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');\n        this.state = PersistentStreamState.Initial;\n        this.backoff.reset();\n    };\n    /**\n     * Initializes the idle timer. If no write takes place within one minute, the\n     * WebChannel stream will be closed.\n     */\n    PersistentStream.prototype.markIdle = function () {\n        var _this = this;\n        this.idle = true;\n        this.queue\n            .schedule(function () {\n            return _this.handleIdleCloseTimer();\n        }, IDLE_TIMEOUT_MS)\n            .catch(function (err) {\n            // When the AsyncQueue gets drained during testing, pending Promises\n            // (including these idle checks) will get rejected. We special-case\n            // these cancelled idle checks to make sure that these specific Promise\n            // rejections are not considered unhandled.\n            assert(err.code === Code.CANCELLED, \"Received unexpected error in idle timeout closure. Expected CANCELLED, but was: \" + err);\n        });\n    };\n    /** Sends a message to the underlying stream. */\n    PersistentStream.prototype.sendRequest = function (msg) {\n        this.cancelIdleCheck();\n        this.stream.send(msg);\n    };\n    /** Called by the idle timer when the stream should close due to inactivity. */\n    PersistentStream.prototype.handleIdleCloseTimer = function () {\n        if (this.isOpen() && this.idle) {\n            // When timing out an idle stream there's no reason to force the stream into backoff when\n            // it restarts so set the stream state to Initial instead of Error.\n            return this.close(PersistentStreamState.Initial);\n        }\n        return Promise.resolve();\n    };\n    /** Marks the stream as active again. */\n    PersistentStream.prototype.cancelIdleCheck = function () {\n        this.idle = false;\n    };\n    /**\n     * Closes the stream and cleans up as necessary:\n     *\n     * * closes the underlying GRPC stream;\n     * * calls the onClose handler with the given 'error';\n     * * sets internal stream state to 'finalState';\n     * * adjusts the backoff timer based on the error\n     *\n     * A new stream can be opened by calling `start` unless `finalState` is set to\n     * `PersistentStreamState.Stopped`.\n     *\n     * @param finalState the intended state of the stream after closing.\n     * @param error the error the connection was closed with.\n     */\n    PersistentStream.prototype.close = function (finalState, error) {\n        assert(finalState == PersistentStreamState.Error || isNullOrUndefined(error), \"Can't provide an error when not in an error state.\");\n        this.cancelIdleCheck();\n        if (finalState != PersistentStreamState.Error) {\n            // If this is an intentional close ensure we don't delay our next connection attempt.\n            this.backoff.reset();\n        }\n        else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n            log_error(error.toString());\n            log_error('Using maximum backoff delay to prevent overloading the backend.');\n            this.backoff.resetToMax();\n        }\n        // Clean up the underlying stream because we are no longer interested in events.\n        if (this.stream !== null) {\n            this.tearDown();\n            this.stream.close();\n            this.stream = null;\n        }\n        // This state must be assigned before calling onClose() to allow the callback to\n        // inhibit backoff or otherwise manipulate the state in its non-started state.\n        this.state = finalState;\n        var listener = this.listener;\n        // Clear the listener to avoid bleeding of events from the underlying streams.\n        this.listener = null;\n        // If the caller explicitly requested a stream stop, don't notify them of a closing stream (it\n        // could trigger undesirable recovery logic, etc.).\n        if (finalState != PersistentStreamState.Stopped) {\n            return listener.onClose(error);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Can be overridden to perform additional cleanup before the stream is closed.\n     * Calling super.tearDown() is not required.\n     */\n    PersistentStream.prototype.tearDown = function () { };\n    PersistentStream.prototype.auth = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');\n        this.state = PersistentStreamState.Auth;\n        this.credentialsProvider.getToken(/*forceRefresh=*/ false).then(function (token) {\n            // Normally we'd have to schedule the callback on the AsyncQueue.\n            // However, the following calls are safe to be called outside the\n            // AsyncQueue since they don't chain asynchronous calls\n            _this.startStream(token);\n        }, function (error) {\n            _this.queue.schedule(function () {\n                if (_this.state !== PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for authorization.\n                    var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n                    return _this.handleStreamClose(rpcError);\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        });\n    };\n    PersistentStream.prototype.startStream = function (token) {\n        var _this = this;\n        if (this.state === PersistentStreamState.Stopped) {\n            // Stream can be stopped while waiting for authorization.\n            return;\n        }\n        assert(this.state === PersistentStreamState.Auth, 'Trying to start stream in a non-auth state');\n        // Helper function to dispatch to AsyncQueue and make sure that any\n        // close will seem instantaneous and events are prevented from being\n        // raised after the close call\n        var dispatchIfStillActive = function (stream, fn) {\n            _this.queue.schedule(function () {\n                // Only raise events if the stream instance has not changed\n                if (_this.stream === stream) {\n                    return fn();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        };\n        // Only start stream if listener has not changed\n        if (this.listener !== null) {\n            var currentStream_1 = this.startRpc(token);\n            this.stream = currentStream_1;\n            this.stream.onOpen(function () {\n                dispatchIfStillActive(currentStream_1, function () {\n                    assert(_this.state === PersistentStreamState.Auth, 'Expected stream to be in state auth, but was ' + _this.state);\n                    _this.state = PersistentStreamState.Open;\n                    return _this.listener.onOpen();\n                });\n            });\n            this.stream.onClose(function (error) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.handleStreamClose(error);\n                });\n            });\n            this.stream.onMessage(function (msg) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.onMessage(msg);\n                });\n            });\n        }\n    };\n    PersistentStream.prototype.performBackoff = function (listener) {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Error, 'Should only perform backoff in an error case');\n        this.state = PersistentStreamState.Backoff;\n        this.backoff.backoffAndWait().then(function () {\n            // Backoff does not run on the AsyncQueue, so we need to reschedule to\n            // make sure the queue blocks\n            _this.queue.schedule(function () {\n                if (_this.state === PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for backoff to complete.\n                    return Promise.resolve();\n                }\n                _this.state = PersistentStreamState.Initial;\n                _this.start(listener);\n                assert(_this.isStarted(), 'PersistentStream should have started');\n                return Promise.resolve();\n            });\n        });\n    };\n    PersistentStream.prototype.handleStreamClose = function (error) {\n        assert(this.isStarted(), \"Can't handle server close on non-started stream\");\n        debug(persistent_stream_LOG_TAG, \"close with error: \" + error);\n        this.stream = null;\n        // In theory the stream could close cleanly, however, in our current model\n        // we never expect this to happen because if we stop a stream ourselves,\n        // this callback will never be called. To prevent cases where we retry\n        // without a backoff accidentally, we set the stream to error in all cases.\n        return this.close(PersistentStreamState.Error, error);\n    };\n    return PersistentStream;\n}());\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the openHandler, any number of listen and\n * unlisten calls calls can be sent to control what changes will be sent from\n * the server for ListenResponses.\n */\nvar PersistentListenStream = /** @class */ (function (_super) {\n    persistent_stream___extends(PersistentListenStream, _super);\n    function PersistentListenStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        return _this;\n    }\n    PersistentListenStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Listen', token);\n    };\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n        // A successful response means the stream is healthy\n        this.backoff.reset();\n        var watchChange = this.serializer.fromWatchChange(watchChangeProto);\n        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);\n        return this.listener.onWatchChange(watchChange, snapshot);\n    };\n    /**\n     * Registers interest in the results of the given query. If the query\n     * includes a resumeToken it will be included in the request. Results that\n     * affect the query will be streamed back as WatchChange messages that\n     * reference the targetId.\n     */\n    PersistentListenStream.prototype.watch = function (queryData) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.addTarget = this.serializer.toTarget(queryData);\n        var labels = this.serializer.toListenRequestLabels(queryData);\n        if (labels) {\n            request.labels = labels;\n        }\n        this.sendRequest(request);\n    };\n    /**\n     * Unregisters interest in the results of the query associated with the\n     * given targetId.\n     */\n    PersistentListenStream.prototype.unwatch = function (targetId) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.removeTarget = targetId;\n        this.sendRequest(request);\n    };\n    return PersistentListenStream;\n}(persistent_stream_PersistentStream));\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nvar persistent_stream_PersistentWriteStream = /** @class */ (function (_super) {\n    persistent_stream___extends(PersistentWriteStream, _super);\n    function PersistentWriteStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        _this.handshakeComplete_ = false;\n        return _this;\n    }\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n        /**\n         * Tracks whether or not a handshake has been successfully exchanged and\n         * the stream is ready to accept mutations.\n         */\n        get: function () {\n            return this.handshakeComplete_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Override of PersistentStream.start\n    PersistentWriteStream.prototype.start = function (listener) {\n        this.handshakeComplete_ = false;\n        _super.prototype.start.call(this, listener);\n    };\n    PersistentWriteStream.prototype.tearDown = function () {\n        if (this.handshakeComplete_) {\n            this.writeMutations([]);\n        }\n    };\n    PersistentWriteStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Write', token);\n    };\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\n        // Always capture the last stream token.\n        assert(!!responseProto.streamToken, 'Got a write response without a stream token');\n        this.lastStreamToken = responseProto.streamToken;\n        if (!this.handshakeComplete_) {\n            // The first response is always the handshake response\n            assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');\n            this.handshakeComplete_ = true;\n            return this.listener.onHandshakeComplete();\n        }\n        else {\n            // A successful first write response means the stream is healthy,\n            // Note, that we could consider a successful handshake healthy, however,\n            // the write itself might be causing an error we want to back off from.\n            this.backoff.reset();\n            var results = this.serializer.fromWriteResults(responseProto.writeResults);\n            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);\n            return this.listener.onMutationResult(commitVersion, results);\n        }\n    };\n    /**\n     * Sends an initial streamToken to the server, performing the handshake\n     * required to make the StreamingWrite RPC work. Subsequent\n     * calls should wait until onHandshakeComplete was called.\n     */\n    PersistentWriteStream.prototype.writeHandshake = function () {\n        assert(this.isOpen(), 'Writing handshake requires an opened stream');\n        assert(!this.handshakeComplete_, 'Handshake already completed');\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\n        // stream token on the handshake, ignoring any stream token we might have.\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        this.sendRequest(request);\n    };\n    /** Sends a group of mutations to the Firestore backend to apply. */\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\n        var _this = this;\n        assert(this.isOpen(), 'Writing mutations requires an opened stream');\n        assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');\n        assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');\n        var request = {\n            // Protos are typed with string, but we support UInt8Array on Node\n            // tslint:disable-next-line:no-any\n            streamToken: this.lastStreamToken,\n            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })\n        };\n        this.sendRequest(request);\n    };\n    return PersistentWriteStream;\n}(persistent_stream_PersistentStream));\n\n\n//# sourceMappingURL=persistent_stream.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/datastore.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nvar datastore_Datastore = /** @class */ (function () {\n    function Datastore(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        this.databaseInfo = databaseInfo;\n        this.queue = queue;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.serializer = serializer;\n        this.initialBackoffDelay = initialBackoffDelay;\n    }\n    Datastore.prototype.newPersistentWriteStream = function () {\n        return new persistent_stream_PersistentWriteStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.newPersistentWatchStream = function () {\n        return new PersistentListenStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.commit = function (mutations) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\n        };\n        return this.invokeRPC('Commit', params).then(function (response) {\n            return _this.serializer.fromWriteResults(response.writeResults);\n        });\n    };\n    Datastore.prototype.lookup = function (keys) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\n        };\n        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {\n            var docs = maybeDocumentMap();\n            response.forEach(function (proto) {\n                var doc = _this.serializer.fromMaybeDocument(proto);\n                docs = docs.insert(doc.key, doc);\n            });\n            var result = [];\n            keys.forEach(function (key) {\n                var doc = docs.get(key);\n                assert(!!doc, 'Missing entity in write response for ' + key);\n                result.push(doc);\n            });\n            return result;\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC. */\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeRPC(rpcName, request, token);\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC with streamed results. */\n    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeStreamingRPC(rpcName, request, token);\n        });\n    };\n    return Datastore;\n}());\n\n\n//# sourceMappingURL=datastore.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/transaction.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar transaction_Transaction = /** @class */ (function () {\n    function Transaction(datastore) {\n        this.datastore = datastore;\n        // The version of each document that was read during this transaction.\n        this.readVersions = documentVersionMap();\n        this.mutations = [];\n        this.committed = false;\n    }\n    Transaction.prototype.recordVersion = function (doc) {\n        var docVersion = doc.version;\n        if (doc instanceof document_NoDocument) {\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            docVersion = snapshot_version_SnapshotVersion.forDeletedDoc();\n        }\n        var existingVersion = this.readVersions.get(doc.key);\n        if (existingVersion !== null) {\n            if (!docVersion.equals(existingVersion)) {\n                // This transaction will fail no matter what.\n                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n            }\n        }\n        else {\n            this.readVersions = this.readVersions.insert(doc.key, docVersion);\n        }\n    };\n    Transaction.prototype.lookup = function (keys) {\n        var _this = this;\n        if (this.committed) {\n            return Promise.reject('Transaction has already completed.');\n        }\n        if (this.mutations.length > 0) {\n            return Promise.reject('Transactions lookups are invalid after writes.');\n        }\n        return this.datastore.lookup(keys).then(function (docs) {\n            docs.forEach(function (doc) { return _this.recordVersion(doc); });\n            return docs;\n        });\n    };\n    Transaction.prototype.write = function (mutations) {\n        if (this.committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');\n        }\n        this.mutations = this.mutations.concat(mutations);\n    };\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n    Transaction.prototype.precondition = function (key) {\n        var version = this.readVersions.get(key);\n        if (version) {\n            return mutation_Precondition.updateTime(version);\n        }\n        else {\n            return mutation_Precondition.NONE;\n        }\n    };\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n    Transaction.prototype.preconditionForUpdate = function (key) {\n        var version = this.readVersions.get(key);\n        if (version && version.equals(snapshot_version_SnapshotVersion.forDeletedDoc())) {\n            // The document doesn't exist, so fail the transaction.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, \"Can't update a document that doesn't exist.\");\n        }\n        else if (version) {\n            // Document exists, base precondition on document update time.\n            return mutation_Precondition.updateTime(version);\n        }\n        else {\n            // Document was not read, so we just use the preconditions for a blind\n            // update.\n            return mutation_Precondition.exists(true);\n        }\n    };\n    Transaction.prototype.set = function (key, data) {\n        this.write(data.toMutations(key, this.precondition(key)));\n    };\n    Transaction.prototype.update = function (key, data) {\n        this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    };\n    Transaction.prototype.delete = function (key) {\n        this.write([new mutation_DeleteMutation(key, this.precondition(key))]);\n        // Since the delete will be applied before all following writes, we need to\n        // ensure that the precondition for the next write will be exists: false.\n        this.readVersions = this.readVersions.insert(key, snapshot_version_SnapshotVersion.forDeletedDoc());\n    };\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var unwritten = this.readVersions;\n        // For each mutation, note that the doc was written.\n        this.mutations.forEach(function (mutation) {\n            unwritten = unwritten.remove(mutation.key);\n        });\n        if (!unwritten.isEmpty()) {\n            return Promise.reject(Error('Every document read in a transaction must also be written.'));\n        }\n        return this.datastore.commit(this.mutations).then(function () {\n            _this.committed = true;\n        });\n    };\n    return Transaction;\n}());\n\n\n//# sourceMappingURL=transaction.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/remote/remote_store.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar remote_store_LOG_TAG = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nvar MAX_PENDING_WRITES = 10;\n// The RemoteStore notifies an onlineStateHandler with OnlineState.Failed if we\n// fail to connect to the backend. This subsequently triggers get() requests to\n// fail or use cached data, etc. Unfortunately, our connections have\n// historically been subject to various transient failures. So we wait for\n// multiple failures before notifying the onlineStateHandler.\nvar ONLINE_ATTEMPTS_BEFORE_FAILURE = 2;\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nvar remote_store_RemoteStore = /** @class */ (function () {\n    function RemoteStore(\n        /**\n         * The local store, used to fill the write pipeline with outbound\n         * mutations and resolve existence filter mismatches.\n         */\n        localStore, \n        /** The client-side proxy for interacting with the backend. */\n        datastore, onlineStateHandler) {\n        this.localStore = localStore;\n        this.datastore = datastore;\n        this.onlineStateHandler = onlineStateHandler;\n        this.pendingWrites = [];\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        /**\n         * A mapping of watched targets that the client cares about tracking and the\n         * user has explicitly called a 'listen' for this target.\n         *\n         * These targets may or may not have been sent to or acknowledged by the\n         * server. On re-establishing the listen stream, these targets should be sent\n         * to the server. The targets removed with unlistens are removed eagerly\n         * without waiting for confirmation from the listen stream.\n         */\n        this.listenTargets = {};\n        /**\n         * A mapping of targetId to pending acks needed.\n         *\n         * If a targetId is present in this map, then we're waiting for watch to\n         * acknowledge a removal or addition of the target. If a target is not in this\n         * mapping, and it's in the listenTargets map, then we consider the target to\n         * be active.\n         *\n         * We increment the count here every time we issue a request over the stream\n         * to watch or unwatch. We then decrement the count every time we get a target\n         * added or target removed message from the server. Once the count is equal to\n         * 0 we know that the client and server are in the same state (once this state\n         * is reached the targetId is removed from the map to free the memory).\n         */\n        this.pendingTargetResponses = {};\n        this.accumulatedWatchChanges = [];\n        this.watchStream = null;\n        this.writeStream = null;\n        /**\n         * The online state of the watch stream. The state is set to healthy if and\n         * only if there are messages received by the backend.\n         */\n        this.watchStreamOnlineState = OnlineState.Unknown;\n        /** A count of consecutive failures to open the stream. */\n        this.watchStreamFailures = 0;\n        /** Whether the client should fire offline warning. */\n        this.shouldWarnOffline = true;\n    }\n    /**\n     * Starts up the remote store, creating streams, restoring state from\n     * LocalStore, etc.\n     */\n    RemoteStore.prototype.start = function () {\n        return this.enableNetwork();\n    };\n    RemoteStore.prototype.setOnlineStateToHealthy = function () {\n        this.shouldWarnOffline = false;\n        this.updateAndBroadcastOnlineState(OnlineState.Healthy);\n    };\n    RemoteStore.prototype.setOnlineStateToUnknown = function () {\n        // The state is set to unknown when a healthy stream is closed (e.g. due to\n        // a token timeout) or when we have no active listens and therefore there's\n        // no need to start the stream. Assuming there is (possibly in the future)\n        // an active listen, then we will eventually move to state Online or Failed,\n        // but we always want to make at least ONLINE_ATTEMPTS_BEFORE_FAILURE\n        // attempts before failing, so we reset the count here.\n        this.watchStreamFailures = 0;\n        this.updateAndBroadcastOnlineState(OnlineState.Unknown);\n    };\n    RemoteStore.prototype.updateOnlineStateAfterFailure = function () {\n        // The first failure after we are successfully connected moves us to the\n        // 'Unknown' state. We then may make multiple attempts (based on\n        // ONLINE_ATTEMPTS_BEFORE_FAILURE) before we actually report failure.\n        if (this.watchStreamOnlineState === OnlineState.Healthy) {\n            this.setOnlineStateToUnknown();\n        }\n        else {\n            this.watchStreamFailures++;\n            if (this.watchStreamFailures >= ONLINE_ATTEMPTS_BEFORE_FAILURE) {\n                if (this.shouldWarnOffline) {\n                    log_error('Could not reach Firestore backend.');\n                    this.shouldWarnOffline = false;\n                }\n                this.updateAndBroadcastOnlineState(OnlineState.Failed);\n            }\n        }\n    };\n    RemoteStore.prototype.updateAndBroadcastOnlineState = function (onlineState) {\n        var didChange = this.watchStreamOnlineState !== onlineState;\n        this.watchStreamOnlineState = onlineState;\n        if (didChange) {\n            this.onlineStateHandler(onlineState);\n        }\n    };\n    RemoteStore.prototype.isNetworkEnabled = function () {\n        assert((this.watchStream == null) == (this.writeStream == null), 'WatchStream and WriteStream should both be null or non-null');\n        return this.watchStream != null;\n    };\n    /** Re-enables the network. Only to be called as the counterpart to disableNetwork(). */\n    RemoteStore.prototype.enableNetwork = function () {\n        var _this = this;\n        assert(this.watchStream == null, 'enableNetwork() called with non-null watchStream.');\n        assert(this.writeStream == null, 'enableNetwork() called with non-null writeStream.');\n        // Create new streams (but note they're not started yet).\n        this.watchStream = this.datastore.newPersistentWatchStream();\n        this.writeStream = this.datastore.newPersistentWriteStream();\n        // Load any saved stream token from persistent storage\n        return this.localStore.getLastStreamToken().then(function (token) {\n            _this.writeStream.lastStreamToken = token;\n            if (_this.shouldStartWatchStream()) {\n                _this.startWatchStream();\n            }\n            _this.updateAndBroadcastOnlineState(OnlineState.Unknown);\n            return _this.fillWritePipeline(); // This may start the writeStream.\n        });\n    };\n    /** Temporarily disables the network. The network can be re-enabled using enableNetwork(). */\n    RemoteStore.prototype.disableNetwork = function () {\n        this.updateAndBroadcastOnlineState(OnlineState.Failed);\n        // NOTE: We're guaranteed not to get any further events from these streams (not even a close\n        // event).\n        this.watchStream.stop();\n        this.writeStream.stop();\n        this.cleanUpWatchStreamState();\n        this.cleanUpWriteStreamState();\n        this.writeStream = null;\n        this.watchStream = null;\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.shutdown = function () {\n        debug(remote_store_LOG_TAG, 'RemoteStore shutting down.');\n        this.disableNetwork();\n        return Promise.resolve(undefined);\n    };\n    /** Starts new listen for the given query. Uses resume token if provided */\n    RemoteStore.prototype.listen = function (queryData) {\n        assert(!contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');\n        // Mark this as something the client is currently listening for.\n        this.listenTargets[queryData.targetId] = queryData;\n        if (this.shouldStartWatchStream()) {\n            // The listen will be sent in onWatchStreamOpen\n            this.startWatchStream();\n        }\n        else if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendWatchRequest(queryData);\n        }\n    };\n    /** Removes the listen from server */\n    RemoteStore.prototype.unlisten = function (targetId) {\n        assert(contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');\n        var queryData = this.listenTargets[targetId];\n        delete this.listenTargets[targetId];\n        if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendUnwatchRequest(targetId);\n            if (isEmpty(this.listenTargets)) {\n                this.watchStream.markIdle();\n            }\n        }\n    };\n    /**\n     * We need to increment the the expected number of pending responses we're due\n     * from watch so we wait for the ack to process any messages from this target.\n     */\n    RemoteStore.prototype.sendWatchRequest = function (queryData) {\n        this.recordPendingTargetRequest(queryData.targetId);\n        this.watchStream.watch(queryData);\n    };\n    /**\n     * We need to increment the expected number of pending responses we're due\n     * from watch so we wait for the removal on the server before we process any\n     * messages from this target.\n     */\n    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {\n        this.recordPendingTargetRequest(targetId);\n        this.watchStream.unwatch(targetId);\n    };\n    /**\n     * Increment the mapping of how many acks are needed from watch before we can\n     * consider the server to be 'in-sync' with the client's active targets.\n     */\n    RemoteStore.prototype.recordPendingTargetRequest = function (targetId) {\n        // For each request we get we need to record we need a response for it.\n        this.pendingTargetResponses[targetId] =\n            (this.pendingTargetResponses[targetId] || 0) + 1;\n    };\n    RemoteStore.prototype.startWatchStream = function () {\n        assert(this.shouldStartWatchStream(), 'startWriteStream() called when shouldStartWatchStream() is false.');\n        this.watchStream.start({\n            onOpen: this.onWatchStreamOpen.bind(this),\n            onClose: this.onWatchStreamClose.bind(this),\n            onWatchChange: this.onWatchStreamChange.bind(this)\n        });\n    };\n    /**\n     * Returns whether the watch stream should be started because there are\n     * active targets trying to be listened too\n     */\n    RemoteStore.prototype.shouldStartWatchStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.watchStream.isStarted() &&\n            !isEmpty(this.listenTargets));\n    };\n    RemoteStore.prototype.cleanUpWatchStreamState = function () {\n        // If the connection is closed then we'll never get a snapshot version for\n        // the accumulated changes and so we'll never be able to complete the batch.\n        // When we start up again the server is going to resend these changes\n        // anyway, so just toss the accumulated state.\n        this.accumulatedWatchChanges = [];\n        this.pendingTargetResponses = {};\n    };\n    RemoteStore.prototype.onWatchStreamOpen = function () {\n        var _this = this;\n        // TODO(b/35852690): close the stream again (with some timeout?) if no watch\n        // targets are active\n        forEachNumber(this.listenTargets, function (targetId, queryData) {\n            _this.sendWatchRequest(queryData);\n        });\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamClose = function (error) {\n        assert(this.isNetworkEnabled(), 'onWatchStreamClose() should only be called when the network is enabled');\n        this.cleanUpWatchStreamState();\n        // If there was an error, retry the connection.\n        if (this.shouldStartWatchStream()) {\n            this.updateOnlineStateAfterFailure();\n            this.startWatchStream();\n        }\n        else {\n            // No need to restart watch stream because there are no active targets.\n            // The online state is set to unknown because there is no active attempt\n            // at establishing a connection\n            this.setOnlineStateToUnknown();\n        }\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {\n        // Mark the connection as healthy because we got a message from the server\n        this.setOnlineStateToHealthy();\n        if (watchChange instanceof watch_change_WatchTargetChange &&\n            watchChange.state === WatchTargetChangeState.Removed &&\n            watchChange.cause) {\n            // There was an error on a target, don't wait for a consistent snapshot\n            // to raise events\n            return this.handleTargetError(watchChange);\n        }\n        // Accumulate watch changes but don't process them if there's no\n        // snapshotVersion or it's older than a previous snapshot we've processed\n        // (can happen after we resume a target using a resume token).\n        this.accumulatedWatchChanges.push(watchChange);\n        if (!snapshotVersion.equals(snapshot_version_SnapshotVersion.MIN) &&\n            snapshotVersion.compareTo(this.localStore.getLastRemoteSnapshotVersion()) >= 0) {\n            var changes = this.accumulatedWatchChanges;\n            this.accumulatedWatchChanges = [];\n            return this.handleWatchChangeBatch(snapshotVersion, changes);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Takes a batch of changes from the Datastore, repackages them as a\n     * RemoteEvent, and passes that on to the listener, which is typically the\n     * SyncEngine.\n     */\n    RemoteStore.prototype.handleWatchChangeBatch = function (snapshotVersion, changes) {\n        var _this = this;\n        var aggregator = new watch_change_WatchChangeAggregator(snapshotVersion, this.listenTargets, this.pendingTargetResponses);\n        aggregator.addChanges(changes);\n        var remoteEvent = aggregator.createRemoteEvent();\n        // Get the new response counts from the aggregator\n        this.pendingTargetResponses = aggregator.pendingTargetResponses;\n        var promises = [];\n        // Handle existence filters and existence filter mismatches.\n        forEachNumber(aggregator.existenceFilters, function (targetId, filter) {\n            var queryData = _this.listenTargets[targetId];\n            if (!queryData) {\n                // A watched target might have been removed already.\n                return;\n            }\n            var query = queryData.query;\n            if (query.isDocumentQuery()) {\n                if (filter.count === 0) {\n                    // The existence filter told us the document does not exist.\n                    // We need to deduce that this document does not exist and apply\n                    // a deleted document to our updates. Without applying a deleted\n                    // document there might be another query that will raise this\n                    // document as part of a snapshot until it is resolved,\n                    // essentially exposing inconsistency between queries.\n                    var key = new document_key_DocumentKey(query.path);\n                    var deletedDoc = new document_NoDocument(key, snapshotVersion);\n                    remoteEvent.addDocumentUpdate(deletedDoc);\n                }\n                else {\n                    assert(filter.count === 1, 'Single document existence filter with count: ' + filter.count);\n                }\n            }\n            else {\n                // Not a document query.\n                var promise = _this.localStore\n                    .remoteDocumentKeys(targetId)\n                    .then(function (trackedRemote) {\n                    if (remoteEvent.targetChanges[targetId]) {\n                        var mapping = remoteEvent.targetChanges[targetId].mapping;\n                        if (mapping !== null) {\n                            if (mapping instanceof UpdateMapping) {\n                                trackedRemote = mapping.applyToKeySet(trackedRemote);\n                            }\n                            else {\n                                assert(mapping instanceof ResetMapping, 'Expected either reset or update mapping but got something else: ' +\n                                    mapping);\n                                trackedRemote = mapping.documents;\n                            }\n                        }\n                    }\n                    if (trackedRemote.size !== filter.count) {\n                        // Existence filter mismatch, resetting mapping.\n                        // Make sure the mismatch is exposed in the remote event.\n                        remoteEvent.handleExistenceFilterMismatch(targetId);\n                        // Clear the resume token for the query, since we're in a\n                        // known mismatch state.\n                        var newQueryData = new query_data_QueryData(query, targetId, queryData.purpose);\n                        _this.listenTargets[targetId] = newQueryData;\n                        // Cause a hard reset by unwatching and rewatching\n                        // immediately, but deliberately don't send a resume token\n                        // so that we get a full update.\n                        // Make sure we expect that this acks are going to happen.\n                        _this.sendUnwatchRequest(targetId);\n                        // Mark the query we send as being on behalf of an existence\n                        // filter mismatch, but don't actually retain that in\n                        // listenTargets. This ensures that we flag the first\n                        // re-listen this way without impacting future listens of\n                        // this target (that might happen e.g. on reconnect).\n                        var requestQueryData = new query_data_QueryData(query, targetId, QueryPurpose.ExistenceFilterMismatch);\n                        _this.sendWatchRequest(requestQueryData);\n                    }\n                });\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises).then(function () {\n            // Update in-memory resume tokens. LocalStore will update the\n            // persistent view of these when applying the completed RemoteEvent.\n            forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                if (change.resumeToken.length > 0) {\n                    var queryData = _this.listenTargets[targetId];\n                    // A watched target might have been removed already.\n                    if (queryData) {\n                        _this.listenTargets[targetId] = queryData.update({\n                            resumeToken: change.resumeToken,\n                            snapshotVersion: change.snapshotVersion\n                        });\n                    }\n                }\n            });\n            // Finally handle remote event\n            return _this.syncEngine.applyRemoteEvent(remoteEvent);\n        });\n    };\n    /** Handles an error on a target */\n    RemoteStore.prototype.handleTargetError = function (watchChange) {\n        var _this = this;\n        assert(!!watchChange.cause, 'Handling target error without a cause');\n        var error = watchChange.cause;\n        var promiseChain = Promise.resolve();\n        watchChange.targetIds.forEach(function (targetId) {\n            promiseChain = promiseChain.then(function () {\n                if (contains(_this.listenTargets, targetId)) {\n                    delete _this.listenTargets[targetId];\n                    return _this.syncEngine.rejectListen(targetId, error);\n                }\n                else {\n                    // A watched target might have been removed already.\n                    return Promise.resolve();\n                }\n            });\n        });\n        return promiseChain;\n    };\n    RemoteStore.prototype.cleanUpWriteStreamState = function () {\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        this.pendingWrites = [];\n    };\n    /**\n     * Notifies that there are new mutations to process in the queue. This is\n     * typically called by SyncEngine after it has sent mutations to LocalStore.\n     */\n    RemoteStore.prototype.fillWritePipeline = function () {\n        var _this = this;\n        if (!this.canWriteMutations()) {\n            return Promise.resolve();\n        }\n        else {\n            return this.localStore\n                .nextMutationBatch(this.lastBatchSeen)\n                .then(function (batch) {\n                if (batch === null) {\n                    if (_this.pendingWrites.length == 0) {\n                        _this.writeStream.markIdle();\n                    }\n                    return Promise.resolve();\n                }\n                else {\n                    _this.commit(batch);\n                    return _this.fillWritePipeline();\n                }\n            });\n        }\n    };\n    /**\n     * Returns true if the backend can accept additional write requests.\n     *\n     * When sending mutations to the write stream (e.g. in fillWritePipeline),\n     * call this method first to check if more mutations can be sent.\n     *\n     * Currently the only thing that can prevent the backend from accepting\n     * write requests is if there are too many requests already outstanding. As\n     * writes complete the backend will be able to accept more.\n     */\n    RemoteStore.prototype.canWriteMutations = function () {\n        return (this.isNetworkEnabled() && this.pendingWrites.length < MAX_PENDING_WRITES);\n    };\n    // For testing\n    RemoteStore.prototype.outstandingWrites = function () {\n        return this.pendingWrites.length;\n    };\n    /**\n     * Given mutations to commit, actually commits them to the Datastore. Note\n     * that this does *not* return a Promise specifically because the AsyncQueue\n     * should not block operations for this.\n     */\n    RemoteStore.prototype.commit = function (batch) {\n        assert(this.canWriteMutations(), \"commit called when batches can't be written\");\n        this.lastBatchSeen = batch.batchId;\n        this.pendingWrites.push(batch);\n        if (this.shouldStartWriteStream()) {\n            this.startWriteStream();\n        }\n        else if (this.isNetworkEnabled() && this.writeStream.handshakeComplete) {\n            this.writeStream.writeMutations(batch.mutations);\n        }\n    };\n    RemoteStore.prototype.shouldStartWriteStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.writeStream.isStarted() &&\n            this.pendingWrites.length > 0);\n    };\n    RemoteStore.prototype.startWriteStream = function () {\n        assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');\n        this.writeStream.start({\n            onOpen: this.onWriteStreamOpen.bind(this),\n            onClose: this.onWriteStreamClose.bind(this),\n            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n            onMutationResult: this.onMutationResult.bind(this)\n        });\n    };\n    RemoteStore.prototype.onWriteStreamOpen = function () {\n        this.writeStream.writeHandshake();\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWriteHandshakeComplete = function () {\n        var _this = this;\n        // Record the stream token.\n        return this.localStore\n            .setLastStreamToken(this.writeStream.lastStreamToken)\n            .then(function () {\n            // Drain any pending writes.\n            //\n            // Note that at this point pendingWrites contains mutations that\n            // have already been accepted by fillWritePipeline/commitBatch. If\n            // the pipeline is full, canWriteMutations will be false, despite\n            // the fact that we actually need to send mutations over.\n            //\n            // This also means that this method indirectly respects the limits\n            // imposed by canWriteMutations since writes can't be added to the\n            // pendingWrites array when canWriteMutations is false. If the\n            // limits imposed by canWriteMutations actually protect us from\n            // DOSing ourselves then those limits won't be exceeded here and\n            // we'll continue to make progress.\n            for (var _i = 0, _a = _this.pendingWrites; _i < _a.length; _i++) {\n                var batch = _a[_i];\n                _this.writeStream.writeMutations(batch.mutations);\n            }\n        });\n    };\n    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {\n        var _this = this;\n        // This is a response to a write containing mutations and should be\n        // correlated to the first pending write.\n        assert(this.pendingWrites.length > 0, 'Got result for empty pending writes');\n        var batch = this.pendingWrites.shift();\n        var success = mutation_batch_MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);\n        return this.syncEngine.applySuccessfulWrite(success).then(function () {\n            // It's possible that with the completion of this mutation another\n            // slot has freed up.\n            return _this.fillWritePipeline();\n        });\n    };\n    RemoteStore.prototype.onWriteStreamClose = function (error) {\n        var _this = this;\n        assert(this.isNetworkEnabled(), 'onWriteStreamClose() should only be called when the network is enabled');\n        // If the write stream closed due to an error, invoke the error callbacks if\n        // there are pending writes.\n        if (error && this.pendingWrites.length > 0) {\n            assert(!!error, 'We have pending writes, but the write stream closed without an error');\n            // A promise that is resolved after we processed the error\n            var errorHandling = void 0;\n            if (this.writeStream.handshakeComplete) {\n                // This error affects the actual write.\n                errorHandling = this.handleWriteError(error);\n            }\n            else {\n                // If there was an error before the handshake has finished, it's\n                // possible that the server is unable to process the stream token\n                // we're sending. (Perhaps it's too old?)\n                errorHandling = this.handleHandshakeError(error);\n            }\n            return errorHandling.then(function () {\n                // The write stream might have been started by refilling the write\n                // pipeline for failed writes\n                if (_this.shouldStartWriteStream()) {\n                    _this.startWriteStream();\n                }\n            });\n        }\n        else {\n            // No pending writes, nothing to do\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleHandshakeError = function (error) {\n        // Reset the token if it's a permanent error or the error code is\n        // ABORTED, signaling the write stream is no longer valid.\n        if (isPermanentError(error.code) || error.code === Code.ABORTED) {\n            debug(remote_store_LOG_TAG, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);\n            this.writeStream.lastStreamToken = emptyByteString();\n            return this.localStore.setLastStreamToken(emptyByteString());\n        }\n        else {\n            // Some other error, don't reset stream token. Our stream logic will\n            // just retry with exponential backoff.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleWriteError = function (error) {\n        var _this = this;\n        if (isPermanentError(error.code)) {\n            // This was a permanent error, the request itself was the problem\n            // so it's not going to succeed if we resend it.\n            var batch = this.pendingWrites.shift();\n            // In this case it's also unlikely that the server itself is melting\n            // down -- this was just a bad request so inhibit backoff on the next\n            // restart.\n            this.writeStream.inhibitBackoff();\n            return this.syncEngine\n                .rejectFailedWrite(batch.batchId, error)\n                .then(function () {\n                // It's possible that with the completion of this mutation\n                // another slot has freed up.\n                return _this.fillWritePipeline();\n            });\n        }\n        else {\n            // Transient error, just let the retry logic kick in.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.createTransaction = function () {\n        return new transaction_Transaction(this.datastore);\n    };\n    RemoteStore.prototype.handleUserChange = function (user) {\n        debug(remote_store_LOG_TAG, 'RemoteStore changing users: uid=', user.uid);\n        // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n        // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n        // (since mutations are per-user).\n        this.disableNetwork();\n        return this.enableNetwork();\n    };\n    return RemoteStore;\n}());\n\n\n//# sourceMappingURL=remote_store.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/core/firestore_client.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar firestore_client_LOG_TAG = 'FirestoreClient';\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nvar firestore_client_FirestoreClient = /** @class */ (function () {\n    function FirestoreClient(platform, databaseInfo, credentials, \n        /**\n         * Asynchronous queue responsible for all of our internal processing. When\n         * we get incoming work from the user (via public API) or the network\n         * (incoming GRPC messages), we should always schedule onto this queue.\n         * This ensures all of our work is properly serialized (e.g. we don't\n         * start processing a new operation while the previous one is waiting for\n         * an async I/O to complete).\n         */\n        asyncQueue) {\n        this.platform = platform;\n        this.databaseInfo = databaseInfo;\n        this.credentials = credentials;\n        this.asyncQueue = asyncQueue;\n    }\n    /**\n     * Starts up the FirestoreClient, returning only whether or not enabling\n     * persistence succeeded.\n     *\n     * The intent here is to \"do the right thing\" as far as users are concerned.\n     * Namely, in cases where offline persistence is requested and possible,\n     * enable it, but otherwise fall back to persistence disabled. For the most\n     * part we expect this to succeed one way or the other so we don't expect our\n     * users to actually wait on the firestore.enablePersistence Promise since\n     * they generally won't care.\n     *\n     * Of course some users actually do care about whether or not persistence\n     * was successfully enabled, so the Promise returned from this method\n     * indicates this outcome.\n     *\n     * This presents a problem though: even before enablePersistence resolves or\n     * rejects, users may have made calls to e.g. firestore.collection() which\n     * means that the FirestoreClient in there will be available and will be\n     * enqueuing actions on the async queue.\n     *\n     * Meanwhile any failure of an operation on the async queue causes it to\n     * panic and reject any further work, on the premise that unhandled errors\n     * are fatal.\n     *\n     * Consequently the fallback is handled internally here in start, and if the\n     * fallback succeeds we signal success to the async queue even though the\n     * start() itself signals failure.\n     *\n     * @param usePersistence Whether or not to attempt to enable persistence.\n     * @returns A deferred result indicating the user-visible result of enabling\n     *     offline persistence. This method will reject this if IndexedDB fails to\n     *     start for any reason. If usePersistence is false this is\n     *     unconditionally resolved.\n     */\n    FirestoreClient.prototype.start = function (usePersistence) {\n        var _this = this;\n        // We defer our initialization until we get the current user from\n        // setUserChangeListener(). We block the async queue until we got the\n        // initial user and the initialization is completed. This will prevent\n        // any scheduled work from happening before initialization is completed.\n        //\n        // If initializationDone resolved then the FirestoreClient is in a usable\n        // state.\n        var initializationDone = new Deferred();\n        // If usePersistence is true, certain classes of errors while starting are\n        // recoverable but only by falling back to persistence disabled.\n        //\n        // If there's an error in the first case but not in recovery we cannot\n        // reject the promise blocking the async queue because this will cause the\n        // async queue to panic.\n        var persistenceResult = new Deferred();\n        var initialized = false;\n        this.credentials.setUserChangeListener(function (user) {\n            if (!initialized) {\n                initialized = true;\n                _this.initializePersistence(usePersistence, persistenceResult)\n                    .then(function () { return _this.initializeRest(user); })\n                    .then(initializationDone.resolve, initializationDone.reject);\n            }\n            else {\n                _this.asyncQueue.schedule(function () {\n                    return _this.handleUserChange(user);\n                });\n            }\n        });\n        // Block the async queue until initialization is done\n        this.asyncQueue.schedule(function () {\n            return initializationDone.promise;\n        });\n        // Return only the result of enabling persistence. Note that this does not\n        // need to await the completion of initializationDone because the result of\n        // this method should not reflect any other kind of failure to start.\n        return persistenceResult.promise;\n    };\n    /** Enables the network connection and requeues all pending operations. */\n    FirestoreClient.prototype.enableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.enableNetwork();\n        });\n    };\n    /**\n     * Initializes persistent storage, attempting to use IndexedDB if\n     * usePersistence is true or memory-only if false.\n     *\n     * If IndexedDB fails because it's already open in another tab or because the\n     * platform can't possibly support our implementation then this method rejects\n     * the persistenceResult and falls back on memory-only persistence.\n     *\n     * @param usePersistence indicates whether or not to use offline persistence\n     * @param persistenceResult A deferred result indicating the user-visible\n     *     result of enabling offline persistence. This method will reject this if\n     *     IndexedDB fails to start for any reason. If usePersistence is false\n     *     this is unconditionally resolved.\n     * @returns a Promise indicating whether or not initialization should\n     *     continue, i.e. that one of the persistence implementations actually\n     *     succeeded.\n     */\n    FirestoreClient.prototype.initializePersistence = function (usePersistence, persistenceResult) {\n        var _this = this;\n        if (usePersistence) {\n            return this.startIndexedDbPersistence()\n                .then(persistenceResult.resolve)\n                .catch(function (error) {\n                // Regardless of whether or not the retry succeeds, from an user\n                // perspective, offline persistence has failed.\n                persistenceResult.reject(error);\n                // An unknown failure on the first stage shuts everything down.\n                if (!_this.canFallback(error)) {\n                    return Promise.reject(error);\n                }\n                console.warn('Error enabling offline storage. Falling back to' +\n                    ' storage disabled: ' +\n                    error);\n                return _this.startMemoryPersistence();\n            });\n        }\n        else {\n            // When usePersistence == false, enabling offline persistence is defined\n            // to unconditionally succeed. This allows start() to have the same\n            // signature for both cases, despite the fact that the returned promise\n            // is only used in the enablePersistence call.\n            persistenceResult.resolve();\n            return this.startMemoryPersistence();\n        }\n    };\n    FirestoreClient.prototype.canFallback = function (error) {\n        return (error.code === Code.FAILED_PRECONDITION ||\n            error.code === Code.UNIMPLEMENTED);\n    };\n    /**\n     * Starts IndexedDB-based persistence.\n     *\n     * @returns A promise indicating success or failure.\n     */\n    FirestoreClient.prototype.startIndexedDbPersistence = function () {\n        // TODO(http://b/33384523): For now we just disable garbage collection\n        // when persistence is enabled.\n        this.garbageCollector = new no_op_garbage_collector_NoOpGarbageCollector();\n        var storagePrefix = indexeddb_persistence_IndexedDbPersistence.buildStoragePrefix(this.databaseInfo);\n        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n        var serializer = new serializer_JsonProtoSerializer(this.databaseInfo.databaseId, {\n            useProto3Json: true\n        });\n        this.persistence = new indexeddb_persistence_IndexedDbPersistence(storagePrefix, serializer);\n        return this.persistence.start();\n    };\n    /**\n     * Starts Memory-backed persistence. In practice this cannot fail.\n     *\n     * @returns A promise that will successfully resolve.\n     */\n    FirestoreClient.prototype.startMemoryPersistence = function () {\n        this.garbageCollector = new eager_garbage_collector_EagerGarbageCollector();\n        this.persistence = new memory_persistence_MemoryPersistence();\n        return this.persistence.start();\n    };\n    /**\n     * Initializes the rest of the FirestoreClient, assuming the initial user\n     * has been obtained from the credential provider and some persistence\n     * implementation is available in this.persistence.\n     */\n    FirestoreClient.prototype.initializeRest = function (user) {\n        var _this = this;\n        return this.platform\n            .loadConnection(this.databaseInfo)\n            .then(function (connection) {\n            _this.localStore = new local_store_LocalStore(_this.persistence, user, _this.garbageCollector);\n            var serializer = _this.platform.newSerializer(_this.databaseInfo.databaseId);\n            var datastore = new datastore_Datastore(_this.databaseInfo, _this.asyncQueue, connection, _this.credentials, serializer);\n            var onlineStateChangedHandler = function (onlineState) {\n                _this.eventMgr.onOnlineStateChanged(onlineState);\n            };\n            _this.remoteStore = new remote_store_RemoteStore(_this.localStore, datastore, onlineStateChangedHandler);\n            _this.syncEngine = new sync_engine_SyncEngine(_this.localStore, _this.remoteStore, user);\n            // Setup wiring between sync engine and remote store\n            _this.remoteStore.syncEngine = _this.syncEngine;\n            _this.eventMgr = new event_manager_EventManager(_this.syncEngine);\n            // NOTE: RemoteStore depends on LocalStore (for persisting stream\n            // tokens, refilling mutation queue, etc.) so must be started after\n            // LocalStore.\n            return _this.localStore.start();\n        })\n            .then(function () {\n            return _this.remoteStore.start();\n        });\n    };\n    FirestoreClient.prototype.handleUserChange = function (user) {\n        this.asyncQueue.verifyOperationInProgress();\n        debug(firestore_client_LOG_TAG, 'User Changed: ' + user.uid);\n        return this.syncEngine.handleUserChange(user);\n    };\n    /** Disables the network connection. Pending operations will not complete. */\n    FirestoreClient.prototype.disableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.disableNetwork();\n        });\n    };\n    FirestoreClient.prototype.shutdown = function () {\n        var _this = this;\n        return this.asyncQueue\n            .schedule(function () {\n            _this.credentials.removeUserChangeListener();\n            return _this.remoteStore.shutdown();\n        })\n            .then(function () {\n            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n            return _this.persistence.shutdown();\n        });\n    };\n    FirestoreClient.prototype.listen = function (query, observer, options) {\n        var _this = this;\n        var listener = new event_manager_QueryListener(query, observer, options);\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.listen(listener);\n        });\n        return listener;\n    };\n    FirestoreClient.prototype.unlisten = function (listener) {\n        var _this = this;\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.unlisten(listener);\n        });\n    };\n    FirestoreClient.prototype.write = function (mutations) {\n        var _this = this;\n        var deferred = new Deferred();\n        this.asyncQueue.schedule(function () { return _this.syncEngine.write(mutations, deferred); });\n        return deferred.promise;\n    };\n    FirestoreClient.prototype.databaseId = function () {\n        return this.databaseInfo.databaseId;\n    };\n    FirestoreClient.prototype.transaction = function (updateFunction) {\n        var _this = this;\n        // We have to wait for the async queue to be sure syncEngine is initialized.\n        return this.asyncQueue\n            .schedule(function () {\n            return Promise.resolve();\n        })\n            .then(function () {\n            return _this.syncEngine.runTransaction(updateFunction);\n        });\n    };\n    return FirestoreClient;\n}());\n\n\n//# sourceMappingURL=firestore_client.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/async_observer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nvar AsyncObserver = /** @class */ (function () {\n    function AsyncObserver(observer) {\n        this.observer = observer;\n        /**\n         * When set to true, will not raise future events. Necessary to deal with\n         * async detachment of listener.\n         */\n        this.muted = false;\n    }\n    AsyncObserver.prototype.next = function (value) {\n        this.scheduleEvent(this.observer.next, value);\n    };\n    AsyncObserver.prototype.error = function (error) {\n        this.scheduleEvent(this.observer.error, error);\n    };\n    AsyncObserver.prototype.mute = function () {\n        this.muted = true;\n    };\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n        var _this = this;\n        if (!this.muted) {\n            setTimeout(function () {\n                if (!_this.muted) {\n                    eventHandler(event);\n                }\n            }, 0);\n        }\n    };\n    return AsyncObserver;\n}());\n\n\n//# sourceMappingURL=async_observer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/util/async_queue.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar async_queue_AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        // The last promise in the queue.\n        this.tail = Promise.resolve();\n        // A list with timeout handles and their respective deferred promises.\n        // Contains an entry for each operation that is queued to run in the future\n        // (i.e. it has a delay that has not yet elapsed). Prior to cleanup, this list\n        // may also contain entries that have already been run (in which case `handle` is\n        // null).\n        this.delayedOperations = [];\n        // The number of operations that are queued to be run in the future (i.e. they\n        // have a delay that has not yet elapsed). Unlike `delayedOperations`, this\n        // is guaranteed to only contain operations that have not yet been run.\n        //\n        // Visible for testing.\n        this.delayedOperationsCount = 0;\n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.operationInProgress = false;\n    }\n    /**\n     * Adds a new operation to the queue. Returns a promise that will be resolved\n     * when the promise returned by the new operation is (with its value).\n     *\n     * Can optionally specify a delay (in milliseconds) to wait before queuing the\n     * operation.\n     */\n    AsyncQueue.prototype.schedule = function (op, delay) {\n        var _this = this;\n        if (this.failure) {\n            fail('AsyncQueue is already failed: ' +\n                (this.failure.stack || this.failure.message));\n        }\n        if ((delay || 0) > 0) {\n            this.delayedOperationsCount++;\n            var delayedOp_1 = {\n                handle: null,\n                op: op,\n                deferred: new Deferred()\n            };\n            delayedOp_1.handle = setTimeout(function () {\n                _this.scheduleInternal(function () {\n                    return delayedOp_1.op().then(function (result) {\n                        delayedOp_1.deferred.resolve(result);\n                    });\n                });\n                delayedOp_1.handle = null;\n                _this.delayedOperationsCount--;\n                if (_this.delayedOperationsCount === 0) {\n                    _this.delayedOperations = [];\n                }\n            }, delay);\n            this.delayedOperations.push(delayedOp_1);\n            return delayedOp_1.deferred.promise;\n        }\n        else {\n            return this.scheduleInternal(op);\n        }\n    };\n    AsyncQueue.prototype.scheduleInternal = function (op) {\n        var _this = this;\n        this.tail = this.tail.then(function () {\n            _this.operationInProgress = true;\n            return op()\n                .catch(function (error) {\n                _this.failure = error;\n                _this.operationInProgress = false;\n                var message = error.stack || error.message || '';\n                log_error('INTERNAL UNHANDLED ERROR: ', message);\n                // Escape the promise chain and throw the error globally so that\n                // e.g. any global crash reporting library detects and reports it.\n                // (but not for simulated errors in our tests since this breaks mocha)\n                if (message.indexOf('Firestore Test Simulated Error') < 0) {\n                    setTimeout(function () {\n                        throw error;\n                    }, 0);\n                }\n                // Re-throw the error so that this.tail becomes a rejected Promise and\n                // all further attempts to chain (via .then) will just short-circuit\n                // and return the rejected Promise.\n                throw error;\n            })\n                .then(function () {\n                _this.operationInProgress = false;\n            });\n        });\n        return this.tail;\n    };\n    /**\n     * Verifies there's an operation currently in-progress on the AsyncQueue.\n     * Unfortunately we can't verify that the running code is in the promise chain\n     * of that operation, so this isn't a foolproof check, but it should be enough\n     * to catch some bugs.\n     */\n    AsyncQueue.prototype.verifyOperationInProgress = function () {\n        assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');\n    };\n    /**\n     * Waits until all currently scheduled tasks are finished executing. Tasks\n     * scheduled with a delay can be rejected or queued for immediate execution.\n     */\n    AsyncQueue.prototype.drain = function (executeDelayedTasks) {\n        var _this = this;\n        this.delayedOperations.forEach(function (entry) {\n            if (entry.handle) {\n                clearTimeout(entry.handle);\n                if (executeDelayedTasks) {\n                    _this.scheduleInternal(entry.op).then(entry.deferred.resolve, entry.deferred.reject);\n                }\n                else {\n                    entry.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled by shutdown'));\n                }\n            }\n        });\n        this.delayedOperations = [];\n        this.delayedOperationsCount = 0;\n        return this.schedule(function () { return Promise.resolve(); });\n    };\n    return AsyncQueue;\n}());\n\n\n//# sourceMappingURL=async_queue.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/auth/user.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User = /** @class */ (function () {\n    function User(uid) {\n        this.uid = uid;\n    }\n    User.prototype.isUnauthenticated = function () {\n        return this.uid == null;\n    };\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n    User.prototype.toKey = function () {\n        if (this.isUnauthenticated()) {\n            return 'anonymous-user';\n        }\n        else {\n            return 'uid:' + this.uid;\n        }\n    };\n    User.prototype.equals = function (otherUser) {\n        return otherUser.uid === this.uid;\n    };\n    /** A user with a null UID. */\n    User.UNAUTHENTICATED = new User(null);\n    // TODO(mikelehen): Look into getting a proper uid-equivalent for\n    // non-FirebaseAuth providers.\n    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n    User.FIRST_PARTY = new User('first-party-uid');\n    return User;\n}());\n\n\n//# sourceMappingURL=user.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/credentials.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar OAuthToken = /** @class */ (function () {\n    function OAuthToken(value, user) {\n        this.user = user;\n        this.type = 'OAuth';\n        this.authHeaders = { Authorization: \"Bearer \" + value };\n    }\n    return OAuthToken;\n}());\n\n/** A CredentialsProvider that always yields an empty token. */\nvar credentials_EmptyCredentialsProvider = /** @class */ (function () {\n    function EmptyCredentialsProvider() {\n        /**\n         * Stores the User listener registered with setUserChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.userListener = null;\n    }\n    EmptyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(null);\n    };\n    EmptyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire with initial user.\n        listener(User.UNAUTHENTICATED);\n    };\n    EmptyCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.userListener !== null, 'removeUserChangeListener() when no listener registered');\n        this.userListener = null;\n    };\n    return EmptyCredentialsProvider;\n}());\n\nvar credentials_FirebaseCredentialsProvider = /** @class */ (function () {\n    function FirebaseCredentialsProvider(app) {\n        var _this = this;\n        this.app = app;\n        /**\n         * The auth token listener registered with FirebaseApp, retained here so we\n         * can unregister it.\n         */\n        this.tokenListener = null;\n        /**\n         * Counter used to detect if the user changed while a getToken request was\n         * outstanding.\n         */\n        this.userCounter = 0;\n        /** The User listener registered with setUserChangeListener(). */\n        this.userListener = null;\n        // We listen for token changes but all we really care about is knowing when\n        // the uid may have changed.\n        this.tokenListener = function () {\n            var newUser = _this.getUser();\n            if (!_this.currentUser || !newUser.equals(_this.currentUser)) {\n                _this.currentUser = newUser;\n                _this.userCounter++;\n                if (_this.userListener) {\n                    _this.userListener(_this.currentUser);\n                }\n            }\n        };\n        this.userCounter = 0;\n        // Will fire at least once where we set this.currentUser\n        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n    FirebaseCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        assert(this.tokenListener != null, 'getToken cannot be called after listener removed.');\n        // Take note of the current value of the userCounter so that this method can\n        // fail (with an ABORTED error) if there is a user change while the request\n        // is outstanding.\n        var initialUserCounter = this.userCounter;\n        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {\n            // Cancel the request since the user changed while the request was\n            // outstanding so the response is likely for a previous user (which\n            // user, we can't be sure).\n            if (_this.userCounter !== initialUserCounter) {\n                throw new FirestoreError(Code.ABORTED, 'getToken aborted due to uid change.');\n            }\n            else {\n                if (tokenData) {\n                    assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\n                }\n                else {\n                    return null;\n                }\n            }\n        });\n    };\n    FirebaseCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire the initial event, but only if we received the initial user\n        if (this.currentUser) {\n            listener(this.currentUser);\n        }\n    };\n    FirebaseCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.tokenListener != null, 'removeUserChangeListener() called twice');\n        assert(this.userListener !== null, 'removeUserChangeListener() called when no listener registered');\n        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);\n        this.tokenListener = null;\n        this.userListener = null;\n    };\n    FirebaseCredentialsProvider.prototype.getUser = function () {\n        // TODO(mikelehen): Remove this check once we're shipping with firebase.js.\n        if (typeof this.app.INTERNAL.getUid !== 'function') {\n            fail('This version of the Firestore SDK requires at least version' +\n                ' 3.7.0 of firebase.js.');\n        }\n        var currentUid = this.app.INTERNAL.getUid();\n        assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);\n        return new User(currentUid);\n    };\n    return FirebaseCredentialsProvider;\n}());\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * TODO(b/33147818) this implementation violates the current assumption that\n * tokens are immutable.  We need to either revisit this assumption or come\n * up with some way for FPA to use the listen/unlisten interface.\n */\nvar credentials_FirstPartyToken = /** @class */ (function () {\n    function FirstPartyToken(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        this.type = 'FirstParty';\n        this.user = User.FIRST_PARTY;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n        get: function () {\n            return {\n                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),\n                'X-Goog-AuthUser': this.sessionIndex\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirstPartyToken;\n}());\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar credentials_FirstPartyCredentialsProvider = /** @class */ (function () {\n    function FirstPartyCredentialsProvider(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    FirstPartyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(new credentials_FirstPartyToken(this.gapi, this.sessionIndex));\n    };\n    // TODO(33108925): can someone switch users w/o a page refresh?\n    // TODO(33110621): need to understand token/session lifecycle\n    FirstPartyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.FIRST_PARTY);\n    };\n    FirstPartyCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return FirstPartyCredentialsProvider;\n}());\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nfunction makeCredentialsProvider(credentials) {\n    if (!credentials) {\n        return new credentials_EmptyCredentialsProvider();\n    }\n    switch (credentials.type) {\n        case 'gapi':\n            return new credentials_FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');\n        case 'provider':\n            return credentials.client;\n        default:\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n    }\n}\n\n//# sourceMappingURL=credentials.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/observer.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isPartialObserver(obj) {\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    var object = obj;\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in object && typeof object[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=observer.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/field_value.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar api_field_value___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return ServerTimestampFieldValueImpl.instance;\n    };\n    return FieldValueImpl;\n}());\n\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\n    api_field_value___extends(DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\n\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    api_field_value___extends(ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nvar PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n//# sourceMappingURL=field_value.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/user_data_converter.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nvar user_data_converter_ParsedSetData = /** @class */ (function () {\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedSetData.prototype.toMutations = function (key, precondition) {\n        var mutations = [];\n        if (this.fieldMask !== null) {\n            mutations.push(new mutation_PatchMutation(key, this.data, this.fieldMask, precondition));\n        }\n        else {\n            mutations.push(new mutation_SetMutation(key, this.data, precondition));\n        }\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new mutation_TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedSetData;\n}());\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar user_data_converter_ParsedUpdateData = /** @class */ (function () {\n    function ParsedUpdateData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedUpdateData.prototype.toMutations = function (key, precondition) {\n        var mutations = [\n            new mutation_PatchMutation(key, this.data, this.fieldMask, precondition)\n        ];\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new mutation_TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedUpdateData;\n}());\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nvar UserDataSource;\n(function (UserDataSource) {\n    UserDataSource[UserDataSource[\"Set\"] = 0] = \"Set\";\n    UserDataSource[UserDataSource[\"Update\"] = 1] = \"Update\";\n    UserDataSource[UserDataSource[\"MergeSet\"] = 2] = \"MergeSet\";\n    UserDataSource[UserDataSource[\"QueryValue\"] = 3] = \"QueryValue\"; // from a where clause or cursor bound\n})(UserDataSource || (UserDataSource = {}));\nfunction isWrite(dataSource) {\n    switch (dataSource) {\n        case UserDataSource.Set: // fall through\n        case UserDataSource.MergeSet: // fall through\n        case UserDataSource.Update:\n            return true;\n        case UserDataSource.QueryValue:\n            return false;\n        default:\n            throw fail(\"Unexpected case for UserDataSource: \" + dataSource);\n    }\n}\n/** A \"context\" object passed around while parsing user data. */\nvar user_data_converter_ParseContext = /** @class */ (function () {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param dataSource Indicates what kind of API method this data came from.\n     * @param methodName The name of the method the user called to create this\n     *     ParseContext.\n     * @param path A path within the object being parsed. This could be an empty\n     *     path (in which case the context represents the root of the data being\n     *     parsed), or a nonempty path (indicating the context represents a nested\n     *     location within the data).\n     * @param arrayElement Whether or not this context corresponds to an element\n     *     of an array.\n     * @param fieldTransforms A mutable list of field transforms encountered while\n     *     parsing the data.\n     * @param fieldMask A mutable list of field paths encountered while parsing\n     *     the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {\n        this.dataSource = dataSource;\n        this.methodName = methodName;\n        this.path = path;\n        this.arrayElement = arrayElement;\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        if (fieldTransforms === undefined) {\n            this.validatePath();\n        }\n        this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n        this.fieldTransforms = fieldTransforms || [];\n        this.fieldMask = fieldMask || [];\n    }\n    ParseContext.prototype.childContextForField = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePathSegment(field);\n        return context;\n    };\n    ParseContext.prototype.childContextForFieldPath = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePath();\n        return context;\n    };\n    ParseContext.prototype.childContextForArray = function (index) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // null.\n        return new ParseContext(this.dataSource, this.methodName, \n        /*path=*/ null, \n        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);\n    };\n    ParseContext.prototype.createError = function (reason) {\n        var fieldDescription = this.path === null || this.path.isEmpty()\n            ? ''\n            : \" (found in field \" + this.path.toString() + \")\";\n        return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + this.methodName + \"() called with invalid data. \" +\n            reason +\n            fieldDescription);\n    };\n    ParseContext.prototype.validatePath = function () {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path === null) {\n            return;\n        }\n        for (var i = 0; i < this.path.length; i++) {\n            this.validatePathSegment(this.path.get(i));\n        }\n    };\n    ParseContext.prototype.validatePathSegment = function (segment) {\n        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n            throw this.createError('Document fields cannot begin and end with __');\n        }\n    };\n    ParseContext.prototype.isWrite = function () {\n        return (this.dataSource === UserDataSource.Set ||\n            this.dataSource === UserDataSource.Update);\n    };\n    return ParseContext;\n}());\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nvar DocumentKeyReference = /** @class */ (function () {\n    function DocumentKeyReference(databaseId, key) {\n        this.databaseId = databaseId;\n        this.key = key;\n    }\n    return DocumentKeyReference;\n}());\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar user_data_converter_UserDataConverter = /** @class */ (function () {\n    function UserDataConverter(preConverter) {\n        this.preConverter = preConverter;\n    }\n    /** Parse document data from a non-merge set() call.*/\n    UserDataConverter.prototype.parseSetData = function (methodName, input) {\n        var context = new user_data_converter_ParseContext(UserDataSource.Set, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        return new user_data_converter_ParsedSetData(updateData, \n        /* fieldMask= */ null, context.fieldTransforms);\n    };\n    /** Parse document data from a set() call with '{merge:true}'. */\n    UserDataConverter.prototype.parseMergeData = function (methodName, input) {\n        var context = new user_data_converter_ParseContext(UserDataSource.MergeSet, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        var fieldMask = new mutation_FieldMask(context.fieldMask);\n        return new user_data_converter_ParsedSetData(updateData, fieldMask, context.fieldTransforms);\n    };\n    /** Parse update data from an update() call. */\n    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {\n        var _this = this;\n        var context = new user_data_converter_ParseContext(UserDataSource.Update, methodName, path_FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var fieldMaskPaths = [];\n        var updateData = field_value_ObjectValue.EMPTY;\n        forEach(input, function (key, value) {\n            var path = fieldPathFromDotSeparatedString(methodName, key);\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            if (value instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = _this.parseData(value, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        });\n        var mask = new mutation_FieldMask(fieldMaskPaths);\n        return new user_data_converter_ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /** Parse update data from a list of field/value arguments. */\n    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {\n        var context = new user_data_converter_ParseContext(UserDataSource.Update, methodName, path_FieldPath.EMPTY_PATH);\n        var keys = [fieldPathFromArgument(methodName, field)];\n        var values = [value];\n        if (moreFieldsAndValues.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\n                'of arguments that alternate between field names and values.');\n        }\n        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));\n            values.push(moreFieldsAndValues[i + 1]);\n        }\n        var fieldMaskPaths = [];\n        var updateData = field_value_ObjectValue.EMPTY;\n        for (var i = 0; i < keys.length; ++i) {\n            var path = keys[i];\n            var childContext = context.childContextForFieldPath(path);\n            var value_1 = this.runPreConverter(values[i], childContext);\n            if (value_1 instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = this.parseData(value_1, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        }\n        var mask = new mutation_FieldMask(fieldMaskPaths);\n        return new user_data_converter_ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /**\n     * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n     * bound).\n     */\n    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {\n        var context = new user_data_converter_ParseContext(UserDataSource.QueryValue, methodName, path_FieldPath.EMPTY_PATH);\n        var parsed = this.parseData(input, context);\n        assert(parsed != null, 'Parsed data should not be null.');\n        assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');\n        return parsed;\n    };\n    /** Sends data through this.preConverter, handling any thrown errors. */\n    UserDataConverter.prototype.runPreConverter = function (input, context) {\n        try {\n            return this.preConverter(input);\n        }\n        catch (e) {\n            var message = errorMessage(e);\n            throw context.createError(message);\n        }\n    };\n    /**\n     * Internal helper for parsing user data.\n     *\n     * @param input Data to be parsed.\n     * @param context A context object representing the current path being parsed,\n     * the source of the data being parsed, etc.\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseData = function (input, context) {\n        input = this.runPreConverter(input, context);\n        if (input instanceof Array) {\n            // TODO(b/34871131): Include the path containing the array in the error\n            // message.\n            if (context.arrayElement) {\n                throw context.createError('Nested arrays are not supported');\n            }\n            // If context.path is null we are already inside an array and we don't\n            // support field mask paths more granular than the top-level array.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseArray(input, context);\n        }\n        else if (looksLikeJsonObject(input)) {\n            validatePlainObject('Unsupported field value:', context, input);\n            return this.parseObject(input, context);\n        }\n        else {\n            // If context.path is null, we are inside an array and we should have\n            // already added the root of the array to the field mask.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseScalarValue(input, context);\n        }\n    };\n    UserDataConverter.prototype.parseArray = function (array, context) {\n        var result = [];\n        var entryIndex = 0;\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n            var entry = array_1[_i];\n            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));\n            if (parsedEntry == null) {\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                parsedEntry = NullValue.INSTANCE;\n            }\n            result.push(parsedEntry);\n            entryIndex++;\n        }\n        return new field_value_ArrayValue(result);\n    };\n    UserDataConverter.prototype.parseObject = function (obj, context) {\n        var _this = this;\n        var result = new sorted_map_SortedMap(primitiveComparator);\n        forEach(obj, function (key, val) {\n            var parsedValue = _this.parseData(val, context.childContextForField(key));\n            if (parsedValue != null) {\n                result = result.insert(key, parsedValue);\n            }\n        });\n        return new field_value_ObjectValue(result);\n    };\n    /**\n     * Helper to parse a scalar value (i.e. not an Object or Array)\n     *\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseScalarValue = function (value, context) {\n        if (value === null) {\n            return NullValue.INSTANCE;\n        }\n        else if (typeof value === 'number') {\n            if (isSafeInteger(value)) {\n                return new IntegerValue(value);\n            }\n            else {\n                return new DoubleValue(value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            return field_value_BooleanValue.of(value);\n        }\n        else if (typeof value === 'string') {\n            return new field_value_StringValue(value);\n        }\n        else if (value instanceof Date) {\n            return new TimestampValue(timestamp_Timestamp.fromDate(value));\n        }\n        else if (value instanceof geo_point_GeoPoint) {\n            return new GeoPointValue(value);\n        }\n        else if (value instanceof blob_Blob) {\n            return new BlobValue(value);\n        }\n        else if (value instanceof DocumentKeyReference) {\n            return new field_value_RefValue(value.databaseId, value.key);\n        }\n        else if (value instanceof FieldValueImpl) {\n            if (value instanceof DeleteFieldValueImpl) {\n                if (context.dataSource == UserDataSource.MergeSet) {\n                    return null;\n                }\n                else if (context.dataSource === UserDataSource.Update) {\n                    assert(context.path == null || context.path.length > 0, 'FieldValue.delete() at the top level should have already' +\n                        ' been handled.');\n                    throw context.createError('FieldValue.delete() can only appear at the top level ' +\n                        'of your update data');\n                }\n                else {\n                    // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n                    throw context.createError('FieldValue.delete() can only be used with update() and set() with {merge:true}');\n                }\n            }\n            else if (value instanceof ServerTimestampFieldValueImpl) {\n                if (!isWrite(context.dataSource)) {\n                    throw context.createError('FieldValue.serverTimestamp() can only be used with set()' +\n                        ' and update()');\n                }\n                if (context.path === null) {\n                    throw context.createError('FieldValue.serverTimestamp() is not currently' +\n                        ' supported inside arrays');\n                }\n                context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));\n                // Return null so this value is omitted from the parsed result.\n                return null;\n            }\n            else {\n                return fail('Unknown FieldValue type: ' + value);\n            }\n        }\n        else {\n            throw context.createError(\"Unsupported field value: \" + valueDescription(value));\n        }\n    };\n    return UserDataConverter;\n}());\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        !(input instanceof Array) &&\n        !(input instanceof Date) &&\n        !(input instanceof geo_point_GeoPoint) &&\n        !(input instanceof blob_Blob) &&\n        !(input instanceof DocumentKeyReference) &&\n        !(input instanceof FieldValueImpl));\n}\nfunction validatePlainObject(message, context, input) {\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n        var description = valueDescription(input);\n        if (description === 'an object') {\n            // Massage the error if it was an object.\n            throw context.createError(message + ' a custom object');\n        }\n        else {\n            throw context.createError(message + ' ' + description);\n        }\n    }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nfunction fieldPathFromArgument(methodName, path) {\n    if (path instanceof field_path_FieldPath) {\n        return path._internalPath;\n    }\n    else if (typeof path === 'string') {\n        return fieldPathFromDotSeparatedString(methodName, path);\n    }\n    else {\n        var message = 'Field path arguments must be of type string or FieldPath.';\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path) {\n    try {\n        return fromDotSeparatedString(path)._internalPath;\n    }\n    catch (e) {\n        var message = errorMessage(e);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error) {\n    return error instanceof Error ? error.message : error.toString();\n}\n\n//# sourceMappingURL=user_data_converter.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/api/database.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar database___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar database_FirestoreSettings = /** @class */ (function () {\n    function FirestoreSettings(settings) {\n        if (settings.host === undefined) {\n            if (settings.ssl !== undefined) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n            }\n            this.host = DEFAULT_HOST;\n            this.ssl = DEFAULT_SSL;\n        }\n        else {\n            validateNamedType('settings', 'string', 'host', settings.host);\n            this.host = settings.host;\n            validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n            this.ssl = defaulted(settings.ssl, DEFAULT_SSL);\n        }\n        validateOptionNames('settings', settings, ['host', 'ssl', 'credentials']);\n        validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);\n        this.credentials = settings.credentials;\n    }\n    FirestoreSettings.prototype.equals = function (other) {\n        return (this.host === other.host &&\n            this.ssl === other.ssl &&\n            this.credentials === other.credentials);\n    };\n    return FirestoreSettings;\n}());\nvar FirestoreConfig = /** @class */ (function () {\n    function FirestoreConfig() {\n    }\n    return FirestoreConfig;\n}());\n/**\n * The root reference to the database.\n */\nvar database_Firestore = /** @class */ (function () {\n    function Firestore(databaseIdOrApp) {\n        var _this = this;\n        this._queue = new async_queue_AsyncQueue();\n        this.INTERNAL = {\n            delete: function () {\n                if (_this._firestoreClient) {\n                    return _this._firestoreClient.shutdown();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            },\n            // Exposed via INTERNAL for use in tests.\n            disableNetwork: function () { return _this._firestoreClient.disableNetwork(); },\n            enableNetwork: function () { return _this._firestoreClient.enableNetwork(); },\n            drainAsyncQueue: function (executeDelayedTasks) {\n                return _this._queue.drain(executeDelayedTasks);\n            }\n        };\n        var config = new FirestoreConfig();\n        if (typeof databaseIdOrApp.options === 'object') {\n            // This is very likely a Firebase app object\n            // TODO(b/34177605): Can we somehow use instanceof?\n            var app = databaseIdOrApp;\n            config.firebaseApp = app;\n            config.databaseId = Firestore.databaseIdFromApp(app);\n            config.persistenceKey = config.firebaseApp.name;\n            config.credentials = new credentials_FirebaseCredentialsProvider(app);\n        }\n        else {\n            var external_1 = databaseIdOrApp;\n            if (!external_1.projectId) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');\n            }\n            config.databaseId = new database_info_DatabaseId(external_1.projectId, external_1.database);\n            // Use a default persistenceKey that lines up with FirebaseApp.\n            config.persistenceKey = '[DEFAULT]';\n            config.credentials = new credentials_EmptyCredentialsProvider();\n        }\n        config.settings = new database_FirestoreSettings({});\n        this._config = config;\n        this._databaseId = config.databaseId;\n    }\n    Firestore.prototype.settings = function (settingsLiteral) {\n        validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n        validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n        if (contains(settingsLiteral, 'persistence')) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"persistence\" is now specified with a separate call to ' +\n                'firestore.enablePersistence().');\n        }\n        var newSettings = new database_FirestoreSettings(settingsLiteral);\n        if (this._firestoreClient && !this._config.settings.equals(newSettings)) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\n                'be changed. You can only call settings() before calling any other ' +\n                'methods on a Firestore object.');\n        }\n        this._config.settings = newSettings;\n        if (newSettings.credentials !== undefined) {\n            this._config.credentials = makeCredentialsProvider(newSettings.credentials);\n        }\n    };\n    Firestore.prototype.enablePersistence = function () {\n        if (this._firestoreClient) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +\n                'be enabled. You can only call enablePersistence() before calling ' +\n                'any other methods on a Firestore object.');\n        }\n        return this.configureClient(/* persistence= */ true);\n    };\n    Firestore.prototype.ensureClientConfigured = function () {\n        if (!this._firestoreClient) {\n            this.configureClient(/* persistence= */ false);\n        }\n        return this._firestoreClient;\n    };\n    Firestore.prototype.configureClient = function (persistence) {\n        var _this = this;\n        assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');\n        assert(!this._firestoreClient, 'configureClient() called multiple times');\n        var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);\n        var preConverter = function (value) {\n            if (value instanceof database_DocumentReference) {\n                var thisDb = _this._config.databaseId;\n                var otherDb = value.firestore._config.databaseId;\n                if (!otherDb.equals(thisDb)) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' +\n                        (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\n                        (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n                }\n                return new DocumentKeyReference(_this._config.databaseId, value._key);\n            }\n            else {\n                return value;\n            }\n        };\n        this._dataConverter = new user_data_converter_UserDataConverter(preConverter);\n        this._firestoreClient = new firestore_client_FirestoreClient(platform_PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, this._queue);\n        return this._firestoreClient.start(persistence);\n    };\n    Firestore.databaseIdFromApp = function (app) {\n        var options = app.options;\n        if (!contains(options, 'projectId')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreId' once alpha testers have upgraded.\n            if (contains(options, 'firestoreId')) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreId\" is now specified as \"projectId\" in ' +\n                    'firebase.initializeApp.');\n            }\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        }\n        if (contains(options, 'firestoreOptions')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreOptions' once alpha testers have upgraded.\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreOptions\" values are now specified with ' +\n                'Firestore.settings()');\n        }\n        var projectId = options['projectId'];\n        if (!projectId || typeof projectId !== 'string') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');\n        }\n        return new database_info_DatabaseId(projectId);\n    };\n    Object.defineProperty(Firestore.prototype, \"app\", {\n        get: function () {\n            if (!this._config.firebaseApp) {\n                throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n                    'not available');\n            }\n            return this._config.firebaseApp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n        validateArgType('Firestore.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');\n        }\n        this.ensureClientConfigured();\n        return new database_CollectionReference(path_ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.doc = function (pathString) {\n        validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n        validateArgType('Firestore.doc', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');\n        }\n        this.ensureClientConfigured();\n        return database_DocumentReference.forPath(path_ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.runTransaction = function (updateFunction) {\n        var _this = this;\n        validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n        validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n        return this.ensureClientConfigured().transaction(function (transaction) {\n            return updateFunction(new database_Transaction(_this, transaction));\n        });\n    };\n    Firestore.prototype.batch = function () {\n        this.ensureClientConfigured();\n        return new database_WriteBatch(this);\n    };\n    Object.defineProperty(Firestore, \"logLevel\", {\n        get: function () {\n            switch (getLogLevel()) {\n                case LogLevel.DEBUG:\n                    return 'debug';\n                case LogLevel.ERROR:\n                    return 'error';\n                case LogLevel.SILENT:\n                    return 'silent';\n                default:\n                    return fail('Unknown log level: ' + getLogLevel());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.setLogLevel = function (level) {\n        validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n        validateArgType('Firestore.setLogLevel', 'string', 1, level);\n        switch (level) {\n            case 'debug':\n                setLogLevel(LogLevel.DEBUG);\n                break;\n            case 'error':\n                setLogLevel(LogLevel.ERROR);\n                break;\n            case 'silent':\n                setLogLevel(LogLevel.SILENT);\n                break;\n            default:\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);\n        }\n    };\n    return Firestore;\n}());\n\n/**\n * A reference to a transaction.\n */\nvar database_Transaction = /** @class */ (function () {\n    function Transaction(_firestore, _transaction) {\n        this._firestore = _firestore;\n        this._transaction = _transaction;\n    }\n    Transaction.prototype.get = function (documentRef) {\n        var _this = this;\n        validateExactNumberOfArgs('Transaction.get', arguments, 1);\n        var ref = validateReference('Transaction.get', documentRef, this._firestore);\n        return this._transaction\n            .lookup([ref._key])\n            .then(function (docs) {\n            if (!docs || docs.length !== 1) {\n                return fail('Mismatch in docs returned from document lookup.');\n            }\n            var doc = docs[0];\n            if (doc instanceof document_NoDocument) {\n                return new database_DocumentSnapshot(_this._firestore, ref._key, null, false);\n            }\n            return new database_DocumentSnapshot(_this._firestore, ref._key, doc, false);\n        });\n    };\n    Transaction.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n        var ref = validateReference('Transaction.set', documentRef, this._firestore);\n        options = validateSetOptions('Transaction.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('Transaction.set', value)\n            : this._firestore._dataConverter.parseSetData('Transaction.set', value);\n        this._transaction.set(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('Transaction.update', arguments, 2);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);\n        }\n        this._transaction.update(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n        var ref = validateReference('Transaction.delete', documentRef, this._firestore);\n        this._transaction.delete(ref._key);\n        return this;\n    };\n    return Transaction;\n}());\n\nvar database_WriteBatch = /** @class */ (function () {\n    function WriteBatch(_firestore) {\n        this._firestore = _firestore;\n        this._mutations = [];\n        this._committed = false;\n    }\n    WriteBatch.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);\n        options = validateSetOptions('WriteBatch.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value)\n            : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, mutation_Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        this.verifyNotCommitted();\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);\n        }\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, mutation_Precondition.exists(true)));\n        return this;\n    };\n    WriteBatch.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);\n        this._mutations = this._mutations.concat(new mutation_DeleteMutation(ref._key, mutation_Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.commit = function () {\n        this.verifyNotCommitted();\n        this._committed = true;\n        if (this._mutations.length > 0) {\n            return this._firestore.ensureClientConfigured().write(this._mutations);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    WriteBatch.prototype.verifyNotCommitted = function () {\n        if (this._committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\n                'has been called.');\n        }\n    };\n    return WriteBatch;\n}());\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nvar database_DocumentReference = /** @class */ (function () {\n    function DocumentReference(_key, firestore) {\n        this._key = _key;\n        this.firestore = firestore;\n        this._firestoreClient = this.firestore.ensureClientConfigured();\n    }\n    DocumentReference.forPath = function (path, firestore) {\n        if (path.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +\n                'references must have an even number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return new DocumentReference(new document_key_DocumentKey(path), firestore);\n    };\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\n        get: function () {\n            return new database_CollectionReference(this._key.path.popLast(), this.firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\n        get: function () {\n            return this._key.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentReference.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n        validateArgType('DocumentReference.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');\n        }\n        var path = path_ResourcePath.fromString(pathString);\n        return new database_CollectionReference(this._key.path.child(path), this.firestore);\n    };\n    DocumentReference.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentReference)) {\n            throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n        }\n        return this.firestore === other.firestore && this._key.equals(other._key);\n    };\n    DocumentReference.prototype.set = function (value, options) {\n        validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n        options = validateSetOptions('DocumentReference.set', options);\n        var parsed = options.merge\n            ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value)\n            : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);\n        return this._firestoreClient.write(parsed.toMutations(this._key, mutation_Precondition.NONE));\n    };\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 2] = arguments[_i];\n        }\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof field_path_FieldPath) {\n            validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);\n        }\n        return this._firestoreClient.write(parsed.toMutations(this._key, mutation_Precondition.exists(true)));\n    };\n    DocumentReference.prototype.delete = function () {\n        validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n        return this._firestoreClient.write([\n            new mutation_DeleteMutation(this._key, mutation_Precondition.NONE)\n        ]);\n    };\n    DocumentReference.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);\n        var options = {\n            includeMetadataChanges: false\n        };\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('DocumentReference.onSnapshot', options, [\n                'includeMetadataChanges'\n            ]);\n            validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);\n            currArg++;\n        }\n        var internalOptions = {\n            includeDocumentMetadataChanges: options.includeMetadataChanges,\n            includeQueryMetadataChanges: options.includeMetadataChanges\n        };\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(internalOptions, observer);\n    };\n    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (snapshot) {\n                if (observer.next) {\n                    assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');\n                    var doc = snapshot.docs.get(_this._key);\n                    observer.next(new database_DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache));\n                }\n            },\n            error: errHandler\n        });\n        var internalListener = this._firestoreClient.listen(query_Query.atPath(this._key.path), asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            _this._firestoreClient.unlisten(internalListener);\n        };\n    };\n    DocumentReference.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('DocumentReference.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeQueryMetadataChanges: true,\n                includeDocumentMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (snap) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    if (!snap.exists && snap.metadata.fromCache) {\n                        // TODO(dimond): If we're online and the document doesn't\n                        // exist then we resolve with a doc.exists set to false. If\n                        // we're offline however, we reject the Promise in this\n                        // case. Two options: 1) Cache the negative response from\n                        // the server so we can deliver that even when you're\n                        // offline 2) Actually reject the Promise in the online case\n                        // if the document doesn't exist.\n                        reject(new FirestoreError(Code.ABORTED, 'Failed to get document because the client is ' + 'offline.'));\n                    }\n                    else {\n                        resolve(snap);\n                    }\n                },\n                error: reject\n            });\n        });\n    };\n    return DocumentReference;\n}());\n\nvar database_DocumentSnapshot = /** @class */ (function () {\n    function DocumentSnapshot(_firestore, _key, _document, _fromCache) {\n        this._firestore = _firestore;\n        this._key = _key;\n        this._document = _document;\n        this._fromCache = _fromCache;\n    }\n    DocumentSnapshot.prototype.data = function () {\n        validateExactNumberOfArgs('DocumentSnapshot.data', arguments, 0);\n        if (!this._document) {\n            throw new FirestoreError(Code.NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.data().');\n        }\n        return this.convertObject(this._document.data);\n    };\n    DocumentSnapshot.prototype.get = function (fieldPath) {\n        validateExactNumberOfArgs('DocumentSnapshot.get', arguments, 1);\n        if (!this._document) {\n            throw new FirestoreError(Code.NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.get().');\n        }\n        var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n        return value === undefined ? undefined : this.convertValue(value);\n    };\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n        get: function () {\n            return new database_DocumentReference(this._key, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n        get: function () {\n            return this._document !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n        get: function () {\n            return {\n                hasPendingWrites: this._document !== null && this._document.hasLocalMutations,\n                fromCache: this._fromCache\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentSnapshot.prototype.convertObject = function (data) {\n        var _this = this;\n        var result = {};\n        data.forEach(function (key, value) {\n            result[key] = _this.convertValue(value);\n        });\n        return result;\n    };\n    DocumentSnapshot.prototype.convertValue = function (value) {\n        if (value instanceof field_value_ObjectValue) {\n            return this.convertObject(value);\n        }\n        else if (value instanceof field_value_ArrayValue) {\n            return this.convertArray(value);\n        }\n        else if (value instanceof field_value_RefValue) {\n            var key = value.value();\n            var database = this._firestore.ensureClientConfigured().databaseId();\n            if (!value.databaseId.equals(database)) {\n                // TODO(b/64130202): Somehow support foreign references.\n                log_error(\"Document \" + this._key.path + \" contains a document \" +\n                    \"reference within a different database (\" +\n                    (value.databaseId.projectId + \"/\" + value.databaseId.database + \") which is not \") +\n                    \"supported. It will be treated as a reference in the current \" +\n                    (\"database (\" + database.projectId + \"/\" + database.database + \") \") +\n                    \"instead.\");\n            }\n            return new database_DocumentReference(key, this._firestore);\n        }\n        else {\n            return value.value();\n        }\n    };\n    DocumentSnapshot.prototype.convertArray = function (data) {\n        var _this = this;\n        return data.internalValue.map(function (value) {\n            return _this.convertValue(value);\n        });\n    };\n    return DocumentSnapshot;\n}());\n\nvar database_Query = /** @class */ (function () {\n    function Query(_query, firestore) {\n        this._query = _query;\n        this.firestore = firestore;\n    }\n    Query.prototype.where = function (field, opStr, value) {\n        validateExactNumberOfArgs('Query.where', arguments, 3);\n        validateArgType('Query.where', 'string', 2, opStr);\n        validateDefined('Query.where', 3, value);\n        var fieldValue;\n        var fieldPath = fieldPathFromArgument('Query.where', field);\n        if (fieldPath.isKeyField()) {\n            if (typeof value === 'string') {\n                if (value.indexOf('/') !== -1) {\n                    // TODO(dimond): Allow slashes once ancestor queries are supported\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it contains a slash.');\n                }\n                if (value === '') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it was an empty string.');\n                }\n                var path = this._query.path.child(new path_ResourcePath([value]));\n                assert(path.length % 2 === 0, 'Path should be a document key');\n                fieldValue = new field_value_RefValue(this.firestore._databaseId, new document_key_DocumentKey(path));\n            }\n            else if (value instanceof database_DocumentReference) {\n                var ref = value;\n                fieldValue = new field_value_RefValue(this.firestore._databaseId, ref._key);\n            }\n            else {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.where() requires its third parameter to be a \" +\n                    \"string or a DocumentReference if the first parameter is \" +\n                    \"FieldPath.documentId(), but it was: \" +\n                    (valueDescription(value) + \".\"));\n            }\n        }\n        else {\n            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);\n        }\n        var filter = fieldFilter(fieldPath, query_RelationOp.fromString(opStr), fieldValue);\n        this.validateNewFilter(filter);\n        return new Query(this._query.addFilter(filter), this.firestore);\n    };\n    Query.prototype.orderBy = function (field, directionStr) {\n        validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n        validateOptionalArgType('Query.orderBy', 'string', 2, directionStr);\n        var direction;\n        if (directionStr === undefined || directionStr === 'asc') {\n            direction = Direction.ASCENDING;\n        }\n        else if (directionStr === 'desc') {\n            direction = Direction.DESCENDING;\n        }\n        else {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.orderBy() has unknown direction '\" + directionStr + \"', \" +\n                \"expected 'asc' or 'desc'.\");\n        }\n        if (this._query.startAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +\n                'Query.startAfter() before calling Query.orderBy().');\n        }\n        if (this._query.endAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +\n                'Query.endBefore() before calling Query.orderBy().');\n        }\n        var fieldPath = fieldPathFromArgument('Query.orderBy', field);\n        var orderBy = new query_OrderBy(fieldPath, direction);\n        this.validateNewOrderBy(orderBy);\n        return new Query(this._query.addOrderBy(orderBy), this.firestore);\n    };\n    Query.prototype.limit = function (n) {\n        validateExactNumberOfArgs('Query.limit', arguments, 1);\n        validateArgType('Query.limit', 'number', 1, n);\n        if (n <= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. Query limit (\" + n + \") is invalid. Limit must be \" +\n                'positive.');\n        }\n        return new Query(this._query.withLimit(n), this.firestore);\n    };\n    Query.prototype.startAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.startAfter = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.endBefore = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.endAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.isEqual = function (other) {\n        if (!(other instanceof Query)) {\n            throw invalidClassError('isEqual', 'Query', 1, other);\n        }\n        return (this.firestore === other.firestore && this._query.equals(other._query));\n    };\n    /** Helper function to create a bound from a document or fields */\n    Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {\n        validateDefined(methodName, 1, docOrField);\n        if (docOrField instanceof database_DocumentSnapshot) {\n            if (fields.length > 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"().\");\n            }\n            var snap = docOrField;\n            if (!snap.exists) {\n                throw new FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\n                    (methodName + \"().\"));\n            }\n            return this.boundFromDocument(methodName, snap._document, before);\n        }\n        else {\n            var allFields = [docOrField].concat(fields);\n            return this.boundFromFields(methodName, allFields, before);\n        }\n    };\n    /**\n     * Create a Bound from a query and a document.\n     *\n     * Note that the Bound will always include the key of the document\n     * and so only the provided document will compare equal to the returned\n     * position.\n     *\n     * Will throw if the document does not contain all fields of the order by\n     * of the query.\n     */\n    Query.prototype.boundFromDocument = function (methodName, doc, before) {\n        var components = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            if (orderBy.field.isKeyField()) {\n                components.push(new field_value_RefValue(this.firestore._databaseId, doc.key));\n            }\n            else {\n                var value = doc.field(orderBy.field);\n                if (value !== undefined) {\n                    components.push(value);\n                }\n                else {\n                    var field = orderBy.field.canonicalString();\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\n                        (\"document for which the field '\" + field + \"' (used as the \") +\n                        \"orderBy) does not exist.\");\n                }\n            }\n        }\n        return new query_Bound(components, before);\n    };\n    /**\n     * Converts a list of field values to a Bound for the given query.\n     */\n    Query.prototype.boundFromFields = function (methodName, values, before) {\n        // Use explicit order by's because it has to match the query the user made\n        var orderBy = this._query.explicitOrderBy;\n        if (values.length > orderBy.length) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\n                \"The number of arguments must be less than or equal to the \" +\n                \"number of Query.orderBy() clauses\");\n        }\n        var components = [];\n        for (var i = 0; i < values.length; i++) {\n            var rawValue = values[i];\n            var orderByComponent = orderBy[i];\n            if (orderByComponent.field.isKeyField()) {\n                if (typeof rawValue !== 'string') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\n                        (methodName + \"(), but got a \" + typeof rawValue));\n                }\n                if (rawValue.indexOf('/') !== -1) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Document ID '\" + rawValue + \"' contains a slash in \" +\n                        (methodName + \"()\"));\n                }\n                var key = new document_key_DocumentKey(this._query.path.child(rawValue));\n                components.push(new field_value_RefValue(this.firestore._databaseId, key));\n            }\n            else {\n                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);\n                components.push(wrapped);\n            }\n        }\n        return new query_Bound(components, before);\n    };\n    Query.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n        var options = {};\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('Query.onSnapshot', options, [\n                'includeQueryMetadataChanges',\n                'includeDocumentMetadataChanges'\n            ]);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeDocumentMetadataChanges', options.includeDocumentMetadataChanges);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeQueryMetadataChanges', options.includeQueryMetadataChanges);\n            currArg++;\n        }\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(options, observer);\n    };\n    Query.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (result) {\n                if (observer.next) {\n                    observer.next(new database_QuerySnapshot(_this.firestore, _this._query, result));\n                }\n            },\n            error: errHandler\n        });\n        var firestoreClient = this.firestore.ensureClientConfigured();\n        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            firestoreClient.unlisten(internalListener);\n        };\n    };\n    Query.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('Query.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeDocumentMetadataChanges: false,\n                includeQueryMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (result) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    resolve(result);\n                },\n                error: reject\n            });\n        });\n    };\n    Query.prototype.validateNewFilter = function (filter) {\n        if (filter instanceof query_RelationFilter && filter.isInequality()) {\n            var existingField = this._query.getInequalityFilterField();\n            if (existingField !== null && !existingField.equals(filter.field)) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\n                    ' (<, <=, >, or >=) must be on the same field. But you have' +\n                    (\" inequality filters on '\" + existingField.toString() + \"'\") +\n                    (\" and '\" + filter.field.toString() + \"'\"));\n            }\n            var firstOrderByField = this._query.getFirstOrderByField();\n            if (firstOrderByField !== null) {\n                this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);\n            }\n        }\n    };\n    Query.prototype.validateNewOrderBy = function (orderBy) {\n        if (this._query.getFirstOrderByField() === null) {\n            // This is the first order by. It must match any inequality.\n            var inequalityField = this._query.getInequalityFilterField();\n            if (inequalityField !== null) {\n                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n            }\n        }\n    };\n    Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {\n        if (!orderBy.equals(inequality)) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\n                (\"(<, <=, >, or >=) on field '\" + inequality.toString() + \"' \") +\n                (\"and so you must also use '\" + inequality.toString() + \"' \") +\n                \"as your first Query.orderBy(), but your first Query.orderBy() \" +\n                (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n        }\n    };\n    return Query;\n}());\n\nvar database_QuerySnapshot = /** @class */ (function () {\n    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {\n        this._firestore = _firestore;\n        this._originalQuery = _originalQuery;\n        this._snapshot = _snapshot;\n        this._cachedChanges = null;\n        this.metadata = {\n            fromCache: _snapshot.fromCache,\n            hasPendingWrites: _snapshot.hasPendingWrites\n        };\n    }\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n        get: function () {\n            var result = [];\n            this.forEach(function (doc) { return result.push(doc); });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n        get: function () {\n            return this._snapshot.docs.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n        get: function () {\n            return this._snapshot.docs.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n        validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n        this._snapshot.docs.forEach(function (doc) {\n            callback.call(thisArg, _this.convertToDocumentImpl(doc));\n        });\n    };\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n        get: function () {\n            return new database_Query(this._originalQuery, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"docChanges\", {\n        get: function () {\n            if (!this._cachedChanges) {\n                this._cachedChanges = changesFromSnapshot(this._firestore, this._snapshot);\n            }\n            return this._cachedChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {\n        return new database_DocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache);\n    };\n    return QuerySnapshot;\n}());\n\nvar database_CollectionReference = /** @class */ (function (_super) {\n    database___extends(CollectionReference, _super);\n    function CollectionReference(path, firestore) {\n        var _this = _super.call(this, query_Query.atPath(path), firestore) || this;\n        if (path.length % 2 !== 1) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +\n                'references must have an odd number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return _this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\n        get: function () {\n            return this._query.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\n        get: function () {\n            var parentPath = this._query.path.popLast();\n            if (parentPath.isEmpty()) {\n                return null;\n            }\n            else {\n                return new database_DocumentReference(new document_key_DocumentKey(parentPath), this.firestore);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\n        get: function () {\n            return this._query.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (pathString) {\n        validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n        // We allow omission of 'pathString' but explicitly prohibit passing in both\n        // 'undefined' and 'null'.\n        if (arguments.length === 0) {\n            pathString = misc_AutoId.newId();\n        }\n        validateArgType('CollectionReference.doc', 'string', 1, pathString);\n        if (pathString === '') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');\n        }\n        var path = path_ResourcePath.fromString(pathString);\n        return database_DocumentReference.forPath(this._query.path.child(path), this.firestore);\n    };\n    CollectionReference.prototype.add = function (value) {\n        validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n        validateArgType('CollectionReference.add', 'object', 1, value);\n        var docRef = this.doc();\n        return docRef.set(value).then(function () { return docRef; });\n    };\n    return CollectionReference;\n}(database_Query));\n\nfunction validateSetOptions(methodName, options) {\n    if (options === undefined) {\n        return {\n            merge: false\n        };\n    }\n    validateOptionNames(methodName, options, ['merge']);\n    validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n    return options;\n}\nfunction validateReference(methodName, documentRef, firestore) {\n    if (!(documentRef instanceof database_DocumentReference)) {\n        throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n    }\n    else if (documentRef.firestore !== firestore) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n    }\n    else {\n        return documentRef;\n    }\n}\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nfunction changesFromSnapshot(firestore, snapshot) {\n    if (snapshot.oldDocs.isEmpty()) {\n        // Special case the first snapshot because index calculation is easy and\n        // fast\n        var lastDoc_1;\n        var index_1 = 0;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new database_DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');\n            assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');\n            lastDoc_1 = change.doc;\n            return {\n                type: 'added',\n                doc: doc,\n                oldIndex: -1,\n                newIndex: index_1++\n            };\n        });\n    }\n    else {\n        // A DocumentSet that is updated incrementally as changes are applied to use\n        // to lookup the index of a document.\n        var indexTracker_1 = snapshot.oldDocs;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new database_DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            var oldIndex = -1;\n            var newIndex = -1;\n            if (change.type !== ChangeType.Added) {\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\n                assert(oldIndex >= 0, 'Index for document not found');\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\n            }\n            if (change.type !== ChangeType.Removed) {\n                indexTracker_1 = indexTracker_1.add(change.doc);\n                newIndex = indexTracker_1.indexOf(change.doc.key);\n            }\n            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };\n        });\n    }\n}\nfunction resultChangeType(type) {\n    switch (type) {\n        case ChangeType.Added:\n            return 'added';\n        case ChangeType.Modified:\n        case ChangeType.Metadata:\n            return 'modified';\n        case ChangeType.Removed:\n            return 'removed';\n        default:\n            return fail('Unknown change type: ' + type);\n    }\n}\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\n// tslint:disable:variable-name\nvar PublicFirestore = makeConstructorPrivate(database_Firestore, 'Use firebase.firestore() instead.');\nvar PublicTransaction = makeConstructorPrivate(database_Transaction, 'Use firebase.firestore().runTransaction() instead.');\nvar PublicWriteBatch = makeConstructorPrivate(database_WriteBatch, 'Use firebase.firestore().batch() instead.');\nvar PublicDocumentReference = makeConstructorPrivate(database_DocumentReference, 'Use firebase.firestore().doc() instead.');\nvar PublicDocumentSnapshot = makeConstructorPrivate(database_DocumentSnapshot);\nvar PublicQuery = makeConstructorPrivate(database_Query);\nvar PublicQuerySnapshot = makeConstructorPrivate(database_QuerySnapshot);\nvar PublicCollectionReference = makeConstructorPrivate(database_CollectionReference, 'Use firebase.firestore().collection() instead.');\n// tslint:enable:variable-name\n\n//# sourceMappingURL=database.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/src/platform/config.js\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar firestoreNamespace = {\n    Firestore: PublicFirestore,\n    GeoPoint: geo_point_GeoPoint,\n    Blob: PublicBlob,\n    Transaction: PublicTransaction,\n    WriteBatch: PublicWriteBatch,\n    DocumentReference: PublicDocumentReference,\n    DocumentSnapshot: PublicDocumentSnapshot,\n    Query: PublicQuery,\n    QuerySnapshot: PublicQuerySnapshot,\n    CollectionReference: PublicCollectionReference,\n    FieldPath: field_path_FieldPath,\n    FieldValue: PublicFieldValue,\n    setLogLevel: database_Firestore.setLogLevel\n};\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n */\nfunction configureForFirebase(firebase) {\n    firebase.INTERNAL.registerService('firestore', function (app) { return new database_Firestore(app); }, shallowCopy(firestoreNamespace));\n}\n/**\n * Exports the Firestore namespace into the provided `exportObject` object under\n * the key 'firestore'. This is used for wrapped binary that exposes Firestore\n * as a goog module.\n */\nfunction configureForStandalone(exportObject) {\n    var copiedNamespace = shallowCopy(firestoreNamespace);\n    // Unlike the use with Firebase, the standalone allows the use of the\n    // constructor, so export it's internal class\n    copiedNamespace['Firestore'] = database_Firestore;\n    exportObject['firestore'] = copiedNamespace;\n}\n\n//# sourceMappingURL=config.js.map\n\n// CONCATENATED MODULE: ../firestore/dist/esm/index.js\n/* harmony export (immutable) */ __webpack_exports__[\"registerFirestore\"] = registerFirestore;\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nfunction registerFirestore(instance) {\n    configureForFirebase(instance);\n}\nregisterFirestore(esm[\"default\"]);\n\n//# sourceMappingURL=index.js.map\n\n\n/***/ }),\n\n/***/ 115:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {(function() {var g,goog=goog||{},k=this;function l(a){return\"string\"==typeof a}function aa(){}\nfunction ba(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"array\"==ba(a)}function ca(a){var b=ba(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length}function da(a){return\"function\"==ba(a)}function p(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}var q=\"closure_uid_\"+(1E9*Math.random()>>>0),ea=0;function fa(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ha(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?r=fa:r=ha;return r.apply(null,arguments)}\nfunction ia(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var t=Date.now||function(){return+new Date};function u(a,b){function c(){}c.prototype=b.prototype;a.L=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Ab=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ja(a){if(Error.captureStackTrace)Error.captureStackTrace(this,ja);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}u(ja,Error);ja.prototype.name=\"CustomError\";function ka(a,b){for(var c=a.split(\"%s\"),d=\"\",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join(\"%s\")}var la=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\")};function ma(a,b){return a<b?-1:a>b?1:0};function na(a,b){b.unshift(a);ja.call(this,ka.apply(null,b));b.shift()}u(na,ja);na.prototype.name=\"AssertionError\";function oa(a,b){throw new na(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1));};function w(){0!=qa&&(ra[this[q]||(this[q]=++ea)]=this);this.i=this.i;this.w=this.w}var qa=0,ra={};w.prototype.i=!1;w.prototype.Z=function(){if(!this.i&&(this.i=!0,this.A(),0!=qa)){var a=this[q]||(this[q]=++ea);delete ra[a]}};w.prototype.A=function(){if(this.w)for(;this.w.length;)this.w.shift()()};var sa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(l(a))return l(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ta=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};\nfunction ua(a){a:{var b=va;for(var c=a.length,d=l(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function wa(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function xa(a){return Array.prototype.concat.apply([],arguments)}function ya(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};var x;a:{var za=k.navigator;if(za){var Aa=za.userAgent;if(Aa){x=Aa;break a}}x=\"\"}function y(a){return-1!=x.indexOf(a)};function Ba(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Ca(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Da(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Ea(a){var b={},c;for(c in a)b[c]=a[c];return b}var Fa=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ga(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Fa.length;f++)c=Fa[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ha(a){Ha[\" \"](a);return a}Ha[\" \"]=aa;function Ia(a,b){var c=Ja;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Ka=y(\"Opera\"),z=y(\"Trident\")||y(\"MSIE\"),La=y(\"Edge\"),Ma=y(\"Gecko\")&&!(-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\"))&&!(y(\"Trident\")||y(\"MSIE\"))&&!y(\"Edge\"),Na=-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\");function Oa(){var a=k.document;return a?a.documentMode:void 0}var Pa;\na:{var Qa=\"\",Ra=function(){var a=x;if(Ma)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(La)return/Edge\\/([\\d\\.]+)/.exec(a);if(z)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Na)return/WebKit\\/(\\S+)/.exec(a);if(Ka)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Ra&&(Qa=Ra?Ra[1]:\"\");if(z){var Sa=Oa();if(null!=Sa&&Sa>parseFloat(Qa)){Pa=String(Sa);break a}}Pa=Qa}var Ja={};\nfunction Ta(a){return Ia(a,function(){for(var b=0,c=la(String(Pa)).split(\".\"),d=la(String(a)).split(\".\"),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||\"\",m=d[f]||\"\";do{h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];m=/(\\d*)(\\D*)(.*)/.exec(m)||[\"\",\"\",\"\",\"\"];if(0==h[0].length&&0==m[0].length)break;b=ma(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||ma(0==h[2].length,0==m[2].length)||ma(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var Ua;var Va=k.document;\nUa=Va&&z?Oa()||(\"CSS1Compat\"==Va.compatMode?parseInt(Pa,10):5):void 0;var Wa=Object.freeze||function(a){return a};var Xa=!z||9<=Number(Ua),Ya=z&&!Ta(\"9\"),Za=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},\"passive\",{get:function(){a=!0}});k.addEventListener(\"test\",aa,b);k.removeEventListener(\"test\",aa,b);return a}();function A(a,b){this.type=a;this.a=this.target=b;this.Pa=!0}A.prototype.b=function(){this.Pa=!1};function $a(a,b){A.call(this,a?a.type:\"\");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key=\"\";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType=\"\";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Ma){a:{try{Ha(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else\"mouseover\"==c?b=\na.fromElement:\"mouseout\"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||\"\";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=\na.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:ab[a.pointerType]||\"\";this.c=a;a.defaultPrevented&&this.b()}}u($a,A);var ab=Wa({2:\"touch\",3:\"pen\",4:\"mouse\"});$a.prototype.b=function(){$a.L.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Ya)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var bb=\"closure_listenable_\"+(1E6*Math.random()|0);function cb(a){return!(!a||!a[bb])}var db=0;function eb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.ga=e;this.key=++db;this.Y=this.ca=!1}function fb(a){a.Y=!0;a.listener=null;a.a=null;a.src=null;a.ga=null};function gb(a){this.src=a;this.a={};this.b=0}gb.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=hb(a,b,d,e);-1<h?(b=a[h],c||(b.ca=!1)):(b=new eb(b,this.src,f,!!d,e),b.ca=c,a.push(b));return b};function ib(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=sa(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(fb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}function jb(a,b,c,d,e){a=a.a[b.toString()];b=-1;a&&(b=hb(a,c,d,e));return-1<b?a[b]:null}\nfunction hb(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.Y&&f.listener==b&&f.capture==!!c&&f.ga==d)return e}return-1};var kb=\"closure_lm_\"+(1E6*Math.random()|0),lb={},mb=0;function nb(a,b,c,d,e){if(d&&d.once)return ob(a,b,c,d,e);if(n(b)){for(var f=0;f<b.length;f++)nb(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.aa(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!1,d,e)}\nfunction qb(a,b,c,d,e,f){if(!b)throw Error(\"Invalid event type\");var h=p(e)?!!e.capture:!!e,m=rb(a);m||(a[kb]=m=new gb(a));c=m.add(b,c,d,h,f);if(c.a)return c;d=sb();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)Za||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(tb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error(\"addEventListener and attachEvent are unavailable.\");mb++;return c}\nfunction sb(){var a=ub,b=Xa?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function ob(a,b,c,d,e){if(n(b)){for(var f=0;f<b.length;f++)ob(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.Ha(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!0,d,e)}function vb(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)vb(a,b[f],c,d,e);else d=p(d)?!!d.capture:!!d,c=pb(c),cb(a)?a.va(b,c,d,e):a&&(a=rb(a))&&(b=jb(a,b,c,d,e))&&wb(b)}\nfunction wb(a){if(\"number\"!=typeof a&&a&&!a.Y){var b=a.src;if(cb(b))ib(b.c,a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(tb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);mb--;(c=rb(b))?(ib(c,a),0==c.b&&(c.src=null,b[kb]=null)):fb(a)}}}function tb(a){return a in lb?lb[a]:lb[a]=\"on\"+a}\nfunction xb(a,b,c,d){var e=!0;if(a=rb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.Y&&(f=yb(f,d),e=e&&!1!==f)}return e}function yb(a,b){var c=a.listener,d=a.ga||a.src;a.ca&&wb(a);return c.call(d,b)}\nfunction ub(a,b){if(a.Y)return!0;if(!Xa){if(!b)a:{b=[\"window\",\"event\"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new $a(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=xb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=xb(d[e],a,!1,b),c=c&&f}return c}return yb(a,\nnew $a(b,this))}function rb(a){a=a[kb];return a instanceof gb?a:null}var zb=\"__closure_events_fn_\"+(1E9*Math.random()>>>0);function pb(a){if(da(a))return a;a[zb]||(a[zb]=function(b){return a.handleEvent(b)});return a[zb]};function B(){w.call(this);this.c=new gb(this);this.P=this;this.J=null}u(B,w);B.prototype[bb]=!0;g=B.prototype;g.addEventListener=function(a,b,c,d){nb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){vb(this,a,b,c,d)};\ng.dispatchEvent=function(a){var b,c=this.J;if(c)for(b=[];c;c=c.J)b.push(c);c=this.P;var d=a.type||a;if(l(a))a=new A(a,c);else if(a instanceof A)a.target=a.target||c;else{var e=a;a=new A(d,c);Ga(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=Ab(h,d,!0,a)&&e}h=a.a=c;e=Ab(h,d,!0,a)&&e;e=Ab(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=Ab(h,d,!1,a)&&e;return e};\ng.A=function(){B.L.A.call(this);if(this.c){var a=this.c,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,fb(d[e]);delete a.a[c];a.b--}}this.J=null};g.aa=function(a,b,c,d){return this.c.add(String(a),b,!1,c,d)};g.Ha=function(a,b,c,d){return this.c.add(String(a),b,!0,c,d)};g.va=function(a,b,c,d){var e=this.c;a=String(a).toString();if(a in e.a){var f=e.a[a];b=hb(f,b,c,d);-1<b&&(fb(f[b]),Array.prototype.splice.call(f,b,1),0==f.length&&(delete e.a[a],e.b--))}};\nfunction Ab(a,b,c,d){b=a.c.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.Y&&h.capture==c){var m=h.listener,v=h.ga||h.src;h.ca&&ib(a.c,h);e=!1!==m.call(v,d)&&e}}return e&&0!=d.Pa};function Bb(a){return/^\\s*$/.test(a)?!1:/^[\\],:{}\\s\\u2028\\u2029]*$/.test(a.replace(/\\\\[\"\\\\\\/bfnrtu]/g,\"@\").replace(/(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g,\"]\").replace(/(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g,\"\"))}function Cb(a){a=String(a);if(Bb(a))try{return eval(\"(\"+a+\")\")}catch(b){}throw Error(\"Invalid JSON string: \"+a);}function Db(a){var b=[];Eb(new Fb,a,b);return b.join(\"\")}function Fb(){}\nfunction Eb(a,b,c){if(null==b)c.push(\"null\");else{if(\"object\"==typeof b){if(n(b)){var d=b;b=d.length;c.push(\"[\");for(var e=\"\",f=0;f<b;f++)c.push(e),Eb(a,d[f],c),e=\",\";c.push(\"]\");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push(\"{\");e=\"\";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],\"function\"!=typeof f&&(c.push(e),Gb(d,c),c.push(\":\"),Eb(a,f,c),e=\",\"));c.push(\"}\");return}}switch(typeof b){case \"string\":Gb(b,c);break;case \"number\":c.push(isFinite(b)&&\n!isNaN(b)?String(b):\"null\");break;case \"boolean\":c.push(String(b));break;case \"function\":c.push(\"null\");break;default:throw Error(\"Unknown type: \"+typeof b);}}}var Hb={'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\u000b\"},Ib=/\\uffff/.test(\"\\uffff\")?/[\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g:/[\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\nfunction Gb(a,b){b.push('\"',a.replace(Ib,function(a){var b=Hb[a];b||(b=\"\\\\u\"+(a.charCodeAt(0)|65536).toString(16).substr(1),Hb[a]=b);return b}),'\"')};function Jb(a,b){this.c=a;this.f=b;this.b=0;this.a=null}Jb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function Kb(){this.b=this.a=null}var Nb=new Jb(function(){return new Lb},function(a){a.reset()});Kb.prototype.add=function(a,b){var c=Nb.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function Ob(){var a=Pb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Lb(){this.next=this.b=this.a=null}Lb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};Lb.prototype.reset=function(){this.next=this.b=this.a=null};function Qb(a){k.setTimeout(function(){throw a;},0)}var Rb;\nfunction Sb(){var a=k.MessageChannel;\"undefined\"===typeof a&&\"undefined\"!==typeof window&&window.postMessage&&window.addEventListener&&!y(\"Presto\")&&(a=function(){var a=document.createElement(\"IFRAME\");a.style.display=\"none\";a.src=\"\";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write(\"\");a.close();var c=\"callImmediate\"+Math.random(),d=\"file:\"==b.location.protocol?\"*\":b.location.protocol+\"//\"+b.location.host;a=r(function(a){if((\"*\"==d||a.origin==d)&&a.data==\nc)this.port1.onmessage()},this);b.addEventListener(\"message\",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if(\"undefined\"!==typeof a&&!y(\"Trident\")&&!y(\"MSIE\")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.za;c.za=null;a()}};return function(a){d.next={za:a};d=d.next;b.port2.postMessage(0)}}return\"undefined\"!==typeof document&&\"onreadystatechange\"in document.createElement(\"SCRIPT\")?function(a){var b=document.createElement(\"SCRIPT\");\nb.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};var Tb;function Ub(){if(-1!=String(k.Promise).indexOf(\"[native code]\")){var a=k.Promise.resolve(void 0);Tb=function(){a.then(Vb)}}else Tb=function(){var a=Vb;!da(k.setImmediate)||k.Window&&k.Window.prototype&&!y(\"Edge\")&&k.Window.prototype.setImmediate==k.setImmediate?(Rb||(Rb=Sb()),Rb(a)):k.setImmediate(a)}}var Wb=!1,Pb=new Kb;function Vb(){for(var a;a=Ob();){try{a.a.call(a.b)}catch(c){Qb(c)}var b=Nb;b.f(a);100>b.b&&(b.b++,a.next=b.a,b.a=a)}Wb=!1};function Xb(a,b){B.call(this);this.b=a||1;this.a=b||k;this.f=r(this.ib,this);this.g=t()}u(Xb,B);g=Xb.prototype;g.$=!1;g.K=null;g.ib=function(){if(this.$){var a=t()-this.g;0<a&&a<.8*this.b?this.K=this.a.setTimeout(this.f,this.b-a):(this.K&&(this.a.clearTimeout(this.K),this.K=null),this.dispatchEvent(\"tick\"),this.$&&(this.K=this.a.setTimeout(this.f,this.b),this.g=t()))}};g.start=function(){this.$=!0;this.K||(this.K=this.a.setTimeout(this.f,this.b),this.g=t())};\nfunction Yb(a){a.$=!1;a.K&&(a.a.clearTimeout(a.K),a.K=null)}g.A=function(){Xb.L.A.call(this);Yb(this);delete this.a};function Zb(a,b,c){if(da(a))c&&(a=r(a,c));else if(a&&\"function\"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error(\"Invalid listener argument\");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)};function $b(a,b,c){w.call(this);this.f=null!=c?r(a,c):a;this.c=b;this.b=r(this.bb,this);this.a=[]}u($b,w);g=$b.prototype;g.ha=!1;g.X=null;g.Xa=function(a){this.a=arguments;this.X?this.ha=!0:ac(this)};g.A=function(){$b.L.A.call(this);this.X&&(k.clearTimeout(this.X),this.X=null,this.ha=!1,this.a=[])};g.bb=function(){this.X=null;this.ha&&(this.ha=!1,ac(this))};function ac(a){a.X=Zb(a.b,a.c);a.f.apply(null,a.a)};function C(a){w.call(this);this.b=a;this.a={}}u(C,w);var bc=[];C.prototype.aa=function(a,b,c,d){n(b)||(b&&(bc[0]=b.toString()),b=bc);for(var e=0;e<b.length;e++){var f=nb(a,b[e],c||this.handleEvent,d||!1,this.b||this);if(!f)break;this.a[f.key]=f}return this};\nC.prototype.va=function(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)this.va(a,b[f],c,d,e);else c=c||this.handleEvent,d=p(d)?!!d.capture:!!d,e=e||this.b||this,c=pb(c),d=!!d,b=cb(a)?jb(a.c,String(b),c,d,e):a?(a=rb(a))?jb(a,b,c,d,e):null:null,b&&(wb(b),delete this.a[b.key])};function cc(a){Ba(a.a,function(a,c){this.a.hasOwnProperty(c)&&wb(a)},a);a.a={}}C.prototype.A=function(){C.L.A.call(this);cc(this)};C.prototype.handleEvent=function(){throw Error(\"EventHandler.handleEvent not implemented\");};function dc(a,b,c){this.reset(a,b,c,void 0,void 0)}dc.prototype.a=null;var ec=0;dc.prototype.reset=function(a,b,c,d,e){\"number\"==typeof e||ec++;d||t();delete this.a};function fc(a){this.f=a;this.b=this.c=this.a=null}function D(a,b){this.name=a;this.value=b}D.prototype.toString=function(){return this.name};var gc=new D(\"SEVERE\",1E3),hc=new D(\"WARNING\",900),ic=new D(\"INFO\",800),jc=new D(\"CONFIG\",700),kc=new D(\"FINE\",500);function lc(a){if(a.c)return a.c;if(a.a)return lc(a.a);oa(\"Root logger has no level set.\");return null}fc.prototype.log=function(a,b,c){if(a.value>=lc(this).value)for(da(b)&&(b=b()),a=new dc(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};\nvar mc={},nc=null;function oc(a){nc||(nc=new fc(\"\"),mc[\"\"]=nc,nc.c=jc);var b;if(!(b=mc[a])){b=new fc(a);var c=a.lastIndexOf(\".\"),d=a.substr(c+1);c=oc(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;mc[a]=b}return b};function E(a,b){a&&a.log(hc,b,void 0)}function pc(a,b){a&&a.log(ic,b,void 0)}function F(a,b){a&&a.log(kc,b,void 0)};function qc(){this.a=oc(\"goog.labs.net.webChannel.WebChannelDebug\");this.b=!0}qc.prototype.Ea=function(){this.b=!1};function rc(a,b,c,d,e,f){H(a,function(){if(a.b)if(f){var h=\"\";for(var m=f.split(\"&\"),v=0;v<m.length;v++){var G=m[v].split(\"=\");if(1<G.length){var Z=G[0];G=G[1];var Mb=Z.split(\"_\");h=2<=Mb.length&&\"type\"==Mb[1]?h+(Z+\"=\"+G+\"&\"):h+(Z+\"=redacted&\")}}}else h=null;else h=f;return\"XMLHTTP REQ (\"+d+\") [attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+h})}\nfunction sc(a,b,c,d,e,f,h){H(a,function(){return\"XMLHTTP RESP (\"+d+\") [ attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+f+\" \"+h})}function tc(a,b,c,d){H(a,function(){return\"XMLHTTP TEXT (\"+b+\"): \"+uc(a,c)+(d?\" \"+d:\"\")})}function vc(a,b){H(a,function(){return\"TIMEOUT: \"+b})}function I(a,b){F(a.a,b)}function wc(a,b,c){(a=a.a)&&a.log(gc,c||\"Exception\",b)}function H(a,b){pc(a.a,b)}function xc(a,b){(a=a.a)&&a.log(gc,b,void 0)}\nfunction uc(a,b){if(!a.b)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(var d=0;d<c.length;d++)if(n(c[d])){var e=c[d];if(!(2>e.length)){var f=e[1];if(n(f)&&!(1>f.length)){var h=f[0];if(\"noop\"!=h&&\"stop\"!=h&&\"close\"!=h)for(var m=1;m<f.length;m++)f[m]=\"\"}}}return Db(c)}catch(v){return I(a,\"Exception parsing expected JS array - probably was not JS\"),b}};var yc=new B;function zc(a){A.call(this,\"serverreachability\",a)}u(zc,A);function Ac(a){yc.dispatchEvent(new zc(yc,a))}function Bc(a){A.call(this,\"statevent\",a)}u(Bc,A);function J(a){yc.dispatchEvent(new Bc(yc,a))}function Cc(a){A.call(this,\"timingevent\",a)}u(Cc,A);function Dc(a,b,c){yc.dispatchEvent(new Cc(yc,a,b,c))}function Ec(a,b){if(!da(a))throw Error(\"Fn must not be null and must be a function\");return k.setTimeout(function(){a()},b)};var Fc={NO_ERROR:0,jb:1,qb:2,pb:3,mb:4,ob:5,rb:6,Ra:7,TIMEOUT:8,ub:9};var Gc={lb:\"complete\",yb:\"success\",Sa:\"error\",Ra:\"abort\",wb:\"ready\",xb:\"readystatechange\",TIMEOUT:\"timeout\",sb:\"incrementaldata\",vb:\"progress\",nb:\"downloadprogress\",zb:\"uploadprogress\"};function Hc(){}Hc.prototype.a=null;function Ic(a){var b;(b=a.a)||(b={},Jc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Kc;function Lc(){}u(Lc,Hc);function Mc(a){return(a=Jc(a))?new ActiveXObject(a):new XMLHttpRequest}function Jc(a){if(!a.b&&\"undefined\"==typeof XMLHttpRequest&&\"undefined\"!=typeof ActiveXObject){for(var b=[\"MSXML2.XMLHTTP.6.0\",\"MSXML2.XMLHTTP.3.0\",\"MSXML2.XMLHTTP\",\"Microsoft.XMLHTTP\"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error(\"Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed\");}return a.b}Kc=new Lc;function K(a,b,c,d){this.i=a;this.b=b;this.f=c;this.T=d||1;this.N=new C(this);this.S=Nc;a=this.H=new Xb;a.b=Oc;a.K&&a.$?(Yb(a),a.start()):a.K&&Yb(a);this.j=null;this.c=!1;this.m=this.g=this.h=this.J=this.D=this.U=this.w=null;this.s=[];this.a=null;this.F=0;this.l=this.o=null;this.C=-1;this.B=!1;this.P=0;this.I=null;this.M=!1}var Nc=45E3,Oc=250;\nfunction Pc(a,b){switch(a){case 0:return\"Non-200 return code (\"+b+\")\";case 1:return\"XMLHTTP failure (no data)\";case 2:return\"HttpConnection timeout\";default:return\"Unknown error\"}}var Qc={},Rc={};g=K.prototype;g.setTimeout=function(a){this.S=a};function Sc(a,b,c){a.J=1;a.h=Tc(L(b));a.m=c;a.M=!0;Uc(a,null)}function Vc(a,b,c,d){a.J=1;a.h=Tc(L(b));a.m=null;a.M=c;Uc(a,d)}\nfunction Uc(a,b){a.D=t();Wc(a);a.g=L(a.h);Xc(a.g,\"t\",a.T);a.F=0;a.a=a.i.da(a.i.ia()?b:null);0<a.P&&(a.I=new $b(r(a.Qa,a,a.a),a.P));a.N.aa(a.a,\"readystatechange\",a.fb);b=a.j?Ea(a.j):{};a.m?(a.o||(a.o=\"POST\"),b[\"Content-Type\"]=\"application/x-www-form-urlencoded\",a.a.fa(a.g,a.o,a.m,b)):(a.o=\"GET\",a.a.fa(a.g,a.o,null,b));Ac(1);rc(a.b,a.o,a.g,a.f,a.T,a.m)}g.fb=function(a){a=a.target;var b=this.I;b&&3==M(a)?(I(this.b,\"Throttling readystatechange.\"),b.Xa()):this.Qa(a)};\ng.Qa=function(a){try{a==this.a?Yc(this):E(this.b.a,\"Called back with an unexpected xmlhttp\")}catch(c){if(I(this.b,\"Failed call to OnXmlHttpReadyStateChanged_\"),this.a&&this.a.V()){var b=this;wc(this.b,c,function(){return\"ResponseText: \"+b.a.V()})}else wc(this.b,c,\"No response text\")}finally{}};\nfunction Yc(a){var b=M(a.a),c=a.a.Fa(),d=a.a.W();if(!(3>b||3==b&&!Ka&&!a.a.V())){a.B||4!=b||7==c||(8==c||0>=d?Ac(3):Ac(2));Zc(a);var e=a.a.W();a.C=e;(c=a.a.V())||I(a.b,function(){return\"No response text for uri \"+a.g+\" status \"+e});a.c=200==e;sc(a.b,a.o,a.g,a.f,a.T,b,e);a.c?(a.M?($c(a,b,c),Ka&&a.c&&3==b&&ad(a)):(tc(a.b,a.f,c,null),bd(a,c)),4==b&&cd(a),a.c&&!a.B&&(4==b?a.i.ua(a):(a.c=!1,Wc(a)))):(400==e&&0<c.indexOf(\"Unknown SID\")?(a.l=3,J(12),E(a.b.a,\"XMLHTTP Unknown SID (\"+a.f+\")\")):(a.l=0,J(13),\nE(a.b.a,\"XMLHTTP Bad status \"+e+\" (\"+a.f+\")\")),cd(a),dd(a))}}function $c(a,b,c){for(var d=!0;!a.B&&a.F<c.length;){var e=ed(a,c);if(e==Rc){4==b&&(a.l=4,J(14),d=!1);tc(a.b,a.f,null,\"[Incomplete Response]\");break}else if(e==Qc){a.l=4;J(15);tc(a.b,a.f,c,\"[Invalid Chunk]\");d=!1;break}else tc(a.b,a.f,e,null),bd(a,e)}4==b&&0==c.length&&(a.l=1,J(16),d=!1);a.c=a.c&&d;d||(tc(a.b,a.f,c,\"[Invalid Chunked Response]\"),cd(a),dd(a))}\ng.eb=function(){var a=M(this.a),b=this.a.V();this.F<b.length&&(Zc(this),$c(this,a,b),this.c&&4!=a&&Wc(this))};function ad(a){a.N.aa(a.H,\"tick\",a.eb);a.H.start()}function ed(a,b){var c=a.F,d=b.indexOf(\"\\n\",c);if(-1==d)return Rc;c=Number(b.substring(c,d));if(isNaN(c))return Qc;d+=1;if(d+c>b.length)return Rc;b=b.substr(d,c);a.F=d+c;return b}g.cancel=function(){this.B=!0;cd(this)};function Wc(a){a.U=t()+a.S;fd(a,a.S)}\nfunction fd(a,b){if(null!=a.w)throw Error(\"WatchDog timer not null\");a.w=Ec(r(a.cb,a),b)}function Zc(a){a.w&&(k.clearTimeout(a.w),a.w=null)}g.cb=function(){this.w=null;var a=t();0<=a-this.U?(this.c&&xc(this.b,\"Received watchdog timeout even though request loaded successfully\"),vc(this.b,this.g),2!=this.J&&(Ac(3),J(17)),cd(this),this.l=2,dd(this)):(E(this.b.a,\"WatchDog timer called too early\"),fd(this,this.U-a))};function dd(a){a.i.Ja()||a.B||a.i.ua(a)}\nfunction cd(a){Zc(a);var b=a.I;b&&\"function\"==typeof b.Z&&b.Z();a.I=null;Yb(a.H);cc(a.N);a.a&&(b=a.a,a.a=null,b.abort(),b.Z())}function bd(a,b){try{a.i.Ma(a,b),Ac(4)}catch(c){wc(a.b,c,\"Error in httprequest callback\")}};function gd(a){if(a.v&&\"function\"==typeof a.v)return a.v();if(l(a))return a.split(\"\");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Ca(a)}\nfunction hd(a,b){if(a.forEach&&\"function\"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||l(a))ta(a,b,void 0);else{if(a.O&&\"function\"==typeof a.O)var c=a.O();else if(a.v&&\"function\"==typeof a.v)c=void 0;else if(ca(a)||l(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else c=Da(a);d=gd(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}};function N(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error(\"Uneven number of arguments\");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a){a instanceof N?(c=a.O(),d=a.v()):(c=Da(a),d=Ca(a));for(var e=0;e<c.length;e++)this.set(c[e],d[e])}}g=N.prototype;g.u=function(){return this.c};g.v=function(){id(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.O=function(){id(this);return this.a.concat()};\nfunction jd(a){a.b={};a.a.length=0;a.c=0}function kd(a,b){return O(a.b,b)?(delete a.b[b],a.c--,a.a.length>2*a.c&&id(a),!0):!1}function id(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];O(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],O(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return O(this.b,a)?this.b[a]:b};g.set=function(a,b){O(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};\ng.forEach=function(a,b){for(var c=this.O(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function O(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var ld=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;function md(a,b){if(a){a=a.split(\"&\");for(var c=0;c<a.length;c++){var d=a[c].indexOf(\"=\"),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\\+/g,\" \")):\"\")}}};function P(a,b){this.b=this.j=this.f=\"\";this.i=null;this.g=this.a=\"\";this.h=!1;var c;a instanceof P?(this.h=void 0!==b?b:a.h,nd(this,a.f),this.j=a.j,od(this,a.b),pd(this,a.i),this.a=a.a,qd(this,rd(a.c)),this.g=a.g):a&&(c=String(a).match(ld))?(this.h=!!b,nd(this,c[1]||\"\",!0),this.j=sd(c[2]||\"\"),od(this,c[3]||\"\",!0),pd(this,c[4]),this.a=sd(c[5]||\"\",!0),qd(this,c[6]||\"\",!0),this.g=sd(c[7]||\"\")):(this.h=!!b,this.c=new td(null,this.h))}\nP.prototype.toString=function(){var a=[],b=this.f;b&&a.push(ud(b,vd,!0),\":\");var c=this.b;if(c||\"file\"==b)a.push(\"//\"),(b=this.j)&&a.push(ud(b,vd,!0),\"@\"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),c=this.i,null!=c&&a.push(\":\",String(c));if(c=this.a)this.b&&\"/\"!=c.charAt(0)&&a.push(\"/\"),a.push(ud(c,\"/\"==c.charAt(0)?wd:xd,!0));(c=this.c.toString())&&a.push(\"?\",c);(c=this.g)&&a.push(\"#\",ud(c,yd));return a.join(\"\")};\nP.prototype.resolve=function(a){var b=L(this),c=!!a.f;c?nd(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?od(b,a.b):c=null!=a.i;var d=a.a;if(c)pd(b,a.i);else if(c=!!a.a){if(\"/\"!=d.charAt(0))if(this.b&&!this.a)d=\"/\"+d;else{var e=b.a.lastIndexOf(\"/\");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(\"..\"==e||\".\"==e)d=\"\";else if(-1!=e.indexOf(\"./\")||-1!=e.indexOf(\"/.\")){d=0==e.lastIndexOf(\"/\",0);e=e.split(\"/\");for(var f=[],h=0;h<e.length;){var m=e[h++];\".\"==m?d&&h==e.length&&f.push(\"\"):\"..\"==m?((1<f.length||1==f.length&&\"\"!=\nf[0])&&f.pop(),d&&h==e.length&&f.push(\"\")):(f.push(m),d=!0)}d=f.join(\"/\")}else d=e}c?b.a=d:c=\"\"!==a.c.toString();c?qd(b,rd(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function L(a){return new P(a)}function nd(a,b,c){a.f=c?sd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,\"\"))}function od(a,b,c){a.b=c?sd(b,!0):b}function pd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error(\"Bad port number \"+b);a.i=b}else a.i=null}function qd(a,b,c){b instanceof td?(a.c=b,zd(a.c,a.h)):(c||(b=ud(b,Ad)),a.c=new td(b,a.h))}\nfunction Q(a,b,c){a.c.set(b,c)}function Xc(a,b,c){n(c)||(c=[String(c)]);Bd(a.c,b,c)}function Tc(a){Q(a,\"zx\",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^t()).toString(36));return a}function Cd(a){return a instanceof P?L(a):new P(a,void 0)}function Dd(a,b,c,d){var e=new P(null,void 0);a&&nd(e,a);b&&od(e,b);c&&pd(e,c);d&&(e.a=d);return e}function sd(a,b){return a?b?decodeURI(a.replace(/%25/g,\"%2525\")):decodeURIComponent(a):\"\"}\nfunction ud(a,b,c){return l(a)?(a=encodeURI(a).replace(b,Ed),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),a):null}function Ed(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)}var vd=/[#\\/\\?@]/g,xd=/[#\\?:]/g,wd=/[#\\?]/g,Ad=/[#\\?@]/g,yd=/#/g;function td(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}function R(a){a.a||(a.a=new N,a.b=0,a.c&&md(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\\+/g,\" \")),c)}))}g=td.prototype;g.u=function(){R(this);return this.b};\ng.add=function(a,b){R(this);this.c=null;a=Fd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Gd(a,b){R(a);b=Fd(a,b);O(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,kd(a.a,b))}function Hd(a,b){R(a);b=Fd(a,b);return O(a.a.b,b)}g.forEach=function(a,b){R(this);this.a.forEach(function(c,d){ta(c,function(c){a.call(b,c,d,this)},this)},this)};\ng.O=function(){R(this);for(var a=this.a.v(),b=this.a.O(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.v=function(a){R(this);var b=[];if(l(a))Hd(this,a)&&(b=xa(b,this.a.get(Fd(this,a))));else{a=this.a.v();for(var c=0;c<a.length;c++)b=xa(b,a[c])}return b};g.set=function(a,b){R(this);this.c=null;a=Fd(this,a);Hd(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.v(a):[];return 0<a.length?String(a[0]):b};\nfunction Bd(a,b,c){Gd(a,b);0<c.length&&(a.c=null,a.a.set(Fd(a,b),ya(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return\"\";for(var a=[],b=this.a.O(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.v(d);for(var f=0;f<d.length;f++){var h=e;\"\"!==d[f]&&(h+=\"=\"+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join(\"&\")};function rd(a){var b=new td;b.c=a.c;a.a&&(b.a=new N(a.a),b.b=a.b);return b}\nfunction Fd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function zd(a,b){b&&!a.f&&(R(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(Gd(this,b),Bd(this,c,a))},a));a.f=b};function Id(){this.a=t()}var Jd=null;Id.prototype.set=function(a){this.a=a};Id.prototype.reset=function(){this.set(t())};Id.prototype.get=function(){return this.a};function Kd(){Jd||(Jd=new Id)}function Ld(){Jd||(Jd=new Id)}u(Ld,Kd);function Md(){}var Nd={OPEN:\"a\",kb:\"b\",Sa:\"c\",tb:\"d\"};function Od(){A.call(this,\"d\")}u(Od,A);function Pd(){A.call(this,\"c\")}u(Pd,A);function Qd(a,b){this.a=a;this.b=b;this.c=this.i=null;this.h=!1;this.l=null;this.f=-1;this.m=this.g=null}g=Qd.prototype;g.R=null;\nfunction Rd(a){I(a.b,\"TestConnection: starting stage 2\");var b=a.a.H.a;if(null!=b)I(a.b,function(){return true?\"Buffered\":\"Unbuffered\"}),J(4),b?(J(10),Sd(a.a,a,!1)):(J(11),Sd(a.a,a,!0));else{a.c=new K(a,a.b,void 0,void 0);a.c.j=a.i;var c=Td(a.a,a.g,a.l);J(4);Xc(c,\"TYPE\",\"xmlhttp\");var d=a.a.j,e=a.a.J;d&&e&&Q(c,d,e);Vc(a.c,c,!1,a.g)}}g.da=function(a){return this.a.da(a)};g.abort=function(){this.c&&(this.c.cancel(),this.c=null);this.f=-1};\ng.Ja=function(){return!1};\ng.Ma=function(a,b){this.f=a.C;if(0==this.R){I(this.b,\"TestConnection: Got data for stage 1\");if(!this.a.D&&(a=a.a)){var c=a.a?a.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null;this.m=c?c:null;this.a.j&&((a=a.a?a.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?this.a.J=a:E(this.b.a,\"Missing X_HTTP_SESSION_ID in the handshake response\"))}if(b){try{var d=this.a.ma.a.parse(b)}catch(e){wc(this.b,e);Ud(this.a,this);return}this.g=d[0]}else I(this.b,\"TestConnection: Null responseText\"),Ud(this.a,this)}else if(1==\nthis.R)if(this.h)J(6);else if(\"11111\"==b){if(J(5),this.h=!0,!z||10<=Number(Ua))this.f=200,this.c.cancel(),I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)}else J(7),this.h=!1};\ng.ua=function(){this.f=this.c.C;this.c.c?0==this.R?(this.R=1,I(this.b,\"TestConnection: request complete for initial check\"),Rd(this)):1==this.R&&(I(this.b,\"TestConnection: request complete for stage 2\"),this.h?(I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)):(I(this.b,\"Test connection failed; not using streaming\"),J(10),Sd(this.a,this,!1))):(I(this.b,\"TestConnection: request failed, in state \"+this.R),0==this.R?J(8):1==this.R&&J(9),Ud(this.a,this))};\ng.ia=function(){return this.a.ia()};g.ra=function(){return this.a.ra()};function Vd(){this.a=this.b=null};function S(){this.a=new N}function Wd(a){var b=typeof a;return\"object\"==b&&a||\"function\"==b?\"o\"+(a[q]||(a[q]=++ea)):b.charAt(0)+a}S.prototype.u=function(){return this.a.u()};S.prototype.add=function(a){this.a.set(Wd(a),a)};S.prototype.contains=function(a){a=Wd(a);return O(this.a.b,a)};S.prototype.v=function(){return this.a.v()};function Xd(a,b){this.a=a;this.b=b};function Yd(a){this.g=a||Zd;this.f=k.pa&&k.pa.Ka&&k.pa.Ka()&&k.pa.Ka().Bb?this.g:1;this.a=null;1<this.f&&(this.a=new S);this.b=null;this.c=[]}var Zd=10;function $d(a,b){a.a||-1==b.indexOf(\"spdy\")&&-1==b.indexOf(\"quic\")&&-1==b.indexOf(\"h2\")||(a.f=a.g,a.a=new S,a.b&&(ae(a,a.b),a.b=null))}function be(a){return a.b?!0:a.a?a.a.u()>=a.f:!1}function ce(a,b){return a.b?a.b==b:a.a?a.a.contains(b):!1}function ae(a,b){a.a?a.a.add(b):a.b=b}\nfunction de(a,b){a.b&&a.b==b?a.b=null:a.a&&a.a.contains(b)&&kd(a.a.a,Wd(b))}Yd.prototype.cancel=function(){this.c=ee(this);this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(ta(this.a.v(),function(a){a.cancel()}),jd(this.a.a))};function ee(a){if(null!=a.b)return a.c.concat(a.b.s);if(null!=a.a&&0!=a.a.a.c){var b=a.c;ta(a.a.v(),function(a){b=b.concat(a.s)});return b}return ya(a.c)}function fe(a,b){a.c=a.c.concat(b)};function ge(){}ge.prototype.stringify=function(a){return k.JSON.stringify(a,void 0)};ge.prototype.parse=function(a){return k.JSON.parse(a,void 0)};function he(){this.a=new ge}function ie(a,b,c){var d=c||\"\";try{hd(a,function(a,c){var e=a;p(a)&&(e=Db(a));b.push(d+c+\"=\"+encodeURIComponent(e))})}catch(e){throw b.push(d+\"type=\"+encodeURIComponent(\"_badmap\")),e;}};function je(a,b){var c=new qc;I(c,\"TestLoadImage: loading \"+a);var d=new Image;d.onload=ia(ke,c,d,\"TestLoadImage: loaded\",!0,b);d.onerror=ia(ke,c,d,\"TestLoadImage: error\",!1,b);d.onabort=ia(ke,c,d,\"TestLoadImage: abort\",!1,b);d.ontimeout=ia(ke,c,d,\"TestLoadImage: timeout\",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function ke(a,b,c,d,e){try{I(a,c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){wc(a,f)}};function T(a){B.call(this);this.headers=new N;this.F=a||null;this.f=!1;this.D=this.a=null;this.M=this.s=\"\";this.j=0;this.g=\"\";this.h=this.I=this.o=this.H=!1;this.l=0;this.B=null;this.N=le;this.C=this.m=!1}u(T,B);var le=\"\";T.prototype.b=oc(\"goog.net.XhrIo\");var me=/^https?$/i,ne=[\"POST\",\"PUT\"];g=T.prototype;\ng.fa=function(a,b,c,d){if(this.a)throw Error(\"[goog.net.XhrIo] Object is active with another request=\"+this.s+\"; newUri=\"+a);b=b?b.toUpperCase():\"GET\";this.s=a;this.g=\"\";this.j=0;this.M=b;this.H=!1;this.f=!0;this.a=this.F?Mc(this.F):Mc(Kc);this.D=this.F?Ic(this.F):Ic(Kc);this.a.onreadystatechange=r(this.La,this);try{F(this.b,U(this,\"Opening Xhr\")),this.I=!0,this.a.open(b,String(a),!0),this.I=!1}catch(f){F(this.b,U(this,\"Error opening Xhr: \"+f.message));oe(this,f);return}a=c||\"\";var e=new N(this.headers);\nd&&hd(d,function(a,b){e.set(b,a)});d=ua(e.O());c=k.FormData&&a instanceof k.FormData;!(0<=sa(ne,b))||d||c||e.set(\"Content-Type\",\"application/x-www-form-urlencoded;charset=utf-8\");e.forEach(function(a,b){this.a.setRequestHeader(b,a)},this);this.N&&(this.a.responseType=this.N);\"withCredentials\"in this.a&&this.a.withCredentials!==this.m&&(this.a.withCredentials=this.m);try{pe(this),0<this.l&&(this.C=qe(this.a),F(this.b,U(this,\"Will abort after \"+this.l+\"ms if incomplete, xhr2 \"+this.C)),this.C?(this.a.timeout=\nthis.l,this.a.ontimeout=r(this.Ia,this)):this.B=Zb(this.Ia,this.l,this)),F(this.b,U(this,\"Sending request\")),this.o=!0,this.a.send(a),this.o=!1}catch(f){F(this.b,U(this,\"Send error: \"+f.message)),oe(this,f)}};function qe(a){return z&&Ta(9)&&\"number\"==typeof a.timeout&&void 0!==a.ontimeout}function va(a){return\"content-type\"==a.toLowerCase()}\ng.Ia=function(){\"undefined\"!=typeof goog&&this.a&&(this.g=\"Timed out after \"+this.l+\"ms, aborting\",this.j=8,F(this.b,U(this,this.g)),this.dispatchEvent(\"timeout\"),this.abort(8))};function oe(a,b){a.f=!1;a.a&&(a.h=!0,a.a.abort(),a.h=!1);a.g=b;a.j=5;re(a);se(a)}function re(a){a.H||(a.H=!0,a.dispatchEvent(\"complete\"),a.dispatchEvent(\"error\"))}\ng.abort=function(a){this.a&&this.f&&(F(this.b,U(this,\"Aborting\")),this.f=!1,this.h=!0,this.a.abort(),this.h=!1,this.j=a||7,this.dispatchEvent(\"complete\"),this.dispatchEvent(\"abort\"),se(this))};g.A=function(){this.a&&(this.f&&(this.f=!1,this.h=!0,this.a.abort(),this.h=!1),se(this,!0));T.L.A.call(this)};g.La=function(){this.i||(this.I||this.o||this.h?te(this):this.ab())};g.ab=function(){te(this)};\nfunction te(a){if(a.f&&\"undefined\"!=typeof goog)if(a.D[1]&&4==M(a)&&2==a.W())F(a.b,U(a,\"Local request error detected and ignored\"));else if(a.o&&4==M(a))Zb(a.La,0,a);else if(a.dispatchEvent(\"readystatechange\"),4==M(a)){F(a.b,U(a,\"Request complete\"));a.f=!1;try{var b=a.W();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.s).match(ld)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;\nf=h.substr(0,h.length-1)}e=!me.test(f?f.toLowerCase():\"\")}d=e}d?(a.dispatchEvent(\"complete\"),a.dispatchEvent(\"success\")):(a.j=6,a.g=a.Ga()+\" [\"+a.W()+\"]\",re(a))}finally{se(a)}}}function se(a,b){if(a.a){pe(a);var c=a.a,d=a.D[0]?aa:null;a.a=null;a.D=null;b||a.dispatchEvent(\"ready\");try{c.onreadystatechange=d}catch(e){(a=a.b)&&a.log(gc,\"Problem encountered resetting onreadystatechange: \"+e.message,void 0)}}}function pe(a){a.a&&a.C&&(a.a.ontimeout=null);a.B&&(k.clearTimeout(a.B),a.B=null)}\nfunction M(a){return a.a?a.a.readyState:0}g.W=function(){try{return 2<M(this)?this.a.status:-1}catch(a){return-1}};g.Ga=function(){try{return 2<M(this)?this.a.statusText:\"\"}catch(a){return F(this.b,\"Can not get status: \"+a.message),\"\"}};g.V=function(){try{return this.a?this.a.responseText:\"\"}catch(a){return F(this.b,\"Can not get responseText: \"+a.message),\"\"}};\ng.Ya=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));a:{a=b;if(k.JSON)try{var c=k.JSON.parse(a);break a}catch(d){}c=Cb(a)}return c}};g.Fa=function(){return this.j};g.Za=function(){return l(this.g)?this.g:String(this.g)};function U(a,b){return b+\" [\"+a.M+\" \"+a.s+\" \"+a.W()+\"]\"};function ue(a){var b=\"\";Ba(a,function(a,d){b+=d;b+=\":\";b+=a;b+=\"\\r\\n\"});return b}function ve(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=ue(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?\"=\"+encodeURIComponent(String(c)):\"\";if(b+=c){c=a.indexOf(\"#\");0>c&&(c=a.length);d=a.indexOf(\"?\");if(0>d||d>c){d=c;var e=\"\"}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+\"&\"+b:b:c;a=a[0]+(a[1]?\"?\"+a[1]:\"\")+a[2]}return a}Q(a,b,c);return a};function we(a){this.ya=0;this.g=[];this.a=new qc;this.H=new Vd;this.ja=this.wa=this.F=this.ka=this.b=this.J=this.j=this.U=this.h=this.M=this.i=null;this.Ua=this.P=0;this.la=this.B=this.o=this.m=this.l=this.f=null;this.s=this.xa=this.N=-1;this.T=this.w=this.C=0;this.S=a&&a.supportsCrossDomainXhr||!1;this.I=\"\";this.c=new Yd(a&&a.concurrentRequestLimit);this.ma=new he;this.D=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;this.Ta=a&&a.fastHandshake||!1;a&&a.Ea&&this.a.Ea()}g=we.prototype;\ng.oa=8;g.G=1;function xe(a){I(a.a,\"disconnect()\");ye(a);if(3==a.G){var b=a.P++,c=L(a.F);Q(c,\"SID\",a.I);Q(c,\"RID\",b);Q(c,\"TYPE\",\"terminate\");ze(a,c);b=new K(a,a.a,b,void 0);b.J=2;b.h=Tc(L(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.h.toString(),\"\"));!c&&k.Image&&((new Image).src=b.h,c=!0);c||(b.a=b.i.da(null),b.a.fa(b.h));b.D=t();Wc(b)}Ae(a)}\nfunction ye(a){a.B&&(a.B.abort(),a.B=null);a.b&&(a.b.cancel(),a.b=null);a.m&&(k.clearTimeout(a.m),a.m=null);Be(a);a.c.cancel();a.l&&(k.clearTimeout(a.l),a.l=null)}function Ce(a,b){1E3==a.g.length&&xc(a.a,function(){return\"Already have 1000 queued maps upon queueing \"+Db(b)});a.g.push(new Xd(a.Ua++,b));3==a.G&&De(a)}g.Ja=function(){return 0==this.G};function De(a){be(a.c)||a.l||(a.l=Ec(r(a.Oa,a),0),a.C=0)}\nfunction Ee(a,b){var c=a.c;if((c.b?1:c.a?c.a.u():0)>=a.c.f-(a.l?1:0))return xc(a.a,\"Unexpected retry request is scheduled.\"),!1;if(a.l)return I(a.a,\"Use the retry request that is already scheduled.\"),a.g=b.s.concat(a.g),!0;if(1==a.G||2==a.G||2<=a.C)return!1;I(a.a,\"Going to retry POST\");a.l=Ec(r(a.Oa,a,b),Fe(a,a.C));a.C++;return!0}\ng.Oa=function(a){this.l=null;I(this.a,\"startForwardChannel_\");if(1==this.G)if(a)xc(this.a,\"Not supposed to retry the open\");else{I(this.a,\"open_()\");this.P=Math.floor(1E5*Math.random());a=this.P++;var b=new K(this,this.a,a,void 0),c=this.i;this.M&&(c?(c=Ea(c),Ga(c,this.M)):c=this.M);null===this.h&&(b.j=c);var d=Ge(this,b),e=L(this.F);Q(e,\"RID\",a);Q(e,\"CVER\",21);this.D&&this.j&&Q(e,\"X-HTTP-Session-Id\",this.j);ze(this,e);this.h&&c&&ve(e,this.h,c);ae(this.c,b);this.Ta?(Q(e,\"$req\",d),Sc(b,e,null)):Sc(b,\ne,d);this.G=2}else 3==this.G&&(a?He(this,a):0==this.g.length?I(this.a,\"startForwardChannel_ returned: nothing to send\"):be(this.c)?xc(this.a,\"startForwardChannel_ returned: connection already in progress\"):(He(this),I(this.a,\"startForwardChannel_ finished, sent request\")))};\nfunction He(a,b){var c;b?c=b.f:c=a.P++;var d=L(a.F);Q(d,\"SID\",a.I);Q(d,\"RID\",c);Q(d,\"AID\",a.N);ze(a,d);a.h&&a.i&&ve(d,a.h,a.i);c=new K(a,a.a,c,a.C+1);null===a.h&&(c.j=a.i);b&&(a.g=b.s.concat(a.g));b=Ge(a,c);c.setTimeout(Math.round(1E4)+Math.round(1E4*Math.random()));ae(a.c,c);Sc(c,d,b)}function ze(a,b){a.f&&hd({},function(a,d){Q(b,d,a)})}\nfunction Ge(a,b){var c=Math.min(a.g.length,1E3),d=a.f?r(a.f.Va,a.f,a):null;a:for(var e=a.g,f=-1;;){var h=[\"count=\"+c];-1==f?0<c?(f=e[0].a,h.push(\"ofs=\"+f)):f=0:h.push(\"ofs=\"+f);for(var m=!0,v=0;v<c;v++){var G=e[v].a,Z=e[v].b;G-=f;if(0>G)f=Math.max(0,e[v].a-100),m=!1;else try{ie(Z,h,\"req\"+G+\"_\")}catch(Mb){d&&d(Z)}}if(m){d=h.join(\"&\");break a}}a=a.g.splice(0,c);b.s=a;return d}function Ie(a){if(!a.b&&!a.m){a.T=1;var b=a.Na;Tb||Ub();Wb||(Tb(),Wb=!0);Pb.add(b,a);a.w=0}}\nfunction Je(a){if(a.b||a.m)return xc(a.a,\"Request already in progress\"),!1;if(3<=a.w)return!1;I(a.a,\"Going to retry GET\");a.T++;a.m=Ec(r(a.Na,a),Fe(a,a.w));a.w++;return!0}\ng.Na=function(){this.m=null;I(this.a,\"Creating new HttpRequest\");this.b=new K(this,this.a,\"rpc\",this.T);null===this.h&&(this.b.j=this.i);this.b.P=0;var a=L(this.wa);Q(a,\"RID\",\"rpc\");Q(a,\"SID\",this.I);Q(a,\"CI\",this.la?\"0\":\"1\");Q(a,\"AID\",this.N);ze(this,a);Q(a,\"TYPE\",\"xmlhttp\");this.h&&this.i&&ve(a,this.h,this.i);Vc(this.b,a,!0,this.ja);I(this.a,\"New Request created\")};\nfunction Sd(a,b,c){I(a.a,\"Test Connection Finished\");var d=b.m;d&&$d(a.c,d);a.la=c;a.s=b.f;I(a.a,\"connectChannel_()\");a.F=Ke(a,a.ka);De(a)}function Ud(a,b){I(a.a,\"Test Connection Failed\");a.s=b.f;V(a,2)}\ng.Ma=function(a,b){if(0!=this.G&&(this.b==a||ce(this.c,a)))if(this.s=a.C,ce(this.c,a)&&3==this.G){try{var c=this.ma.a.parse(b)}catch(f){c=null}if(n(c)&&3==c.length)if(b=c,0==b[0])a:if(I(this.a,\"Server claims our backchannel is missing.\"),this.m)I(this.a,\"But we are currently starting the request.\");else{if(this.b)if(this.b.D+3E3<a.D)Be(this),this.b.cancel(),this.b=null;else break a;else E(this.a.a,\"We do not have a BackChannel established\");Je(this);J(18)}else this.xa=b[1],a=this.xa-this.N,0<a&&(b=\nb[2],I(this.a,b+\" bytes (in \"+a+\" arrays) are outstanding on the BackChannel\"),37500>b&&this.la&&0==this.w&&!this.o&&(this.o=Ec(r(this.$a,this),6E3)));else I(this.a,\"Bad POST response data returned\"),V(this,11)}else if(this.b==a&&Be(this),!/^[\\s\\xa0]*$/.test(b))for(b=c=this.ma.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.N=d[0];d=d[1];if(2==this.G)if(\"c\"==d[0]){this.I=d[1];this.ja=d[2];var e=d[3];null!=e&&(this.oa=e,H(this.a,\"VER=\"+this.oa));d=d[4];null!=d&&(this.ya=d,H(this.a,\"SVER=\"+this.ya));\nthis.D&&(d=a.a)&&((e=d.a?d.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null)&&$d(this.c,e),this.j&&((d=d.a?d.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?(this.J=d,Q(this.F,this.j,d)):E(this.a.a,\"Missing X_HTTP_SESSION_ID in the handshake response\")));this.G=3;this.f&&this.f.Da();this.wa=Td(this,this.ja,this.ka);Ie(this)}else\"stop\"!=d[0]&&\"close\"!=d[0]||V(this,7);else 3==this.G&&(\"stop\"==d[0]||\"close\"==d[0]?\"stop\"==d[0]?V(this,7):xe(this):\"noop\"!=d[0]&&this.f&&this.f.Ca(d),this.w=0)}};\ng.$a=function(){null!=this.o&&(this.o=null,this.b.cancel(),this.b=null,Je(this),J(19))};function Be(a){null!=a.o&&(k.clearTimeout(a.o),a.o=null)}\ng.ua=function(a){I(this.a,\"Request complete\");var b=null;if(this.b==a){Be(this);this.b=null;var c=2}else if(ce(this.c,a))b=a.s,de(this.c,a),c=1;else return;this.s=a.C;if(0!=this.G)if(a.c)1==c?(Dc(a.m?a.m.length:0,t()-a.D,this.C),De(this)):Ie(this);else{var d=a.l;if(3==d||0==d&&0<this.s)I(this.a,\"Not retrying due to error type\");else{var e=this;I(this.a,function(){return\"Maybe retrying, last error: \"+Pc(d,e.s)});if(1==c&&Ee(this,a)||2==c&&Je(this))return;I(this.a,\"Exceeded max number of retries\")}b&&\n0<b.length&&fe(this.c,b);I(this.a,\"Error: HTTP request failed\");switch(d){case 1:V(this,5);break;case 4:V(this,10);break;case 3:V(this,6);break;default:V(this,2)}}};function Fe(a,b){var c=5E3+Math.floor(1E4*Math.random());a.ra()||(I(a.a,\"Inactive channel\"),c*=2);return c*b}\nfunction V(a,b){H(a.a,\"Error code \"+b);if(2==b){var c=null;a.f&&(c=null);var d=r(a.hb,a);c||(c=new P(\"//www.google.com/images/cleardot.gif\"),k.location&&\"http\"==k.location.protocol||nd(c,\"https\"),Tc(c));je(c.toString(),d)}else J(2);I(a.a,\"HttpChannel: error - \"+b);a.G=0;a.f&&a.f.Ba(b);Ae(a);ye(a)}g.hb=function(a){a?(H(this.a,\"Successfully pinged google.com\"),J(2)):(H(this.a,\"Failed to ping google.com\"),J(1))};\nfunction Ae(a){a.G=0;a.s=-1;if(a.f){var b=ee(a.c);if(0!=b.length||0!=a.g.length)I(a.a,function(){return\"Number of undelivered maps, pending: \"+b.length+\", outgoing: \"+a.g.length}),a.c.c.length=0,ya(a.g),a.g.length=0;a.f.Aa()}}function Ke(a,b){b=Le(a,null,b);I(a.a,\"GetForwardChannelUri: \"+b);return b}function Td(a,b,c){b=Le(a,a.ia()?b:null,c);I(a.a,\"GetBackChannelUri: \"+b);return b}\nfunction Le(a,b,c){var d=Cd(c);if(\"\"!=d.b)b&&od(d,b+\".\"+d.b),pd(d,d.i);else{var e=k.location,f;b?f=b+\".\"+e.hostname:f=e.hostname;d=Dd(e.protocol,f,e.port,c)}a.U&&Ba(a.U,function(a,b){Q(d,b,a)});b=a.j;c=a.J;b&&c&&Q(d,b,c);Q(d,\"VER\",a.oa);ze(a,d);return d}g.da=function(a){if(a&&!this.S)throw Error(\"Can't create secondary domain capable XhrIo object.\");a=new T;a.m=this.S;return a};g.ra=function(){return!!this.f&&!0};g.ia=function(){return this.S};new Ld;function Me(){}g=Me.prototype;g.Da=function(){};\ng.Ca=function(){};g.Ba=function(){};g.Aa=function(){};g.Va=function(){};function Ne(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf(\"/\",0))b=d;else{var e;(e=\"\"==b)||(e=b.length-1,e=0<=e&&b.indexOf(\"/\",e)==e);e?b+=d:b+=\"/\"+d}}return b};function Oe(){if(z&&!(10<=Number(Ua)))throw Error(\"Environmental error: no available transport.\");}Oe.prototype.a=function(a,b){return new W(a,b)};\nfunction W(a,b){B.call(this);this.a=new we(b);this.b=a;this.s=b&&b.testUrl?b.testUrl:Ne(this.b,\"test\");this.f=oc(\"goog.labs.net.webChannel.WebChannelBaseTransport\");this.g=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a[\"X-Client-Protocol\"]=\"webchannel\":a={\"X-Client-Protocol\":\"webchannel\"});this.a.i=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a[\"X-WebChannel-Content-Type\"]=b.messageContentType:a={\"X-WebChannel-Content-Type\":b.messageContentType});\nthis.a.M=a;(a=b&&b.httpHeadersOverwriteParam)&&!/^[\\s\\xa0]*$/.test(a)&&(this.a.h=a);this.o=b&&b.supportsCrossDomainXhr||!1;this.m=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!/^[\\s\\xa0]*$/.test(b)&&(this.a.j=b,a=this.g,null!==a&&b in a&&(a=this.g,b in a&&delete a[b],E(this.f,\"Ignore httpSessionIdParam also specified with messageUrlParams: \"+b)));this.h=new Pe(this)}u(W,B);\nW.prototype.j=function(){this.a.f=this.h;this.o&&(this.a.S=!0);var a=this.a,b=this.s,c=this.b,d=this.g||void 0;I(a.a,\"connect()\");J(0);a.ka=c;a.U=d||{};a.D&&(I(a.a,\"connect() bypassed channel-test.\"),a.H.b=[],a.H.a=!1);I(a.a,\"connectTest_()\");a.B=new Qd(a,a.a);null===a.h&&(a.B.i=a.i);c=b;a.h&&a.i&&(c=ve(b,a.h,a.i));a=a.B;a.l=c;b=Ke(a.a,a.l);J(3);c=a.a.H.b;null!=c?(a.g=c[0],a.R=1,Rd(a)):(Xc(b,\"MODE\",\"init\"),!a.a.D&&a.a.j&&Xc(b,\"X-HTTP-Session-Id\",a.a.j),a.c=new K(a,a.b,void 0,void 0),a.c.j=a.i,Vc(a.c,\nb,!1,null),a.R=0)};W.prototype.close=function(){xe(this.a)};W.prototype.l=function(a){if(l(a)){var b={};b.__data__=a;Ce(this.a,b)}else this.m?(b={},b.__data__=Db(a),Ce(this.a,b)):Ce(this.a,a)};W.prototype.A=function(){this.a.f=null;delete this.h;xe(this.a);delete this.a;W.L.A.call(this)};function Qe(a){Od.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0}(this.c=a)?(a=this.c,this.data=null!==b&&a in b?b[a]:void 0):this.data=b}else this.data=a}u(Qe,Od);\nfunction Re(){Pd.call(this);this.status=1}u(Re,Pd);function Pe(a){this.a=a}u(Pe,Me);Pe.prototype.Da=function(){pc(this.a.f,\"WebChannel opened on \"+this.a.b);this.a.dispatchEvent(\"a\")};Pe.prototype.Ca=function(a){this.a.dispatchEvent(new Qe(a))};Pe.prototype.Ba=function(a){pc(this.a.f,\"WebChannel aborted on \"+this.a.b+\" due to channel error: \"+a);this.a.dispatchEvent(new Re(a))};Pe.prototype.Aa=function(){pc(this.a.f,\"WebChannel closed on \"+this.a.b);this.a.dispatchEvent(\"b\")};var Se=ia(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Oe);function Te(){this.b=[];this.a=[]}function Ue(a){0==a.b.length&&(a.b=a.a,a.b.reverse(),a.a=[]);return a.b.pop()}Te.prototype.u=function(){return this.b.length+this.a.length};Te.prototype.contains=function(a){return 0<=sa(this.b,a)||0<=sa(this.a,a)};Te.prototype.v=function(){for(var a=[],b=this.b.length-1;0<=b;--b)a.push(this.b[b]);var c=this.a.length;for(b=0;b<c;++b)a.push(this.a[b]);return a};function Ve(a,b){w.call(this);this.h=a||0;this.c=b||10;if(this.h>this.c)throw Error(We);this.a=new Te;this.b=new S;this.g=null;this.ba()}u(Ve,w);var We=\"[goog.structs.Pool] Min can not be greater than max\";g=Ve.prototype;g.ea=function(){var a=t();if(!(null!=this.g&&0>a-this.g)){for(var b;0<this.a.u()&&(b=Ue(this.a),!this.ta(b));)this.ba();!b&&this.u()<this.c&&(b=this.qa());b&&(this.g=a,this.b.add(b));return b}};g.gb=function(a){return kd(this.b.a,Wd(a))?(this.na(a),!0):!1};\ng.na=function(a){kd(this.b.a,Wd(a));this.ta(a)&&this.u()<this.c?this.a.a.push(a):Xe(a)};g.ba=function(){for(var a=this.a;this.u()<this.h;){var b=this.qa();a.a.push(b)}for(;this.u()>this.c&&0<this.a.u();)Xe(Ue(a))};g.qa=function(){return{}};function Xe(a){if(\"function\"==typeof a.Z)a.Z();else for(var b in a)a[b]=null}g.ta=function(a){return\"function\"==typeof a.Wa?a.Wa():!0};g.contains=function(a){return this.a.contains(a)||this.b.contains(a)};g.u=function(){return this.a.u()+this.b.u()};\ng.A=function(){Ve.L.A.call(this);if(0<this.b.u())throw Error(\"[goog.structs.Pool] Objects not released\");delete this.b;for(var a=this.a;0!=a.b.length||0!=a.a.length;)Xe(Ue(a));delete this.a};function Ye(a,b){this.a=a;this.b=b};function Ze(a){this.a=[];if(a)a:{if(a instanceof Ze){var b=a.O();a=a.v();if(0>=this.u()){for(var c=this.a,d=0;d<b.length;d++)c.push(new Ye(b[d],a[d]));break a}}else b=Da(a),a=Ca(a);for(d=0;d<b.length;d++)$e(this,b[d],a[d])}}function $e(a,b,c){var d=a.a;d.push(new Ye(b,c));b=d.length-1;a=a.a;for(c=a[b];0<b;)if(d=b-1>>1,a[d].a>c.a)a[b]=a[d],b=d;else break;a[b]=c}Ze.prototype.v=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].b);return b};\nZe.prototype.O=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].a);return b};Ze.prototype.u=function(){return this.a.length};function af(){Ze.call(this)}u(af,Ze);function X(a,b){this.f=new af;Ve.call(this,a,b)}u(X,Ve);g=X.prototype;g.ea=function(a,b){if(!a)return X.L.ea.call(this);$e(this.f,void 0!==b?b:100,a);this.sa()};g.sa=function(){for(var a=this.f;0<a.u();){var b=this.ea();if(b){var c=a,d=c.a,e=d.length;var f=d[0];if(0>=e)f=void 0;else{if(1==e)wa(d);else{d[0]=d.pop();d=0;c=c.a;e=c.length;for(var h=c[d];d<e>>1;){var m=2*d+1,v=2*d+2;m=v<e&&c[v].a<c[m].a?v:m;if(c[m].a>h.a)break;c[d]=c[m];d=m}c[d]=h}f=f.b}f.apply(this,[b])}else break}};\ng.na=function(a){X.L.na.call(this,a);this.sa()};g.ba=function(){X.L.ba.call(this);this.sa()};g.A=function(){X.L.A.call(this);k.clearTimeout(void 0);wa(this.f.a);this.f=null};function Y(a,b,c,d){this.l=a;this.j=!!d;X.call(this,b,c)}u(Y,X);Y.prototype.qa=function(){var a=new T,b=this.l;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.j&&(a.m=!0);return a};Y.prototype.ta=function(a){return!a.i&&!a.a};Oe.prototype.createWebChannel=Oe.prototype.a;W.prototype.send=W.prototype.l;W.prototype.open=W.prototype.j;W.prototype.close=W.prototype.close;Fc.NO_ERROR=0;Fc.TIMEOUT=8;Fc.HTTP_ERROR=6;Gc.COMPLETE=\"complete\";Md.EventType=Nd;Nd.OPEN=\"a\";Nd.CLOSE=\"b\";Nd.ERROR=\"c\";Nd.MESSAGE=\"d\";B.prototype.listen=B.prototype.aa;Y.prototype.getObject=Y.prototype.ea;Y.prototype.releaseObject=Y.prototype.gb;T.prototype.listenOnce=T.prototype.Ha;T.prototype.getLastError=T.prototype.Za;T.prototype.getLastErrorCode=T.prototype.Fa;\nT.prototype.getStatus=T.prototype.W;T.prototype.getStatusText=T.prototype.Ga;T.prototype.getResponseJson=T.prototype.Ya;T.prototype.getResponseText=T.prototype.V;T.prototype.getResponseText=T.prototype.V;T.prototype.send=T.prototype.fa;module.exports={createWebChannelTransport:Se,ErrorCode:Fc,EventType:Gc,WebChannel:Md,XhrIoPool:Y};}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {})\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))\n\n/***/ })\n\n},[113]);\n        } catch(error) {\n          throw new Error(\n            'Cannot instantiate firebase-firestore.js - ' +\n            'be sure to load firebase-app.js first.'\n          )\n        }\n\n\n// WEBPACK FOOTER //\n// firebase-firestore.js","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrequire('@firebase/firestore');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./firestore/index.js\n// module id = 113\n// module chunks = 1","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* tslint:disable:no-console */\nimport { SDK_VERSION } from '../core/version';\nimport { PlatformSupport } from '../platform/platform';\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar logLevel = LogLevel.ERROR;\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel() {\n    return logLevel;\n}\nexport function setLogLevel(newLevel) {\n    logLevel = newLevel;\n}\nexport function debug(tag, msg) {\n    var obj = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        obj[_i - 2] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.DEBUG) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n    }\n}\nexport function error(msg) {\n    var obj = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        obj[_i - 1] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.ERROR) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n    }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    else {\n        var platform = PlatformSupport.getPlatform();\n        try {\n            return platform.formatJSON(obj);\n        }\n        catch (e) {\n            // Converting to JSON failed, just log the object directly\n            return obj;\n        }\n    }\n}\n\n//# sourceMappingURL=log.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/log.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SDK_VERSION } from '../core/version';\nimport { error } from './log';\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n    error(message);\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nexport function assert(assertion, message) {\n    if (!assertion) {\n        fail(message);\n    }\n}\n\n//# sourceMappingURL=assert.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/assert.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nvar PlatformSupport = /** @class */ (function () {\n    function PlatformSupport() {\n    }\n    PlatformSupport.setPlatform = function (platform) {\n        if (PlatformSupport.platform) {\n            fail('Platform already defined');\n        }\n        PlatformSupport.platform = platform;\n    };\n    PlatformSupport.getPlatform = function () {\n        if (!PlatformSupport.platform) {\n            fail('Platform not set');\n        }\n        return PlatformSupport.platform;\n    };\n    return PlatformSupport;\n}());\nexport { PlatformSupport };\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nexport function emptyByteString() {\n    return PlatformSupport.getPlatform().emptyByteString;\n}\n\n//# sourceMappingURL=platform.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform/platform.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\nimport { Code, FirestoreError } from './error';\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nexport function makeConstructorPrivate(cls, optionalMessage) {\n    function PublicConstructor() {\n        var error = 'This constructor is private.';\n        if (optionalMessage) {\n            error += ' ';\n            error += optionalMessage;\n        }\n        throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n    }\n    // Make sure instanceof checks work and all methods are exposed on the public\n    // constructor\n    PublicConstructor.prototype = cls.prototype;\n    // Copy any static methods/members\n    for (var staticProperty in cls) {\n        if (cls.hasOwnProperty(staticProperty)) {\n            PublicConstructor[staticProperty] = cls[staticProperty];\n        }\n    }\n    return PublicConstructor;\n}\n\n//# sourceMappingURL=api.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/api.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\nexport function contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function get(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nexport function size(obj) {\n    var count = 0;\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            count++;\n        }\n    }\n    return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nexport function defaulted(value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n}\nexport function forEachNumber(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var num = parseInt(key, 10);\n            if (!isNaN(num)) {\n                fn(num, obj[key]);\n            }\n        }\n    }\n}\nexport function forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\nexport function lookupOrInsert(obj, key, valFn) {\n    if (!contains(obj, key)) {\n        obj[key] = valFn();\n    }\n    return obj[key];\n}\nexport function isEmpty(obj) {\n    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function shallowCopy(obj) {\n    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n    var result = {};\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=obj.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/obj.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport * as obj from './obj';\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n    if (args.length !== numberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" +\n            formatPlural(numberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n    if (args.length < minNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" +\n            formatPlural(minNumberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" +\n            (maxNumberOfArgs + \" arguments, but was called with \") +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n    if (!(value instanceof Array) || value.length < minNumberOfElements) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" +\n            'array with at least ' +\n            (formatPlural(minNumberOfElements, 'element') + \".\"));\n    }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(functionName, type, position, argument) {\n    validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(functionName, type, position, argument) {\n    if (argument !== undefined) {\n        validateArgType(functionName, type, position, argument);\n    }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(functionName, type, optionName, argument) {\n    validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(functionName, type, optionName, argument) {\n    if (argument !== undefined) {\n        validateNamedType(functionName, type, optionName, argument);\n    }\n}\n/** Helper to validate the type of a provided input. */\nfunction validateType(functionName, type, inputName, input) {\n    if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n        var description = valueDescription(input);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" +\n            (\"to be of type \" + type + \", but it was: \" + description));\n    }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        Object.getPrototypeOf(input) === Object.prototype);\n}\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input) {\n    if (input === undefined) {\n        return 'undefined';\n    }\n    else if (input === null) {\n        return 'null';\n    }\n    else if (typeof input === 'string') {\n        if (input.length > 20) {\n            input = input.substring(0, 20) + \"...\";\n        }\n        return JSON.stringify(input);\n    }\n    else if (typeof input === 'number' || typeof input === 'boolean') {\n        return '' + input;\n    }\n    else if (typeof input === 'object') {\n        if (input instanceof Array) {\n            return 'an array';\n        }\n        else {\n            var customObjectName = tryGetCustomObjectType(input);\n            if (customObjectName) {\n                return \"a custom \" + customObjectName + \" object\";\n            }\n            else {\n                return 'an object';\n            }\n        }\n    }\n    else if (typeof input === 'function') {\n        return 'a function';\n    }\n    else {\n        return fail('Unknown wrong type: ' + typeof input);\n    }\n}\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input) {\n    if (input.constructor) {\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n        var results = funcNameRegex.exec(input.constructor.toString());\n        if (results && results.length > 1) {\n            return results[1];\n        }\n    }\n    return null;\n}\n/** Validates the provided argument is defined. */\nexport function validateDefined(functionName, position, argument) {\n    if (argument === undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" +\n            \"argument, but it was undefined.\");\n    }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(functionName, options, optionNames) {\n    obj.forEach(options, function (key, _) {\n        if (optionNames.indexOf(key) < 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" +\n                'Available options: ' +\n                optionNames.join(', '));\n        }\n    });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(functionName, type, position, argument) {\n    var description = valueDescription(argument);\n    return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" +\n        (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\nfunction ordinal(num) {\n    switch (num) {\n        case 1:\n            return 'first';\n        case 2:\n            return 'second';\n        case 3:\n            return 'third';\n        default:\n            return num + 'th';\n    }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num, str) {\n    return num + \" \" + str + (num === 1 ? '' : 's');\n}\n\n//# sourceMappingURL=input_validation.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/input_validation.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\n// tslint:disable-next-line:class-as-namespace\nvar AutoId = /** @class */ (function () {\n    function AutoId() {\n    }\n    AutoId.newId = function () {\n        // Alphanumeric characters\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var autoId = '';\n        for (var i = 0; i < 20; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n        return autoId;\n    };\n    return AutoId;\n}());\nexport { AutoId };\nexport function primitiveComparator(left, right) {\n    if (left < right)\n        return -1;\n    if (left > right)\n        return 1;\n    return 0;\n}\n/** Helper to compare nullable (or undefined-able) objects using equals(). */\nexport function equals(left, right) {\n    if (left !== null && left !== undefined) {\n        return !!(right && left.equals(right));\n    }\n    else {\n        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n        // smart enough.\n        return left === right;\n    }\n}\n/** Helper to compare arrays using equals(). */\nexport function arrayEquals(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < left.length; i++) {\n        if (!left[i].equals(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nexport function immediatePredecessor(s) {\n    // We can decrement the last character in the string and be done\n    // unless that character is 0 (0x0000), in which case we have to erase the\n    // last character.\n    var lastIndex = s.length - 1;\n    if (s.length === 0) {\n        // Special case the empty string.\n        return '';\n    }\n    else if (s.charAt(lastIndex) === '\\0') {\n        return s.substring(0, lastIndex);\n    }\n    else {\n        return (s.substring(0, lastIndex) +\n            String.fromCharCode(s.charCodeAt(lastIndex) - 1));\n    }\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s) {\n    // Return the input string, with an additional NUL byte appended.\n    return s + '\\0';\n}\n\n//# sourceMappingURL=misc.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/misc.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!PlatformSupport.getPlatform().base64Available) {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n        validateArgType('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = PlatformSupport.getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return PlatformSupport.getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._equals = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return primitiveComparator(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\nexport { Blob };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nexport var PublicBlob = makeConstructorPrivate(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n//# sourceMappingURL=blob.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/blob.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { DocumentKey } from './document_key';\nexport var TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder || (TypeOrder = {}));\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\nexport { FieldValue };\nvar NullValue = /** @class */ (function (_super) {\n    __extends(NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function () {\n        return null;\n    };\n    NullValue.prototype.equals = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(FieldValue));\nexport { NullValue };\nvar BooleanValue = /** @class */ (function (_super) {\n    __extends(BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.equals = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return primitiveComparator(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(FieldValue));\nexport { BooleanValue };\n/** Base class for IntegerValue and DoubleValue. */\nvar NumberValue = /** @class */ (function (_super) {\n    __extends(NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(FieldValue));\nexport { NumberValue };\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar IntegerValue = /** @class */ (function (_super) {\n    __extends(IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(NumberValue));\nexport { IntegerValue };\nvar DoubleValue = /** @class */ (function (_super) {\n    __extends(DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(NumberValue));\nexport { DoubleValue };\n// TODO(b/37267885): Add truncation support\nvar StringValue = /** @class */ (function (_super) {\n    __extends(StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    StringValue.prototype.equals = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return primitiveComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(FieldValue));\nexport { StringValue };\nvar TimestampValue = /** @class */ (function (_super) {\n    __extends(TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function () {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.equals = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.equals(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(FieldValue));\nexport { TimestampValue };\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar ServerTimestampValue = /** @class */ (function (_super) {\n    __extends(ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function () {\n        return null;\n    };\n    ServerTimestampValue.prototype.equals = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.equals(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(FieldValue));\nexport { ServerTimestampValue };\nvar BlobValue = /** @class */ (function (_super) {\n    __extends(BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BlobValue.prototype.equals = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(FieldValue));\nexport { BlobValue };\nvar RefValue = /** @class */ (function (_super) {\n    __extends(RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function () {\n        return this.key;\n    };\n    RefValue.prototype.equals = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.equals(other.key) && this.databaseId.equals(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(FieldValue));\nexport { RefValue };\nvar GeoPointValue = /** @class */ (function (_super) {\n    __extends(GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.equals = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(FieldValue));\nexport { GeoPointValue };\nvar ObjectValue = /** @class */ (function (_super) {\n    __extends(ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function () {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value();\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.equals = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = primitiveComparator(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return primitiveComparator(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        assert(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));\n    return ObjectValue;\n}(FieldValue));\nexport { ObjectValue };\nvar ArrayValue = /** @class */ (function (_super) {\n    __extends(ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function () {\n        return this.internalValue.map(function (v) { return v.value(); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.equals = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].equals(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return primitiveComparator(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(FieldValue));\nexport { ArrayValue };\n\n//# sourceMappingURL=field_value.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/field_value.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport var MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport var MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nexport var isInteger = NumberAsAny.isInteger ||\n    (function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    });\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value) {\n    return (isInteger(value) &&\n        value <= MAX_SAFE_INTEGER &&\n        value >= MIN_SAFE_INTEGER);\n}\n/**\n * Safely checks if the number is NaN.\n */\nexport function safeIsNaN(value) {\n    if (NumberAsAny.IsNaN) {\n        return NumberAsAny.IsNaN(value);\n    }\n    else {\n        return typeof value === 'number' && isNaN(value);\n    }\n}\n\n//# sourceMappingURL=types.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/types.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DoubleValue, NullValue, RefValue } from '../model/field_value';\nimport { FieldPath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nvar Query = /** @class */ (function () {\n    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\n        if (filters === void 0) { filters = []; }\n        if (limit === void 0) { limit = null; }\n        if (startAt === void 0) { startAt = null; }\n        if (endAt === void 0) { endAt = null; }\n        this.path = path;\n        this.explicitOrderBy = explicitOrderBy;\n        this.filters = filters;\n        this.limit = limit;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.memoizedCanonicalId = null;\n        this.memoizedOrderBy = null;\n        if (this.startAt) {\n            this.assertValidBound(this.startAt);\n        }\n        if (this.endAt) {\n            this.assertValidBound(this.endAt);\n        }\n    }\n    Query.atPath = function (path) {\n        return new Query(path);\n    };\n    Object.defineProperty(Query.prototype, \"orderBy\", {\n        get: function () {\n            if (this.memoizedOrderBy === null) {\n                var inequalityField = this.getInequalityFilterField();\n                var firstOrderByField = this.getFirstOrderByField();\n                if (inequalityField !== null && firstOrderByField === null) {\n                    // In order to implicitly add key ordering, we must also add the\n                    // inequality filter field for it to be a valid query.\n                    // Note that the default inequality field and key ordering is ascending.\n                    if (inequalityField.isKeyField()) {\n                        this.memoizedOrderBy = [KEY_ORDERING_ASC];\n                    }\n                    else {\n                        this.memoizedOrderBy = [\n                            new OrderBy(inequalityField),\n                            KEY_ORDERING_ASC\n                        ];\n                    }\n                }\n                else {\n                    assert(inequalityField === null ||\n                        (firstOrderByField !== null &&\n                            inequalityField.equals(firstOrderByField)), 'First orderBy should match inequality field.');\n                    this.memoizedOrderBy = [];\n                    var foundKeyOrdering = false;\n                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n                        var orderBy = _a[_i];\n                        this.memoizedOrderBy.push(orderBy);\n                        if (orderBy.field.isKeyField()) {\n                            foundKeyOrdering = true;\n                        }\n                    }\n                    if (!foundKeyOrdering) {\n                        // The order of the implicit key ordering always matches the last\n                        // explicit order by\n                        var lastDirection = this.explicitOrderBy.length > 0\n                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n                            : Direction.ASCENDING;\n                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING\n                            ? KEY_ORDERING_ASC\n                            : KEY_ORDERING_DESC);\n                    }\n                }\n            }\n            return this.memoizedOrderBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Query.prototype.addFilter = function (filter) {\n        assert(this.getInequalityFilterField() == null ||\n            !(filter instanceof RelationFilter) ||\n            !filter.isInequality() ||\n            filter.field.equals(this.getInequalityFilterField()), 'Query must only have one inequality field.');\n        assert(!DocumentKey.isDocumentKey(this.path), 'No filtering allowed for document query');\n        var newFilters = this.filters.concat([filter]);\n        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.addOrderBy = function (orderBy) {\n        assert(!DocumentKey.isDocumentKey(this.path), 'No ordering allowed for document query');\n        assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var newOrderBy = this.explicitOrderBy.concat([orderBy]);\n        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withLimit = function (limit) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withStartAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);\n    };\n    Query.prototype.withEndAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);\n    };\n    // TODO(b/29183165): This is used to get a unique string from a query to, for\n    // example, use as a dictionary key, but the implementation is subject to\n    // collisions. Make it collision-free.\n    Query.prototype.canonicalId = function () {\n        if (this.memoizedCanonicalId === null) {\n            var canonicalId = this.path.canonicalString();\n            canonicalId += '|f:';\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                canonicalId += filter.canonicalId();\n                canonicalId += ',';\n            }\n            canonicalId += '|ob:';\n            // TODO(dimond): make this collision resistant\n            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {\n                var orderBy = _c[_b];\n                canonicalId += orderBy.canonicalId();\n                canonicalId += ',';\n            }\n            if (!isNullOrUndefined(this.limit)) {\n                canonicalId += '|l:';\n                canonicalId += this.limit;\n            }\n            if (this.startAt) {\n                canonicalId += '|lb:';\n                canonicalId += this.startAt.canonicalId();\n            }\n            if (this.endAt) {\n                canonicalId += '|ub:';\n                canonicalId += this.endAt.canonicalId();\n            }\n            this.memoizedCanonicalId = canonicalId;\n        }\n        return this.memoizedCanonicalId;\n    };\n    Query.prototype.toString = function () {\n        var str = 'Query(' + this.path.canonicalString();\n        if (this.filters.length > 0) {\n            str += \", filters: [\" + this.filters.join(', ') + \"]\";\n        }\n        if (!isNullOrUndefined(this.limit)) {\n            str += ', limit: ' + this.limit;\n        }\n        if (this.explicitOrderBy.length > 0) {\n            str += \", orderBy: [\" + this.explicitOrderBy.join(', ') + \"]\";\n        }\n        if (this.startAt) {\n            str += ', startAt: ' + this.startAt.canonicalId();\n        }\n        if (this.endAt) {\n            str += ', endAt: ' + this.endAt.canonicalId();\n        }\n        return str + ')';\n    };\n    Query.prototype.equals = function (other) {\n        if (this.limit !== other.limit) {\n            return false;\n        }\n        if (this.orderBy.length !== other.orderBy.length) {\n            return false;\n        }\n        for (var i = 0; i < this.orderBy.length; i++) {\n            if (!this.orderBy[i].equals(other.orderBy[i])) {\n                return false;\n            }\n        }\n        if (this.filters.length !== other.filters.length) {\n            return false;\n        }\n        for (var i = 0; i < this.filters.length; i++) {\n            if (!this.filters[i].equals(other.filters[i])) {\n                return false;\n            }\n        }\n        if (!this.path.equals(other.path)) {\n            return false;\n        }\n        if (this.startAt !== null\n            ? !this.startAt.equals(other.startAt)\n            : other.startAt !== null) {\n            return false;\n        }\n        return this.endAt !== null\n            ? this.endAt.equals(other.endAt)\n            : other.endAt === null;\n    };\n    Query.prototype.docComparator = function (d1, d2) {\n        var comparedOnKeyField = false;\n        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            var comp = orderBy.compare(d1, d2);\n            if (comp !== 0)\n                return comp;\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n        }\n        // Assert that we actually compared by key\n        assert(comparedOnKeyField, \"orderBy used that doesn't compare on key field\");\n        return 0;\n    };\n    Query.prototype.matches = function (doc) {\n        return (this.matchesAncestor(doc) &&\n            this.matchesOrderBy(doc) &&\n            this.matchesFilters(doc) &&\n            this.matchesBounds(doc));\n    };\n    Query.prototype.hasLimit = function () {\n        return !isNullOrUndefined(this.limit);\n    };\n    Query.prototype.getFirstOrderByField = function () {\n        return this.explicitOrderBy.length > 0\n            ? this.explicitOrderBy[0].field\n            : null;\n    };\n    Query.prototype.getInequalityFilterField = function () {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (filter instanceof RelationFilter && filter.isInequality()) {\n                return filter.field;\n            }\n        }\n        return null;\n    };\n    Query.prototype.isDocumentQuery = function () {\n        return DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;\n    };\n    Query.prototype.matchesAncestor = function (doc) {\n        var docPath = doc.key.path;\n        if (DocumentKey.isDocumentKey(this.path)) {\n            // exact match for document queries\n            return this.path.equals(docPath);\n        }\n        else {\n            // shallow ancestor queries by default\n            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);\n        }\n    };\n    /**\n     * A document must have a value for every ordering clause in order to show up\n     * in the results.\n     */\n    Query.prototype.matchesOrderBy = function (doc) {\n        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            // order by key always matches\n            if (!orderBy.field.isKeyField() &&\n                doc.field(orderBy.field) === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Query.prototype.matchesFilters = function (doc) {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (!filter.matches(doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Makes sure a document is within the bounds, if provided.\n     */\n    Query.prototype.matchesBounds = function (doc) {\n        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        return true;\n    };\n    Query.prototype.assertValidBound = function (bound) {\n        assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');\n    };\n    return Query;\n}());\nexport { Query };\nvar RelationOp = /** @class */ (function () {\n    function RelationOp(name) {\n        this.name = name;\n    }\n    RelationOp.fromString = function (op) {\n        switch (op) {\n            case '<':\n                return RelationOp.LESS_THAN;\n            case '<=':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case '==':\n                return RelationOp.EQUAL;\n            case '>=':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case '>':\n                return RelationOp.GREATER_THAN;\n            default:\n                return fail('Unknown relation: ' + op);\n        }\n    };\n    RelationOp.prototype.toString = function () {\n        return this.name;\n    };\n    RelationOp.prototype.equals = function (other) {\n        return this.name === other.name;\n    };\n    RelationOp.LESS_THAN = new RelationOp('<');\n    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');\n    RelationOp.EQUAL = new RelationOp('==');\n    RelationOp.GREATER_THAN = new RelationOp('>');\n    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n    return RelationOp;\n}());\nexport { RelationOp };\nvar RelationFilter = /** @class */ (function () {\n    function RelationFilter(field, op, value) {\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    RelationFilter.prototype.matches = function (doc) {\n        if (this.field.isKeyField()) {\n            assert(this.value instanceof RefValue, 'Comparing on key, but filter value not a RefValue');\n            var refValue = this.value;\n            var comparison = DocumentKey.comparator(doc.key, refValue.key);\n            return this.matchesComparison(comparison);\n        }\n        else {\n            var val = doc.field(this.field);\n            return val !== undefined && this.matchesValue(val);\n        }\n    };\n    RelationFilter.prototype.matchesValue = function (value) {\n        // Only compare types with matching backend order (such as double and int).\n        if (this.value.typeOrder !== value.typeOrder) {\n            return false;\n        }\n        return this.matchesComparison(value.compareTo(this.value));\n    };\n    RelationFilter.prototype.matchesComparison = function (comparison) {\n        switch (this.op) {\n            case RelationOp.LESS_THAN:\n                return comparison < 0;\n            case RelationOp.LESS_THAN_OR_EQUAL:\n                return comparison <= 0;\n            case RelationOp.EQUAL:\n                return comparison === 0;\n            case RelationOp.GREATER_THAN:\n                return comparison > 0;\n            case RelationOp.GREATER_THAN_OR_EQUAL:\n                return comparison >= 0;\n            default:\n                return fail('Unknown relation op' + this.op);\n        }\n    };\n    RelationFilter.prototype.isInequality = function () {\n        return this.op !== RelationOp.EQUAL;\n    };\n    RelationFilter.prototype.canonicalId = function () {\n        // TODO(b/29183165): Technically, this won't be unique if two values have\n        // the same description, such as the int 3 and the string \"3\". So we should\n        // add the types in here somehow, too.\n        return (this.field.canonicalString() + this.op.toString() + this.value.toString());\n    };\n    RelationFilter.prototype.equals = function (other) {\n        if (other instanceof RelationFilter) {\n            return (this.op.equals(other.op) &&\n                this.field.equals(other.field) &&\n                this.value.equals(other.value));\n        }\n        else {\n            return false;\n        }\n    };\n    RelationFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" \" + this.op + \" \" + this.value.value();\n    };\n    return RelationFilter;\n}());\nexport { RelationFilter };\n/**\n * Filter that matches 'null' values.\n */\nvar NullFilter = /** @class */ (function () {\n    function NullFilter(field) {\n        this.field = field;\n    }\n    NullFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field);\n        return val !== undefined && val.value() === null;\n    };\n    NullFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS null';\n    };\n    NullFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS null\";\n    };\n    NullFilter.prototype.equals = function (other) {\n        if (other instanceof NullFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NullFilter;\n}());\nexport { NullFilter };\n/**\n * Filter that matches 'NaN' values.\n */\nvar NanFilter = /** @class */ (function () {\n    function NanFilter(field) {\n        this.field = field;\n    }\n    NanFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field).value();\n        return typeof val === 'number' && isNaN(val);\n    };\n    NanFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS NaN';\n    };\n    NanFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS NaN\";\n    };\n    NanFilter.prototype.equals = function (other) {\n        if (other instanceof NanFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NanFilter;\n}());\nexport { NanFilter };\n/**\n * Creates a filter based on the provided arguments.\n */\nexport function fieldFilter(field, op, value) {\n    if (value.equals(NullValue.INSTANCE)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on null.');\n        }\n        return new NullFilter(field);\n    }\n    else if (value.equals(DoubleValue.NAN)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on NaN.');\n        }\n        return new NanFilter(field);\n    }\n    else {\n        return new RelationFilter(field, op, value);\n    }\n}\n/**\n * The direction of sorting in an order by.\n */\nvar Direction = /** @class */ (function () {\n    function Direction(name) {\n        this.name = name;\n    }\n    Direction.prototype.toString = function () {\n        return this.name;\n    };\n    Direction.ASCENDING = new Direction('asc');\n    Direction.DESCENDING = new Direction('desc');\n    return Direction;\n}());\nexport { Direction };\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nvar Bound = /** @class */ (function () {\n    function Bound(position, before) {\n        this.position = position;\n        this.before = before;\n    }\n    Bound.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        var canonicalId = this.before ? 'b:' : 'a:';\n        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {\n            var component = _a[_i];\n            canonicalId += component.toString();\n        }\n        return canonicalId;\n    };\n    /**\n     * Returns true if a document sorts before a bound using the provided sort\n     * order.\n     */\n    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {\n        assert(this.position.length <= orderBy.length, \"Bound has more components than query's orderBy\");\n        var comparison = 0;\n        for (var i = 0; i < this.position.length; i++) {\n            var orderByComponent = orderBy[i];\n            var component = this.position[i];\n            if (orderByComponent.field.isKeyField()) {\n                assert(component instanceof RefValue, 'Bound has a non-key value where the key path is being used.');\n                comparison = DocumentKey.comparator(component.key, doc.key);\n            }\n            else {\n                var docValue = doc.field(orderByComponent.field);\n                assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');\n                comparison = component.compareTo(docValue);\n            }\n            if (orderByComponent.dir === Direction.DESCENDING) {\n                comparison = comparison * -1;\n            }\n            if (comparison !== 0) {\n                break;\n            }\n        }\n        return this.before ? comparison <= 0 : comparison < 0;\n    };\n    Bound.prototype.equals = function (other) {\n        if (other === null) {\n            return false;\n        }\n        if (this.before !== other.before ||\n            this.position.length !== other.position.length) {\n            return false;\n        }\n        for (var i = 0; i < this.position.length; i++) {\n            var thisPosition = this.position[i];\n            var otherPosition = other.position[i];\n            return thisPosition.equals(otherPosition);\n        }\n        return true;\n    };\n    return Bound;\n}());\nexport { Bound };\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar OrderBy = /** @class */ (function () {\n    function OrderBy(field, dir) {\n        this.field = field;\n        if (dir === undefined) {\n            dir = Direction.ASCENDING;\n        }\n        this.dir = dir;\n        this.isKeyOrderBy = field.isKeyField();\n    }\n    OrderBy.prototype.compare = function (d1, d2) {\n        var comparison = this.isKeyOrderBy\n            ? Document.compareByKey(d1, d2)\n            : Document.compareByField(this.field, d1, d2);\n        switch (this.dir) {\n            case Direction.ASCENDING:\n                return comparison;\n            case Direction.DESCENDING:\n                return -1 * comparison;\n            default:\n                return fail('Unknown direction: ' + this.dir);\n        }\n    };\n    OrderBy.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        return this.field.canonicalString() + this.dir.toString();\n    };\n    OrderBy.prototype.toString = function () {\n        return this.field.canonicalString() + \" (\" + this.dir + \")\";\n    };\n    OrderBy.prototype.equals = function (other) {\n        return this.dir === other.dir && this.field.equals(other.field);\n    };\n    return OrderBy;\n}());\nexport { OrderBy };\nvar KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);\nvar KEY_ORDERING_DESC = new OrderBy(FieldPath.keyField(), Direction.DESCENDING);\n\n//# sourceMappingURL=query.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/query.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nvar RpcCode;\n(function (RpcCode) {\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\nexport function isPermanentError(code) {\n    switch (code) {\n        case Code.OK:\n            return fail('Treated status OK as error');\n        case Code.CANCELLED:\n        case Code.UNKNOWN:\n        case Code.DEADLINE_EXCEEDED:\n        case Code.RESOURCE_EXHAUSTED:\n        case Code.INTERNAL:\n        case Code.UNAVAILABLE:\n        // Unauthenticated means something went wrong with our token and we need\n        // to retry with new credentials which will happen automatically.\n        // TODO(b/37325376): Give up after second unauthenticated error.\n        case Code.UNAUTHENTICATED:\n            return false;\n        case Code.INVALID_ARGUMENT:\n        case Code.NOT_FOUND:\n        case Code.ALREADY_EXISTS:\n        case Code.PERMISSION_DENIED:\n        case Code.FAILED_PRECONDITION:\n        // Aborted might be retried in some scenarios, but that is dependant on\n        // the context and should handled individually by the calling code.\n        // See https://cloud.google.com/apis/design/errors.\n        case Code.ABORTED:\n        case Code.OUT_OF_RANGE:\n        case Code.UNIMPLEMENTED:\n        case Code.DATA_LOSS:\n            return true;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status) {\n    // tslint:disable-next-line:no-any lookup by string\n    var code = RpcCode[status];\n    if (code === undefined) {\n        return undefined;\n    }\n    return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code) {\n    if (code === undefined) {\n        // This shouldn't normally happen, but in certain error cases (like trying\n        // to send invalid proto messages) we may get an error with no GRPC code.\n        log.error('GRPC error has no .code');\n        return Code.UNKNOWN;\n    }\n    switch (code) {\n        case RpcCode.OK:\n            return Code.OK;\n        case RpcCode.CANCELLED:\n            return Code.CANCELLED;\n        case RpcCode.UNKNOWN:\n            return Code.UNKNOWN;\n        case RpcCode.DEADLINE_EXCEEDED:\n            return Code.DEADLINE_EXCEEDED;\n        case RpcCode.RESOURCE_EXHAUSTED:\n            return Code.RESOURCE_EXHAUSTED;\n        case RpcCode.INTERNAL:\n            return Code.INTERNAL;\n        case RpcCode.UNAVAILABLE:\n            return Code.UNAVAILABLE;\n        case RpcCode.UNAUTHENTICATED:\n            return Code.UNAUTHENTICATED;\n        case RpcCode.INVALID_ARGUMENT:\n            return Code.INVALID_ARGUMENT;\n        case RpcCode.NOT_FOUND:\n            return Code.NOT_FOUND;\n        case RpcCode.ALREADY_EXISTS:\n            return Code.ALREADY_EXISTS;\n        case RpcCode.PERMISSION_DENIED:\n            return Code.PERMISSION_DENIED;\n        case RpcCode.FAILED_PRECONDITION:\n            return Code.FAILED_PRECONDITION;\n        case RpcCode.ABORTED:\n            return Code.ABORTED;\n        case RpcCode.OUT_OF_RANGE:\n            return Code.OUT_OF_RANGE;\n        case RpcCode.UNIMPLEMENTED:\n            return Code.UNIMPLEMENTED;\n        case RpcCode.DATA_LOSS:\n            return Code.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code) {\n    if (code === undefined) {\n        return RpcCode.OK;\n    }\n    switch (code) {\n        case Code.OK:\n            return RpcCode.OK;\n        case Code.CANCELLED:\n            return RpcCode.CANCELLED;\n        case Code.UNKNOWN:\n            return RpcCode.UNKNOWN;\n        case Code.DEADLINE_EXCEEDED:\n            return RpcCode.DEADLINE_EXCEEDED;\n        case Code.RESOURCE_EXHAUSTED:\n            return RpcCode.RESOURCE_EXHAUSTED;\n        case Code.INTERNAL:\n            return RpcCode.INTERNAL;\n        case Code.UNAVAILABLE:\n            return RpcCode.UNAVAILABLE;\n        case Code.UNAUTHENTICATED:\n            return RpcCode.UNAUTHENTICATED;\n        case Code.INVALID_ARGUMENT:\n            return RpcCode.INVALID_ARGUMENT;\n        case Code.NOT_FOUND:\n            return RpcCode.NOT_FOUND;\n        case Code.ALREADY_EXISTS:\n            return RpcCode.ALREADY_EXISTS;\n        case Code.PERMISSION_DENIED:\n            return RpcCode.PERMISSION_DENIED;\n        case Code.FAILED_PRECONDITION:\n            return RpcCode.FAILED_PRECONDITION;\n        case Code.ABORTED:\n            return RpcCode.ABORTED;\n        case Code.OUT_OF_RANGE:\n            return RpcCode.OUT_OF_RANGE;\n        case Code.UNIMPLEMENTED:\n            return RpcCode.UNIMPLEMENTED;\n        case Code.DATA_LOSS:\n            return RpcCode.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status) {\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    //\n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n    switch (status) {\n        case 200:// OK\n            return Code.OK;\n        case 400:// Bad Request\n            return Code.INVALID_ARGUMENT;\n        // Other possibilities based on the forward mapping\n        // return Code.FAILED_PRECONDITION;\n        // return Code.OUT_OF_RANGE;\n        case 401:// Unauthorized\n            return Code.UNAUTHENTICATED;\n        case 403:// Forbidden\n            return Code.PERMISSION_DENIED;\n        case 404:// Not Found\n            return Code.NOT_FOUND;\n        case 409:// Conflict\n            return Code.ABORTED;\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n        case 416:// Range Not Satisfiable\n            return Code.OUT_OF_RANGE;\n        case 429:// Too Many Requests\n            return Code.RESOURCE_EXHAUSTED;\n        case 499:// Client Closed Request\n            return Code.CANCELLED;\n        case 500:// Internal Server Error\n            return Code.UNKNOWN;\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n        case 501:// Unimplemented\n            return Code.UNIMPLEMENTED;\n        case 503:// Service Unavailable\n            return Code.UNAVAILABLE;\n        case 504:// Gateway Timeout\n            return Code.DEADLINE_EXCEEDED;\n        default:\n            if (status >= 200 && status < 300)\n                return Code.OK;\n            if (status >= 400 && status < 500)\n                return Code.FAILED_PRECONDITION;\n            if (status >= 500 && status < 600)\n                return Code.INTERNAL;\n            return Code.UNKNOWN;\n    }\n}\n\n//# sourceMappingURL=rpc_error.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/rpc_error.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { DocumentKey } from './document_key';\nvar EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nexport function maybeDocumentMap() {\n    return EMPTY_MAYBE_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nexport function documentMap() {\n    return EMPTY_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);\nexport function documentVersionMap() {\n    return EMPTY_DOCUMENT_VERSION_MAP;\n}\nvar EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet() {\n    return EMPTY_DOCUMENT_KEY_SET;\n}\n\n//# sourceMappingURL=collections.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/collections.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\nimport { assert, fail } from '../util/assert';\nimport * as objUtils from '../util/obj';\nimport { CurrentStatusUpdate, RemoteEvent, ResetMapping, UpdateMapping } from './remote_event';\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nvar DocumentWatchChange = /** @class */ (function () {\n    function DocumentWatchChange(\n        /** The new document applies to all of these targets. */\n        updatedTargetIds, \n        /** The new document is removed from all of these targets. */\n        removedTargetIds, \n        /** The key of the document for this change. */\n        key, \n        /**\n         * The new document or NoDocument if it was deleted. Is null if the\n         * document went out of view without the server sending a new document.\n         */\n        newDoc) {\n        this.updatedTargetIds = updatedTargetIds;\n        this.removedTargetIds = removedTargetIds;\n        this.key = key;\n        this.newDoc = newDoc;\n    }\n    return DocumentWatchChange;\n}());\nexport { DocumentWatchChange };\nvar ExistenceFilterChange = /** @class */ (function () {\n    function ExistenceFilterChange(targetId, existenceFilter) {\n        this.targetId = targetId;\n        this.existenceFilter = existenceFilter;\n    }\n    return ExistenceFilterChange;\n}());\nexport { ExistenceFilterChange };\nexport var WatchTargetChangeState;\n(function (WatchTargetChangeState) {\n    WatchTargetChangeState[WatchTargetChangeState[\"NoChange\"] = 0] = \"NoChange\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Added\"] = 1] = \"Added\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Removed\"] = 2] = \"Removed\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Current\"] = 3] = \"Current\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Reset\"] = 4] = \"Reset\";\n})(WatchTargetChangeState || (WatchTargetChangeState = {}));\nvar WatchTargetChange = /** @class */ (function () {\n    function WatchTargetChange(\n        /** What kind of change occurred to the watch target. */\n        state, \n        /** The target IDs that were added/removed/set. */\n        targetIds, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken, \n        /** An RPC error indicating why the watch failed. */\n        cause) {\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        if (cause === void 0) { cause = null; }\n        this.state = state;\n        this.targetIds = targetIds;\n        this.resumeToken = resumeToken;\n        this.cause = cause;\n    }\n    return WatchTargetChange;\n}());\nexport { WatchTargetChange };\n/**\n * A helper class to accumulate watch changes into a RemoteEvent and other\n * target information.\n */\nvar WatchChangeAggregator = /** @class */ (function () {\n    function WatchChangeAggregator(snapshotVersion, listenTargets, pendingTargetResponses) {\n        this.snapshotVersion = snapshotVersion;\n        this.listenTargets = listenTargets;\n        /** The existence filter - if any - for the given target IDs. */\n        this.existenceFilters = {};\n        /** Keeps track of the current target mappings */\n        this.targetChanges = {};\n        /** Keeps track of document to update */\n        this.documentUpdates = maybeDocumentMap();\n        /** Whether this aggregator was frozen and can no longer be modified */\n        this.frozen = false;\n        this.pendingTargetResponses = objUtils.shallowCopy(pendingTargetResponses);\n    }\n    /** Aggregates a watch change into the current state */\n    WatchChangeAggregator.prototype.add = function (watchChange) {\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        if (watchChange instanceof DocumentWatchChange) {\n            this.addDocumentChange(watchChange);\n        }\n        else if (watchChange instanceof WatchTargetChange) {\n            this.addTargetChange(watchChange);\n        }\n        else if (watchChange instanceof ExistenceFilterChange) {\n            this.addExistenceFilterChange(watchChange);\n        }\n        else {\n            fail('Unknown watch change: ' + watchChange);\n        }\n    };\n    /** Aggregates all provided watch changes to the current state in order */\n    WatchChangeAggregator.prototype.addChanges = function (watchChanges) {\n        var _this = this;\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        watchChanges.forEach(function (change) { return _this.add(change); });\n    };\n    /**\n     * Converts the current state into a remote event with the snapshot version\n     * provided via the constructor.\n     */\n    WatchChangeAggregator.prototype.createRemoteEvent = function () {\n        var _this = this;\n        var targetChanges = this.targetChanges;\n        // Remove all the non-active targets from the remote event.\n        objUtils.forEachNumber(this.targetChanges, function (targetId) {\n            if (!_this.isActiveTarget(targetId)) {\n                delete targetChanges[targetId];\n            }\n        });\n        // Mark this aggregator as frozen so no further modifications are made\n        this.frozen = true;\n        return new RemoteEvent(this.snapshotVersion, targetChanges, this.documentUpdates);\n    };\n    WatchChangeAggregator.prototype.ensureTargetChange = function (targetId) {\n        var change = this.targetChanges[targetId];\n        if (!change) {\n            // Create an UpdateMapping by default, since resets are always explicit.\n            change = {\n                currentStatusUpdate: CurrentStatusUpdate.None,\n                snapshotVersion: this.snapshotVersion,\n                mapping: new UpdateMapping(),\n                resumeToken: emptyByteString()\n            };\n            this.targetChanges[targetId] = change;\n        }\n        return change;\n    };\n    /**\n     * We need to wait for watch to ack targets before we process those events,\n     * so to know if a target is active, there must be no pending acks we're\n     * waiting for and it must be in the current list of targets that the client\n     * cares about.\n     *\n     * This method is visible for testing.\n     */\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n        return (!objUtils.contains(this.pendingTargetResponses, targetId) &&\n            objUtils.contains(this.listenTargets, targetId));\n    };\n    WatchChangeAggregator.prototype.addDocumentChange = function (docChange) {\n        var relevant = false;\n        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {\n            var targetId = _a[_i];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.add(docChange.key);\n                relevant = true;\n            }\n        }\n        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {\n            var targetId = _c[_b];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.delete(docChange.key);\n                relevant = true;\n            }\n        }\n        // Only update the document if there is a new document to replace to an\n        // active target that is being listened to, this might be just a target\n        // update instead.\n        if (docChange.newDoc && relevant) {\n            this.documentUpdates = this.documentUpdates.insert(docChange.key, docChange.newDoc);\n        }\n    };\n    WatchChangeAggregator.prototype.addTargetChange = function (targetChange) {\n        var _this = this;\n        targetChange.targetIds.forEach(function (targetId) {\n            var change = _this.ensureTargetChange(targetId);\n            switch (targetChange.state) {\n                case WatchTargetChangeState.NoChange:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Creating the change above satisfies the semantics of no-change.\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Added:\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    if (!objUtils.contains(_this.pendingTargetResponses, targetId)) {\n                        // We have a freshly added target, so we need to reset any state\n                        // that we had previously This can happen e.g. when remove and add\n                        // back a target for existence filter mismatches.\n                        change.mapping = new UpdateMapping();\n                        change.currentStatusUpdate = CurrentStatusUpdate.None;\n                        delete _this.existenceFilters[targetId];\n                    }\n                    applyResumeToken(change, targetChange.resumeToken);\n                    break;\n                case WatchTargetChangeState.Removed:\n                    // We need to keep track of removed targets to we can\n                    // post-filter and remove any target changes.\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');\n                    break;\n                case WatchTargetChangeState.Current:\n                    if (_this.isActiveTarget(targetId)) {\n                        change.currentStatusUpdate = CurrentStatusUpdate.MarkCurrent;\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Reset:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Overwrite any existing target mapping with a reset\n                        // mapping. Every subsequent update will modify the reset\n                        // mapping, not an update mapping.\n                        change.mapping = new ResetMapping();\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                default:\n                    fail('Unknown target watch change state: ' + targetChange.state);\n            }\n        });\n    };\n    /**\n     * Record that we get a watch target add/remove by decrementing the number of\n     * pending target responses that we have.\n     */\n    WatchChangeAggregator.prototype.recordTargetResponse = function (targetId) {\n        var newCount = (this.pendingTargetResponses[targetId] || 0) - 1;\n        if (newCount === 0) {\n            delete this.pendingTargetResponses[targetId];\n        }\n        else {\n            this.pendingTargetResponses[targetId] = newCount;\n        }\n    };\n    WatchChangeAggregator.prototype.addExistenceFilterChange = function (change) {\n        if (this.isActiveTarget(change.targetId)) {\n            this.existenceFilters[change.targetId] = change.existenceFilter;\n        }\n    };\n    return WatchChangeAggregator;\n}());\nexport { WatchChangeAggregator };\n/**\n * Applies the resume token to the TargetChange, but only when it has a new\n * value. null and empty resumeTokens are discarded.\n */\nfunction applyResumeToken(change, resumeToken) {\n    if (resumeToken.length > 0) {\n        change.resumeToken = resumeToken;\n    }\n}\n\n//# sourceMappingURL=watch_change.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/watch_change.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Blob } from '../api/blob';\nimport { GeoPoint } from '../api/geo_point';\nimport { DatabaseId } from '../core/database_info';\nimport { Bound, Direction, NanFilter, NullFilter, OrderBy, Query, RelationFilter, RelationOp } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { QueryPurpose } from '../local/query_data';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport * as fieldValue from '../model/field_value';\nimport { DeleteMutation, FieldMask, FieldTransform, MutationResult, PatchMutation, Precondition, ServerTimestampTransform, SetMutation, TransformMutation } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as obj from '../util/obj';\nimport * as typeUtils from '../util/types';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode, mapRpcCodeFromCode } from './rpc_error';\nimport { DocumentWatchChange, ExistenceFilterChange, WatchTargetChange, WatchTargetChangeState } from './watch_change';\nvar DIRECTIONS = (function () {\n    var dirs = {};\n    dirs[Direction.ASCENDING.name] = 'ASCENDING';\n    dirs[Direction.DESCENDING.name] = 'DESCENDING';\n    return dirs;\n})();\nvar OPERATORS = (function () {\n    var ops = {};\n    ops[RelationOp.LESS_THAN.name] = 'LESS_THAN';\n    ops[RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n    ops[RelationOp.GREATER_THAN.name] = 'GREATER_THAN';\n    ops[RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n    ops[RelationOp.EQUAL.name] = 'EQUAL';\n    return ops;\n})();\nfunction assertPresent(value, description) {\n    assert(!typeUtils.isNullOrUndefined(value), description + ' is missing');\n}\nfunction parseInt64(value) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    if (typeof value === 'number') {\n        return value;\n    }\n    else if (typeof value === 'string') {\n        return parseInt(value, 10);\n    }\n    else {\n        return fail(\"can't parse \" + value);\n    }\n}\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar JsonProtoSerializer = /** @class */ (function () {\n    function JsonProtoSerializer(databaseId, options) {\n        this.databaseId = databaseId;\n        this.options = options;\n    }\n    JsonProtoSerializer.prototype.emptyByteString = function () {\n        if (this.options.useProto3Json) {\n            return '';\n        }\n        else {\n            return new Uint8Array(0);\n        }\n    };\n    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {\n        // byteStrings can be either string or UInt8Array, but the typings say\n        // it's always a string. Cast as string to avoid type check failing\n        return byteString;\n    };\n    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {\n        var code = status.code === undefined\n            ? Code.UNKNOWN\n            : mapCodeFromRpcCode(status.code);\n        return new FirestoreError(code, status.message || '');\n    };\n    /**\n     * Returns a value for a number (or undefined) that's appropriate to put into\n     * a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be. But GRPC actually\n     * expects a { value: <number> } struct.\n     */\n    JsonProtoSerializer.prototype.toInt32Value = function (val) {\n        if (!typeUtils.isNullOrUndefined(val)) {\n            return { value: val };\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Returns a number (or null) from a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as accepting \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be, but it actually\n     * accepts { value: number } to match our serialization in toInt32Value().\n     */\n    JsonProtoSerializer.prototype.fromInt32Value = function (val) {\n        var result;\n        if (typeof val === 'object') {\n            result = val.value;\n        }\n        else {\n            // We accept raw numbers (without the {value: ... } wrapper) for\n            // compatibility with legacy persisted data.\n            result = val;\n        }\n        return typeUtils.isNullOrUndefined(result) ? null : result;\n    };\n    /**\n     * Returns a value for a Date that's appropriate to put into a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say dates must be. But it's easier and safer\n     * to actually return a Timestamp proto.\n     */\n    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {\n        return {\n            seconds: timestamp.seconds,\n            nanos: timestamp.nanos\n            // tslint:disable-next-line:no-any\n        };\n    };\n    JsonProtoSerializer.prototype.fromTimestamp = function (date) {\n        // The json interface (for the browser) will return an iso timestamp string,\n        // while the proto js library (for node) will return a\n        // google.protobuf.Timestamp instance.\n        if (typeof date === 'string') {\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(this.options.useProto3Json,\n            //   'The timestamp string format requires Proto3.');\n            return Timestamp.fromISOString(date);\n        }\n        else {\n            assert(!!date, 'Cannot deserialize null or undefined timestamp.');\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(!this.options.useProto3Json,\n            //   'The timestamp instance format requires Proto JS.');\n            var seconds = parseInt64(date.seconds || '0');\n            var nanos = date.nanos || 0;\n            return new Timestamp(seconds, nanos);\n        }\n    };\n    /**\n     * Returns a value for bytes that's appropriate to put in a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say bytes must be. But it should return\n     * an Uint8Array in Node.\n     */\n    JsonProtoSerializer.prototype.toBytes = function (bytes) {\n        if (this.options.useProto3Json) {\n            return bytes.toBase64();\n        }\n        else {\n            // The typings say it's a string, but it needs to be a Uint8Array in Node.\n            return this.unsafeCastProtoByteString(bytes.toUint8Array());\n        }\n    };\n    /**\n     * Parse the blob from the protos into the internal Blob class. Note that the\n     * typings assume all blobs are strings, but they are actually Uint8Arrays\n     * on Node.\n     */\n    JsonProtoSerializer.prototype.fromBlob = function (blob) {\n        if (typeof blob === 'string') {\n            assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');\n            return Blob.fromBase64String(blob);\n        }\n        else {\n            assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');\n            return Blob.fromUint8Array(blob);\n        }\n    };\n    JsonProtoSerializer.prototype.toVersion = function (version) {\n        return this.toTimestamp(version.toTimestamp());\n    };\n    JsonProtoSerializer.prototype.fromVersion = function (version) {\n        assert(!!version, \"Trying to deserialize version that isn't set\");\n        return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n    };\n    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {\n        return this.fullyQualifiedPrefixPath(databaseId)\n            .child('documents')\n            .child(path)\n            .canonicalString();\n    };\n    JsonProtoSerializer.prototype.fromResourceName = function (name) {\n        var resource = ResourcePath.fromString(name);\n        assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());\n        return resource;\n    };\n    JsonProtoSerializer.prototype.toName = function (key) {\n        return this.toResourceName(this.databaseId, key.path);\n    };\n    JsonProtoSerializer.prototype.fromName = function (name) {\n        var resource = this.fromResourceName(name);\n        assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +\n            resource.get(1) +\n            ' vs ' +\n            this.databaseId.projectId);\n        assert((!resource.get(3) && !this.databaseId.database) ||\n            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +\n            resource.get(3) +\n            ' vs ' +\n            this.databaseId.database);\n        return new DocumentKey(this.extractLocalPathFromResourceName(resource));\n    };\n    JsonProtoSerializer.prototype.toQueryPath = function (path) {\n        if (path.length === 0) {\n            // If the path is empty, the backend requires we leave off the /documents\n            // at the end.\n            return this.encodedDatabaseId;\n        }\n        return this.toResourceName(this.databaseId, path);\n    };\n    JsonProtoSerializer.prototype.fromQueryPath = function (name) {\n        var resourceName = this.fromResourceName(name);\n        if (resourceName.length === 4) {\n            return ResourcePath.EMPTY_PATH;\n        }\n        return this.extractLocalPathFromResourceName(resourceName);\n    };\n    Object.defineProperty(JsonProtoSerializer.prototype, \"encodedDatabaseId\", {\n        get: function () {\n            var path = new ResourcePath([\n                'projects',\n                this.databaseId.projectId,\n                'databases',\n                this.databaseId.database\n            ]);\n            return path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {\n        return new ResourcePath([\n            'projects',\n            databaseId.projectId,\n            'databases',\n            databaseId.database\n        ]);\n    };\n    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {\n        assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());\n        return resourceName.popFirst(5);\n    };\n    JsonProtoSerializer.prototype.isValidResourceName = function (path) {\n        // Resource names have at least 4 components (project ID, database ID)\n        return (path.length >= 4 &&\n            path.get(0) === 'projects' &&\n            path.get(2) === 'databases');\n    };\n    JsonProtoSerializer.prototype.toValue = function (val) {\n        if (val instanceof fieldValue.NullValue) {\n            return { nullValue: 'NULL_VALUE' };\n        }\n        else if (val instanceof fieldValue.BooleanValue) {\n            return { booleanValue: val.value() };\n        }\n        else if (val instanceof fieldValue.IntegerValue) {\n            return { integerValue: '' + val.value() };\n        }\n        else if (val instanceof fieldValue.DoubleValue) {\n            var doubleValue = val.value();\n            if (this.options.useProto3Json) {\n                // Proto 3 let's us encode NaN and Infinity as string values as\n                // expected by the backend. This is currently not checked by our unit\n                // tests because they rely on protobuf.js.\n                if (isNaN(doubleValue)) {\n                    return { doubleValue: 'NaN' };\n                }\n                else if (doubleValue === Infinity) {\n                    return { doubleValue: 'Infinity' };\n                }\n                else if (doubleValue === -Infinity) {\n                    return { doubleValue: '-Infinity' };\n                }\n            }\n            return { doubleValue: val.value() };\n        }\n        else if (val instanceof fieldValue.StringValue) {\n            return { stringValue: val.value() };\n        }\n        else if (val instanceof fieldValue.ObjectValue) {\n            return { mapValue: this.toMapValue(val) };\n        }\n        else if (val instanceof fieldValue.ArrayValue) {\n            return { arrayValue: this.toArrayValue(val) };\n        }\n        else if (val instanceof fieldValue.TimestampValue) {\n            return {\n                timestampValue: this.toTimestamp(val.internalValue)\n            };\n        }\n        else if (val instanceof fieldValue.GeoPointValue) {\n            return {\n                geoPointValue: {\n                    latitude: val.value().latitude,\n                    longitude: val.value().longitude\n                }\n            };\n        }\n        else if (val instanceof fieldValue.BlobValue) {\n            return {\n                bytesValue: this.toBytes(val.value())\n            };\n        }\n        else if (val instanceof fieldValue.RefValue) {\n            return {\n                referenceValue: this.toResourceName(val.databaseId, val.key.path)\n            };\n        }\n        else {\n            return fail('Unknown FieldValue ' + JSON.stringify(val));\n        }\n    };\n    JsonProtoSerializer.prototype.fromValue = function (obj) {\n        var _this = this;\n        // tslint:disable-next-line:no-any\n        var type = obj['value_type'];\n        if (hasTag(obj, type, 'nullValue')) {\n            return fieldValue.NullValue.INSTANCE;\n        }\n        else if (hasTag(obj, type, 'booleanValue')) {\n            return fieldValue.BooleanValue.of(obj.booleanValue);\n        }\n        else if (hasTag(obj, type, 'integerValue')) {\n            return new fieldValue.IntegerValue(parseInt64(obj.integerValue));\n        }\n        else if (hasTag(obj, type, 'doubleValue')) {\n            if (this.options.useProto3Json) {\n                // Proto 3 uses the string values 'NaN' and 'Infinity'.\n                if (obj.doubleValue === 'NaN') {\n                    return fieldValue.DoubleValue.NAN;\n                }\n                else if (obj.doubleValue === 'Infinity') {\n                    return fieldValue.DoubleValue.POSITIVE_INFINITY;\n                }\n                else if (obj.doubleValue === '-Infinity') {\n                    return fieldValue.DoubleValue.NEGATIVE_INFINITY;\n                }\n            }\n            return new fieldValue.DoubleValue(obj.doubleValue);\n        }\n        else if (hasTag(obj, type, 'stringValue')) {\n            return new fieldValue.StringValue(obj.stringValue);\n        }\n        else if (hasTag(obj, type, 'mapValue')) {\n            return this.fromFields(obj.mapValue.fields || {});\n        }\n        else if (hasTag(obj, type, 'arrayValue')) {\n            // \"values\" is not present if the array is empty\n            assertPresent(obj.arrayValue, 'arrayValue');\n            var values = obj.arrayValue.values || [];\n            return new fieldValue.ArrayValue(values.map(function (v) { return _this.fromValue(v); }));\n        }\n        else if (hasTag(obj, type, 'timestampValue')) {\n            assertPresent(obj.timestampValue, 'timestampValue');\n            return new fieldValue.TimestampValue(this.fromTimestamp(obj.timestampValue));\n        }\n        else if (hasTag(obj, type, 'geoPointValue')) {\n            assertPresent(obj.geoPointValue, 'geoPointValue');\n            var latitude = obj.geoPointValue.latitude || 0;\n            var longitude = obj.geoPointValue.longitude || 0;\n            return new fieldValue.GeoPointValue(new GeoPoint(latitude, longitude));\n        }\n        else if (hasTag(obj, type, 'bytesValue')) {\n            assertPresent(obj.bytesValue, 'bytesValue');\n            var blob = this.fromBlob(obj.bytesValue);\n            return new fieldValue.BlobValue(blob);\n        }\n        else if (hasTag(obj, type, 'referenceValue')) {\n            assertPresent(obj.referenceValue, 'referenceValue');\n            var resourceName = this.fromResourceName(obj.referenceValue);\n            var dbId = new DatabaseId(resourceName.get(1), resourceName.get(3));\n            var key = new DocumentKey(this.extractLocalPathFromResourceName(resourceName));\n            return new fieldValue.RefValue(dbId, key);\n        }\n        else {\n            return fail('Unknown Value proto ' + JSON.stringify(obj));\n        }\n    };\n    /** Creates an api.Document from key and fields (but no create/update time) */\n    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {\n        return {\n            name: this.toName(key),\n            fields: this.toFields(fields)\n        };\n    };\n    JsonProtoSerializer.prototype.toDocument = function (document) {\n        assert(!document.hasLocalMutations, \"Can't serialize documents with mutations.\");\n        return {\n            name: this.toName(document.key),\n            fields: this.toFields(document.data),\n            updateTime: this.toTimestamp(document.version.toTimestamp())\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocument = function (document) {\n        return new Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.toFields = function (fields) {\n        var _this = this;\n        var result = {};\n        fields.forEach(function (key, value) {\n            result[key] = _this.toValue(value);\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromFields = function (object) {\n        var _this = this;\n        // Proto map<string, Value> gets mapped to Object, so cast it.\n        var map = object;\n        var result = fieldValue.ObjectValue.EMPTY;\n        obj.forEach(map, function (key, value) {\n            result = result.set(new FieldPath([key]), _this.fromValue(value));\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.toMapValue = function (map) {\n        return {\n            fields: this.toFields(map)\n        };\n    };\n    JsonProtoSerializer.prototype.toArrayValue = function (array) {\n        var _this = this;\n        var result = [];\n        array.forEach(function (value) {\n            result.push(_this.toValue(value));\n        });\n        return { values: result };\n    };\n    JsonProtoSerializer.prototype.fromFound = function (doc) {\n        assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');\n        assertPresent(doc.found.name, 'doc.found.name');\n        assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n        var key = this.fromName(doc.found.name);\n        var version = this.fromVersion(doc.found.updateTime);\n        var fields = this.fromFields(doc.found.fields || {});\n        return new Document(key, version, fields, { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.fromMissing = function (result) {\n        assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');\n        assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');\n        var key = this.fromName(result.missing);\n        var version = this.fromVersion(result.readTime);\n        return new NoDocument(key, version);\n    };\n    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {\n        // tslint:disable-next-line:no-any\n        var type = result['result'];\n        if (hasTag(result, type, 'found')) {\n            return this.fromFound(result);\n        }\n        else if (hasTag(result, type, 'missing')) {\n            return this.fromMissing(result);\n        }\n        return fail('invalid batch get response: ' + JSON.stringify(result));\n    };\n    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {\n        switch (state) {\n            case WatchTargetChangeState.Added:\n                return 'ADD';\n            case WatchTargetChangeState.Current:\n                return 'CURRENT';\n            case WatchTargetChangeState.NoChange:\n                return 'NO_CHANGE';\n            case WatchTargetChangeState.Removed:\n                return 'REMOVE';\n            case WatchTargetChangeState.Reset:\n                return 'RESET';\n            default:\n                return fail('Unknown WatchTargetChangeState: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {\n        if (watchChange instanceof ExistenceFilterChange) {\n            return {\n                filter: {\n                    count: watchChange.existenceFilter.count,\n                    targetId: watchChange.targetId\n                }\n            };\n        }\n        if (watchChange instanceof DocumentWatchChange) {\n            if (watchChange.newDoc instanceof Document) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentChange: {\n                        document: {\n                            name: this.toName(doc.key),\n                            fields: this.toFields(doc.data),\n                            updateTime: this.toVersion(doc.version)\n                        },\n                        targetIds: watchChange.updatedTargetIds,\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc instanceof NoDocument) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentDelete: {\n                        document: this.toName(doc.key),\n                        readTime: this.toVersion(doc.version),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc === null) {\n                return {\n                    documentRemove: {\n                        document: this.toName(watchChange.key),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n        }\n        if (watchChange instanceof WatchTargetChange) {\n            var cause = undefined;\n            if (watchChange.cause) {\n                cause = {\n                    code: mapRpcCodeFromCode(watchChange.cause.code),\n                    message: watchChange.cause.message\n                };\n            }\n            return {\n                targetChange: {\n                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n                    targetIds: watchChange.targetIds,\n                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n                    cause: cause\n                }\n            };\n        }\n        return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));\n    };\n    JsonProtoSerializer.prototype.fromWatchChange = function (change) {\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        var watchChange;\n        if (hasTag(change, type, 'targetChange')) {\n            assertPresent(change.targetChange, 'targetChange');\n            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n            // if unset\n            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n            var targetIds = change.targetChange.targetIds || [];\n            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();\n            var causeProto = change.targetChange.cause;\n            var cause = causeProto && this.fromRpcStatus(causeProto);\n            watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);\n        }\n        else if (hasTag(change, type, 'documentChange')) {\n            assertPresent(change.documentChange, 'documentChange');\n            assertPresent(change.documentChange.document, 'documentChange.name');\n            assertPresent(change.documentChange.document.name, 'documentChange.document.name');\n            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');\n            var entityChange = change.documentChange;\n            var key = this.fromName(entityChange.document.name);\n            var version = this.fromVersion(entityChange.document.updateTime);\n            var fields = this.fromFields(entityChange.document.fields || {});\n            var doc = new Document(key, version, fields, {\n                hasLocalMutations: false\n            });\n            var updatedTargetIds = entityChange.targetIds || [];\n            var removedTargetIds = entityChange.removedTargetIds || [];\n            watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentDelete')) {\n            assertPresent(change.documentDelete, 'documentDelete');\n            assertPresent(change.documentDelete.document, 'documentDelete.document');\n            var docDelete = change.documentDelete;\n            var key = this.fromName(docDelete.document);\n            var version = docDelete.readTime\n                ? this.fromVersion(docDelete.readTime)\n                : SnapshotVersion.forDeletedDoc();\n            var doc = new NoDocument(key, version);\n            var removedTargetIds = docDelete.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentRemove')) {\n            assertPresent(change.documentRemove, 'documentRemove');\n            assertPresent(change.documentRemove.document, 'documentRemove');\n            var docRemove = change.documentRemove;\n            var key = this.fromName(docRemove.document);\n            var removedTargetIds = docRemove.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n        }\n        else if (hasTag(change, type, 'filter')) {\n            // TODO(dimond): implement existence filter parsing with strategy.\n            assertPresent(change.filter, 'filter');\n            assertPresent(change.filter.targetId, 'filter.targetId');\n            var filter = change.filter;\n            var count = filter.count || 0;\n            var existenceFilter = new ExistenceFilter(count);\n            var targetId = filter.targetId;\n            watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n        }\n        else {\n            return fail('Unknown change type ' + JSON.stringify(change));\n        }\n        return watchChange;\n    };\n    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {\n        if (state === 'NO_CHANGE') {\n            return WatchTargetChangeState.NoChange;\n        }\n        else if (state === 'ADD') {\n            return WatchTargetChangeState.Added;\n        }\n        else if (state === 'REMOVE') {\n            return WatchTargetChangeState.Removed;\n        }\n        else if (state === 'CURRENT') {\n            return WatchTargetChangeState.Current;\n        }\n        else if (state === 'RESET') {\n            return WatchTargetChangeState.Reset;\n        }\n        else {\n            return fail('Got unexpected TargetChange.state: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {\n        // We have only reached a consistent snapshot for the entire stream if there\n        // is a read_time set and it applies to all targets (i.e. the list of\n        // targets is empty). The backend is guaranteed to send such responses.\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        if (!hasTag(change, type, 'targetChange')) {\n            return SnapshotVersion.MIN;\n        }\n        var targetChange = change.targetChange;\n        if (targetChange.targetIds && targetChange.targetIds.length) {\n            return SnapshotVersion.MIN;\n        }\n        if (!targetChange.readTime) {\n            return SnapshotVersion.MIN;\n        }\n        return this.fromVersion(targetChange.readTime);\n    };\n    JsonProtoSerializer.prototype.toMutation = function (mutation) {\n        var _this = this;\n        var result;\n        if (mutation instanceof SetMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.value)\n            };\n        }\n        else if (mutation instanceof DeleteMutation) {\n            result = { delete: this.toName(mutation.key) };\n        }\n        else if (mutation instanceof PatchMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.data),\n                updateMask: this.toDocumentMask(mutation.fieldMask)\n            };\n        }\n        else if (mutation instanceof TransformMutation) {\n            result = {\n                transform: {\n                    document: this.toName(mutation.key),\n                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {\n                        return _this.toFieldTransform(transform);\n                    })\n                }\n            };\n        }\n        else {\n            return fail('Unknown mutation type ' + mutation.type);\n        }\n        if (!mutation.precondition.isNone) {\n            result.currentDocument = this.toPrecondition(mutation.precondition);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromMutation = function (proto) {\n        var _this = this;\n        var precondition = proto.currentDocument\n            ? this.fromPrecondition(proto.currentDocument)\n            : Precondition.NONE;\n        if (proto.update) {\n            assertPresent(proto.update.name, 'name');\n            var key = this.fromName(proto.update.name);\n            var value = this.fromFields(proto.update.fields || {});\n            if (proto.updateMask) {\n                var fieldMask = this.fromDocumentMask(proto.updateMask);\n                return new PatchMutation(key, value, fieldMask, precondition);\n            }\n            else {\n                return new SetMutation(key, value, precondition);\n            }\n        }\n        else if (proto.delete) {\n            var key = this.fromName(proto.delete);\n            return new DeleteMutation(key, precondition);\n        }\n        else if (proto.transform) {\n            var key = this.fromName(proto.transform.document);\n            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {\n                return _this.fromFieldTransform(transform);\n            });\n            assert(precondition.exists === true, 'Transforms only support precondition \"exists == true\"');\n            return new TransformMutation(key, fieldTransforms);\n        }\n        else {\n            return fail('unknown mutation proto: ' + JSON.stringify(proto));\n        }\n    };\n    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {\n        assert(!precondition.isNone, \"Can't serialize an empty precondition\");\n        if (precondition.updateTime !== undefined) {\n            return {\n                updateTime: this.toVersion(precondition.updateTime)\n            };\n        }\n        else if (precondition.exists !== undefined) {\n            return { exists: precondition.exists };\n        }\n        else {\n            return fail('Unknown precondition');\n        }\n    };\n    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {\n        if (precondition.updateTime !== undefined) {\n            return Precondition.updateTime(this.fromVersion(precondition.updateTime));\n        }\n        else if (precondition.exists !== undefined) {\n            return Precondition.exists(precondition.exists);\n        }\n        else {\n            return Precondition.NONE;\n        }\n    };\n    JsonProtoSerializer.prototype.fromWriteResult = function (proto) {\n        var _this = this;\n        // NOTE: Deletes don't have an updateTime.\n        var version = proto.updateTime\n            ? this.fromVersion(proto.updateTime)\n            : null;\n        var transformResults = null;\n        if (proto.transformResults && proto.transformResults.length > 0) {\n            transformResults = proto.transformResults.map(function (result) {\n                return _this.fromValue(result);\n            });\n        }\n        return new MutationResult(version, transformResults);\n    };\n    JsonProtoSerializer.prototype.fromWriteResults = function (protos) {\n        var _this = this;\n        return (protos || []).map(function (proto) { return _this.fromWriteResult(proto); });\n    };\n    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {\n        assert(fieldTransform.transform instanceof ServerTimestampTransform, 'Unknown transform: ' + fieldTransform.transform);\n        return {\n            fieldPath: fieldTransform.field.canonicalString(),\n            setToServerValue: 'REQUEST_TIME'\n        };\n    };\n    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {\n        assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown transform proto: ' + JSON.stringify(proto));\n        var fieldPath = FieldPath.fromServerFormat(proto.fieldPath);\n        return new FieldTransform(fieldPath, ServerTimestampTransform.instance);\n    };\n    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {\n        return { documents: [this.toQueryPath(query.path)] };\n    };\n    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {\n        var count = documentsTarget.documents.length;\n        assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);\n        var name = documentsTarget.documents[0];\n        return Query.atPath(this.fromQueryPath(name));\n    };\n    JsonProtoSerializer.prototype.toQueryTarget = function (query) {\n        // Dissect the path into parent, collectionId, and optional key filter.\n        var result = { structuredQuery: {} };\n        if (query.path.isEmpty()) {\n            result.parent = this.toQueryPath(ResourcePath.EMPTY_PATH);\n        }\n        else {\n            var path = query.path;\n            assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');\n            result.parent = this.toQueryPath(path.popLast());\n            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\n        }\n        var where = this.toFilter(query.filters);\n        if (where) {\n            result.structuredQuery.where = where;\n        }\n        var orderBy = this.toOrder(query.orderBy);\n        if (orderBy) {\n            result.structuredQuery.orderBy = orderBy;\n        }\n        var limit = this.toInt32Value(query.limit);\n        if (limit !== undefined) {\n            result.structuredQuery.limit = limit;\n        }\n        if (query.startAt) {\n            result.structuredQuery.startAt = this.toCursor(query.startAt);\n        }\n        if (query.endAt) {\n            result.structuredQuery.endAt = this.toCursor(query.endAt);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {\n        var path = this.fromQueryPath(target.parent);\n        var query = target.structuredQuery;\n        var fromCount = query.from ? query.from.length : 0;\n        if (fromCount > 0) {\n            assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');\n            var from = query.from[0];\n            path = path.child(from.collectionId);\n        }\n        var filterBy = [];\n        if (query.where) {\n            filterBy = this.fromFilter(query.where);\n        }\n        var orderBy = [];\n        if (query.orderBy) {\n            orderBy = this.fromOrder(query.orderBy);\n        }\n        var limit = null;\n        if (query.limit) {\n            limit = this.fromInt32Value(query.limit);\n        }\n        var startAt = null;\n        if (query.startAt) {\n            startAt = this.fromCursor(query.startAt);\n        }\n        var endAt = null;\n        if (query.endAt) {\n            endAt = this.fromCursor(query.endAt);\n        }\n        return new Query(path, orderBy, filterBy, limit, startAt, endAt);\n    };\n    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {\n        var value = this.toLabel(queryData.purpose);\n        if (value == null) {\n            return null;\n        }\n        else {\n            return {\n                'goog-listen-tags': value\n            };\n        }\n    };\n    JsonProtoSerializer.prototype.toLabel = function (purpose) {\n        switch (purpose) {\n            case QueryPurpose.Listen:\n                return null;\n            case QueryPurpose.ExistenceFilterMismatch:\n                return 'existence-filter-mismatch';\n            case QueryPurpose.LimboResolution:\n                return 'limbo-document';\n            default:\n                return fail('Unrecognized query purpose: ' + purpose);\n        }\n    };\n    JsonProtoSerializer.prototype.toTarget = function (queryData) {\n        var result;\n        var query = queryData.query;\n        if (query.isDocumentQuery()) {\n            result = { documents: this.toDocumentsTarget(query) };\n        }\n        else {\n            result = { query: this.toQueryTarget(query) };\n        }\n        result.targetId = queryData.targetId;\n        if (queryData.resumeToken.length > 0) {\n            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.toFilter = function (filters) {\n        var _this = this;\n        if (filters.length === 0)\n            return;\n        var protos = filters.map(function (filter) {\n            return filter instanceof RelationFilter\n                ? _this.toRelationFilter(filter)\n                : _this.toUnaryFilter(filter);\n        });\n        if (protos.length === 1) {\n            return protos[0];\n        }\n        return { compositeFilter: { op: 'AND', filters: protos } };\n    };\n    JsonProtoSerializer.prototype.fromFilter = function (filter) {\n        var _this = this;\n        if (!filter) {\n            return [];\n        }\n        else if (filter.unaryFilter !== undefined) {\n            return [this.fromUnaryFilter(filter)];\n        }\n        else if (filter.fieldFilter !== undefined) {\n            return [this.fromRelationFilter(filter)];\n        }\n        else if (filter.compositeFilter !== undefined) {\n            return filter.compositeFilter.filters\n                .map(function (f) { return _this.fromFilter(f); })\n                .reduce(function (accum, current) { return accum.concat(current); });\n        }\n        else {\n            return fail('Unknown filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.toOrder = function (orderBys) {\n        var _this = this;\n        if (orderBys.length === 0)\n            return;\n        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {\n        var _this = this;\n        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.toCursor = function (cursor) {\n        var _this = this;\n        return {\n            before: cursor.before,\n            values: cursor.position.map(function (component) { return _this.toValue(component); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromCursor = function (cursor) {\n        var _this = this;\n        var before = !!cursor.before;\n        var position = cursor.values.map(function (component) { return _this.fromValue(component); });\n        return new Bound(position, before);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toDirection = function (dir) {\n        return DIRECTIONS[dir.name];\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.fromDirection = function (dir) {\n        switch (dir) {\n            case 'ASCENDING':\n                return Direction.ASCENDING;\n            case 'DESCENDING':\n                return Direction.DESCENDING;\n            default:\n                return undefined;\n        }\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toOperatorName = function (op) {\n        return OPERATORS[op.name];\n    };\n    JsonProtoSerializer.prototype.fromOperatorName = function (op) {\n        switch (op) {\n            case 'EQUAL':\n                return RelationOp.EQUAL;\n            case 'GREATER_THAN':\n                return RelationOp.GREATER_THAN;\n            case 'GREATER_THAN_OR_EQUAL':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case 'LESS_THAN':\n                return RelationOp.LESS_THAN;\n            case 'LESS_THAN_OR_EQUAL':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified relation');\n            default:\n                return fail('Unknown relation');\n        }\n    };\n    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {\n        return { fieldPath: path.canonicalString() };\n    };\n    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {\n        return FieldPath.fromServerFormat(fieldReference.fieldPath);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {\n        return {\n            field: this.toFieldPathReference(orderBy.field),\n            direction: this.toDirection(orderBy.dir)\n        };\n    };\n    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {\n        return new OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {\n        if (filter instanceof RelationFilter) {\n            return {\n                fieldFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: this.toOperatorName(filter.op),\n                    value: this.toValue(filter.value)\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {\n        return new RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {\n        if (filter instanceof NanFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NAN'\n                }\n            };\n        }\n        else if (filter instanceof NullFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NULL'\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {\n        switch (filter.unaryFilter.op) {\n            case 'IS_NAN':\n                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NanFilter(nanField);\n            case 'IS_NULL':\n                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NullFilter(nullField);\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified filter');\n            default:\n                return fail('Unknown filter');\n        }\n    };\n    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {\n        return {\n            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {\n        var paths = proto.fieldPaths || [];\n        var fields = paths.map(function (path) { return FieldPath.fromServerFormat(path); });\n        return new FieldMask(fields);\n    };\n    return JsonProtoSerializer;\n}());\nexport { JsonProtoSerializer };\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj, type, tag) {\n    return type === tag || (!type && tag in obj);\n}\n\n//# sourceMappingURL=serializer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/serializer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateNamedArrayAtLeastNumberOfElements } from '../util/input_validation';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            validateArgType('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new InternalFieldPath(fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(InternalFieldPath.keyField().canonicalString());\n    return FieldPath;\n}());\nexport { FieldPath };\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (FieldPath.bind.apply(FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n//# sourceMappingURL=field_path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/field_path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { Document } from '../model/document';\nimport { DocumentSet } from '../model/document_set';\nimport { CurrentStatusUpdate, ResetMapping, UpdateMapping } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport { ChangeType, DocumentChangeSet, SyncState } from './view_snapshot';\nvar AddedLimboDocument = /** @class */ (function () {\n    function AddedLimboDocument(key) {\n        this.key = key;\n    }\n    return AddedLimboDocument;\n}());\nexport { AddedLimboDocument };\nvar RemovedLimboDocument = /** @class */ (function () {\n    function RemovedLimboDocument(key) {\n        this.key = key;\n    }\n    return RemovedLimboDocument;\n}());\nexport { RemovedLimboDocument };\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nvar View = /** @class */ (function () {\n    function View(query, \n        /** Documents included in the remote target */\n        syncedDocuments) {\n        this.query = query;\n        this.syncedDocuments = syncedDocuments;\n        this.syncState = null;\n        /**\n         * A flag whether the view is current with the backend. A view is considered\n         * current after it has seen the current flag from the backend and did not\n         * lose consistency within the watch stream (e.g. because of an existence\n         * filter mismatch).\n         */\n        this.current = false;\n        /** Documents in the view but not in the remote target */\n        this.limboDocuments = documentKeySet();\n        /** Document Keys that have local changes */\n        this.mutatedKeys = documentKeySet();\n        this.documentSet = new DocumentSet(query.docComparator.bind(query));\n    }\n    /**\n     * Iterates over a set of doc changes, applies the query limit, and computes\n     * what the new results should be, what the changes were, and whether we may\n     * need to go back to the local cache for more results. Does not make any\n     * changes to the view.\n     * @param docChanges The doc changes to apply to this view.\n     * @param previousChanges If this is being called with a refill, then start\n     *        with this set of docs and changes instead of the current view.\n     * @return a new set of docs, changes, and refill flag.\n     */\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n        var _this = this;\n        var changeSet = previousChanges\n            ? previousChanges.changeSet\n            : new DocumentChangeSet();\n        var oldDocumentSet = previousChanges\n            ? previousChanges.documentSet\n            : this.documentSet;\n        var newMutatedKeys = previousChanges\n            ? previousChanges.mutatedKeys\n            : this.mutatedKeys;\n        var newDocumentSet = oldDocumentSet;\n        var needsRefill = false;\n        // Track the last doc in a (full) limit. This is necessary, because some\n        // update (a delete, or an update moving a doc past the old limit) might\n        // mean there is some other document in the local cache that either should\n        // come (1) between the old last limit doc and the new last document, in the\n        // case of updates, or (2) after the new last document, in the case of\n        // deletes. So we keep this doc at the old limit to compare the updates to.\n        //\n        // Note that this should never get used in a refill (when previousChanges is\n        // set), because there will only be adds -- no deletes or updates.\n        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit\n            ? oldDocumentSet.last()\n            : null;\n        docChanges.inorderTraversal(function (key, newMaybeDoc) {\n            var oldDoc = oldDocumentSet.get(key);\n            var newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n            if (newDoc) {\n                assert(key.equals(newDoc.key), 'Mismatching keys found in document changes: ' +\n                    key +\n                    ' != ' +\n                    newDoc.key);\n                newDoc = _this.query.matches(newDoc) ? newDoc : null;\n            }\n            if (newDoc) {\n                newDocumentSet = newDocumentSet.add(newDoc);\n                if (newDoc.hasLocalMutations) {\n                    newMutatedKeys = newMutatedKeys.add(key);\n                }\n                else {\n                    newMutatedKeys = newMutatedKeys.delete(key);\n                }\n            }\n            else {\n                newDocumentSet = newDocumentSet.delete(key);\n                newMutatedKeys = newMutatedKeys.delete(key);\n            }\n            // Calculate change\n            if (oldDoc && newDoc) {\n                var docsEqual = oldDoc.data.equals(newDoc.data);\n                if (!docsEqual ||\n                    oldDoc.hasLocalMutations !== newDoc.hasLocalMutations) {\n                    // only report a change if document actually changed\n                    if (docsEqual) {\n                        changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n                    }\n                    else {\n                        changeSet.track({ type: ChangeType.Modified, doc: newDoc });\n                    }\n                    if (lastDocInLimit &&\n                        _this.query.docComparator(newDoc, lastDocInLimit) > 0) {\n                        // This doc moved from inside the limit to after the limit.\n                        // That means there may be some doc in the local cache that's\n                        // actually less than this one.\n                        needsRefill = true;\n                    }\n                }\n            }\n            else if (!oldDoc && newDoc) {\n                changeSet.track({ type: ChangeType.Added, doc: newDoc });\n            }\n            else if (oldDoc && !newDoc) {\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n                if (lastDocInLimit) {\n                    // A doc was removed from a full limit query. We'll need to\n                    // requery from the local cache to see if we know about some other\n                    // doc that should be in the results.\n                    needsRefill = true;\n                }\n            }\n        });\n        if (this.query.hasLimit()) {\n            // TODO(klimt): Make DocumentSet size be constant time.\n            while (newDocumentSet.size > this.query.limit) {\n                var oldDoc = newDocumentSet.last();\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n            }\n        }\n        assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');\n        return {\n            documentSet: newDocumentSet,\n            changeSet: changeSet,\n            needsRefill: needsRefill,\n            mutatedKeys: newMutatedKeys\n        };\n    };\n    /**\n     * Updates the view with the given ViewDocumentChanges and updates limbo docs\n     * and sync state from the given (optional) target change.\n     * @param docChanges The set of changes to make to the view's docs.\n     * @param targetChange A target change to apply for computing limbo docs and\n     *        sync state.\n     * @return A new ViewChange with the given docs, changes, and sync state.\n     */\n    View.prototype.applyChanges = function (docChanges, targetChange) {\n        var _this = this;\n        assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');\n        var oldDocs = this.documentSet;\n        this.documentSet = docChanges.documentSet;\n        this.mutatedKeys = docChanges.mutatedKeys;\n        // Sort changes based on type and query comparator\n        var changes = docChanges.changeSet.getChanges();\n        changes.sort(function (c1, c2) {\n            return (compareChangeType(c1.type, c2.type) ||\n                _this.query.docComparator(c1.doc, c2.doc));\n        });\n        var limboChanges = this.applyTargetChange(targetChange);\n        var synced = this.limboDocuments.size === 0 && this.current;\n        var newSyncState = synced ? SyncState.Synced : SyncState.Local;\n        var syncStateChanged = newSyncState !== this.syncState;\n        this.syncState = newSyncState;\n        if (changes.length === 0 && !syncStateChanged) {\n            // no changes\n            return { limboChanges: limboChanges };\n        }\n        else {\n            return {\n                snapshot: {\n                    query: this.query,\n                    docs: docChanges.documentSet,\n                    oldDocs: oldDocs,\n                    docChanges: changes,\n                    fromCache: newSyncState === SyncState.Local,\n                    syncStateChanged: syncStateChanged,\n                    hasPendingWrites: !docChanges.mutatedKeys.isEmpty()\n                },\n                limboChanges: limboChanges\n            };\n        }\n    };\n    /**\n     * Returns whether the doc for the given key should be in limbo.\n     */\n    View.prototype.shouldBeInLimbo = function (key) {\n        // If the remote end says it's part of this query, it's not in limbo.\n        if (this.syncedDocuments.has(key)) {\n            return false;\n        }\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\n        if (!this.documentSet.has(key)) {\n            return false;\n        }\n        // If there are local changes to the doc, they might explain why the server\n        // doesn't know that it's part of the query. So don't put it in limbo.\n        // TODO(klimt): Ideally, we would only consider changes that might actually\n        // affect this specific query.\n        if (this.documentSet.get(key).hasLocalMutations) {\n            return false;\n        }\n        // Everything else is in limbo.\n        return true;\n    };\n    /**\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\n     * Returns the list of changes to which docs are in limbo.\n     */\n    View.prototype.applyTargetChange = function (targetChange) {\n        var _this = this;\n        if (targetChange) {\n            var targetMapping = targetChange.mapping;\n            if (targetMapping instanceof ResetMapping) {\n                this.syncedDocuments = targetMapping.documents;\n            }\n            else if (targetMapping instanceof UpdateMapping) {\n                this.syncedDocuments = targetMapping.applyToKeySet(this.syncedDocuments);\n            }\n            switch (targetChange.currentStatusUpdate) {\n                case CurrentStatusUpdate.MarkCurrent:\n                    this.current = true;\n                    break;\n                case CurrentStatusUpdate.MarkNotCurrent:\n                    this.current = false;\n                    break;\n                case CurrentStatusUpdate.None:\n                    break;\n                default:\n                    fail('Unknown current status update: ' + targetChange.currentStatusUpdate);\n            }\n        }\n        // Recompute the set of limbo docs.\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\n        // updating many documents.\n        var oldLimboDocuments = this.limboDocuments;\n        this.limboDocuments = documentKeySet();\n        if (this.current) {\n            this.documentSet.forEach(function (doc) {\n                if (_this.shouldBeInLimbo(doc.key)) {\n                    _this.limboDocuments = _this.limboDocuments.add(doc.key);\n                }\n            });\n        }\n        // Diff the new limbo docs with the old limbo docs.\n        var changes = [];\n        oldLimboDocuments.forEach(function (key) {\n            if (!_this.limboDocuments.has(key)) {\n                changes.push(new RemovedLimboDocument(key));\n            }\n        });\n        this.limboDocuments.forEach(function (key) {\n            if (!oldLimboDocuments.has(key)) {\n                changes.push(new AddedLimboDocument(key));\n            }\n        });\n        return changes;\n    };\n    return View;\n}());\nexport { View };\nfunction compareChangeType(c1, c2) {\n    var order = function (change) {\n        switch (change) {\n            case ChangeType.Added:\n                return 1;\n            case ChangeType.Modified:\n                return 2;\n            case ChangeType.Metadata:\n                // A metadata change is converted to a modified change at the public\n                // api layer.  Since we sort by document key and then change type,\n                // metadata and modified changes must be sorted equivalently.\n                return 2;\n            case ChangeType.Removed:\n                return 0;\n            default:\n                return fail('Unknown ChangeType: ' + change);\n        }\n    };\n    return order(c1) - order(c2);\n}\n\n//# sourceMappingURL=view.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/view.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nexport function encode(path) {\n    var result = '';\n    for (var i = 0; i < path.length; i++) {\n        if (result.length > 0) {\n            result = encodeSeparator(result);\n        }\n        result = encodeSegment(path.get(i), result);\n    }\n    return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n    var result = resultBuf;\n    var length = segment.length;\n    for (var i = 0; i < length; i++) {\n        var c = segment.charAt(i);\n        switch (c) {\n            case '\\0':\n                result += escapeChar + encodedNul;\n                break;\n            case escapeChar:\n                result += escapeChar + encodedEscape;\n                break;\n            default:\n                result += c;\n        }\n    }\n    return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n    return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nexport function decode(path) {\n    // Event the empty path must encode as a path of at least length 2. A path\n    // with exactly 2 must be the empty path.\n    var length = path.length;\n    assert(length >= 2, 'Invalid path ' + path);\n    if (length === 2) {\n        assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');\n        return ResourcePath.EMPTY_PATH;\n    }\n    // Escape characters cannot exist past the second-to-last position in the\n    // source value.\n    var lastReasonableEscapeIndex = length - 2;\n    var segments = [];\n    var segmentBuilder = '';\n    for (var start = 0; start < length;) {\n        // The last two characters of a valid encoded path must be a separator, so\n        // there must be an end to this segment.\n        var end = path.indexOf(escapeChar, start);\n        if (end < 0 || end > lastReasonableEscapeIndex) {\n            fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        var next = path.charAt(end + 1);\n        switch (next) {\n            case encodedSeparatorChar:\n                var currentPiece = path.substring(start, end);\n                var segment = void 0;\n                if (segmentBuilder.length === 0) {\n                    // Avoid copying for the common case of a segment that excludes \\0\n                    // and \\001\n                    segment = currentPiece;\n                }\n                else {\n                    segmentBuilder += currentPiece;\n                    segment = segmentBuilder;\n                    segmentBuilder = '';\n                }\n                segments.push(segment);\n                break;\n            case encodedNul:\n                segmentBuilder += path.substring(start, end);\n                segmentBuilder += '\\0';\n                break;\n            case encodedEscape:\n                // The escape character can be used in the output to encode itself.\n                segmentBuilder += path.substring(start, end + 1);\n                break;\n            default:\n                fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        start = end + 2;\n    }\n    return new ResourcePath(segments);\n}\n/**\n * Computes the prefix successor of the given path, computed by encode above.\n * A prefix successor is the first key that cannot be prefixed by the given\n * path. It's useful for defining the end of a prefix scan such that all keys\n * in the scan have the same prefix.\n *\n * Note that this is not a general prefix successor implementation, which is\n * tricky to get right with Strings, given that they encode down to UTF-8.\n * Instead this relies on the fact that all paths encoded by this class are\n * always terminated with a separator, and so a successor can always be\n * cheaply computed by incrementing the last character of the path.\n */\nexport function prefixSuccessor(path) {\n    var c = path.charCodeAt(path.length - 1);\n    // TODO(mcg): this really should be a general thing, but not worth it right\n    // now\n    assert(c === 1, 'successor may only operate on paths generated by encode');\n    return path.substring(0, path.length - 1) + String.fromCharCode(c + 1);\n}\n\n//# sourceMappingURL=encoded_resource_path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/encoded_resource_path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { encode } from './encoded_resource_path';\nexport var SCHEMA_VERSION = 1;\n/** Performs database creation and (in the future) upgrades between versions. */\nexport function createOrUpgradeDb(db, oldVersion) {\n    assert(oldVersion === 0, 'Unexpected upgrade from version ' + oldVersion);\n    db.createObjectStore(DbMutationQueue.store, {\n        keyPath: DbMutationQueue.keyPath\n    });\n    // TODO(mikelehen): Get rid of \"as any\" if/when TypeScript fixes their\n    // types. https://github.com/Microsoft/TypeScript/issues/14322\n    db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbMutationBatch.store, { keyPath: DbMutationBatch.keyPath });\n    var targetDocumentsStore = db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbTargetDocument.store, { keyPath: DbTargetDocument.keyPath });\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\n    var targetStore = db.createObjectStore(DbTarget.store, {\n        keyPath: DbTarget.keyPath\n    });\n    // NOTE: This is unique only because the TargetId is the suffix.\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\n    // NOTE: keys for these stores are specified explicitly rather than using a\n    // keyPath.\n    db.createObjectStore(DbDocumentMutation.store);\n    db.createObjectStore(DbRemoteDocument.store);\n    db.createObjectStore(DbOwner.store);\n    db.createObjectStore(DbTargetGlobal.store);\n}\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nvar DbTimestamp = /** @class */ (function () {\n    function DbTimestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n    }\n    return DbTimestamp;\n}());\nexport { DbTimestamp };\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can be owned by a single tab at a given time. That tab\n * must validate that it is still the owner before every write operation and\n * should regularly write an updated timestamp to prevent other tabs from\n * \"stealing\" ownership of the db.\n */\nvar DbOwner = /** @class */ (function () {\n    function DbOwner(ownerId, leaseTimestampMs) {\n        this.ownerId = ownerId;\n        this.leaseTimestampMs = leaseTimestampMs;\n    }\n    /** Name of the IndexedDb object store. */\n    DbOwner.store = 'owner';\n    return DbOwner;\n}());\nexport { DbOwner };\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nvar DbMutationQueue = /** @class */ (function () {\n    function DbMutationQueue(\n        /**\n         * The normalized user ID to which this queue belongs.\n         */\n        userId, \n        /**\n         * An identifier for the highest numbered batch that has been acknowledged\n         * by the server. All MutationBatches in this queue with batchIds less\n         * than or equal to this value are considered to have been acknowledged by\n         * the server.\n         */\n        lastAcknowledgedBatchId, \n        /**\n         * A stream token that was previously sent by the server.\n         *\n         * See StreamingWriteRequest in datastore.proto for more details about\n         * usage.\n         *\n         * After sending this token, earlier tokens may not be used anymore so\n         * only a single stream token is retained.\n         */\n        lastStreamToken) {\n        this.userId = userId;\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n        this.lastStreamToken = lastStreamToken;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationQueue.store = 'mutationQueues';\n    /** Keys are automatically assigned via the userId property. */\n    DbMutationQueue.keyPath = 'userId';\n    return DbMutationQueue;\n}());\nexport { DbMutationQueue };\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nvar DbMutationBatch = /** @class */ (function () {\n    function DbMutationBatch(\n        /**\n         * The normalized user ID to which this batch belongs.\n         */\n        userId, \n        /**\n         * An identifier for this batch, allocated by the mutation queue in a\n         * monotonically increasing manner.\n         */\n        batchId, \n        /**\n         * The local write time of the batch, stored as milliseconds since the\n         * epoch.\n         */\n        localWriteTimeMs, \n        /**\n         * A list of mutations to apply. All mutations will be applied atomically.\n         *\n         * Mutations are serialized via JsonProtoSerializer.toMutation().\n         */\n        mutations) {\n        this.userId = userId;\n        this.batchId = batchId;\n        this.localWriteTimeMs = localWriteTimeMs;\n        this.mutations = mutations;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationBatch.store = 'mutations';\n    /** Keys are automatically assigned via the userId, batchId properties. */\n    DbMutationBatch.keyPath = ['userId', 'batchId'];\n    return DbMutationBatch;\n}());\nexport { DbMutationBatch };\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nvar DbDocumentMutation = /** @class */ (function () {\n    function DbDocumentMutation() {\n    }\n    /**\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n     * over all of a user's document mutations.\n     */\n    DbDocumentMutation.prefixForUser = function (userId) {\n        return [userId];\n    };\n    /**\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n     * index to iterate over all at document mutations for a given path or lower.\n     */\n    DbDocumentMutation.prefixForPath = function (userId, path) {\n        return [userId, encode(path)];\n    };\n    /**\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\n     * and deleting into the DbDocumentMutations index.\n     */\n    DbDocumentMutation.key = function (userId, path, batchId) {\n        return [userId, encode(path), batchId];\n    };\n    DbDocumentMutation.store = 'documentMutations';\n    /**\n     * Because we store all the useful information for this store in the key,\n     * there is no useful information to store as the value. The raw (unencoded)\n     * path cannot be stored because IndexedDb doesn't store prototype\n     * information.\n     */\n    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n    return DbDocumentMutation;\n}());\nexport { DbDocumentMutation };\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nvar DbNoDocument = /** @class */ (function () {\n    function DbNoDocument(path, readTime) {\n        this.path = path;\n        this.readTime = readTime;\n    }\n    return DbNoDocument;\n}());\nexport { DbNoDocument };\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb. It\n * represents either a cached document (if it exists) or a cached \"no-document\"\n * (if it is known to not exist).\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nvar DbRemoteDocument = /** @class */ (function () {\n    function DbRemoteDocument(\n        /**\n         * Set to an instance of a DbNoDocument if it is known that no document\n         * exists.\n         */\n        noDocument, \n        /**\n         * Set to an instance of a Document if there's a cached version of the\n         * document.\n         */\n        document) {\n        this.noDocument = noDocument;\n        this.document = document;\n    }\n    DbRemoteDocument.store = 'remoteDocuments';\n    return DbRemoteDocument;\n}());\nexport { DbRemoteDocument };\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nvar DbTarget = /** @class */ (function () {\n    function DbTarget(\n        /**\n         * An auto-generated sequential numeric identifier for the query.\n         *\n         * Queries are stored using their canonicalId as the key, but these\n         * canonicalIds can be quite long so we additionally assign a unique\n         * queryId which can be used by referenced data structures (e.g.\n         * indexes) to minimize the on-disk cost.\n         */\n        targetId, \n        /**\n         * The canonical string representing this query. This is not unique.\n         */\n        canonicalId, \n        /**\n         * The last readTime received from the Watch Service for this query.\n         *\n         * This is the same value as TargetChange.read_time in the protos.\n         */\n        readTime, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data\n         * that matches the query. The resume token essentially identifies a\n         * point in time from which the server should resume sending results.\n         *\n         * This is related to the snapshotVersion in that the resumeToken\n         * effectively also encodes that value, but the resumeToken is opaque\n         * and sometimes encodes additional information.\n         *\n         * A consequence of this is that the resumeToken should be used when\n         * asking the server to reason about where this client is in the watch\n         * stream, but the client should use the snapshotVersion for its own\n         * purposes.\n         *\n         * This is the same value as TargetChange.resume_token in the protos.\n         */\n        resumeToken, \n        /**\n         * A sequence number representing the last time this query was\n         * listened to, used for garbage collection purposes.\n         *\n         * Conventionally this would be a timestamp value, but device-local\n         * clocks are unreliable and they must be able to create new listens\n         * even while disconnected. Instead this should be a monotonically\n         * increasing number that's incremented on each listen call.\n         *\n         * This is different from the queryId since the queryId is an\n         * immutable identifier assigned to the Query on first use while\n         * lastListenSequenceNumber is updated every time the query is\n         * listened to.\n         */\n        lastListenSequenceNumber, \n        /**\n         * The query for this target.\n         *\n         * Because canonical ids are not unique we must store the actual query. We\n         * use the proto to have an object we can persist without having to\n         * duplicate translation logic to and from a `Query` object.\n         */\n        query) {\n        this.targetId = targetId;\n        this.canonicalId = canonicalId;\n        this.readTime = readTime;\n        this.resumeToken = resumeToken;\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\n        this.query = query;\n    }\n    DbTarget.store = 'targets';\n    /** Keys are automatically assigned via the targetId property. */\n    DbTarget.keyPath = 'targetId';\n    /** The name of the queryTargets index. */\n    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n    /**\n     * The index of all canonicalIds to the targets that they match. This is not\n     * a unique mapping because canonicalId does not promise a unique name for all\n     * possible queries, so we append the targetId to make the mapping unique.\n     */\n    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n    return DbTarget;\n}());\nexport { DbTarget };\n/**\n * An object representing an association between a target and a document.\n * Stored in the targetDocument object store to store the documents tracked by a\n * particular target.\n */\nvar DbTargetDocument = /** @class */ (function () {\n    function DbTargetDocument(\n        /**\n         * The targetId identifying a target.\n         */\n        targetId, \n        /**\n         * The path to the document, as encoded in the key.\n         */\n        path) {\n        this.targetId = targetId;\n        this.path = path;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbTargetDocument.store = 'targetDocuments';\n    /** Keys are automatically assigned via the targetId, path properties. */\n    DbTargetDocument.keyPath = ['targetId', 'path'];\n    /** The index name for the reverse index. */\n    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n    /** We also need to create the reverse index for these properties. */\n    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n    return DbTargetDocument;\n}());\nexport { DbTargetDocument };\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nvar DbTargetGlobal = /** @class */ (function () {\n    function DbTargetGlobal(\n        /**\n         * The highest numbered target id across all targets.\n         *\n         * See DbTarget.targetId.\n         */\n        highestTargetId, \n        /**\n         * The highest numbered lastListenSequenceNumber across all targets.\n         *\n         * See DbTarget.lastListenSequenceNumber.\n         */\n        highestListenSequenceNumber, \n        /**\n         * A global snapshot version representing the last consistent snapshot we\n         * received from the backend. This is monotonically increasing and any\n         * snapshots received from the backend prior to this version (e.g. for\n         * targets resumed with a resumeToken) should be suppressed (buffered)\n         * until the backend has caught up to this snapshot version again. This\n         * prevents our cache from ever going backwards in time.\n         */\n        lastRemoteSnapshotVersion) {\n        this.highestTargetId = highestTargetId;\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    /**\n     * The key string used for the single object that exists in the\n     * DbTargetGlobal store.\n     */\n    DbTargetGlobal.key = 'targetGlobalKey';\n    DbTargetGlobal.store = 'targetGlobal';\n    return DbTargetGlobal;\n}());\nexport { DbTargetGlobal };\n/**\n * The list of all IndexedDB stored used by the SDK. This is used when creating\n * transactions so that access across all stores is done atomically.\n */\nexport var ALL_STORES = [\n    DbMutationQueue.store,\n    DbMutationBatch.store,\n    DbDocumentMutation.store,\n    DbRemoteDocument.store,\n    DbTarget.store,\n    DbOwner.store,\n    DbTargetGlobal.store,\n    DbTargetDocument.store\n];\n\n//# sourceMappingURL=indexeddb_schema.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_schema.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { PersistencePromise } from './persistence_promise';\nvar LOG_TAG = 'SimpleDb';\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nvar SimpleDb = /** @class */ (function () {\n    function SimpleDb(db) {\n        this.db = db;\n    }\n    /** Opens the specified database, creating or upgrading it if necessary. */\n    SimpleDb.openOrCreate = function (name, version, runUpgrade) {\n        assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');\n        debug(LOG_TAG, 'Opening database:', name);\n        return new PersistencePromise(function (resolve, reject) {\n            // TODO(mikelehen): Investigate browser compatibility.\n            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n            // suggests IE9 and older WebKit browsers handle upgrade\n            // differently.\n            var request = window.indexedDB.open(name, version);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(new SimpleDb(db));\n            };\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onupgradeneeded = function (event) {\n                debug(LOG_TAG, 'Database \"' + name + '\" requires upgrade from version:', event.oldVersion);\n                // TODO(mikelehen): If/when we need to do an actual data\n                // migration, we'll want to wrap db in a SimpleDb and have the\n                // runUpgrade function return a PersistencePromise, since we'll\n                // likely need to do async reads and writes. For now we're\n                // cheating and just passing the raw IndexedDB in, since\n                // createObjectStore(), etc. are synchronous.\n                var db = event.target.result;\n                runUpgrade(db, event.oldVersion);\n            };\n        }).toPromise();\n    };\n    /** Deletes the specified database. */\n    SimpleDb.delete = function (name) {\n        debug(LOG_TAG, 'Removing database:', name);\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n    };\n    /** Returns true if IndexedDB is available in the current environment. */\n    SimpleDb.isAvailable = function () {\n        if (typeof window === 'undefined' || window.indexedDB == null) {\n            return false;\n        }\n        // We extensively use indexed array values and compound keys,\n        // which IE and Edge do not support. However, they still have indexedDB\n        // defined on the window, so we need to check for them here and make sure\n        // to return that persistence is not enabled for those browsers.\n        // For tracking support of this feature, see here:\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n        // Check the UA string to find out the browser.\n        var ua = window.navigator.userAgent;\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        if (ua.indexOf('MSIE ') > 0 ||\n            ua.indexOf('Trident/') > 0 ||\n            ua.indexOf('Edge/') > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {\n        var transaction = new SimpleDbTransaction(this.db, mode, objectStores);\n        var transactionFnResult = transactionFn(transaction)\n            .catch(function (error) {\n            // Abort the transaction if there was an\n            // error.\n            transaction.abort();\n            return PersistencePromise.reject(error);\n        })\n            .toPromise();\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        return transaction.completionPromise.then(function () { return transactionFnResult; });\n    };\n    SimpleDb.prototype.close = function () {\n        this.db.close();\n    };\n    return SimpleDb;\n}());\nexport { SimpleDb };\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nvar IterationController = /** @class */ (function () {\n    function IterationController(dbCursor) {\n        this.dbCursor = dbCursor;\n        this.shouldStop = false;\n        this.nextKey = null;\n    }\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\n        get: function () {\n            return this.shouldStop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n        get: function () {\n            return this.nextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\n        set: function (value) {\n            this.dbCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This function can be called to stop iteration at any point.\n     */\n    IterationController.prototype.done = function () {\n        this.shouldStop = true;\n    };\n    /**\n     * This function can be called to skip to that next key, which could be\n     * an index or a primary key.\n     */\n    IterationController.prototype.skip = function (key) {\n        this.nextKey = key;\n    };\n    /**\n     * Delete the current cursor value from the object store.\n     *\n     * NOTE: You CANNOT do this with a keysOnly query.\n     */\n    IterationController.prototype.delete = function () {\n        return wrapRequest(this.dbCursor.delete());\n    };\n    return IterationController;\n}());\nexport { IterationController };\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nvar SimpleDbTransaction = /** @class */ (function () {\n    function SimpleDbTransaction(db, mode, objectStoresNames) {\n        var _this = this;\n        this.aborted = false;\n        this.transaction = db.transaction(objectStoresNames, mode);\n        this.completionPromise = new Promise(function (resolve, reject) {\n            // We consider aborting to be \"normal\" and just resolve the promise.\n            // May need to revisit if/when we actually need to abort transactions.\n            _this.transaction.onabort = _this.transaction.oncomplete = function (event) {\n                resolve();\n            };\n            _this.transaction.onerror = function (event) {\n                reject(event.target.error);\n            };\n        });\n    }\n    SimpleDbTransaction.prototype.abort = function () {\n        if (!this.aborted) {\n            debug(LOG_TAG, 'Aborting transaction.');\n            this.aborted = true;\n            this.transaction.abort();\n        }\n    };\n    /**\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n     * operations performed on the SimpleDbStore happen within the context of this\n     * transaction and it cannot be used anymore once the transaction is\n     * completed.\n     *\n     * Note that we can't actually enforce that the KeyType and ValueType are\n     * correct, but they allow type safety through the rest of the consuming code.\n     */\n    SimpleDbTransaction.prototype.store = function (storeName) {\n        var store = this.transaction.objectStore(storeName);\n        assert(!!store, 'Object store not part of transaction: ' + storeName);\n        return new SimpleDbStore(store);\n    };\n    return SimpleDbTransaction;\n}());\nexport { SimpleDbTransaction };\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nvar SimpleDbStore = /** @class */ (function () {\n    function SimpleDbStore(store) {\n        this.store = store;\n    }\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\n        var request;\n        if (value !== undefined) {\n            debug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n            request = this.store.put(value, keyOrValue);\n        }\n        else {\n            debug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n            request = this.store.put(keyOrValue);\n        }\n        return wrapRequest(request);\n    };\n    /**\n     * Gets the object with the specified key from the specified store, or null\n     * if no object exists with the specified key.\n     *\n     * @key The key of the object to get.\n     * @return The object with the specified key or null if no object exists.\n     */\n    SimpleDbStore.prototype.get = function (key) {\n        var _this = this;\n        var request = this.store.get(key);\n        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n        return wrapRequest(request).next(function (result) {\n            // Normalize nonexistence to null.\n            if (result === undefined) {\n                result = null;\n            }\n            debug(LOG_TAG, 'GET', _this.store.name, key, result);\n            return result;\n        });\n    };\n    SimpleDbStore.prototype.delete = function (key) {\n        debug(LOG_TAG, 'DELETE', this.store.name, key);\n        var request = this.store.delete(key);\n        return wrapRequest(request);\n    };\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n        var cursor = this.cursor(this.options(indexOrRange, range));\n        var results = [];\n        return this.iterateCursor(cursor, function (key, value) {\n            results.push(value);\n        }).next(function () {\n            return results;\n        });\n    };\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n        debug(LOG_TAG, 'DELETE ALL', this.store.name);\n        var options = this.options(indexOrRange, range);\n        options.keysOnly = false;\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, function (key, value, control) {\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\n            // calling delete() on an object store with a single key\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n            // however, this requires us *not* to use a keysOnly cursor\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n            // may want to compare the performance of each method.\n            return control.delete();\n        });\n    };\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n        var options;\n        if (!callback) {\n            options = {};\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, callback);\n    };\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n        var results = [];\n        return new PersistencePromise(function (resolve, reject) {\n            cursorRequest.onerror = function (event) {\n                reject(event.target.error);\n            };\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                    resolve();\n                    return;\n                }\n                var controller = new IterationController(cursor);\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\n                if (userResult instanceof PersistencePromise) {\n                    results.push(userResult);\n                }\n                if (controller.isDone) {\n                    resolve();\n                }\n                else if (controller.skipToKey === null) {\n                    cursor.continue();\n                }\n                else {\n                    cursor.continue(controller.skipToKey);\n                }\n            };\n        }).next(function () {\n            return PersistencePromise.waitFor(results);\n        });\n    };\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\n        var indexName = undefined;\n        if (indexOrRange !== undefined) {\n            if (typeof indexOrRange === 'string') {\n                indexName = indexOrRange;\n            }\n            else {\n                assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');\n                range = indexOrRange;\n            }\n        }\n        return { index: indexName, range: range };\n    };\n    SimpleDbStore.prototype.cursor = function (options) {\n        var direction = 'next';\n        if (options.reverse) {\n            direction = 'prev';\n        }\n        if (options.index) {\n            var index = this.store.index(options.index);\n            if (options.keysOnly) {\n                return index.openKeyCursor(options.range, direction);\n            }\n            else {\n                return index.openCursor(options.range, direction);\n            }\n        }\n        else {\n            return this.store.openCursor(options.range, direction);\n        }\n    };\n    return SimpleDbStore;\n}());\nexport { SimpleDbStore };\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n    return new PersistencePromise(function (resolve, reject) {\n        request.onsuccess = function (event) {\n            var result = event.target.result;\n            resolve(result);\n        };\n        request.onerror = function (event) {\n            reject(event.target.error);\n        };\n    });\n}\n\n//# sourceMappingURL=simple_db.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/simple_db.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { assert, fail } from '../util/assert';\nimport { immediatePredecessor, primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport * as EncodedResourcePath from './encoded_resource_path';\nimport { DbDocumentMutation, DbMutationBatch, DbMutationQueue } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbTransaction } from './simple_db';\n/** A mutation queue for a specific user, backed by IndexedDB. */\nvar IndexedDbMutationQueue = /** @class */ (function () {\n    function IndexedDbMutationQueue(\n        /**\n         * The normalized userId (e.g. null UID => \"\" userId) used to store /\n         * retrieve mutations.\n         */\n        userId, serializer) {\n        this.userId = userId;\n        this.serializer = serializer;\n        this.garbageCollector = null;\n    }\n    /**\n     * Creates a new mutation queue for the given user.\n     * @param user The user for which to create a mutation queue.\n     * @param serializer The serializer to use when persisting to IndexedDb.\n     */\n    IndexedDbMutationQueue.forUser = function (user, serializer) {\n        // TODO(mcg): Figure out what constraints there are on userIDs\n        // In particular, are there any reserved characters? are empty ids allowed?\n        // For the moment store these together in the same mutations table assuming\n        // that empty userIDs aren't allowed.\n        assert(user.uid !== '', 'UserID must not be an empty string.');\n        var userId = user.isUnauthenticated() ? '' : user.uid;\n        return new IndexedDbMutationQueue(userId, serializer);\n    };\n    IndexedDbMutationQueue.prototype.start = function (transaction) {\n        var _this = this;\n        return IndexedDbMutationQueue.loadNextBatchIdFromDb(transaction)\n            .next(function (nextBatchId) {\n            _this.nextBatchId = nextBatchId;\n            return mutationQueuesStore(transaction).get(_this.userId);\n        })\n            .next(function (metadata) {\n            if (!metadata) {\n                metadata = new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, \n                /*lastStreamToken=*/ '');\n            }\n            _this.metadata = metadata;\n            // On restart, nextBatchId may end up lower than\n            // lastAcknowledgedBatchId since it's computed from the queue\n            // contents, and there may be no mutations in the queue. In this\n            // case, we need to reset lastAcknowledgedBatchId (which is safe\n            // since the queue must be empty).\n            if (_this.metadata.lastAcknowledgedBatchId >= _this.nextBatchId) {\n                return _this.checkEmpty(transaction).next(function (empty) {\n                    assert(empty, 'Reset nextBatchID is only possible when the queue is empty');\n                    _this.metadata.lastAcknowledgedBatchId = BATCHID_UNKNOWN;\n                    return mutationQueuesStore(transaction).put(_this.metadata);\n                });\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns one larger than the largest batch ID that has been stored. If there\n     * are no mutations returns 0. Note that batch IDs are global.\n     */\n    IndexedDbMutationQueue.loadNextBatchIdFromDb = function (txn) {\n        var maxBatchId = BATCHID_UNKNOWN;\n        return mutationsStore(txn)\n            .iterate({ reverse: true }, function (key, batch, control) {\n            var userId = key[0], batchId = key[1];\n            if (batchId > maxBatchId) {\n                maxBatchId = batch.batchId;\n            }\n            if (userId === '') {\n                // We can't compute a predecessor for the empty string, since it\n                // is lexographically first. That also means that no other\n                // userIds can come before this one, so we can just exit early.\n                control.done();\n            }\n            else {\n                var nextUser = immediatePredecessor(userId);\n                control.skip([nextUser]);\n            }\n        })\n            .next(function () { return maxBatchId + 1; });\n    };\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n        var empty = true;\n        var range = IDBKeyRange.bound(this.keyForBatchId(Number.NEGATIVE_INFINITY), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, value, control) {\n            empty = false;\n            control.done();\n        })\n            .next(function () { return empty; });\n    };\n    IndexedDbMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.nextBatchId);\n    };\n    IndexedDbMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.metadata.lastAcknowledgedBatchId);\n    };\n    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        this.metadata.lastAcknowledgedBatchId = batchId;\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return PersistencePromise.resolve(this.metadata.lastStreamToken);\n    };\n    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        var _this = this;\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        var batch = new MutationBatch(batchId, localWriteTime, mutations);\n        var dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n        return mutationsStore(transaction)\n            .put(dbBatch)\n            .next(function () {\n            var promises = [];\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n                var mutation = mutations_1[_i];\n                var encodedPath = EncodedResourcePath.encode(mutation.key.path);\n                var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\n                documentMutationsStore(transaction).put(indexKey, DbDocumentMutation.PLACEHOLDER);\n            }\n            return PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            return batch;\n        });\n    };\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        var _this = this;\n        return mutationsStore(transaction)\n            .get(this.keyForBatchId(batchId))\n            .next(function (dbBatch) {\n            return dbBatch ? _this.serializer.fromDbMutationBatch(dbBatch) : null;\n        });\n    };\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.lowerBound(this.keyForBatchId(batchId + 1));\n        var foundBatch = null;\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, dbBatch, control) {\n            if (dbBatch.userId === _this.userId) {\n                assert(dbBatch.batchId > batchId, 'Should have found mutation after ' + batchId);\n                foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);\n            }\n            control.done();\n        })\n            .next(function () { return foundBatch; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(batchId));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        // Scan the document-mutation index starting with a prefix starting with\n        // the given documentKey.\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        var results = [];\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            // Only consider rows matching exactly the specific key of\n            // interest. Note that because we order by path first, and we\n            // order terminators before path separators, we'll encounter all\n            // the index rows for documentKey contiguously. In particular, all\n            // the rows for documentKey will occur before any rows for\n            // documents nested in a subcollection beneath documentKey so we\n            // can stop as soon as we hit any such row.\n            var path = EncodedResourcePath.decode(encodedPath);\n            if (userID !== _this.userId || !documentKey.path.equals(path)) {\n                control.done();\n                return;\n            }\n            var mutationKey = _this.keyForBatchId(batchID);\n            // Look up the mutation batch in the store.\n            // PORTING NOTE: because iteration is callback driven in the web,\n            // we just look up the key instead of keeping an open iterator\n            // like iOS.\n            return mutationsStore(transaction)\n                .get(mutationKey)\n                .next(function (dbBatch) {\n                if (dbBatch === null) {\n                    fail('Dangling document-mutation reference found: ' +\n                        indexKey +\n                        ' which points to ' +\n                        mutationKey);\n                }\n                results.push(_this.serializer.fromDbMutationBatch(dbBatch));\n            });\n        })\n            .next(function () { return results; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        assert(!query.isDocumentQuery(), \"Document queries shouldn't go down this path\");\n        var queryPath = query.path;\n        var immediateChildrenLength = queryPath.length + 1;\n        // TODO(mcg): Actually implement a single-collection query\n        //\n        // This is actually executing an ancestor query, traversing the whole\n        // subtree below the collection which can be horrifically inefficient for\n        // some structures. The right way to solve this is to implement the full\n        // value index, but that's not in the cards in the near future so this is\n        // the best we can do for the moment.\n        //\n        // Since we don't yet index the actual properties in the mutations, our\n        // current approach is to just return all mutation batches that affect\n        // documents in the collection being queried.\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);\n        var encodedQueryPath = indexPrefix[1];\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\n        // scan of the main table.\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            var path = EncodedResourcePath.decode(encodedPath);\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n                control.done();\n                return;\n            }\n            // Rows with document keys more than one segment longer than the\n            // query path can't be matches. For example, a query on 'rooms'\n            // can't match the document /rooms/abc/messages/xyx.\n            // TODO(mcg): we'll need a different scanner when we implement\n            // ancestor queries.\n            if (path.length !== immediateChildrenLength) {\n                return;\n            }\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        })\n            .next(function () {\n            var results = [];\n            var promises = [];\n            // TODO(rockwood): Implement this using iterate.\n            uniqueBatchIDs.forEach(function (batchID) {\n                var mutationKey = _this.keyForBatchId(batchID);\n                promises.push(mutationsStore(transaction)\n                    .get(mutationKey)\n                    .next(function (mutation) {\n                    if (mutation === null) {\n                        fail('Dangling document-mutation reference found, ' +\n                            'which points to ' +\n                            mutationKey);\n                    }\n                    results.push(_this.serializer.fromDbMutationBatch(mutation));\n                }));\n            });\n            return PersistencePromise.waitFor(promises).next(function () { return results; });\n        });\n    };\n    IndexedDbMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var txn = mutationsStore(transaction);\n        var indexTxn = documentMutationsStore(transaction);\n        var promises = [];\n        var _loop_1 = function (batch) {\n            var range = IDBKeyRange.only(this_1.keyForBatchId(batch.batchId));\n            var numDeleted = 0;\n            var removePromise = txn.iterate({ range: range }, function (key, value, control) {\n                numDeleted++;\n                return control.delete();\n            });\n            promises.push(removePromise.next(function () {\n                assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +\n                    batch.batchId);\n            }));\n            for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {\n                var mutation = _a[_i];\n                var indexKey = DbDocumentMutation.key(this_1.userId, mutation.key.path, batch.batchId);\n                promises.push(indexTxn.delete(indexKey));\n                if (this_1.garbageCollector !== null) {\n                    this_1.garbageCollector.addPotentialGarbageKey(mutation.key);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            _loop_1(batch);\n        }\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        var _this = this;\n        return this.checkEmpty(txn).next(function (empty) {\n            if (!empty) {\n                return PersistencePromise.resolve();\n            }\n            // Verify that there are no entries in the documentMutations index if\n            // the queue is empty.\n            var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));\n            var danglingMutationReferences = [];\n            return documentMutationsStore(txn)\n                .iterate({ range: startRange }, function (key, _, control) {\n                var userID = key[0];\n                if (userID !== _this.userId) {\n                    control.done();\n                    return;\n                }\n                else {\n                    var path = EncodedResourcePath.decode(key[1]);\n                    danglingMutationReferences.push(path);\n                }\n            })\n                .next(function () {\n                assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. Dangling keys: ' +\n                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));\n            });\n        });\n    };\n    IndexedDbMutationQueue.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n        var _this = this;\n        var indexKey = DbDocumentMutation.prefixForPath(this.userId, key.path);\n        var encodedPath = indexKey[1];\n        var startRange = IDBKeyRange.lowerBound(indexKey);\n        var containsKey = false;\n        return documentMutationsStore(txn)\n            .iterate({ range: startRange, keysOnly: true }, function (key, _, control) {\n            var userID = key[0], keyPath = key[1], batchID = key[2];\n            if (userID === _this.userId && keyPath === encodedPath) {\n                containsKey = true;\n            }\n            control.done();\n        })\n            .next(function () { return containsKey; });\n    };\n    /**\n     * Creates a [userId, batchId] key for use with the DbMutationQueue object\n     * store.\n     */\n    IndexedDbMutationQueue.prototype.keyForBatchId = function (batchId) {\n        return [this.userId, batchId];\n    };\n    return IndexedDbMutationQueue;\n}());\nexport { IndexedDbMutationQueue };\nfunction validateStreamToken(token) {\n    assert(typeof token === 'string', 'Persisting non-string stream token not supported.');\n    return token;\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n    return getStore(txn, DbMutationBatch.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n    return getStore(txn, DbDocumentMutation.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n    return getStore(txn, DbMutationQueue.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_mutation_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_mutation_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { assert, fail } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport * as EncodedResourcePath from './encoded_resource_path';\nimport { DbTarget, DbTargetDocument, DbTargetGlobal } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbQueryCache = /** @class */ (function () {\n    function IndexedDbQueryCache(serializer) {\n        this.serializer = serializer;\n        /**\n         * The last received snapshot version. We store this seperately from the\n         * metadata to avoid the extra conversion to/from DbTimestamp.\n         */\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n        /**\n         * A cached copy of the metadata for the query cache.\n         */\n        this.metadata = new DbTargetGlobal(\n        /*highestTargetId=*/ 0, \n        /*lastListenSequenceNumber=*/ 0, SnapshotVersion.MIN.toTimestamp());\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n    }\n    IndexedDbQueryCache.prototype.start = function (transaction) {\n        var _this = this;\n        return globalTargetStore(transaction)\n            .get(DbTargetGlobal.key)\n            .next(function (metadata) {\n            if (metadata !== null) {\n                _this.metadata = metadata;\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\n                _this.lastRemoteSnapshotVersion = SnapshotVersion.fromTimestamp(new Timestamp(lastSavedVersion.seconds, lastSavedVersion.nanos));\n            }\n            return PersistencePromise.resolve();\n        });\n    };\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\n        return this.metadata.highestTargetId;\n    };\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, this.metadata);\n    };\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        var _this = this;\n        var targetId = queryData.targetId;\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\n        if (targetId > this.metadata.highestTargetId) {\n            this.metadata.highestTargetId = targetId;\n            return addedQueryPromise.next(function () {\n                return globalTargetStore(transaction).put(DbTargetGlobal.key, _this.metadata);\n            });\n        }\n        else {\n            return addedQueryPromise;\n        }\n    };\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\n            targetsStore(transaction).delete(queryData.targetId);\n        });\n    };\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\n        var _this = this;\n        // Iterating by the canonicalId may yield more than one result because\n        // canonicalId values are not required to be unique per target. This query\n        // depends on the queryTargets index to be efficent.\n        var canonicalId = query.canonicalId();\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n        var result = null;\n        return targetsStore(transaction)\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\n            var found = _this.serializer.fromDbTarget(value);\n            // After finding a potential match, check that the query is\n            // actually equal to the requested query.\n            if (query.equals(found.query)) {\n                result = found;\n                control.done();\n            }\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // Indexeddb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = EncodedResourcePath.encode(key.path);\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\n        });\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        var _this = this;\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // IndexedDb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = EncodedResourcePath.encode(key.path);\n            promises.push(store.delete([targetId, path]));\n            if (_this.garbageCollector !== null) {\n                _this.garbageCollector.addPotentialGarbageKey(key);\n            }\n        });\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        var store = documentTargetStore(txn);\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\n            return store.delete(range);\n        });\n    };\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\n        var _this = this;\n        var store = documentTargetStore(txn);\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\n            // In order to generate garbage events properly, we need to read these\n            // keys before deleting.\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\n                var path = EncodedResourcePath.decode(key[1]);\n                var docKey = new DocumentKey(path);\n                // Paranoid assertion in case the the collector is set to null\n                // during the iteration.\n                assert(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\n            });\n        }\n        else {\n            return PersistencePromise.resolve();\n        }\n    };\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var promises = [];\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var store = documentTargetStore(txn);\n        var result = documentKeySet();\n        return store\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\n            var path = EncodedResourcePath.decode(key[1]);\n            var docKey = new DocumentKey(path);\n            result = result.add(docKey);\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\n        assert(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\n        var path = EncodedResourcePath.encode(key.path);\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var count = 0;\n        return documentTargetStore(txn)\n            .iterate({\n            index: DbTargetDocument.documentTargetsIndex,\n            keysOnly: true,\n            range: range\n        }, function (key, _, control) {\n            count++;\n            control.done();\n        })\n            .next(function () { return count > 0; });\n    };\n    return IndexedDbQueryCache;\n}());\nexport { IndexedDbQueryCache };\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n    return getStore(txn, DbTarget.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n    return getStore(txn, DbTargetGlobal.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n    return getStore(txn, DbTargetDocument.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_query_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_query_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { fail } from '../util/assert';\nimport { DbRemoteDocument } from './indexeddb_schema';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\nexport { IndexedDbRemoteDocumentCache };\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(DbRemoteDocument.store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n//# sourceMappingURL=indexeddb_remote_document_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_remote_document_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { assert, fail } from '../util/assert';\nimport { DbMutationBatch, DbNoDocument, DbRemoteDocument, DbTarget, DbTimestamp } from './indexeddb_schema';\nimport { QueryData, QueryPurpose } from './query_data';\n/** Serializer for values stored in the LocalStore. */\nvar LocalSerializer = /** @class */ (function () {\n    function LocalSerializer(remoteSerializer) {\n        this.remoteSerializer = remoteSerializer;\n    }\n    /** Decodes a remote document from storage locally to a Document. */\n    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {\n        if (remoteDoc.document) {\n            return this.remoteSerializer.fromDocument(remoteDoc.document);\n        }\n        else if (remoteDoc.noDocument) {\n            var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n            var readTime = remoteDoc.noDocument.readTime;\n            var timestamp = new Timestamp(readTime.seconds, readTime.nanos);\n            return new NoDocument(key, SnapshotVersion.fromTimestamp(timestamp));\n        }\n        else {\n            return fail('Unexpected DbRemoteDocument');\n        }\n    };\n    /** Encodes a document for storage locally. */\n    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {\n        if (maybeDoc instanceof Document) {\n            var doc = this.remoteSerializer.toDocument(maybeDoc);\n            return new DbRemoteDocument(null, doc);\n        }\n        else {\n            var path = maybeDoc.key.path.toArray();\n            var timestamp = maybeDoc.version.toTimestamp();\n            var readTime = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n            return new DbRemoteDocument(new DbNoDocument(path, readTime), null);\n        }\n    };\n    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {\n        var _this = this;\n        var serializedMutations = batch.mutations.map(function (m) {\n            return _this.remoteSerializer.toMutation(m);\n        });\n        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toEpochMilliseconds(), serializedMutations);\n    };\n    /** Decodes a DbMutationBatch into a MutationBatch */\n    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {\n        var _this = this;\n        var mutations = dbBatch.mutations.map(function (m) {\n            return _this.remoteSerializer.fromMutation(m);\n        });\n        var timestamp = Timestamp.fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n        return new MutationBatch(dbBatch.batchId, timestamp, mutations);\n    };\n    /** Decodes a DbTarget into QueryData */\n    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {\n        var readTime = new Timestamp(dbTarget.readTime.seconds, dbTarget.readTime.nanos);\n        var version = SnapshotVersion.fromTimestamp(readTime);\n        var query;\n        if (isDocumentQuery(dbTarget.query)) {\n            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n        }\n        else {\n            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n        }\n        return new QueryData(query, dbTarget.targetId, QueryPurpose.Listen, version, dbTarget.resumeToken);\n    };\n    /** Encodes QueryData into a DbTarget for storage locally. */\n    LocalSerializer.prototype.toDbTarget = function (queryData) {\n        assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' +\n            QueryPurpose.Listen +\n            ' may be stored, got ' +\n            queryData.purpose);\n        var timestamp = queryData.snapshotVersion.toTimestamp();\n        var dbTimestamp = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n        var queryProto;\n        if (queryData.query.isDocumentQuery()) {\n            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n        }\n        else {\n            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n        }\n        assert(typeof queryData.resumeToken === 'string', 'Persisting non-string resume token not supported.');\n        var resumeToken = queryData.resumeToken;\n        // lastListenSequenceNumber is always 0 until we do real GC.\n        return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, 0, queryProto);\n    };\n    return LocalSerializer;\n}());\nexport { LocalSerializer };\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n    return dbQuery.documents !== undefined;\n}\n\n//# sourceMappingURL=local_serializer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_serializer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { User } from '../auth/user';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nvar OAuthToken = /** @class */ (function () {\n    function OAuthToken(value, user) {\n        this.user = user;\n        this.type = 'OAuth';\n        this.authHeaders = { Authorization: \"Bearer \" + value };\n    }\n    return OAuthToken;\n}());\nexport { OAuthToken };\n/** A CredentialsProvider that always yields an empty token. */\nvar EmptyCredentialsProvider = /** @class */ (function () {\n    function EmptyCredentialsProvider() {\n        /**\n         * Stores the User listener registered with setUserChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.userListener = null;\n    }\n    EmptyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(null);\n    };\n    EmptyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire with initial user.\n        listener(User.UNAUTHENTICATED);\n    };\n    EmptyCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.userListener !== null, 'removeUserChangeListener() when no listener registered');\n        this.userListener = null;\n    };\n    return EmptyCredentialsProvider;\n}());\nexport { EmptyCredentialsProvider };\nvar FirebaseCredentialsProvider = /** @class */ (function () {\n    function FirebaseCredentialsProvider(app) {\n        var _this = this;\n        this.app = app;\n        /**\n         * The auth token listener registered with FirebaseApp, retained here so we\n         * can unregister it.\n         */\n        this.tokenListener = null;\n        /**\n         * Counter used to detect if the user changed while a getToken request was\n         * outstanding.\n         */\n        this.userCounter = 0;\n        /** The User listener registered with setUserChangeListener(). */\n        this.userListener = null;\n        // We listen for token changes but all we really care about is knowing when\n        // the uid may have changed.\n        this.tokenListener = function () {\n            var newUser = _this.getUser();\n            if (!_this.currentUser || !newUser.equals(_this.currentUser)) {\n                _this.currentUser = newUser;\n                _this.userCounter++;\n                if (_this.userListener) {\n                    _this.userListener(_this.currentUser);\n                }\n            }\n        };\n        this.userCounter = 0;\n        // Will fire at least once where we set this.currentUser\n        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n    FirebaseCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        assert(this.tokenListener != null, 'getToken cannot be called after listener removed.');\n        // Take note of the current value of the userCounter so that this method can\n        // fail (with an ABORTED error) if there is a user change while the request\n        // is outstanding.\n        var initialUserCounter = this.userCounter;\n        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {\n            // Cancel the request since the user changed while the request was\n            // outstanding so the response is likely for a previous user (which\n            // user, we can't be sure).\n            if (_this.userCounter !== initialUserCounter) {\n                throw new FirestoreError(Code.ABORTED, 'getToken aborted due to uid change.');\n            }\n            else {\n                if (tokenData) {\n                    assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\n                }\n                else {\n                    return null;\n                }\n            }\n        });\n    };\n    FirebaseCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire the initial event, but only if we received the initial user\n        if (this.currentUser) {\n            listener(this.currentUser);\n        }\n    };\n    FirebaseCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.tokenListener != null, 'removeUserChangeListener() called twice');\n        assert(this.userListener !== null, 'removeUserChangeListener() called when no listener registered');\n        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);\n        this.tokenListener = null;\n        this.userListener = null;\n    };\n    FirebaseCredentialsProvider.prototype.getUser = function () {\n        // TODO(mikelehen): Remove this check once we're shipping with firebase.js.\n        if (typeof this.app.INTERNAL.getUid !== 'function') {\n            fail('This version of the Firestore SDK requires at least version' +\n                ' 3.7.0 of firebase.js.');\n        }\n        var currentUid = this.app.INTERNAL.getUid();\n        assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);\n        return new User(currentUid);\n    };\n    return FirebaseCredentialsProvider;\n}());\nexport { FirebaseCredentialsProvider };\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * TODO(b/33147818) this implementation violates the current assumption that\n * tokens are immutable.  We need to either revisit this assumption or come\n * up with some way for FPA to use the listen/unlisten interface.\n */\nvar FirstPartyToken = /** @class */ (function () {\n    function FirstPartyToken(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        this.type = 'FirstParty';\n        this.user = User.FIRST_PARTY;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n        get: function () {\n            return {\n                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),\n                'X-Goog-AuthUser': this.sessionIndex\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirstPartyToken;\n}());\nexport { FirstPartyToken };\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar FirstPartyCredentialsProvider = /** @class */ (function () {\n    function FirstPartyCredentialsProvider(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    FirstPartyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n    };\n    // TODO(33108925): can someone switch users w/o a page refresh?\n    // TODO(33110621): need to understand token/session lifecycle\n    FirstPartyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.FIRST_PARTY);\n    };\n    FirstPartyCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return FirstPartyCredentialsProvider;\n}());\nexport { FirstPartyCredentialsProvider };\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(credentials) {\n    if (!credentials) {\n        return new EmptyCredentialsProvider();\n    }\n    switch (credentials.type) {\n        case 'gapi':\n            return new FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');\n        case 'provider':\n            return credentials.client;\n        default:\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n    }\n}\n\n//# sourceMappingURL=credentials.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/credentials.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function isPartialObserver(obj) {\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    var object = obj;\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in object && typeof object[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=observer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/observer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from '../core/timestamp';\nimport { ObjectValue } from '../model/field_value';\nimport { ArrayValue, BlobValue, BooleanValue, DoubleValue, GeoPointValue, IntegerValue, NullValue, RefValue, StringValue, TimestampValue } from '../model/field_value';\nimport { FieldMask, FieldTransform, PatchMutation, ServerTimestampTransform, SetMutation, TransformMutation } from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { SortedMap } from '../util/sorted_map';\nimport * as typeUtils from '../util/types';\nimport { Blob } from './blob';\nimport { FieldPath as ExternalFieldPath, fromDotSeparatedString } from './field_path';\nimport { DeleteFieldValueImpl, FieldValueImpl, ServerTimestampFieldValueImpl } from './field_value';\nimport { GeoPoint } from './geo_point';\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nvar ParsedSetData = /** @class */ (function () {\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedSetData.prototype.toMutations = function (key, precondition) {\n        var mutations = [];\n        if (this.fieldMask !== null) {\n            mutations.push(new PatchMutation(key, this.data, this.fieldMask, precondition));\n        }\n        else {\n            mutations.push(new SetMutation(key, this.data, precondition));\n        }\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedSetData;\n}());\nexport { ParsedSetData };\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar ParsedUpdateData = /** @class */ (function () {\n    function ParsedUpdateData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedUpdateData.prototype.toMutations = function (key, precondition) {\n        var mutations = [\n            new PatchMutation(key, this.data, this.fieldMask, precondition)\n        ];\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedUpdateData;\n}());\nexport { ParsedUpdateData };\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nvar UserDataSource;\n(function (UserDataSource) {\n    UserDataSource[UserDataSource[\"Set\"] = 0] = \"Set\";\n    UserDataSource[UserDataSource[\"Update\"] = 1] = \"Update\";\n    UserDataSource[UserDataSource[\"MergeSet\"] = 2] = \"MergeSet\";\n    UserDataSource[UserDataSource[\"QueryValue\"] = 3] = \"QueryValue\"; // from a where clause or cursor bound\n})(UserDataSource || (UserDataSource = {}));\nfunction isWrite(dataSource) {\n    switch (dataSource) {\n        case UserDataSource.Set: // fall through\n        case UserDataSource.MergeSet: // fall through\n        case UserDataSource.Update:\n            return true;\n        case UserDataSource.QueryValue:\n            return false;\n        default:\n            throw fail(\"Unexpected case for UserDataSource: \" + dataSource);\n    }\n}\n/** A \"context\" object passed around while parsing user data. */\nvar ParseContext = /** @class */ (function () {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param dataSource Indicates what kind of API method this data came from.\n     * @param methodName The name of the method the user called to create this\n     *     ParseContext.\n     * @param path A path within the object being parsed. This could be an empty\n     *     path (in which case the context represents the root of the data being\n     *     parsed), or a nonempty path (indicating the context represents a nested\n     *     location within the data).\n     * @param arrayElement Whether or not this context corresponds to an element\n     *     of an array.\n     * @param fieldTransforms A mutable list of field transforms encountered while\n     *     parsing the data.\n     * @param fieldMask A mutable list of field paths encountered while parsing\n     *     the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {\n        this.dataSource = dataSource;\n        this.methodName = methodName;\n        this.path = path;\n        this.arrayElement = arrayElement;\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        if (fieldTransforms === undefined) {\n            this.validatePath();\n        }\n        this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n        this.fieldTransforms = fieldTransforms || [];\n        this.fieldMask = fieldMask || [];\n    }\n    ParseContext.prototype.childContextForField = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePathSegment(field);\n        return context;\n    };\n    ParseContext.prototype.childContextForFieldPath = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePath();\n        return context;\n    };\n    ParseContext.prototype.childContextForArray = function (index) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // null.\n        return new ParseContext(this.dataSource, this.methodName, \n        /*path=*/ null, \n        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);\n    };\n    ParseContext.prototype.createError = function (reason) {\n        var fieldDescription = this.path === null || this.path.isEmpty()\n            ? ''\n            : \" (found in field \" + this.path.toString() + \")\";\n        return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + this.methodName + \"() called with invalid data. \" +\n            reason +\n            fieldDescription);\n    };\n    ParseContext.prototype.validatePath = function () {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path === null) {\n            return;\n        }\n        for (var i = 0; i < this.path.length; i++) {\n            this.validatePathSegment(this.path.get(i));\n        }\n    };\n    ParseContext.prototype.validatePathSegment = function (segment) {\n        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n            throw this.createError('Document fields cannot begin and end with __');\n        }\n    };\n    ParseContext.prototype.isWrite = function () {\n        return (this.dataSource === UserDataSource.Set ||\n            this.dataSource === UserDataSource.Update);\n    };\n    return ParseContext;\n}());\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nvar DocumentKeyReference = /** @class */ (function () {\n    function DocumentKeyReference(databaseId, key) {\n        this.databaseId = databaseId;\n        this.key = key;\n    }\n    return DocumentKeyReference;\n}());\nexport { DocumentKeyReference };\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar UserDataConverter = /** @class */ (function () {\n    function UserDataConverter(preConverter) {\n        this.preConverter = preConverter;\n    }\n    /** Parse document data from a non-merge set() call.*/\n    UserDataConverter.prototype.parseSetData = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.Set, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        return new ParsedSetData(updateData, \n        /* fieldMask= */ null, context.fieldTransforms);\n    };\n    /** Parse document data from a set() call with '{merge:true}'. */\n    UserDataConverter.prototype.parseMergeData = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.MergeSet, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        var fieldMask = new FieldMask(context.fieldMask);\n        return new ParsedSetData(updateData, fieldMask, context.fieldTransforms);\n    };\n    /** Parse update data from an update() call. */\n    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {\n        var _this = this;\n        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var fieldMaskPaths = [];\n        var updateData = ObjectValue.EMPTY;\n        objUtils.forEach(input, function (key, value) {\n            var path = fieldPathFromDotSeparatedString(methodName, key);\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            if (value instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = _this.parseData(value, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        });\n        var mask = new FieldMask(fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /** Parse update data from a list of field/value arguments. */\n    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {\n        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);\n        var keys = [fieldPathFromArgument(methodName, field)];\n        var values = [value];\n        if (moreFieldsAndValues.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\n                'of arguments that alternate between field names and values.');\n        }\n        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));\n            values.push(moreFieldsAndValues[i + 1]);\n        }\n        var fieldMaskPaths = [];\n        var updateData = ObjectValue.EMPTY;\n        for (var i = 0; i < keys.length; ++i) {\n            var path = keys[i];\n            var childContext = context.childContextForFieldPath(path);\n            var value_1 = this.runPreConverter(values[i], childContext);\n            if (value_1 instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = this.parseData(value_1, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        }\n        var mask = new FieldMask(fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /**\n     * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n     * bound).\n     */\n    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.QueryValue, methodName, FieldPath.EMPTY_PATH);\n        var parsed = this.parseData(input, context);\n        assert(parsed != null, 'Parsed data should not be null.');\n        assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');\n        return parsed;\n    };\n    /** Sends data through this.preConverter, handling any thrown errors. */\n    UserDataConverter.prototype.runPreConverter = function (input, context) {\n        try {\n            return this.preConverter(input);\n        }\n        catch (e) {\n            var message = errorMessage(e);\n            throw context.createError(message);\n        }\n    };\n    /**\n     * Internal helper for parsing user data.\n     *\n     * @param input Data to be parsed.\n     * @param context A context object representing the current path being parsed,\n     * the source of the data being parsed, etc.\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseData = function (input, context) {\n        input = this.runPreConverter(input, context);\n        if (input instanceof Array) {\n            // TODO(b/34871131): Include the path containing the array in the error\n            // message.\n            if (context.arrayElement) {\n                throw context.createError('Nested arrays are not supported');\n            }\n            // If context.path is null we are already inside an array and we don't\n            // support field mask paths more granular than the top-level array.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseArray(input, context);\n        }\n        else if (looksLikeJsonObject(input)) {\n            validatePlainObject('Unsupported field value:', context, input);\n            return this.parseObject(input, context);\n        }\n        else {\n            // If context.path is null, we are inside an array and we should have\n            // already added the root of the array to the field mask.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseScalarValue(input, context);\n        }\n    };\n    UserDataConverter.prototype.parseArray = function (array, context) {\n        var result = [];\n        var entryIndex = 0;\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n            var entry = array_1[_i];\n            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));\n            if (parsedEntry == null) {\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                parsedEntry = NullValue.INSTANCE;\n            }\n            result.push(parsedEntry);\n            entryIndex++;\n        }\n        return new ArrayValue(result);\n    };\n    UserDataConverter.prototype.parseObject = function (obj, context) {\n        var _this = this;\n        var result = new SortedMap(primitiveComparator);\n        objUtils.forEach(obj, function (key, val) {\n            var parsedValue = _this.parseData(val, context.childContextForField(key));\n            if (parsedValue != null) {\n                result = result.insert(key, parsedValue);\n            }\n        });\n        return new ObjectValue(result);\n    };\n    /**\n     * Helper to parse a scalar value (i.e. not an Object or Array)\n     *\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseScalarValue = function (value, context) {\n        if (value === null) {\n            return NullValue.INSTANCE;\n        }\n        else if (typeof value === 'number') {\n            if (typeUtils.isSafeInteger(value)) {\n                return new IntegerValue(value);\n            }\n            else {\n                return new DoubleValue(value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            return BooleanValue.of(value);\n        }\n        else if (typeof value === 'string') {\n            return new StringValue(value);\n        }\n        else if (value instanceof Date) {\n            return new TimestampValue(Timestamp.fromDate(value));\n        }\n        else if (value instanceof GeoPoint) {\n            return new GeoPointValue(value);\n        }\n        else if (value instanceof Blob) {\n            return new BlobValue(value);\n        }\n        else if (value instanceof DocumentKeyReference) {\n            return new RefValue(value.databaseId, value.key);\n        }\n        else if (value instanceof FieldValueImpl) {\n            if (value instanceof DeleteFieldValueImpl) {\n                if (context.dataSource == UserDataSource.MergeSet) {\n                    return null;\n                }\n                else if (context.dataSource === UserDataSource.Update) {\n                    assert(context.path == null || context.path.length > 0, 'FieldValue.delete() at the top level should have already' +\n                        ' been handled.');\n                    throw context.createError('FieldValue.delete() can only appear at the top level ' +\n                        'of your update data');\n                }\n                else {\n                    // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n                    throw context.createError('FieldValue.delete() can only be used with update() and set() with {merge:true}');\n                }\n            }\n            else if (value instanceof ServerTimestampFieldValueImpl) {\n                if (!isWrite(context.dataSource)) {\n                    throw context.createError('FieldValue.serverTimestamp() can only be used with set()' +\n                        ' and update()');\n                }\n                if (context.path === null) {\n                    throw context.createError('FieldValue.serverTimestamp() is not currently' +\n                        ' supported inside arrays');\n                }\n                context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));\n                // Return null so this value is omitted from the parsed result.\n                return null;\n            }\n            else {\n                return fail('Unknown FieldValue type: ' + value);\n            }\n        }\n        else {\n            throw context.createError(\"Unsupported field value: \" + valueDescription(value));\n        }\n    };\n    return UserDataConverter;\n}());\nexport { UserDataConverter };\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        !(input instanceof Array) &&\n        !(input instanceof Date) &&\n        !(input instanceof GeoPoint) &&\n        !(input instanceof Blob) &&\n        !(input instanceof DocumentKeyReference) &&\n        !(input instanceof FieldValueImpl));\n}\nfunction validatePlainObject(message, context, input) {\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n        var description = valueDescription(input);\n        if (description === 'an object') {\n            // Massage the error if it was an object.\n            throw context.createError(message + ' a custom object');\n        }\n        else {\n            throw context.createError(message + ' ' + description);\n        }\n    }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(methodName, path) {\n    if (path instanceof ExternalFieldPath) {\n        return path._internalPath;\n    }\n    else if (typeof path === 'string') {\n        return fieldPathFromDotSeparatedString(methodName, path);\n    }\n    else {\n        var message = 'Field path arguments must be of type string or FieldPath.';\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path) {\n    try {\n        return fromDotSeparatedString(path)._internalPath;\n    }\n    catch (e) {\n        var message = errorMessage(e);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error) {\n    return error instanceof Error ? error.message : error.toString();\n}\n\n//# sourceMappingURL=user_data_converter.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/user_data_converter.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { FieldPath as ExternalFieldPath } from './field_path';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { FirestoreClient } from '../core/firestore_client';\nimport { Bound, Direction, fieldFilter, OrderBy, Query as InternalQuery, RelationFilter, RelationOp } from '../core/query';\nimport { ChangeType } from '../core/view_snapshot';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ArrayValue, ObjectValue, RefValue } from '../model/field_value';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport { ResourcePath } from '../model/path';\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { assert, fail } from '../util/assert';\nimport { AsyncObserver } from '../util/async_observer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateAtLeastNumberOfArgs, validateBetweenNumberOfArgs, validateDefined, validateExactNumberOfArgs, validateNamedOptionalType, validateNamedType, validateOptionalArgType, validateOptionNames, valueDescription } from '../util/input_validation';\nimport * as log from '../util/log';\nimport { LogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { EmptyCredentialsProvider, FirebaseCredentialsProvider, makeCredentialsProvider } from './credentials';\nimport { isPartialObserver } from './observer';\nimport { DocumentKeyReference, fieldPathFromArgument, UserDataConverter } from './user_data_converter';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar FirestoreSettings = /** @class */ (function () {\n    function FirestoreSettings(settings) {\n        if (settings.host === undefined) {\n            if (settings.ssl !== undefined) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n            }\n            this.host = DEFAULT_HOST;\n            this.ssl = DEFAULT_SSL;\n        }\n        else {\n            validateNamedType('settings', 'string', 'host', settings.host);\n            this.host = settings.host;\n            validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n            this.ssl = objUtils.defaulted(settings.ssl, DEFAULT_SSL);\n        }\n        validateOptionNames('settings', settings, ['host', 'ssl', 'credentials']);\n        validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);\n        this.credentials = settings.credentials;\n    }\n    FirestoreSettings.prototype.equals = function (other) {\n        return (this.host === other.host &&\n            this.ssl === other.ssl &&\n            this.credentials === other.credentials);\n    };\n    return FirestoreSettings;\n}());\nvar FirestoreConfig = /** @class */ (function () {\n    function FirestoreConfig() {\n    }\n    return FirestoreConfig;\n}());\n/**\n * The root reference to the database.\n */\nvar Firestore = /** @class */ (function () {\n    function Firestore(databaseIdOrApp) {\n        var _this = this;\n        this._queue = new AsyncQueue();\n        this.INTERNAL = {\n            delete: function () {\n                if (_this._firestoreClient) {\n                    return _this._firestoreClient.shutdown();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            },\n            // Exposed via INTERNAL for use in tests.\n            disableNetwork: function () { return _this._firestoreClient.disableNetwork(); },\n            enableNetwork: function () { return _this._firestoreClient.enableNetwork(); },\n            drainAsyncQueue: function (executeDelayedTasks) {\n                return _this._queue.drain(executeDelayedTasks);\n            }\n        };\n        var config = new FirestoreConfig();\n        if (typeof databaseIdOrApp.options === 'object') {\n            // This is very likely a Firebase app object\n            // TODO(b/34177605): Can we somehow use instanceof?\n            var app = databaseIdOrApp;\n            config.firebaseApp = app;\n            config.databaseId = Firestore.databaseIdFromApp(app);\n            config.persistenceKey = config.firebaseApp.name;\n            config.credentials = new FirebaseCredentialsProvider(app);\n        }\n        else {\n            var external_1 = databaseIdOrApp;\n            if (!external_1.projectId) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');\n            }\n            config.databaseId = new DatabaseId(external_1.projectId, external_1.database);\n            // Use a default persistenceKey that lines up with FirebaseApp.\n            config.persistenceKey = '[DEFAULT]';\n            config.credentials = new EmptyCredentialsProvider();\n        }\n        config.settings = new FirestoreSettings({});\n        this._config = config;\n        this._databaseId = config.databaseId;\n    }\n    Firestore.prototype.settings = function (settingsLiteral) {\n        validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n        validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n        if (objUtils.contains(settingsLiteral, 'persistence')) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"persistence\" is now specified with a separate call to ' +\n                'firestore.enablePersistence().');\n        }\n        var newSettings = new FirestoreSettings(settingsLiteral);\n        if (this._firestoreClient && !this._config.settings.equals(newSettings)) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\n                'be changed. You can only call settings() before calling any other ' +\n                'methods on a Firestore object.');\n        }\n        this._config.settings = newSettings;\n        if (newSettings.credentials !== undefined) {\n            this._config.credentials = makeCredentialsProvider(newSettings.credentials);\n        }\n    };\n    Firestore.prototype.enablePersistence = function () {\n        if (this._firestoreClient) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +\n                'be enabled. You can only call enablePersistence() before calling ' +\n                'any other methods on a Firestore object.');\n        }\n        return this.configureClient(/* persistence= */ true);\n    };\n    Firestore.prototype.ensureClientConfigured = function () {\n        if (!this._firestoreClient) {\n            this.configureClient(/* persistence= */ false);\n        }\n        return this._firestoreClient;\n    };\n    Firestore.prototype.configureClient = function (persistence) {\n        var _this = this;\n        assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');\n        assert(!this._firestoreClient, 'configureClient() called multiple times');\n        var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);\n        var preConverter = function (value) {\n            if (value instanceof DocumentReference) {\n                var thisDb = _this._config.databaseId;\n                var otherDb = value.firestore._config.databaseId;\n                if (!otherDb.equals(thisDb)) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' +\n                        (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\n                        (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n                }\n                return new DocumentKeyReference(_this._config.databaseId, value._key);\n            }\n            else {\n                return value;\n            }\n        };\n        this._dataConverter = new UserDataConverter(preConverter);\n        this._firestoreClient = new FirestoreClient(PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, this._queue);\n        return this._firestoreClient.start(persistence);\n    };\n    Firestore.databaseIdFromApp = function (app) {\n        var options = app.options;\n        if (!objUtils.contains(options, 'projectId')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreId' once alpha testers have upgraded.\n            if (objUtils.contains(options, 'firestoreId')) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreId\" is now specified as \"projectId\" in ' +\n                    'firebase.initializeApp.');\n            }\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        }\n        if (objUtils.contains(options, 'firestoreOptions')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreOptions' once alpha testers have upgraded.\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreOptions\" values are now specified with ' +\n                'Firestore.settings()');\n        }\n        var projectId = options['projectId'];\n        if (!projectId || typeof projectId !== 'string') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');\n        }\n        return new DatabaseId(projectId);\n    };\n    Object.defineProperty(Firestore.prototype, \"app\", {\n        get: function () {\n            if (!this._config.firebaseApp) {\n                throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n                    'not available');\n            }\n            return this._config.firebaseApp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n        validateArgType('Firestore.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');\n        }\n        this.ensureClientConfigured();\n        return new CollectionReference(ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.doc = function (pathString) {\n        validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n        validateArgType('Firestore.doc', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');\n        }\n        this.ensureClientConfigured();\n        return DocumentReference.forPath(ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.runTransaction = function (updateFunction) {\n        var _this = this;\n        validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n        validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n        return this.ensureClientConfigured().transaction(function (transaction) {\n            return updateFunction(new Transaction(_this, transaction));\n        });\n    };\n    Firestore.prototype.batch = function () {\n        this.ensureClientConfigured();\n        return new WriteBatch(this);\n    };\n    Object.defineProperty(Firestore, \"logLevel\", {\n        get: function () {\n            switch (log.getLogLevel()) {\n                case LogLevel.DEBUG:\n                    return 'debug';\n                case LogLevel.ERROR:\n                    return 'error';\n                case LogLevel.SILENT:\n                    return 'silent';\n                default:\n                    return fail('Unknown log level: ' + log.getLogLevel());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.setLogLevel = function (level) {\n        validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n        validateArgType('Firestore.setLogLevel', 'string', 1, level);\n        switch (level) {\n            case 'debug':\n                log.setLogLevel(log.LogLevel.DEBUG);\n                break;\n            case 'error':\n                log.setLogLevel(log.LogLevel.ERROR);\n                break;\n            case 'silent':\n                log.setLogLevel(log.LogLevel.SILENT);\n                break;\n            default:\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);\n        }\n    };\n    return Firestore;\n}());\nexport { Firestore };\n/**\n * A reference to a transaction.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(_firestore, _transaction) {\n        this._firestore = _firestore;\n        this._transaction = _transaction;\n    }\n    Transaction.prototype.get = function (documentRef) {\n        var _this = this;\n        validateExactNumberOfArgs('Transaction.get', arguments, 1);\n        var ref = validateReference('Transaction.get', documentRef, this._firestore);\n        return this._transaction\n            .lookup([ref._key])\n            .then(function (docs) {\n            if (!docs || docs.length !== 1) {\n                return fail('Mismatch in docs returned from document lookup.');\n            }\n            var doc = docs[0];\n            if (doc instanceof NoDocument) {\n                return new DocumentSnapshot(_this._firestore, ref._key, null, false);\n            }\n            return new DocumentSnapshot(_this._firestore, ref._key, doc, false);\n        });\n    };\n    Transaction.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n        var ref = validateReference('Transaction.set', documentRef, this._firestore);\n        options = validateSetOptions('Transaction.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('Transaction.set', value)\n            : this._firestore._dataConverter.parseSetData('Transaction.set', value);\n        this._transaction.set(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('Transaction.update', arguments, 2);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);\n        }\n        this._transaction.update(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n        var ref = validateReference('Transaction.delete', documentRef, this._firestore);\n        this._transaction.delete(ref._key);\n        return this;\n    };\n    return Transaction;\n}());\nexport { Transaction };\nvar WriteBatch = /** @class */ (function () {\n    function WriteBatch(_firestore) {\n        this._firestore = _firestore;\n        this._mutations = [];\n        this._committed = false;\n    }\n    WriteBatch.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);\n        options = validateSetOptions('WriteBatch.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value)\n            : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        this.verifyNotCommitted();\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);\n        }\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.exists(true)));\n        return this;\n    };\n    WriteBatch.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);\n        this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.commit = function () {\n        this.verifyNotCommitted();\n        this._committed = true;\n        if (this._mutations.length > 0) {\n            return this._firestore.ensureClientConfigured().write(this._mutations);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    WriteBatch.prototype.verifyNotCommitted = function () {\n        if (this._committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\n                'has been called.');\n        }\n    };\n    return WriteBatch;\n}());\nexport { WriteBatch };\n/**\n * A reference to a particular document in a collection in the database.\n */\nvar DocumentReference = /** @class */ (function () {\n    function DocumentReference(_key, firestore) {\n        this._key = _key;\n        this.firestore = firestore;\n        this._firestoreClient = this.firestore.ensureClientConfigured();\n    }\n    DocumentReference.forPath = function (path, firestore) {\n        if (path.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +\n                'references must have an even number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return new DocumentReference(new DocumentKey(path), firestore);\n    };\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\n        get: function () {\n            return new CollectionReference(this._key.path.popLast(), this.firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\n        get: function () {\n            return this._key.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentReference.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n        validateArgType('DocumentReference.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');\n        }\n        var path = ResourcePath.fromString(pathString);\n        return new CollectionReference(this._key.path.child(path), this.firestore);\n    };\n    DocumentReference.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentReference)) {\n            throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n        }\n        return this.firestore === other.firestore && this._key.equals(other._key);\n    };\n    DocumentReference.prototype.set = function (value, options) {\n        validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n        options = validateSetOptions('DocumentReference.set', options);\n        var parsed = options.merge\n            ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value)\n            : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);\n        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.NONE));\n    };\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 2] = arguments[_i];\n        }\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);\n        }\n        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.exists(true)));\n    };\n    DocumentReference.prototype.delete = function () {\n        validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n        return this._firestoreClient.write([\n            new DeleteMutation(this._key, Precondition.NONE)\n        ]);\n    };\n    DocumentReference.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);\n        var options = {\n            includeMetadataChanges: false\n        };\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('DocumentReference.onSnapshot', options, [\n                'includeMetadataChanges'\n            ]);\n            validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);\n            currArg++;\n        }\n        var internalOptions = {\n            includeDocumentMetadataChanges: options.includeMetadataChanges,\n            includeQueryMetadataChanges: options.includeMetadataChanges\n        };\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(internalOptions, observer);\n    };\n    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (snapshot) {\n                if (observer.next) {\n                    assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');\n                    var doc = snapshot.docs.get(_this._key);\n                    observer.next(new DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache));\n                }\n            },\n            error: errHandler\n        });\n        var internalListener = this._firestoreClient.listen(InternalQuery.atPath(this._key.path), asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            _this._firestoreClient.unlisten(internalListener);\n        };\n    };\n    DocumentReference.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('DocumentReference.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeQueryMetadataChanges: true,\n                includeDocumentMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (snap) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    if (!snap.exists && snap.metadata.fromCache) {\n                        // TODO(dimond): If we're online and the document doesn't\n                        // exist then we resolve with a doc.exists set to false. If\n                        // we're offline however, we reject the Promise in this\n                        // case. Two options: 1) Cache the negative response from\n                        // the server so we can deliver that even when you're\n                        // offline 2) Actually reject the Promise in the online case\n                        // if the document doesn't exist.\n                        reject(new FirestoreError(Code.ABORTED, 'Failed to get document because the client is ' + 'offline.'));\n                    }\n                    else {\n                        resolve(snap);\n                    }\n                },\n                error: reject\n            });\n        });\n    };\n    return DocumentReference;\n}());\nexport { DocumentReference };\nvar DocumentSnapshot = /** @class */ (function () {\n    function DocumentSnapshot(_firestore, _key, _document, _fromCache) {\n        this._firestore = _firestore;\n        this._key = _key;\n        this._document = _document;\n        this._fromCache = _fromCache;\n    }\n    DocumentSnapshot.prototype.data = function () {\n        validateExactNumberOfArgs('DocumentSnapshot.data', arguments, 0);\n        if (!this._document) {\n            throw new FirestoreError(Code.NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.data().');\n        }\n        return this.convertObject(this._document.data);\n    };\n    DocumentSnapshot.prototype.get = function (fieldPath) {\n        validateExactNumberOfArgs('DocumentSnapshot.get', arguments, 1);\n        if (!this._document) {\n            throw new FirestoreError(Code.NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.get().');\n        }\n        var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n        return value === undefined ? undefined : this.convertValue(value);\n    };\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n        get: function () {\n            return new DocumentReference(this._key, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n        get: function () {\n            return this._document !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n        get: function () {\n            return {\n                hasPendingWrites: this._document !== null && this._document.hasLocalMutations,\n                fromCache: this._fromCache\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentSnapshot.prototype.convertObject = function (data) {\n        var _this = this;\n        var result = {};\n        data.forEach(function (key, value) {\n            result[key] = _this.convertValue(value);\n        });\n        return result;\n    };\n    DocumentSnapshot.prototype.convertValue = function (value) {\n        if (value instanceof ObjectValue) {\n            return this.convertObject(value);\n        }\n        else if (value instanceof ArrayValue) {\n            return this.convertArray(value);\n        }\n        else if (value instanceof RefValue) {\n            var key = value.value();\n            var database = this._firestore.ensureClientConfigured().databaseId();\n            if (!value.databaseId.equals(database)) {\n                // TODO(b/64130202): Somehow support foreign references.\n                log.error(\"Document \" + this._key.path + \" contains a document \" +\n                    \"reference within a different database (\" +\n                    (value.databaseId.projectId + \"/\" + value.databaseId.database + \") which is not \") +\n                    \"supported. It will be treated as a reference in the current \" +\n                    (\"database (\" + database.projectId + \"/\" + database.database + \") \") +\n                    \"instead.\");\n            }\n            return new DocumentReference(key, this._firestore);\n        }\n        else {\n            return value.value();\n        }\n    };\n    DocumentSnapshot.prototype.convertArray = function (data) {\n        var _this = this;\n        return data.internalValue.map(function (value) {\n            return _this.convertValue(value);\n        });\n    };\n    return DocumentSnapshot;\n}());\nexport { DocumentSnapshot };\nvar Query = /** @class */ (function () {\n    function Query(_query, firestore) {\n        this._query = _query;\n        this.firestore = firestore;\n    }\n    Query.prototype.where = function (field, opStr, value) {\n        validateExactNumberOfArgs('Query.where', arguments, 3);\n        validateArgType('Query.where', 'string', 2, opStr);\n        validateDefined('Query.where', 3, value);\n        var fieldValue;\n        var fieldPath = fieldPathFromArgument('Query.where', field);\n        if (fieldPath.isKeyField()) {\n            if (typeof value === 'string') {\n                if (value.indexOf('/') !== -1) {\n                    // TODO(dimond): Allow slashes once ancestor queries are supported\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it contains a slash.');\n                }\n                if (value === '') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it was an empty string.');\n                }\n                var path = this._query.path.child(new ResourcePath([value]));\n                assert(path.length % 2 === 0, 'Path should be a document key');\n                fieldValue = new RefValue(this.firestore._databaseId, new DocumentKey(path));\n            }\n            else if (value instanceof DocumentReference) {\n                var ref = value;\n                fieldValue = new RefValue(this.firestore._databaseId, ref._key);\n            }\n            else {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.where() requires its third parameter to be a \" +\n                    \"string or a DocumentReference if the first parameter is \" +\n                    \"FieldPath.documentId(), but it was: \" +\n                    (valueDescription(value) + \".\"));\n            }\n        }\n        else {\n            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);\n        }\n        var filter = fieldFilter(fieldPath, RelationOp.fromString(opStr), fieldValue);\n        this.validateNewFilter(filter);\n        return new Query(this._query.addFilter(filter), this.firestore);\n    };\n    Query.prototype.orderBy = function (field, directionStr) {\n        validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n        validateOptionalArgType('Query.orderBy', 'string', 2, directionStr);\n        var direction;\n        if (directionStr === undefined || directionStr === 'asc') {\n            direction = Direction.ASCENDING;\n        }\n        else if (directionStr === 'desc') {\n            direction = Direction.DESCENDING;\n        }\n        else {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.orderBy() has unknown direction '\" + directionStr + \"', \" +\n                \"expected 'asc' or 'desc'.\");\n        }\n        if (this._query.startAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +\n                'Query.startAfter() before calling Query.orderBy().');\n        }\n        if (this._query.endAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +\n                'Query.endBefore() before calling Query.orderBy().');\n        }\n        var fieldPath = fieldPathFromArgument('Query.orderBy', field);\n        var orderBy = new OrderBy(fieldPath, direction);\n        this.validateNewOrderBy(orderBy);\n        return new Query(this._query.addOrderBy(orderBy), this.firestore);\n    };\n    Query.prototype.limit = function (n) {\n        validateExactNumberOfArgs('Query.limit', arguments, 1);\n        validateArgType('Query.limit', 'number', 1, n);\n        if (n <= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. Query limit (\" + n + \") is invalid. Limit must be \" +\n                'positive.');\n        }\n        return new Query(this._query.withLimit(n), this.firestore);\n    };\n    Query.prototype.startAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.startAfter = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.endBefore = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.endAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.isEqual = function (other) {\n        if (!(other instanceof Query)) {\n            throw invalidClassError('isEqual', 'Query', 1, other);\n        }\n        return (this.firestore === other.firestore && this._query.equals(other._query));\n    };\n    /** Helper function to create a bound from a document or fields */\n    Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {\n        validateDefined(methodName, 1, docOrField);\n        if (docOrField instanceof DocumentSnapshot) {\n            if (fields.length > 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"().\");\n            }\n            var snap = docOrField;\n            if (!snap.exists) {\n                throw new FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\n                    (methodName + \"().\"));\n            }\n            return this.boundFromDocument(methodName, snap._document, before);\n        }\n        else {\n            var allFields = [docOrField].concat(fields);\n            return this.boundFromFields(methodName, allFields, before);\n        }\n    };\n    /**\n     * Create a Bound from a query and a document.\n     *\n     * Note that the Bound will always include the key of the document\n     * and so only the provided document will compare equal to the returned\n     * position.\n     *\n     * Will throw if the document does not contain all fields of the order by\n     * of the query.\n     */\n    Query.prototype.boundFromDocument = function (methodName, doc, before) {\n        var components = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            if (orderBy.field.isKeyField()) {\n                components.push(new RefValue(this.firestore._databaseId, doc.key));\n            }\n            else {\n                var value = doc.field(orderBy.field);\n                if (value !== undefined) {\n                    components.push(value);\n                }\n                else {\n                    var field = orderBy.field.canonicalString();\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\n                        (\"document for which the field '\" + field + \"' (used as the \") +\n                        \"orderBy) does not exist.\");\n                }\n            }\n        }\n        return new Bound(components, before);\n    };\n    /**\n     * Converts a list of field values to a Bound for the given query.\n     */\n    Query.prototype.boundFromFields = function (methodName, values, before) {\n        // Use explicit order by's because it has to match the query the user made\n        var orderBy = this._query.explicitOrderBy;\n        if (values.length > orderBy.length) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\n                \"The number of arguments must be less than or equal to the \" +\n                \"number of Query.orderBy() clauses\");\n        }\n        var components = [];\n        for (var i = 0; i < values.length; i++) {\n            var rawValue = values[i];\n            var orderByComponent = orderBy[i];\n            if (orderByComponent.field.isKeyField()) {\n                if (typeof rawValue !== 'string') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\n                        (methodName + \"(), but got a \" + typeof rawValue));\n                }\n                if (rawValue.indexOf('/') !== -1) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Document ID '\" + rawValue + \"' contains a slash in \" +\n                        (methodName + \"()\"));\n                }\n                var key = new DocumentKey(this._query.path.child(rawValue));\n                components.push(new RefValue(this.firestore._databaseId, key));\n            }\n            else {\n                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);\n                components.push(wrapped);\n            }\n        }\n        return new Bound(components, before);\n    };\n    Query.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n        var options = {};\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('Query.onSnapshot', options, [\n                'includeQueryMetadataChanges',\n                'includeDocumentMetadataChanges'\n            ]);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeDocumentMetadataChanges', options.includeDocumentMetadataChanges);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeQueryMetadataChanges', options.includeQueryMetadataChanges);\n            currArg++;\n        }\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(options, observer);\n    };\n    Query.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (result) {\n                if (observer.next) {\n                    observer.next(new QuerySnapshot(_this.firestore, _this._query, result));\n                }\n            },\n            error: errHandler\n        });\n        var firestoreClient = this.firestore.ensureClientConfigured();\n        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            firestoreClient.unlisten(internalListener);\n        };\n    };\n    Query.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('Query.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeDocumentMetadataChanges: false,\n                includeQueryMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (result) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    resolve(result);\n                },\n                error: reject\n            });\n        });\n    };\n    Query.prototype.validateNewFilter = function (filter) {\n        if (filter instanceof RelationFilter && filter.isInequality()) {\n            var existingField = this._query.getInequalityFilterField();\n            if (existingField !== null && !existingField.equals(filter.field)) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\n                    ' (<, <=, >, or >=) must be on the same field. But you have' +\n                    (\" inequality filters on '\" + existingField.toString() + \"'\") +\n                    (\" and '\" + filter.field.toString() + \"'\"));\n            }\n            var firstOrderByField = this._query.getFirstOrderByField();\n            if (firstOrderByField !== null) {\n                this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);\n            }\n        }\n    };\n    Query.prototype.validateNewOrderBy = function (orderBy) {\n        if (this._query.getFirstOrderByField() === null) {\n            // This is the first order by. It must match any inequality.\n            var inequalityField = this._query.getInequalityFilterField();\n            if (inequalityField !== null) {\n                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n            }\n        }\n    };\n    Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {\n        if (!orderBy.equals(inequality)) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\n                (\"(<, <=, >, or >=) on field '\" + inequality.toString() + \"' \") +\n                (\"and so you must also use '\" + inequality.toString() + \"' \") +\n                \"as your first Query.orderBy(), but your first Query.orderBy() \" +\n                (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n        }\n    };\n    return Query;\n}());\nexport { Query };\nvar QuerySnapshot = /** @class */ (function () {\n    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {\n        this._firestore = _firestore;\n        this._originalQuery = _originalQuery;\n        this._snapshot = _snapshot;\n        this._cachedChanges = null;\n        this.metadata = {\n            fromCache: _snapshot.fromCache,\n            hasPendingWrites: _snapshot.hasPendingWrites\n        };\n    }\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n        get: function () {\n            var result = [];\n            this.forEach(function (doc) { return result.push(doc); });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n        get: function () {\n            return this._snapshot.docs.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n        get: function () {\n            return this._snapshot.docs.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n        validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n        this._snapshot.docs.forEach(function (doc) {\n            callback.call(thisArg, _this.convertToDocumentImpl(doc));\n        });\n    };\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n        get: function () {\n            return new Query(this._originalQuery, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"docChanges\", {\n        get: function () {\n            if (!this._cachedChanges) {\n                this._cachedChanges = changesFromSnapshot(this._firestore, this._snapshot);\n            }\n            return this._cachedChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {\n        return new DocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache);\n    };\n    return QuerySnapshot;\n}());\nexport { QuerySnapshot };\nvar CollectionReference = /** @class */ (function (_super) {\n    __extends(CollectionReference, _super);\n    function CollectionReference(path, firestore) {\n        var _this = _super.call(this, InternalQuery.atPath(path), firestore) || this;\n        if (path.length % 2 !== 1) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +\n                'references must have an odd number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return _this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\n        get: function () {\n            return this._query.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\n        get: function () {\n            var parentPath = this._query.path.popLast();\n            if (parentPath.isEmpty()) {\n                return null;\n            }\n            else {\n                return new DocumentReference(new DocumentKey(parentPath), this.firestore);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\n        get: function () {\n            return this._query.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (pathString) {\n        validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n        // We allow omission of 'pathString' but explicitly prohibit passing in both\n        // 'undefined' and 'null'.\n        if (arguments.length === 0) {\n            pathString = AutoId.newId();\n        }\n        validateArgType('CollectionReference.doc', 'string', 1, pathString);\n        if (pathString === '') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');\n        }\n        var path = ResourcePath.fromString(pathString);\n        return DocumentReference.forPath(this._query.path.child(path), this.firestore);\n    };\n    CollectionReference.prototype.add = function (value) {\n        validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n        validateArgType('CollectionReference.add', 'object', 1, value);\n        var docRef = this.doc();\n        return docRef.set(value).then(function () { return docRef; });\n    };\n    return CollectionReference;\n}(Query));\nexport { CollectionReference };\nfunction validateSetOptions(methodName, options) {\n    if (options === undefined) {\n        return {\n            merge: false\n        };\n    }\n    validateOptionNames(methodName, options, ['merge']);\n    validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n    return options;\n}\nfunction validateReference(methodName, documentRef, firestore) {\n    if (!(documentRef instanceof DocumentReference)) {\n        throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n    }\n    else if (documentRef.firestore !== firestore) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n    }\n    else {\n        return documentRef;\n    }\n}\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nexport function changesFromSnapshot(firestore, snapshot) {\n    if (snapshot.oldDocs.isEmpty()) {\n        // Special case the first snapshot because index calculation is easy and\n        // fast\n        var lastDoc_1;\n        var index_1 = 0;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');\n            assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');\n            lastDoc_1 = change.doc;\n            return {\n                type: 'added',\n                doc: doc,\n                oldIndex: -1,\n                newIndex: index_1++\n            };\n        });\n    }\n    else {\n        // A DocumentSet that is updated incrementally as changes are applied to use\n        // to lookup the index of a document.\n        var indexTracker_1 = snapshot.oldDocs;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            var oldIndex = -1;\n            var newIndex = -1;\n            if (change.type !== ChangeType.Added) {\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\n                assert(oldIndex >= 0, 'Index for document not found');\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\n            }\n            if (change.type !== ChangeType.Removed) {\n                indexTracker_1 = indexTracker_1.add(change.doc);\n                newIndex = indexTracker_1.indexOf(change.doc.key);\n            }\n            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };\n        });\n    }\n}\nfunction resultChangeType(type) {\n    switch (type) {\n        case ChangeType.Added:\n            return 'added';\n        case ChangeType.Modified:\n        case ChangeType.Metadata:\n            return 'modified';\n        case ChangeType.Removed:\n            return 'removed';\n        default:\n            return fail('Unknown change type: ' + type);\n    }\n}\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\n// tslint:disable:variable-name\nexport var PublicFirestore = makeConstructorPrivate(Firestore, 'Use firebase.firestore() instead.');\nexport var PublicTransaction = makeConstructorPrivate(Transaction, 'Use firebase.firestore().runTransaction() instead.');\nexport var PublicWriteBatch = makeConstructorPrivate(WriteBatch, 'Use firebase.firestore().batch() instead.');\nexport var PublicDocumentReference = makeConstructorPrivate(DocumentReference, 'Use firebase.firestore().doc() instead.');\nexport var PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);\nexport var PublicQuery = makeConstructorPrivate(Query);\nexport var PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);\nexport var PublicCollectionReference = makeConstructorPrivate(CollectionReference, 'Use firebase.firestore().collection() instead.');\n// tslint:enable:variable-name\n\n//# sourceMappingURL=database.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/database.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PublicBlob } from '../api/blob';\nimport { Firestore, PublicCollectionReference, PublicDocumentReference, PublicDocumentSnapshot, PublicFirestore, PublicQuery, PublicQuerySnapshot, PublicTransaction, PublicWriteBatch } from '../api/database';\nimport { FieldPath } from '../api/field_path';\nimport { PublicFieldValue } from '../api/field_value';\nimport { GeoPoint } from '../api/geo_point';\nimport { shallowCopy } from '../util/obj';\nvar firestoreNamespace = {\n    Firestore: PublicFirestore,\n    GeoPoint: GeoPoint,\n    Blob: PublicBlob,\n    Transaction: PublicTransaction,\n    WriteBatch: PublicWriteBatch,\n    DocumentReference: PublicDocumentReference,\n    DocumentSnapshot: PublicDocumentSnapshot,\n    Query: PublicQuery,\n    QuerySnapshot: PublicQuerySnapshot,\n    CollectionReference: PublicCollectionReference,\n    FieldPath: FieldPath,\n    FieldValue: PublicFieldValue,\n    setLogLevel: Firestore.setLogLevel\n};\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n */\nexport function configureForFirebase(firebase) {\n    firebase.INTERNAL.registerService('firestore', function (app) { return new Firestore(app); }, shallowCopy(firestoreNamespace));\n}\n/**\n * Exports the Firestore namespace into the provided `exportObject` object under\n * the key 'firestore'. This is used for wrapped binary that exposes Firestore\n * as a goog module.\n */\nexport function configureForStandalone(exportObject) {\n    var copiedNamespace = shallowCopy(firestoreNamespace);\n    // Unlike the use with Firebase, the standalone allows the use of the\n    // constructor, so export it's internal class\n    copiedNamespace['Firestore'] = Firestore;\n    exportObject['firestore'] = copiedNamespace;\n}\n\n//# sourceMappingURL=config.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform/config.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport './src/platform_browser/browser_init';\nimport { configureForFirebase } from './src/platform/config';\nexport function registerFirestore(instance) {\n    configureForFirebase(instance);\n}\nregisterFirestore(firebase);\n\n//# sourceMappingURL=index.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/index.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\n/** The semver (www.semver.org) version of the SDK. */\nexport var SDK_VERSION = firebase.SDK_VERSION;\n\n//# sourceMappingURL=version.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/version.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.\n//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum\nexport var Code = {\n    // Causes are copied from:\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n    /** Not an error; returned on success. */\n    OK: 'ok',\n    /** The operation was cancelled (typically by the caller). */\n    CANCELLED: 'cancelled',\n    /** Unknown error or an error from a different error domain. */\n    UNKNOWN: 'unknown',\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    INVALID_ARGUMENT: 'invalid-argument',\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    /** Some requested entity (e.g., file or directory) was not found. */\n    NOT_FOUND: 'not-found',\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    ALREADY_EXISTS: 'already-exists',\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    PERMISSION_DENIED: 'permission-denied',\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    UNAUTHENTICATED: 'unauthenticated',\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operation's execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    FAILED_PRECONDITION: 'failed-precondition',\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    ABORTED: 'aborted',\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    OUT_OF_RANGE: 'out-of-range',\n    /** Operation is not implemented or not supported/enabled in this service. */\n    UNIMPLEMENTED: 'unimplemented',\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    INTERNAL: 'internal',\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    UNAVAILABLE: 'unavailable',\n    /** Unrecoverable data loss or corruption. */\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nvar FirestoreError = /** @class */ (function (_super) {\n    __extends(FirestoreError, _super);\n    function FirestoreError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.name = 'FirebaseError';\n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\n        return _this;\n    }\n    return FirestoreError;\n}(Error));\nexport { FirestoreError };\n\n//# sourceMappingURL=error.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/error.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        validateExactNumberOfArgs('GeoPoint', arguments, 2);\n        validateArgType('GeoPoint', 'number', 1, latitude);\n        validateArgType('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._equals = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (primitiveComparator(this._lat, other._lat) ||\n            primitiveComparator(this._long, other._long));\n    };\n    return GeoPoint;\n}());\nexport { GeoPoint };\n\n//# sourceMappingURL=geo_point.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/geo_point.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { primitiveComparator } from '../util/misc';\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\nexport { DatabaseInfo };\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.equals = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (primitiveComparator(this.projectId, other.projectId) ||\n            primitiveComparator(this.database, other.database));\n    };\n    return DatabaseId;\n}());\nexport { DatabaseId };\n\n//# sourceMappingURL=database_info.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/database_info.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nexport var DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar Path = /** @class */ (function () {\n    function Path(segments, offset, length) {\n        this.init(segments, offset, length);\n    }\n    /**\n     * An initialization method that can be called from outside the constructor.\n     * We need this so that we can have a non-static construct method that returns\n     * the polymorphic `this` type.\n     */\n    Path.prototype.init = function (segments, offset, length) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n        else if (offset > segments.length) {\n            fail('offset ' + offset + ' out of range ' + segments.length);\n        }\n        if (length === undefined) {\n            length = segments.length - offset;\n        }\n        else if (length > segments.length - offset) {\n            fail('length ' + length + ' out of range ' + (segments.length - offset));\n        }\n        this.segments = segments;\n        this.offset = offset;\n        this.len = length;\n    };\n    /**\n     * Constructs a new instance of Path using the same concrete type as `this`.\n     * We need this instead of using the normal constructor, because polymorphic\n     * `this` doesn't work on static methods.\n     */\n    Path.prototype.construct = function (segments, offset, length) {\n        var path = Object.create(Object.getPrototypeOf(this));\n        path.init(segments, offset, length);\n        return path;\n    };\n    Object.defineProperty(Path.prototype, \"length\", {\n        get: function () {\n            return this.len;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.equals = function (other) {\n        return Path.comparator(this, other) === 0;\n    };\n    Path.prototype.child = function (nameOrPath) {\n        var segments = this.segments.slice(this.offset, this.limit());\n        if (nameOrPath instanceof Path) {\n            nameOrPath.forEach(function (segment) {\n                segments.push(segment);\n            });\n        }\n        else if (typeof nameOrPath === 'string') {\n            segments.push(nameOrPath);\n        }\n        else {\n            fail('Unknown parameter type for Path.child(): ' + nameOrPath);\n        }\n        return this.construct(segments);\n    };\n    /** The index of one past the last segment of the path. */\n    Path.prototype.limit = function () {\n        return this.offset + this.length;\n    };\n    Path.prototype.popFirst = function (size) {\n        size = size === undefined ? 1 : size;\n        assert(this.length >= size, \"Can't call popFirst() with less segments\");\n        return this.construct(this.segments, this.offset + size, this.length - size);\n    };\n    Path.prototype.popLast = function () {\n        assert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n        return this.construct(this.segments, this.offset, this.length - 1);\n    };\n    Path.prototype.firstSegment = function () {\n        assert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n        return this.segments[this.offset];\n    };\n    Path.prototype.lastSegment = function () {\n        assert(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n        return this.segments[this.limit() - 1];\n    };\n    Path.prototype.get = function (index) {\n        assert(index < this.length, 'Index out of range');\n        return this.segments[this.offset + index];\n    };\n    Path.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    Path.prototype.isPrefixOf = function (other) {\n        if (other.length < this.length) {\n            return false;\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this.get(i) !== other.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Path.prototype.forEach = function (fn) {\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\n            fn(this.segments[i]);\n        }\n    };\n    Path.prototype.toArray = function () {\n        return this.segments.slice(this.offset, this.limit());\n    };\n    Path.comparator = function (p1, p2) {\n        var len = Math.min(p1.length, p2.length);\n        for (var i = 0; i < len; i++) {\n            var left = p1.get(i);\n            var right = p2.get(i);\n            if (left < right)\n                return -1;\n            if (left > right)\n                return 1;\n        }\n        if (p1.length < p2.length)\n            return -1;\n        if (p1.length > p2.length)\n            return 1;\n        return 0;\n    };\n    return Path;\n}());\nexport { Path };\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nvar ResourcePath = /** @class */ (function (_super) {\n    __extends(ResourcePath, _super);\n    function ResourcePath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourcePath.prototype.canonicalString = function () {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join('/');\n    };\n    ResourcePath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Creates a resource path from the given slash-delimited string.\n     */\n    ResourcePath.fromString = function (path) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        if (path.indexOf('//') >= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid path (\" + path + \"). Paths must not contain // in them.\");\n        }\n        // We may still have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });\n        return new ResourcePath(segments);\n    };\n    ResourcePath.EMPTY_PATH = new ResourcePath([]);\n    return ResourcePath;\n}(Path));\nexport { ResourcePath };\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\nvar FieldPath = /** @class */ (function (_super) {\n    __extends(FieldPath, _super);\n    function FieldPath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n    FieldPath.isValidIdentifier = function (segment) {\n        return identifierRegExp.test(segment);\n    };\n    FieldPath.prototype.canonicalString = function () {\n        return this.toArray()\n            .map(function (str) {\n            str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n            if (!FieldPath.isValidIdentifier(str)) {\n                str = '`' + str + '`';\n            }\n            return str;\n        })\n            .join('.');\n    };\n    FieldPath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Returns true if this field references the key of a document.\n     */\n    FieldPath.prototype.isKeyField = function () {\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n    };\n    /**\n     * The field designating the key of a document.\n     */\n    FieldPath.keyField = function () {\n        return new FieldPath([DOCUMENT_KEY_NAME]);\n    };\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n    FieldPath.fromServerFormat = function (path) {\n        var segments = [];\n        var current = '';\n        var i = 0;\n        var addCurrentSegment = function () {\n            if (current.length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\n                    \"with '.', end with '.', or contain '..'\");\n            }\n            segments.push(current);\n            current = '';\n        };\n        var inBackticks = false;\n        while (i < path.length) {\n            var c = path[i];\n            if (c === '\\\\') {\n                if (i + 1 === path.length) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n                }\n                var next = path[i + 1];\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n                }\n                current += next;\n                i += 2;\n            }\n            else if (c === '`') {\n                inBackticks = !inBackticks;\n                i++;\n            }\n            else if (c === '.' && !inBackticks) {\n                addCurrentSegment();\n                i++;\n            }\n            else {\n                current += c;\n                i++;\n            }\n        }\n        addCurrentSegment();\n        if (inBackticks) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n        }\n        return new FieldPath(segments);\n    };\n    FieldPath.EMPTY_PATH = new FieldPath([]);\n    return FieldPath;\n}(Path));\nexport { FieldPath };\n\n//# sourceMappingURL=path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/path.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { ResourcePath } from './path';\nvar DocumentKey = /** @class */ (function () {\n    function DocumentKey(path) {\n        this.path = path;\n        assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +\n            path.toArray().join('/'));\n    }\n    DocumentKey.prototype.equals = function (other) {\n        return (other !== null && ResourcePath.comparator(this.path, other.path) === 0);\n    };\n    DocumentKey.prototype.toString = function () {\n        return this.path.toString();\n    };\n    DocumentKey.comparator = function (k1, k2) {\n        return ResourcePath.comparator(k1.path, k2.path);\n    };\n    DocumentKey.isDocumentKey = function (path) {\n        return path.length % 2 === 0;\n    };\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param path The segments of the path to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromSegments = function (segments) {\n        return new DocumentKey(new ResourcePath(segments.slice()));\n    };\n    /**\n     * Creates and returns a new document key using '/' to split the string into\n     * segments.\n     *\n     * @param path The slash-separated path string to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromPathString = function (path) {\n        return new DocumentKey(ResourcePath.fromString(path));\n    };\n    DocumentKey.EMPTY = new DocumentKey(new ResourcePath([]));\n    return DocumentKey;\n}());\nexport { DocumentKey };\n\n//# sourceMappingURL=document_key.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document_key.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { DocumentKey } from './document_key';\nvar Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.equals = function (other) {\n        return (other instanceof Document &&\n            this.key.equals(other.key) &&\n            this.version.equals(other.version) &&\n            this.data.equals(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return fail(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\nexport { Document };\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.equals = function (other) {\n        return (other && other.version.equals(this.version) && other.key.equals(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\nexport { NoDocument };\n\n//# sourceMappingURL=document.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert, fail } from './assert';\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar SortedMap = /** @class */ (function () {\n    function SortedMap(comparator, root) {\n        this.comparator = comparator;\n        this.root = root ? root : LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator, this.root\n            .insert(key, value, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns a copy of the map, with the specified key removed.\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator, this.root\n            .remove(key, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns the value of the node with the given key, or null.\n    SortedMap.prototype.get = function (key) {\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    // Returns the key of the item *before* the specified key, or null if key is\n    // the first item.\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var node = this.root;\n        var rightParent = null;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty())\n                        node = node.right;\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw fail('Attempted to find predecessor key for a nonexistent key.' +\n            '  What gives?');\n    };\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    SortedMap.prototype.indexOf = function (key) {\n        // Number of nodes that were pruned when descending right\n        var prunedNodes = 0;\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return prunedNodes + node.left.size;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else {\n                // Count all nodes left of the node plus the node itself\n                prunedNodes += node.left.size + 1;\n                node = node.right;\n            }\n        }\n        // Node not found\n        return -1;\n    };\n    SortedMap.prototype.isEmpty = function () {\n        return this.root.isEmpty();\n    };\n    Object.defineProperty(SortedMap.prototype, \"size\", {\n        // Returns the total number of nodes in the map.\n        get: function () {\n            return this.root.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the minimum key in the map.\n    SortedMap.prototype.minKey = function () {\n        return this.root.minKey();\n    };\n    // Returns the maximum key in the map.\n    SortedMap.prototype.maxKey = function () {\n        return this.root.maxKey();\n    };\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root.inorderTraversal(action);\n    };\n    SortedMap.prototype.forEach = function (fn) {\n        this.inorderTraversal(function (k, v) {\n            fn(k, v);\n            return false;\n        });\n    };\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root.reverseTraversal(action);\n    };\n    SortedMap.prototype.getIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root, null, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root, key, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root, null, this.comparator, true, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root, key, this.comparator, true, resultGenerator);\n    };\n    return SortedMap;\n}()); // end SortedMap\nexport { SortedMap };\n// An iterator over an LLRBNode.\nvar SortedMapIterator = /** @class */ (function () {\n    function SortedMapIterator(node, startKey, comparator, isReverse, resultGenerator) {\n        this.resultGenerator = resultGenerator || null;\n        this.isReverse = isReverse;\n        this.nodeStack = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move\n                // to the next one\n                this.nodeStack.push(node);\n                if (this.isReverse) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');\n        var node = this.nodeStack.pop();\n        var result;\n        if (this.resultGenerator)\n            result = this.resultGenerator(node.key, node.value);\n        else\n            result = { key: node.key, value: node.value };\n        if (this.isReverse) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack.length === 0)\n            return null;\n        var node = this.nodeStack[this.nodeStack.length - 1];\n        if (this.resultGenerator) {\n            return this.resultGenerator(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    };\n    return SortedMapIterator;\n}()); // end SortedMapIterator\nexport { SortedMapIterator };\n// Represents a node in a Left-leaning Red-Black tree.\nvar LLRBNode = /** @class */ (function () {\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : LLRBNode.EMPTY;\n        this.right = right != null ? right : LLRBNode.EMPTY;\n        this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    // Returns the minimum node in the tree.\n    LLRBNode.prototype.min = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min();\n        }\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.minKey = function () {\n        return this.min().key;\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    // Returns new tree, with the key/value added.\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var n = this;\n        var cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.removeMin = function () {\n        if (this.left.isEmpty()) {\n            return LLRBNode.EMPTY;\n        }\n        var n = this;\n        if (!n.left.isRed() && !n.left.left.isRed())\n            n = n.moveRedLeft();\n        n = n.copy(null, null, null, n.left.removeMin(), null);\n        return n.fixUp();\n    };\n    // Returns new tree, with the specified item removed.\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var smallest;\n        var n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n                n = n.moveRedLeft();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed())\n                n = n.rotateRight();\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n                n = n.moveRedRight();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return LLRBNode.EMPTY;\n                }\n                else {\n                    smallest = n.right.min();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.isRed = function () {\n        return this.color;\n    };\n    // Returns new tree after performing any needed rotations.\n    LLRBNode.prototype.fixUp = function () {\n        var n = this;\n        if (n.right.isRed() && !n.left.isRed())\n            n = n.rotateLeft();\n        if (n.left.isRed() && n.left.left.isRed())\n            n = n.rotateRight();\n        if (n.left.isRed() && n.right.isRed())\n            n = n.colorFlip();\n        return n;\n    };\n    LLRBNode.prototype.moveRedLeft = function () {\n        var n = this.colorFlip();\n        if (n.right.left.isRed()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight());\n            n = n.rotateLeft();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.moveRedRight = function () {\n        var n = this.colorFlip();\n        if (n.left.left.isRed()) {\n            n = n.rotateRight();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.rotateLeft = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    LLRBNode.prototype.rotateRight = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    LLRBNode.prototype.colorFlip = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    // For testing.\n    LLRBNode.prototype.checkMaxDepth = function () {\n        var blackDepth = this.check();\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    LLRBNode.prototype.check = function () {\n        if (this.isRed() && this.left.isRed()) {\n            throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed()) {\n            throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        var blackDepth = this.left.check();\n        if (blackDepth !== this.right.check()) {\n            throw fail('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed() ? 0 : 1);\n        }\n    };\n    LLRBNode.EMPTY = null;\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}()); // end LLRBNode\nexport { LLRBNode };\n// Represents an empty node (a leaf node in the Red-Black Tree).\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n        this.size = 0;\n    }\n    // Returns a copy of the current node.\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    // Returns a copy of the tree, with the specified key/value added.\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new LLRBNode(key, value);\n    };\n    // Returns a copy of the tree, with the specified key removed.\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.isRed = function () {\n        return false;\n    };\n    // For testing.\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.check = function () {\n        return 0;\n    };\n    return LLRBEmptyNode;\n}()); // end LLRBEmptyNode\nexport { LLRBEmptyNode };\nLLRBNode.EMPTY = new LLRBEmptyNode();\n\n//# sourceMappingURL=sorted_map.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/sorted_map.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { emptyByteString } from '../platform/platform';\n/** An enumeration of the different purposes we have for queries. */\nexport var QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar QueryData = /** @class */ (function () {\n    function QueryData(\n        /** The query being listened to. */\n        query, \n        /**\n         * The target ID to which the query corresponds; Assigned by the\n         * LocalStore for user listens and by the SyncEngine for limbo watches.\n         */\n        targetId, \n        /** The purpose of the query. */\n        purpose, \n        /** The latest snapshot version seen for this target. */\n        snapshotVersion, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = SnapshotVersion.MIN; }\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.equals = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.equals(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.equals(other.query));\n    };\n    return QueryData;\n}());\nexport { QueryData };\n\n//# sourceMappingURL=query_data.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/query_data.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nvar Timestamp = /** @class */ (function () {\n    function Timestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n        assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n        assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n        assert(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\n        // This will break in the year 10,000.\n        assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n    }\n    Timestamp.now = function () {\n        return Timestamp.fromEpochMilliseconds(Date.now());\n    };\n    Timestamp.fromDate = function (date) {\n        return Timestamp.fromEpochMilliseconds(date.getTime());\n    };\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.fromISOString = function (utc) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        var nanos = 0;\n        var fraction = isoRegExp.exec(utc);\n        assert(!!fraction, 'invalid timestamp: ' + utc);\n        if (fraction[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            var nanoStr = fraction[1];\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\n            nanos = parseInt(nanoStr, 10);\n        }\n        // Parse the date to get the seconds.\n        var date = new Date(utc);\n        var seconds = Math.floor(date.getTime() / 1000);\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.prototype.toDate = function () {\n        return new Date(this.toEpochMilliseconds());\n    };\n    Timestamp.prototype.toEpochMilliseconds = function () {\n        return this.seconds * 1000 + this.nanos / 1e6;\n    };\n    Timestamp.prototype.compareTo = function (other) {\n        if (this.seconds === other.seconds) {\n            return primitiveComparator(this.nanos, other.nanos);\n        }\n        return primitiveComparator(this.seconds, other.seconds);\n    };\n    Timestamp.prototype.equals = function (other) {\n        return other.seconds === this.seconds && other.nanos === this.nanos;\n    };\n    Timestamp.prototype.toString = function () {\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n    };\n    return Timestamp;\n}());\nexport { Timestamp };\n\n//# sourceMappingURL=timestamp.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/timestamp.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from './timestamp';\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar SnapshotVersion = /** @class */ (function () {\n    function SnapshotVersion(timestamp) {\n        this.timestamp = timestamp;\n    }\n    // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n    // delete this constructor and use a timestamp-backed version everywhere.\n    SnapshotVersion.fromMicroseconds = function (value) {\n        var seconds = Math.floor(value / 1e6);\n        var nanos = (value % 1e6) * 1e3;\n        return new SnapshotVersion(new Timestamp(seconds, nanos));\n    };\n    SnapshotVersion.fromTimestamp = function (value) {\n        return new SnapshotVersion(value);\n    };\n    SnapshotVersion.forDeletedDoc = function () {\n        return SnapshotVersion.MIN;\n    };\n    SnapshotVersion.prototype.compareTo = function (other) {\n        return this.timestamp.compareTo(other.timestamp);\n    };\n    SnapshotVersion.prototype.equals = function (other) {\n        return this.timestamp.equals(other.timestamp);\n    };\n    /** Returns a number representation of the version for use in spec tests. */\n    SnapshotVersion.prototype.toMicroseconds = function () {\n        // Convert to microseconds.\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n    };\n    SnapshotVersion.prototype.toString = function () {\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n    };\n    SnapshotVersion.prototype.toTimestamp = function () {\n        return this.timestamp;\n    };\n    SnapshotVersion.MIN = new SnapshotVersion(new Timestamp(0, 0));\n    return SnapshotVersion;\n}());\nexport { SnapshotVersion };\n\n//# sourceMappingURL=snapshot_version.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/snapshot_version.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { assert, fail } from '../util/assert';\nimport * as misc from '../util/misc';\nimport { Document, NoDocument } from './document';\nimport { ObjectValue, ServerTimestampValue } from './field_value';\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar FieldMask = /** @class */ (function () {\n    function FieldMask(fields) {\n        this.fields = fields;\n        // TODO(dimond): validation of FieldMask\n    }\n    FieldMask.prototype.equals = function (other) {\n        return misc.arrayEquals(this.fields, other.fields);\n    };\n    return FieldMask;\n}());\nexport { FieldMask };\n/** Transforms a value into a server-generated timestamp. */\nvar ServerTimestampTransform = /** @class */ (function () {\n    function ServerTimestampTransform() {\n    }\n    ServerTimestampTransform.prototype.equals = function (other) {\n        return other instanceof ServerTimestampTransform;\n    };\n    ServerTimestampTransform.instance = new ServerTimestampTransform();\n    return ServerTimestampTransform;\n}());\nexport { ServerTimestampTransform };\n/** A field path and the TransformOperation to perform upon it. */\nvar FieldTransform = /** @class */ (function () {\n    function FieldTransform(field, transform) {\n        this.field = field;\n        this.transform = transform;\n    }\n    FieldTransform.prototype.equals = function (other) {\n        return (this.field.equals(other.field) && this.transform.equals(other.transform));\n    };\n    return FieldTransform;\n}());\nexport { FieldTransform };\n/** The result of successfully applying a mutation to the backend. */\nvar MutationResult = /** @class */ (function () {\n    function MutationResult(\n        /**\n         * The version at which the mutation was committed or null for a delete.\n         */\n        version, \n        /**\n         * The resulting fields returned from the backend after a\n         * TransformMutation has been committed. Contains one FieldValue for each\n         * FieldTransform that was in the mutation.\n         *\n         * Will be null if the mutation was not a TransformMutation.\n         */\n        transformResults) {\n        this.version = version;\n        this.transformResults = transformResults;\n    }\n    return MutationResult;\n}());\nexport { MutationResult };\nexport var MutationType;\n(function (MutationType) {\n    MutationType[MutationType[\"Set\"] = 0] = \"Set\";\n    MutationType[MutationType[\"Patch\"] = 1] = \"Patch\";\n    MutationType[MutationType[\"Transform\"] = 2] = \"Transform\";\n    MutationType[MutationType[\"Delete\"] = 3] = \"Delete\";\n})(MutationType || (MutationType = {}));\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar Precondition = /** @class */ (function () {\n    function Precondition(updateTime, exists) {\n        this.updateTime = updateTime;\n        this.exists = exists;\n        assert(updateTime === undefined || exists === undefined, 'Precondition can specify \"exists\" or \"updateTime\" but not both');\n    }\n    /** Creates a new Precondition with an exists flag. */\n    Precondition.exists = function (exists) {\n        return new Precondition(undefined, exists);\n    };\n    /** Creates a new Precondition based on a version a document exists at. */\n    Precondition.updateTime = function (version) {\n        return new Precondition(version);\n    };\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\n        /** Returns whether this Precondition is empty. */\n        get: function () {\n            return this.updateTime === undefined && this.exists === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns true if the preconditions is valid for the given document\n     * (or null if no document is available).\n     */\n    Precondition.prototype.isValidFor = function (maybeDoc) {\n        if (this.updateTime !== undefined) {\n            return (maybeDoc instanceof Document && maybeDoc.version.equals(this.updateTime));\n        }\n        else if (this.exists !== undefined) {\n            if (this.exists) {\n                return maybeDoc instanceof Document;\n            }\n            else {\n                return maybeDoc === null || maybeDoc instanceof NoDocument;\n            }\n        }\n        else {\n            assert(this.isNone, 'Precondition should be empty');\n            return true;\n        }\n    };\n    Precondition.prototype.equals = function (other) {\n        return (misc.equals(this.updateTime, other.updateTime) &&\n            this.exists === other.exists);\n    };\n    Precondition.NONE = new Precondition();\n    return Precondition;\n}());\nexport { Precondition };\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also it version.\n * In the case of Set, Patch, and Transform mutations we preserve the existing\n * version. In the case of Delete mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nvar Mutation = /** @class */ (function () {\n    function Mutation() {\n    }\n    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {\n        if (maybeDoc != null) {\n            assert(maybeDoc.key.equals(this.key), 'Can only apply a mutation to a document with the same key');\n        }\n    };\n    /**\n     * Returns the version from the given document for use as the result of a\n     * mutation. Mutations are defined to return the version of the base document\n     * only if it is an existing document. Deleted and unknown documents have a\n     * post-mutation version of SnapshotVersion.MIN.\n     */\n    Mutation.getPostMutationVersion = function (maybeDoc) {\n        if (maybeDoc instanceof Document) {\n            return maybeDoc.version;\n        }\n        else {\n            return SnapshotVersion.MIN;\n        }\n    };\n    return Mutation;\n}());\nexport { Mutation };\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar SetMutation = /** @class */ (function (_super) {\n    __extends(SetMutation, _super);\n    function SetMutation(key, value, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.value = value;\n        _this.precondition = precondition;\n        _this.type = MutationType.Set;\n        return _this;\n    }\n    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new Document(this.key, version, this.value, {\n            hasLocalMutations: false\n        });\n    };\n    SetMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new Document(this.key, version, this.value, {\n            hasLocalMutations: true\n        });\n    };\n    SetMutation.prototype.equals = function (other) {\n        return (other instanceof SetMutation &&\n            this.key.equals(other.key) &&\n            this.value.equals(other.value) &&\n            this.precondition.equals(other.precondition));\n    };\n    return SetMutation;\n}(Mutation));\nexport { SetMutation };\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar PatchMutation = /** @class */ (function (_super) {\n    __extends(PatchMutation, _super);\n    function PatchMutation(key, data, fieldMask, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.data = data;\n        _this.fieldMask = fieldMask;\n        _this.precondition = precondition;\n        _this.type = MutationType.Patch;\n        return _this;\n    }\n    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new Document(this.key, version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    PatchMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new Document(this.key, version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    PatchMutation.prototype.equals = function (other) {\n        return (other instanceof PatchMutation &&\n            this.key.equals(other.key) &&\n            this.fieldMask.equals(other.fieldMask) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Patches the data of document if available or creates a new document. Note\n     * that this does not check whether or not the precondition of this patch\n     * holds.\n     */\n    PatchMutation.prototype.patchDocument = function (maybeDoc) {\n        var data;\n        if (maybeDoc instanceof Document) {\n            data = maybeDoc.data;\n        }\n        else {\n            data = ObjectValue.EMPTY;\n        }\n        return this.patchObject(data);\n    };\n    PatchMutation.prototype.patchObject = function (data) {\n        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {\n            var fieldPath = _a[_i];\n            var newValue = this.data.field(fieldPath);\n            if (newValue !== undefined) {\n                data = data.set(fieldPath, newValue);\n            }\n            else {\n                data = data.delete(fieldPath);\n            }\n        }\n        return data;\n    };\n    return PatchMutation;\n}(Mutation));\nexport { PatchMutation };\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nvar TransformMutation = /** @class */ (function (_super) {\n    __extends(TransformMutation, _super);\n    function TransformMutation(key, fieldTransforms) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.fieldTransforms = fieldTransforms;\n        _this.type = MutationType.Transform;\n        // NOTE: We set a precondition of exists: true as a safety-check, since we\n        // always combine TransformMutations with a SetMutation or PatchMutation which\n        // (if successful) should end up with an existing document.\n        _this.precondition = Precondition.exists(true);\n        return _this;\n    }\n    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');\n        var transformResults = mutationResult.transformResults;\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new Document(this.key, doc.version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    TransformMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var transformResults = this.localTransformResults(localWriteTime);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new Document(this.key, doc.version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    TransformMutation.prototype.equals = function (other) {\n        return (other instanceof TransformMutation &&\n            this.key.equals(other.key) &&\n            misc.arrayEquals(this.fieldTransforms, other.fieldTransforms) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Asserts that the given MaybeDocument is actually a Document and verifies\n     * that it matches the key for this mutation. Since we only support\n     * transformations with precondition exists this method is guaranteed to be\n     * safe.\n     */\n    TransformMutation.prototype.requireDocument = function (maybeDoc) {\n        assert(maybeDoc instanceof Document, 'Unknown MaybeDocument type ' + maybeDoc);\n        var doc = maybeDoc;\n        assert(doc.key.equals(this.key), 'Can only transform a document with the same key');\n        return doc;\n    };\n    /**\n     * Creates a list of \"transform results\" (a transform result is a field value\n     * representing the result of applying a transform) for use when applying a\n     * TransformMutation locally.\n     *\n     * @param localWriteTime The local time of the transform mutation (used to\n     *     generate ServerTimestampValues).\n     * @return The transform results list.\n     */\n    TransformMutation.prototype.localTransformResults = function (localWriteTime) {\n        var transformResults = [];\n        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {\n            var fieldTransform = _a[_i];\n            var transform = fieldTransform.transform;\n            if (transform instanceof ServerTimestampTransform) {\n                transformResults.push(new ServerTimestampValue(localWriteTime));\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return transformResults;\n    };\n    TransformMutation.prototype.transformObject = function (data, transformResults) {\n        assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');\n        for (var i = 0; i < this.fieldTransforms.length; i++) {\n            var fieldTransform = this.fieldTransforms[i];\n            var transform = fieldTransform.transform;\n            var fieldPath = fieldTransform.field;\n            if (transform instanceof ServerTimestampTransform) {\n                data = data.set(fieldPath, transformResults[i]);\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return data;\n    };\n    return TransformMutation;\n}(Mutation));\nexport { TransformMutation };\n/** A mutation that deletes the document at the given key. */\nvar DeleteMutation = /** @class */ (function (_super) {\n    __extends(DeleteMutation, _super);\n    function DeleteMutation(key, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.precondition = precondition;\n        _this.type = MutationType.Delete;\n        return _this;\n    }\n    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        return new NoDocument(this.key, SnapshotVersion.MIN);\n    };\n    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(this.key), 'Can only apply mutation to document with same key');\n        }\n        return new NoDocument(this.key, SnapshotVersion.forDeletedDoc());\n    };\n    DeleteMutation.prototype.equals = function (other) {\n        return (other instanceof DeleteMutation &&\n            this.key.equals(other.key) &&\n            this.precondition.equals(other.precondition));\n    };\n    return DeleteMutation;\n}(Mutation));\nexport { DeleteMutation };\n\n//# sourceMappingURL=mutation.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/mutation.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExistenceFilter = /** @class */ (function () {\n    // TODO(b/33078163): just use simplest form of existence filter for now\n    function ExistenceFilter(count) {\n        this.count = count;\n    }\n    ExistenceFilter.prototype.equals = function (other) {\n        return other && other.count === this.count;\n    };\n    return ExistenceFilter;\n}());\nexport { ExistenceFilter };\n\n//# sourceMappingURL=existence_filter.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/existence_filter.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from './sorted_map';\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new SortedMap(this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.equals = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\nexport { SortedSet };\n\n//# sourceMappingURL=sorted_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/sorted_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nvar RemoteEvent = /** @class */ (function () {\n    function RemoteEvent(\n        /**\n         * The snapshot version this event brings us up to, or MIN if not set.\n         */\n        snapshotVersion, \n        /**\n         * A map from target to changes to the target. See TargetChange.\n         */\n        targetChanges, \n        /**\n         * A set of which documents have changed or been deleted, along with the\n         * doc's new values (if not deleted).\n         */\n        documentUpdates) {\n        this.snapshotVersion = snapshotVersion;\n        this.targetChanges = targetChanges;\n        this.documentUpdates = documentUpdates;\n    }\n    RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n        this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n    };\n    RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n        /*\n         * An existence filter mismatch will reset the query and we need to reset\n         * the mapping to contain no documents and an empty resume token.\n         *\n         * Note:\n         *   * The reset mapping is empty, specifically forcing the consumer of the\n         *     change to forget all keys for this targetID;\n         *   * The resume snapshot for this target must be reset\n         *   * The target must be unacked because unwatching and rewatching\n         *     introduces a race for changes.\n         */\n        this.targetChanges[targetId] = {\n            mapping: new ResetMapping(),\n            snapshotVersion: SnapshotVersion.MIN,\n            currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n            resumeToken: emptyByteString()\n        };\n    };\n    return RemoteEvent;\n}());\nexport { RemoteEvent };\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nexport var CurrentStatusUpdate;\n(function (CurrentStatusUpdate) {\n    /** The current status is not affected and should not be modified. */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n    /** The target must be marked as no longer \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n    /** The target must be marked as \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate || (CurrentStatusUpdate = {}));\nvar EMPTY_KEY_SET = documentKeySet();\nvar ResetMapping = /** @class */ (function () {\n    function ResetMapping() {\n        this.docs = EMPTY_KEY_SET;\n    }\n    Object.defineProperty(ResetMapping.prototype, \"documents\", {\n        get: function () {\n            return this.docs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetMapping.prototype.add = function (key) {\n        this.docs = this.docs.add(key);\n    };\n    ResetMapping.prototype.delete = function (key) {\n        this.docs = this.docs.delete(key);\n    };\n    ResetMapping.prototype.equals = function (other) {\n        return other !== null && this.docs.equals(other.docs);\n    };\n    return ResetMapping;\n}());\nexport { ResetMapping };\nvar UpdateMapping = /** @class */ (function () {\n    function UpdateMapping() {\n        this.addedDocuments = EMPTY_KEY_SET;\n        this.removedDocuments = EMPTY_KEY_SET;\n    }\n    UpdateMapping.prototype.applyToKeySet = function (keys) {\n        var result = keys;\n        this.addedDocuments.forEach(function (key) { return (result = result.add(key)); });\n        this.removedDocuments.forEach(function (key) { return (result = result.delete(key)); });\n        return result;\n    };\n    UpdateMapping.prototype.add = function (key) {\n        this.addedDocuments = this.addedDocuments.add(key);\n        this.removedDocuments = this.removedDocuments.delete(key);\n    };\n    UpdateMapping.prototype.delete = function (key) {\n        this.addedDocuments = this.addedDocuments.delete(key);\n        this.removedDocuments = this.removedDocuments.add(key);\n    };\n    UpdateMapping.prototype.equals = function (other) {\n        return (other !== null &&\n            this.addedDocuments.equals(other.addedDocuments) &&\n            this.removedDocuments.equals(other.removedDocuments));\n    };\n    return UpdateMapping;\n}());\nexport { UpdateMapping };\n\n//# sourceMappingURL=remote_event.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/remote_event.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.wrappedOnOpen = null;\n        this.wrappedOnClose = null;\n        this.wrappedOnMessage = null;\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        assert(this.wrappedOnOpen !== null, 'Cannot call onOpen because no callback ' + 'was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        assert(this.wrappedOnClose !== null, 'Cannot call onClose because no ' + 'callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        assert(this.wrappedOnMessage !== null, 'Cannot call onMessage because no ' + 'callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\nexport { StreamBridge };\n\n//# sourceMappingURL=stream_bridge.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/stream_bridge.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ErrorCode, EventType, WebChannel, XhrIoPool, createWebChannelTransport } from '@firebase/webchannel-wrapper';\nimport { SDK_VERSION } from '../core/version';\nimport { mapCodeFromHttpStatus, mapCodeFromRpcStatus } from '../remote/rpc_error';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nvar LOG_TAG = 'Connection';\nvar RPC_STREAM_SERVICE = 'google.firestore.v1beta1.Firestore';\nvar RPC_URL_VERSION = 'v1beta1';\n/** Maps RPC names to the corresponding REST endpoint name. */\nvar RPC_NAME_REST_MAPPING = {\n    BatchGetDocuments: 'batchGet',\n    Commit: 'commit'\n};\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nvar X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\nvar XHR_TIMEOUT_SECS = 15;\nvar WebChannelConnection = /** @class */ (function () {\n    function WebChannelConnection(info) {\n        this.databaseId = info.databaseId;\n        this.pool = new XhrIoPool();\n        var proto = info.ssl ? 'https' : 'http';\n        this.baseUrl = proto + '://' + info.host;\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {\n        if (token) {\n            for (var header in token.authHeaders) {\n                if (token.authHeaders.hasOwnProperty(header)) {\n                    headers[header] = token.authHeaders[header];\n                }\n            }\n        }\n        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n        // This header is used to improve routing and project isolation by the\n        // backend.\n        headers['google-cloud-resource-prefix'] =\n            \"projects/\" + this.databaseId.projectId + \"/\" +\n                (\"databases/\" + this.databaseId.database);\n    };\n    WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {\n        var _this = this;\n        var url = this.makeUrl(rpcName);\n        return new Promise(function (resolve, reject) {\n            _this.pool.getObject(function (xhr) {\n                xhr.listenOnce(EventType.COMPLETE, function () {\n                    try {\n                        switch (xhr.getLastErrorCode()) {\n                            case ErrorCode.NO_ERROR:\n                                var json = xhr.getResponseJson();\n                                log.debug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n                                resolve(json);\n                                break;\n                            case ErrorCode.TIMEOUT:\n                                log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n                                reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));\n                                break;\n                            case ErrorCode.HTTP_ERROR:\n                                var status_1 = xhr.getStatus();\n                                log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed with status:', status_1, 'response text:', xhr.getResponseText());\n                                if (status_1 > 0) {\n                                    reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));\n                                }\n                                else {\n                                    // If we received an HTTP_ERROR but there's no status code,\n                                    // it's most probably a connection issue\n                                    log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                                    reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));\n                                }\n                                break;\n                            default:\n                                fail('RPC \"' +\n                                    rpcName +\n                                    '\" failed with unanticipated ' +\n                                    'webchannel error ' +\n                                    xhr.getLastErrorCode() +\n                                    ': ' +\n                                    xhr.getLastError() +\n                                    ', giving up.');\n                        }\n                    }\n                    finally {\n                        log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n                        _this.pool.releaseObject(xhr);\n                    }\n                });\n                var requestString = JSON.stringify(request);\n                log.debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n                // Content-Type: text/plain will avoid preflight requests which might\n                // mess with CORS and redirects by proxies. If we add custom headers\n                // we will need to change this code to potentially use the\n                // $httpOverwrite parameter supported by ESF to avoid\n                // triggering preflight requests.\n                var headers = { 'Content-Type': 'text/plain' };\n                _this.modifyHeadersForRequest(headers, token);\n                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n            });\n        });\n    };\n    WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.invokeRPC(rpcName, request, token);\n    };\n    WebChannelConnection.prototype.openStream = function (rpcName, token) {\n        var urlParts = [\n            this.baseUrl,\n            '/',\n            RPC_STREAM_SERVICE,\n            '/',\n            rpcName,\n            '/channel'\n        ];\n        var webchannelTransport = createWebChannelTransport();\n        var request = {\n            // Background channel test avoids the initial two test calls and decreases\n            // initial cold start time.\n            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n            // we should monitor closely for any reports.\n            backgroundChannelTest: true,\n            // Required for backend stickiness, routing behavior is based on this\n            // parameter.\n            httpSessionIdParam: 'gsessionid',\n            initMessageHeaders: {},\n            // Send our custom headers as a '$httpHeaders=' url param to avoid CORS\n            // preflight round-trip. This is formally defined here:\n            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L40\n            httpHeadersOverwriteParam: '$httpHeaders',\n            sendRawJson: true,\n            supportsCrossDomainXhr: true\n        };\n        this.modifyHeadersForRequest(request.initMessageHeaders, token);\n        var url = urlParts.join('');\n        log.debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n        // tslint:disable-next-line:no-any Because listen isn't defined on it.\n        var channel = webchannelTransport.createWebChannel(url, request);\n        // WebChannel supports sending the first message with the handshake - saving\n        // a network round trip. However, it will have to call send in the same\n        // JS event loop as open. In order to enforce this, we delay actually\n        // opening the WebChannel until send is called. Whether we have called\n        // open is tracked with this variable.\n        var opened = false;\n        // A flag to determine whether the stream was closed (by us or through an\n        // error/close event) to avoid delivering multiple close events or sending\n        // on a closed stream\n        var closed = false;\n        // tslint:disable-next-line:no-any\n        var streamBridge = new StreamBridge({\n            sendFn: function (msg) {\n                if (!closed) {\n                    if (!opened) {\n                        log.debug(LOG_TAG, 'Opening WebChannel transport.');\n                        channel.open();\n                        opened = true;\n                    }\n                    log.debug(LOG_TAG, 'WebChannel sending:', msg);\n                    channel.send(msg);\n                }\n                else {\n                    log.debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n                }\n            },\n            closeFn: function () { return channel.close(); }\n        });\n        // Closure events are guarded and exceptions are swallowed, so catch any\n        // exception and rethrow using a setTimeout so they become visible again.\n        // Note that eventually this function could go away if we are confident\n        // enough the code is exception free.\n        var unguardedEventListen = function (type, fn) {\n            // TODO(dimond): closure typing seems broken because WebChannel does\n            // not implement goog.events.Listenable\n            channel.listen(type, function (param) {\n                try {\n                    fn(param);\n                }\n                catch (e) {\n                    setTimeout(function () {\n                        throw e;\n                    }, 0);\n                }\n            });\n        };\n        unguardedEventListen(WebChannel.EventType.OPEN, function () {\n            if (!closed) {\n                log.debug(LOG_TAG, 'WebChannel transport opened.');\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.CLOSE, function () {\n            if (!closed) {\n                closed = true;\n                log.debug(LOG_TAG, 'WebChannel transport closed');\n                streamBridge.callOnClose();\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.ERROR, function (err) {\n            if (!closed) {\n                closed = true;\n                log.debug(LOG_TAG, 'WebChannel transport errored:', err);\n                streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.MESSAGE, function (msg) {\n            if (!closed) {\n                // WebChannel delivers message events as array. If batching\n                // is not enabled (it's off by default) each message will be\n                // delivered alone, resulting in a single element array.\n                var msgData = msg.data[0];\n                assert(!!msgData, 'Got a webchannel message without data.');\n                // TODO(b/35143891): There is a bug in One Platform that caused errors\n                // (and only errors) to be wrapped in an extra array. To be forward\n                // compatible with the bug we need to check either condition. The latter\n                // can be removed once the fix has been rolled out.\n                var error = msgData.error || (msgData[0] && msgData[0].error);\n                if (error) {\n                    log.debug(LOG_TAG, 'WebChannel received error:', error);\n                    // error.status will be a string like 'OK' or 'NOT_FOUND'.\n                    var status_2 = error.status;\n                    var code = mapCodeFromRpcStatus(status_2);\n                    var message = error.message;\n                    if (code === undefined) {\n                        code = Code.INTERNAL;\n                        message =\n                            'Unknown error status: ' +\n                                status_2 +\n                                ' with message ' +\n                                error.message;\n                    }\n                    // Mark closed so no further events are propagated\n                    closed = true;\n                    streamBridge.callOnClose(new FirestoreError(code, message));\n                    channel.close();\n                }\n                else {\n                    log.debug(LOG_TAG, 'WebChannel received:', msgData);\n                    streamBridge.callOnMessage(msgData);\n                }\n            }\n        });\n        setTimeout(function () {\n            // Technically we could/should wait for the WebChannel opened event,\n            // but because we want to send the first message with the WebChannel\n            // handshake we pretend the channel opened here (asynchronously), and\n            // then delay the actual open until the first message is sent.\n            streamBridge.callOnOpen();\n        }, 0);\n        return streamBridge;\n    };\n    // visible for testing\n    WebChannelConnection.prototype.makeUrl = function (rpcName) {\n        var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n        assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);\n        var url = [this.baseUrl, '/', RPC_URL_VERSION];\n        url.push('/projects/');\n        url.push(this.databaseId.projectId);\n        url.push('/databases/');\n        url.push(this.databaseId.database);\n        url.push('/documents');\n        url.push(':');\n        url.push(urlRpcName);\n        return url.join('');\n    };\n    return WebChannelConnection;\n}());\nexport { WebChannelConnection };\n\n//# sourceMappingURL=webchannel_connection.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/webchannel_connection.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { WebChannelConnection } from './webchannel_connection';\nvar BrowserPlatform = /** @class */ (function () {\n    function BrowserPlatform() {\n        this.emptyByteString = '';\n        this.base64Available = typeof atob !== 'undefined';\n    }\n    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {\n        return Promise.resolve(new WebChannelConnection(databaseInfo));\n    };\n    BrowserPlatform.prototype.newSerializer = function (databaseId) {\n        return new JsonProtoSerializer(databaseId, { useProto3Json: true });\n    };\n    BrowserPlatform.prototype.formatJSON = function (value) {\n        return JSON.stringify(value);\n    };\n    BrowserPlatform.prototype.atob = function (encoded) {\n        return atob(encoded);\n    };\n    BrowserPlatform.prototype.btoa = function (raw) {\n        return btoa(raw);\n    };\n    return BrowserPlatform;\n}());\nexport { BrowserPlatform };\n\n//# sourceMappingURL=browser_platform.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/browser_platform.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { BrowserPlatform } from './browser_platform';\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nPlatformSupport.setPlatform(new BrowserPlatform());\n\n//# sourceMappingURL=browser_init.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/platform_browser/browser_init.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Describes the online state of the Firestore client */\nexport var OnlineState;\n(function (OnlineState) {\n    /**\n     * The Firestore client is in an unknown online state. This means the client\n     * is either not actively trying to establish a connection or it was\n     * previously in an unknown state and is trying to establish a connection.\n     */\n    OnlineState[OnlineState[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The client is connected and the connections are healthy. This state is\n     * reached after a successful connection and there has been at least one\n     * succesful message received from the backends.\n     */\n    OnlineState[OnlineState[\"Healthy\"] = 1] = \"Healthy\";\n    /**\n     * The client has tried to establish a connection but has failed.\n     * This state is reached after either a connection attempt failed or a\n     * healthy stream was closed for unexpected reasons.\n     */\n    OnlineState[OnlineState[\"Failed\"] = 2] = \"Failed\";\n})(OnlineState || (OnlineState = {}));\n\n//# sourceMappingURL=types.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/types.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nexport var ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType || (ChangeType = {}));\nexport var SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new SortedMap(DocumentKey.comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            fail('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\nexport { DocumentChangeSet };\n\n//# sourceMappingURL=view_snapshot.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/view_snapshot.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\nexport { TargetIdGenerator };\n\n//# sourceMappingURL=target_id_generator.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/target_id_generator.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nimport { documentMap } from './collections';\nimport { DocumentKey } from './document_key';\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nvar DocumentSet = /** @class */ (function () {\n    /** The default ordering is by key if the comparator is omitted */\n    function DocumentSet(comp) {\n        // We are adding document key comparator to the end as it's the only\n        // guaranteed unique property of a document.\n        if (comp) {\n            this.comparator = function (d1, d2) {\n                return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        else {\n            this.comparator = function (d1, d2) {\n                return DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        this.keyedMap = documentMap();\n        this.sortedSet = new SortedMap(this.comparator);\n    }\n    /**\n     * Returns an empty copy of the existing DocumentSet, using the same\n     * comparator.\n     */\n    DocumentSet.emptySet = function (oldSet) {\n        return new DocumentSet(oldSet.comparator);\n    };\n    DocumentSet.prototype.has = function (key) {\n        return this.keyedMap.get(key) != null;\n    };\n    DocumentSet.prototype.get = function (key) {\n        return this.keyedMap.get(key);\n    };\n    DocumentSet.prototype.first = function () {\n        return this.sortedSet.minKey();\n    };\n    DocumentSet.prototype.last = function () {\n        return this.sortedSet.maxKey();\n    };\n    DocumentSet.prototype.isEmpty = function () {\n        return this.sortedSet.isEmpty();\n    };\n    /**\n     * Returns previous document or null if it's a first doc.\n     *\n     * @param key A key that MUST be present in the DocumentSet.\n     */\n    DocumentSet.prototype.prevDoc = function (key) {\n        assert(this.has(key), 'Trying to get a previous document to non-existing key: ' + key);\n        var doc = this.keyedMap.get(key);\n        return this.sortedSet.getPredecessorKey(doc);\n    };\n    /**\n     * Returns the index of the provided key in the document set, or -1 if the\n     * document key is not present in the set;\n     */\n    DocumentSet.prototype.indexOf = function (key) {\n        var doc = this.keyedMap.get(key);\n        return doc ? this.sortedSet.indexOf(doc) : -1;\n    };\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\n        get: function () {\n            return this.sortedSet.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Iterates documents in order defined by \"comparator\" */\n    DocumentSet.prototype.forEach = function (cb) {\n        this.sortedSet.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Inserts or updates a document with the same key */\n    DocumentSet.prototype.add = function (doc) {\n        // First remove the element if we have it.\n        var set = this.delete(doc.key);\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n    };\n    /** Deletes a document with a given key */\n    DocumentSet.prototype.delete = function (key) {\n        var doc = this.get(key);\n        if (!doc) {\n            return this;\n        }\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n    };\n    DocumentSet.prototype.equals = function (other) {\n        if (!(other instanceof DocumentSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.sortedSet.getIterator();\n        var otherIt = other.sortedSet.getIterator();\n        while (thisIt.hasNext()) {\n            var thisDoc = thisIt.getNext().key;\n            var otherDoc = otherIt.getNext().key;\n            if (!thisDoc.equals(otherDoc))\n                return false;\n        }\n        return true;\n    };\n    DocumentSet.prototype.toString = function () {\n        var docStrings = [];\n        this.forEach(function (doc) {\n            docStrings.push(doc.toString());\n        });\n        if (docStrings.length === 0) {\n            return 'DocumentSet ()';\n        }\n        else {\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n        }\n    };\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n        var newSet = new DocumentSet();\n        newSet.comparator = this.comparator;\n        newSet.keyedMap = keyedMap;\n        newSet.sortedSet = sortedSet;\n        return newSet;\n    };\n    return DocumentSet;\n}());\nexport { DocumentSet };\n\n//# sourceMappingURL=document_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/document_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as objUtil from './obj';\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nvar ObjectMap = /** @class */ (function () {\n    function ObjectMap(mapKeyFn) {\n        this.mapKeyFn = mapKeyFn;\n        /**\n         * The inner map for a key -> value pair. Due to the possibility of\n         * collisions we keep a list of entries that we do a linear search through\n         * to find an actual match. Note that collisions should be rare, so we still\n         * expect near constant time lookups in practice.\n         */\n        this.inner = {};\n    }\n    /** Get a value for this key, or undefined if it does not exist. */\n    ObjectMap.prototype.get = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return undefined;\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];\n            if (otherKey.equals(key)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    ObjectMap.prototype.has = function (key) {\n        return this.get(key) !== undefined;\n    };\n    /** Put this key and value in the map. */\n    ObjectMap.prototype.set = function (key, value) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            this.inner[id] = [[key, value]];\n            return;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                matches[i] = [key, value];\n                return;\n            }\n        }\n        matches.push([key, value]);\n    };\n    /**\n     * Remove this key from the map. Returns a boolean if anything was deleted.\n     */\n    ObjectMap.prototype.delete = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return false;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                if (matches.length === 1) {\n                    delete this.inner[id];\n                }\n                else {\n                    matches.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    ObjectMap.prototype.forEach = function (fn) {\n        objUtil.forEach(this.inner, function (_, entries) {\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                fn(k, v);\n            }\n        });\n    };\n    ObjectMap.prototype.isEmpty = function () {\n        return objUtil.isEmpty(this.inner);\n    };\n    return ObjectMap;\n}());\nexport { ObjectMap };\n\n//# sourceMappingURL=obj_map.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/obj_map.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnlineState } from './types';\nimport { ChangeType } from './view_snapshot';\nimport { DocumentSet } from '../model/document_set';\nimport { assert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nvar QueryListenersInfo = /** @class */ (function () {\n    function QueryListenersInfo() {\n        this.listeners = [];\n    }\n    return QueryListenersInfo;\n}());\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager(syncEngine) {\n        this.syncEngine = syncEngine;\n        this.queries = new ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.onlineState = OnlineState.Unknown;\n        this.syncEngine.subscribe(this.onChange.bind(this), this.onError.bind(this));\n    }\n    EventManager.prototype.listen = function (listener) {\n        var query = listener.query;\n        var firstListen = false;\n        var queryInfo = this.queries.get(query);\n        if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n            this.queries.set(query, queryInfo);\n        }\n        queryInfo.listeners.push(listener);\n        listener.onOnlineStateChanged(this.onlineState);\n        if (queryInfo.viewSnap)\n            listener.onViewSnapshot(queryInfo.viewSnap);\n        if (firstListen) {\n            return this.syncEngine.listen(query).then(function (targetId) {\n                queryInfo.targetId = targetId;\n                return targetId;\n            });\n        }\n        else {\n            return Promise.resolve(queryInfo.targetId);\n        }\n    };\n    EventManager.prototype.unlisten = function (listener) {\n        var query = listener.query;\n        var lastListen = false;\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            var i = queryInfo.listeners.indexOf(listener);\n            if (i >= 0) {\n                queryInfo.listeners.splice(i, 1);\n                lastListen = queryInfo.listeners.length === 0;\n            }\n        }\n        if (lastListen) {\n            this.queries.delete(query);\n            return this.syncEngine.unlisten(query);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    EventManager.prototype.onChange = function (viewSnaps) {\n        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n            var viewSnap = viewSnaps_1[_i];\n            var query = viewSnap.query;\n            var queryInfo = this.queries.get(query);\n            if (queryInfo) {\n                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {\n                    var listener = _b[_a];\n                    listener.onViewSnapshot(viewSnap);\n                }\n                queryInfo.viewSnap = viewSnap;\n            }\n        }\n    };\n    EventManager.prototype.onError = function (query, error) {\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onError(error);\n            }\n        }\n        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n        // after an error.\n        this.queries.delete(query);\n    };\n    EventManager.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        this.queries.forEach(function (_, queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onOnlineStateChanged(onlineState);\n            }\n        });\n    };\n    return EventManager;\n}());\nexport { EventManager };\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nvar QueryListener = /** @class */ (function () {\n    function QueryListener(query, queryObserver, options) {\n        this.query = query;\n        this.queryObserver = queryObserver;\n        /**\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n         * observer. This flag is set to true once we've actually raised an event.\n         */\n        this.raisedInitialEvent = false;\n        this.onlineState = OnlineState.Unknown;\n        this.options = options || {};\n    }\n    QueryListener.prototype.onViewSnapshot = function (snap) {\n        assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');\n        if (!this.options.includeDocumentMetadataChanges) {\n            // Remove the metadata only changes.\n            var docChanges = [];\n            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {\n                var docChange = _a[_i];\n                if (docChange.type !== ChangeType.Metadata) {\n                    docChanges.push(docChange);\n                }\n            }\n            snap = {\n                query: snap.query,\n                docs: snap.docs,\n                oldDocs: snap.oldDocs,\n                docChanges: docChanges,\n                fromCache: snap.fromCache,\n                hasPendingWrites: snap.hasPendingWrites,\n                syncStateChanged: snap.syncStateChanged\n            };\n        }\n        if (!this.raisedInitialEvent) {\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n                this.raiseInitialEvent(snap);\n            }\n        }\n        else if (this.shouldRaiseEvent(snap)) {\n            this.queryObserver.next(snap);\n        }\n        this.snap = snap;\n    };\n    QueryListener.prototype.onError = function (error) {\n        this.queryObserver.error(error);\n    };\n    QueryListener.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        if (this.snap &&\n            !this.raisedInitialEvent &&\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n            this.raiseInitialEvent(this.snap);\n        }\n    };\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n        assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');\n        // Always raise the first event when we're synced\n        if (!snap.fromCache) {\n            return true;\n        }\n        // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n        // or Online if we wait long enough).\n        var maybeOnline = onlineState !== OnlineState.Failed;\n        // Don't raise the event if we're online, aren't synced yet (checked\n        // above) and are waiting for a sync.\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\n            assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');\n            return false;\n        }\n        // Raise data from cache if we have any documents or we are offline\n        return !snap.docs.isEmpty() || onlineState === OnlineState.Failed;\n    };\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\n        // We don't need to handle includeDocumentMetadataChanges here because\n        // the Metadata only changes have already been stripped out if needed.\n        // At this point the only changes we will see are the ones we should\n        // propagate.\n        if (snap.docChanges.length > 0) {\n            return true;\n        }\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\n            return this.options.includeQueryMetadataChanges === true;\n        }\n        // Generally we should have hit one of the cases above, but it's possible\n        // to get here if there were only metadata docChanges and they got\n        // stripped out.\n        return false;\n    };\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\n        assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');\n        snap = {\n            query: snap.query,\n            docs: snap.docs,\n            oldDocs: DocumentSet.emptySet(snap.docs),\n            docChanges: QueryListener.getInitialViewChanges(snap),\n            fromCache: snap.fromCache,\n            hasPendingWrites: snap.hasPendingWrites,\n            syncStateChanged: true\n        };\n        this.raisedInitialEvent = true;\n        this.queryObserver.next(snap);\n    };\n    /** Returns changes as if all documents in the snap were added. */\n    QueryListener.getInitialViewChanges = function (snap) {\n        var result = [];\n        snap.docs.forEach(function (doc) {\n            result.push({ type: ChangeType.Added, doc: doc });\n        });\n        return result;\n    };\n    return QueryListener;\n}());\nexport { QueryListener };\n\n//# sourceMappingURL=event_manager.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/event_manager.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nvar PersistencePromise = /** @class */ (function () {\n    function PersistencePromise(callback) {\n        var _this = this;\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\n        // not the user's raw next() or catch() callbacks.\n        this.nextCallback = null;\n        this.catchCallback = null;\n        // When the operation resolves, we'll set result or error and mark isDone.\n        this.result = undefined;\n        this.error = null;\n        this.isDone = false;\n        // Set to true when .then() or .catch() are called and prevents additional\n        // chaining.\n        this.callbackAttached = false;\n        callback(function (value) {\n            _this.isDone = true;\n            _this.result = value;\n            if (_this.nextCallback) {\n                // value should be defined unless T is Void, but we can't express\n                // that in the type system.\n                _this.nextCallback(value);\n            }\n        }, function (error) {\n            _this.isDone = true;\n            _this.error = error;\n            if (_this.catchCallback) {\n                _this.catchCallback(error);\n            }\n        });\n    }\n    PersistencePromise.prototype.catch = function (fn) {\n        return this.next(undefined, fn);\n    };\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\n        var _this = this;\n        if (this.callbackAttached) {\n            fail('Called next() or catch() twice for PersistencePromise');\n        }\n        this.callbackAttached = true;\n        if (this.isDone) {\n            if (!this.error) {\n                return this.wrapSuccess(nextFn, this.result);\n            }\n            else {\n                return this.wrapFailure(catchFn, this.error);\n            }\n        }\n        else {\n            return new PersistencePromise(function (resolve, reject) {\n                _this.nextCallback = function (value) {\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\n                };\n                _this.catchCallback = function (error) {\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\n                };\n            });\n        }\n    };\n    PersistencePromise.prototype.toPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.next(resolve, reject);\n        });\n    };\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\n        try {\n            var result = fn();\n            if (result instanceof PersistencePromise) {\n                return result;\n            }\n            else {\n                return PersistencePromise.resolve(result);\n            }\n        }\n        catch (e) {\n            return PersistencePromise.reject(e);\n        }\n    };\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n        if (nextFn) {\n            return this.wrapUserFunction(function () { return nextFn(value); });\n        }\n        else {\n            // If there's no nextFn, then R must be the same as T but we\n            // can't express that in the type system.\n            return PersistencePromise.resolve(value);\n        }\n    };\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n        if (catchFn) {\n            return this.wrapUserFunction(function () { return catchFn(error); });\n        }\n        else {\n            return PersistencePromise.reject(error);\n        }\n    };\n    PersistencePromise.resolve = function (result) {\n        return new PersistencePromise(function (resolve, reject) {\n            resolve(result);\n        });\n    };\n    PersistencePromise.reject = function (error) {\n        return new PersistencePromise(function (resolve, reject) {\n            reject(error);\n        });\n    };\n    PersistencePromise.waitFor = function (all) {\n        return all.reduce(function (promise, nextPromise, idx) {\n            return promise.next(function () {\n                return nextPromise;\n            });\n        }, PersistencePromise.resolve());\n    };\n    PersistencePromise.map = function (all) {\n        var results = [];\n        var first = true;\n        // initial is ignored, so we can cheat on the type.\n        var initial = PersistencePromise.resolve(null);\n        return all\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (!first) {\n                    results.push(result);\n                }\n                first = false;\n                return nextPromise;\n            });\n        }, initial)\n            .next(function (result) {\n            results.push(result);\n            return results;\n        });\n    };\n    return PersistencePromise;\n}());\nexport { PersistencePromise };\n\n//# sourceMappingURL=persistence_promise.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/persistence_promise.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nvar EagerGarbageCollector = /** @class */ (function () {\n    function EagerGarbageCollector() {\n        this.isEager = true;\n        /**\n         * The garbage collectible sources to double-check during garbage collection.\n         */\n        this.sources = [];\n        /**\n         * A set of potentially garbage keys.\n         * PORTING NOTE: This would be a mutable set if Javascript had one.\n         */\n        this.potentialGarbage = documentKeySet();\n    }\n    EagerGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        this.sources.push(garbageSource);\n        garbageSource.setGarbageCollector(this);\n    };\n    EagerGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        this.sources.splice(this.sources.indexOf(garbageSource), 1);\n        garbageSource.setGarbageCollector(null);\n    };\n    EagerGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        this.potentialGarbage = this.potentialGarbage.add(key);\n    };\n    EagerGarbageCollector.prototype.collectGarbage = function (txn) {\n        var _this = this;\n        var promises = [];\n        var garbageKeys = documentKeySet();\n        this.potentialGarbage.forEach(function (key) {\n            var hasRefsPromise = _this.documentHasAnyReferences(txn, key);\n            promises.push(hasRefsPromise.next(function (hasRefs) {\n                // If there are no references, get the key.\n                if (!hasRefs) {\n                    garbageKeys = garbageKeys.add(key);\n                }\n                return PersistencePromise.resolve();\n            }));\n        });\n        // Clear locally retained potential keys and returned confirmed garbage.\n        this.potentialGarbage = documentKeySet();\n        return PersistencePromise.waitFor(promises).next(function () { return garbageKeys; });\n    };\n    EagerGarbageCollector.prototype.documentHasAnyReferences = function (txn, key) {\n        var initial = PersistencePromise.resolve(false);\n        return this.sources\n            .map(function (source) { return function () { return source.containsKey(txn, key); }; })\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (result) {\n                    return PersistencePromise.resolve(true);\n                }\n                else {\n                    return nextPromise();\n                }\n            });\n        }, initial);\n    };\n    return EagerGarbageCollector;\n}());\nexport { EagerGarbageCollector };\n\n//# sourceMappingURL=eager_garbage_collector.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/eager_garbage_collector.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ChangeType } from '../core/view_snapshot';\nimport { documentKeySet } from '../model/collections';\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nvar LocalViewChanges = /** @class */ (function () {\n    function LocalViewChanges(query, addedKeys, removedKeys) {\n        this.query = query;\n        this.addedKeys = addedKeys;\n        this.removedKeys = removedKeys;\n    }\n    LocalViewChanges.fromSnapshot = function (viewSnapshot) {\n        var addedKeys = documentKeySet();\n        var removedKeys = documentKeySet();\n        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {\n            var docChange = _a[_i];\n            switch (docChange.type) {\n                case ChangeType.Added:\n                    addedKeys = addedKeys.add(docChange.doc.key);\n                    break;\n                case ChangeType.Removed:\n                    removedKeys = removedKeys.add(docChange.doc.key);\n                    break;\n                default:\n            }\n        }\n        return new LocalViewChanges(viewSnapshot.query, addedKeys, removedKeys);\n    };\n    return LocalViewChanges;\n}());\nexport { LocalViewChanges };\n\n//# sourceMappingURL=local_view_changes.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_view_changes.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nvar ReferenceSet = /** @class */ (function () {\n    function ReferenceSet() {\n        // A set of outstanding references to a document sorted by key.\n        this.refsByKey = new SortedSet(DocReference.compareByKey);\n        // A set of outstanding references to a document sorted by target id.\n        this.refsByTarget = new SortedSet(DocReference.compareByTargetId);\n        /** Keeps track of keys that have references */\n        this.garbageCollector = null;\n    }\n    /** Returns true if the reference set contains no references. */\n    ReferenceSet.prototype.isEmpty = function () {\n        return this.refsByKey.isEmpty();\n    };\n    /** Adds a reference to the given document key for the given ID. */\n    ReferenceSet.prototype.addReference = function (key, id) {\n        var ref = new DocReference(key, id);\n        this.refsByKey = this.refsByKey.add(ref);\n        this.refsByTarget = this.refsByTarget.add(ref);\n    };\n    /** Add references to the given document keys for the given ID. */\n    ReferenceSet.prototype.addReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.addReference(key, id); });\n    };\n    /**\n     * Removes a reference to the given document key for the given\n     * ID.\n     */\n    ReferenceSet.prototype.removeReference = function (key, id) {\n        this.removeRef(new DocReference(key, id));\n    };\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\n    };\n    /**\n     * Clears all references with a given ID. Calls removeRef() for each key\n     * removed.\n     */\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\n        var _this = this;\n        var emptyKey = DocumentKey.EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            _this.removeRef(ref);\n        });\n    };\n    ReferenceSet.prototype.removeAllReferences = function () {\n        var _this = this;\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\n    };\n    ReferenceSet.prototype.removeRef = function (ref) {\n        this.refsByKey = this.refsByKey.delete(ref);\n        this.refsByTarget = this.refsByTarget.delete(ref);\n        if (this.garbageCollector !== null) {\n            this.garbageCollector.addPotentialGarbageKey(ref.key);\n        }\n    };\n    ReferenceSet.prototype.referencesForId = function (id) {\n        var emptyKey = DocumentKey.EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        var keys = documentKeySet();\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            keys = keys.add(ref.key);\n        });\n        return keys;\n    };\n    ReferenceSet.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    ReferenceSet.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n        return PersistencePromise.resolve(firstRef !== null && key.equals(firstRef.key));\n    };\n    return ReferenceSet;\n}());\nexport { ReferenceSet };\nvar DocReference = /** @class */ (function () {\n    function DocReference(key, targetOrBatchId) {\n        this.key = key;\n        this.targetOrBatchId = targetOrBatchId;\n    }\n    /** Compare by key then by ID */\n    DocReference.compareByKey = function (left, right) {\n        return (DocumentKey.comparator(left.key, right.key) ||\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\n    };\n    /** Compare by ID then by key */\n    DocReference.compareByTargetId = function (left, right) {\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n            DocumentKey.comparator(left.key, right.key));\n    };\n    return DocReference;\n}());\nexport { DocReference };\n\n//# sourceMappingURL=reference_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/reference_set.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { ExponentialBackoff } from './backoff';\nimport { isNullOrUndefined } from '../util/types';\nvar LOG_TAG = 'PersistentStream';\nvar PersistentStreamState;\n(function (PersistentStreamState) {\n    /**\n     * The streaming RPC is not running and there's no error condition.\n     * Calling `start` will start the stream immediately without backoff.\n     * While in this state isStarted will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Initial\"] = 0] = \"Initial\";\n    /**\n     * The stream is starting, and is waiting for an auth token to attach to\n     * the initial request. While in this state, isStarted will return\n     * true but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Auth\"] = 1] = \"Auth\";\n    /**\n     * The streaming RPC is up and running. Requests and responses can flow\n     * freely. Both isStarted and isOpen will return true.\n     */\n    PersistentStreamState[PersistentStreamState[\"Open\"] = 2] = \"Open\";\n    /**\n     * The stream encountered an error. The next start attempt will back off.\n     * While in this state isStarted() will return false.\n     *\n     */\n    PersistentStreamState[PersistentStreamState[\"Error\"] = 3] = \"Error\";\n    /**\n     * An in-between state after an error where the stream is waiting before\n     * re-starting. After\n     * waiting is complete, the stream will try to open. While in this\n     * state isStarted() will return YES but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Backoff\"] = 4] = \"Backoff\";\n    /**\n     * The stream has been explicitly stopped; no further events will be emitted.\n     */\n    PersistentStreamState[PersistentStreamState[\"Stopped\"] = 5] = \"Stopped\";\n})(PersistentStreamState || (PersistentStreamState = {}));\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nvar BACKOFF_INITIAL_DELAY_MS = 1000;\n/** Maximum backoff time in milliseconds */\nvar BACKOFF_MAX_DELAY_MS = 60 * 1000;\nvar BACKOFF_FACTOR = 1.5;\n/** The time a stream stays open after it is marked idle. */\nvar IDLE_TIMEOUT_MS = 60 * 1000;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be `start`ed before messages can\n * be sent and received. The PersistentStream will call the onOpen function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a `start` fail, PersistentStream will call the registered\n * onClose with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nvar PersistentStream = /** @class */ (function () {\n    function PersistentStream(queue, connection, credentialsProvider, \n        // Used for faster retries in testing\n        initialBackoffDelay) {\n        this.queue = queue;\n        this.connection = connection;\n        this.credentialsProvider = credentialsProvider;\n        this.idle = false;\n        this.stream = null;\n        this.listener = null;\n        this.backoff = new ExponentialBackoff(initialBackoffDelay ? initialBackoffDelay : BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);\n        this.state = PersistentStreamState.Initial;\n    }\n    /**\n     * Returns true if `start` has been called and no error has occurred. True\n     * indicates the stream is open or in the process of opening (which\n     * encompasses respecting backoff, getting auth tokens, and starting the\n     * actual RPC). Use `isOpen` to determine if the stream is open and ready for\n     * outbound requests.\n     */\n    PersistentStream.prototype.isStarted = function () {\n        return (this.state === PersistentStreamState.Backoff ||\n            this.state === PersistentStreamState.Auth ||\n            this.state === PersistentStreamState.Open);\n    };\n    /**\n     * Returns true if the underlying RPC is open (the openHandler has been\n     * called) and the stream is ready for outbound requests.\n     */\n    PersistentStream.prototype.isOpen = function () {\n        return this.state === PersistentStreamState.Open;\n    };\n    /**\n     * Starts the RPC. Only allowed if isStarted returns false. The stream is\n     * not immediately ready for use: onOpen will be invoked when the RPC is ready\n     * for outbound requests, at which point isOpen will return true.\n     *\n     *  When start returns, isStarted will return true.\n     */\n    PersistentStream.prototype.start = function (listener) {\n        if (this.state === PersistentStreamState.Error) {\n            this.performBackoff(listener);\n            return;\n        }\n        assert(this.state === PersistentStreamState.Initial, 'Already started');\n        this.listener = listener;\n        this.auth();\n    };\n    /**\n     * Stops the RPC. This call is idempotent and allowed regardless of the\n     * current isStarted state.\n     *\n     * When stop returns, isStarted and isOpen will both return false.\n     */\n    PersistentStream.prototype.stop = function () {\n        if (this.isStarted()) {\n            this.close(PersistentStreamState.Stopped);\n        }\n    };\n    /**\n     * After an error the stream will usually back off on the next attempt to\n     * start it. If the error warrants an immediate restart of the stream, the\n     * sender can use this to indicate that the receiver should not back off.\n     *\n     * Each error will call the onClose function. That function can decide to\n     * inhibit backoff if required.\n     */\n    PersistentStream.prototype.inhibitBackoff = function () {\n        assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');\n        this.state = PersistentStreamState.Initial;\n        this.backoff.reset();\n    };\n    /**\n     * Initializes the idle timer. If no write takes place within one minute, the\n     * WebChannel stream will be closed.\n     */\n    PersistentStream.prototype.markIdle = function () {\n        var _this = this;\n        this.idle = true;\n        this.queue\n            .schedule(function () {\n            return _this.handleIdleCloseTimer();\n        }, IDLE_TIMEOUT_MS)\n            .catch(function (err) {\n            // When the AsyncQueue gets drained during testing, pending Promises\n            // (including these idle checks) will get rejected. We special-case\n            // these cancelled idle checks to make sure that these specific Promise\n            // rejections are not considered unhandled.\n            assert(err.code === Code.CANCELLED, \"Received unexpected error in idle timeout closure. Expected CANCELLED, but was: \" + err);\n        });\n    };\n    /** Sends a message to the underlying stream. */\n    PersistentStream.prototype.sendRequest = function (msg) {\n        this.cancelIdleCheck();\n        this.stream.send(msg);\n    };\n    /** Called by the idle timer when the stream should close due to inactivity. */\n    PersistentStream.prototype.handleIdleCloseTimer = function () {\n        if (this.isOpen() && this.idle) {\n            // When timing out an idle stream there's no reason to force the stream into backoff when\n            // it restarts so set the stream state to Initial instead of Error.\n            return this.close(PersistentStreamState.Initial);\n        }\n        return Promise.resolve();\n    };\n    /** Marks the stream as active again. */\n    PersistentStream.prototype.cancelIdleCheck = function () {\n        this.idle = false;\n    };\n    /**\n     * Closes the stream and cleans up as necessary:\n     *\n     * * closes the underlying GRPC stream;\n     * * calls the onClose handler with the given 'error';\n     * * sets internal stream state to 'finalState';\n     * * adjusts the backoff timer based on the error\n     *\n     * A new stream can be opened by calling `start` unless `finalState` is set to\n     * `PersistentStreamState.Stopped`.\n     *\n     * @param finalState the intended state of the stream after closing.\n     * @param error the error the connection was closed with.\n     */\n    PersistentStream.prototype.close = function (finalState, error) {\n        assert(finalState == PersistentStreamState.Error || isNullOrUndefined(error), \"Can't provide an error when not in an error state.\");\n        this.cancelIdleCheck();\n        if (finalState != PersistentStreamState.Error) {\n            // If this is an intentional close ensure we don't delay our next connection attempt.\n            this.backoff.reset();\n        }\n        else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n            log.error(error.toString());\n            log.error('Using maximum backoff delay to prevent overloading the backend.');\n            this.backoff.resetToMax();\n        }\n        // Clean up the underlying stream because we are no longer interested in events.\n        if (this.stream !== null) {\n            this.tearDown();\n            this.stream.close();\n            this.stream = null;\n        }\n        // This state must be assigned before calling onClose() to allow the callback to\n        // inhibit backoff or otherwise manipulate the state in its non-started state.\n        this.state = finalState;\n        var listener = this.listener;\n        // Clear the listener to avoid bleeding of events from the underlying streams.\n        this.listener = null;\n        // If the caller explicitly requested a stream stop, don't notify them of a closing stream (it\n        // could trigger undesirable recovery logic, etc.).\n        if (finalState != PersistentStreamState.Stopped) {\n            return listener.onClose(error);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Can be overridden to perform additional cleanup before the stream is closed.\n     * Calling super.tearDown() is not required.\n     */\n    PersistentStream.prototype.tearDown = function () { };\n    PersistentStream.prototype.auth = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');\n        this.state = PersistentStreamState.Auth;\n        this.credentialsProvider.getToken(/*forceRefresh=*/ false).then(function (token) {\n            // Normally we'd have to schedule the callback on the AsyncQueue.\n            // However, the following calls are safe to be called outside the\n            // AsyncQueue since they don't chain asynchronous calls\n            _this.startStream(token);\n        }, function (error) {\n            _this.queue.schedule(function () {\n                if (_this.state !== PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for authorization.\n                    var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n                    return _this.handleStreamClose(rpcError);\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        });\n    };\n    PersistentStream.prototype.startStream = function (token) {\n        var _this = this;\n        if (this.state === PersistentStreamState.Stopped) {\n            // Stream can be stopped while waiting for authorization.\n            return;\n        }\n        assert(this.state === PersistentStreamState.Auth, 'Trying to start stream in a non-auth state');\n        // Helper function to dispatch to AsyncQueue and make sure that any\n        // close will seem instantaneous and events are prevented from being\n        // raised after the close call\n        var dispatchIfStillActive = function (stream, fn) {\n            _this.queue.schedule(function () {\n                // Only raise events if the stream instance has not changed\n                if (_this.stream === stream) {\n                    return fn();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        };\n        // Only start stream if listener has not changed\n        if (this.listener !== null) {\n            var currentStream_1 = this.startRpc(token);\n            this.stream = currentStream_1;\n            this.stream.onOpen(function () {\n                dispatchIfStillActive(currentStream_1, function () {\n                    assert(_this.state === PersistentStreamState.Auth, 'Expected stream to be in state auth, but was ' + _this.state);\n                    _this.state = PersistentStreamState.Open;\n                    return _this.listener.onOpen();\n                });\n            });\n            this.stream.onClose(function (error) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.handleStreamClose(error);\n                });\n            });\n            this.stream.onMessage(function (msg) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.onMessage(msg);\n                });\n            });\n        }\n    };\n    PersistentStream.prototype.performBackoff = function (listener) {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Error, 'Should only perform backoff in an error case');\n        this.state = PersistentStreamState.Backoff;\n        this.backoff.backoffAndWait().then(function () {\n            // Backoff does not run on the AsyncQueue, so we need to reschedule to\n            // make sure the queue blocks\n            _this.queue.schedule(function () {\n                if (_this.state === PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for backoff to complete.\n                    return Promise.resolve();\n                }\n                _this.state = PersistentStreamState.Initial;\n                _this.start(listener);\n                assert(_this.isStarted(), 'PersistentStream should have started');\n                return Promise.resolve();\n            });\n        });\n    };\n    PersistentStream.prototype.handleStreamClose = function (error) {\n        assert(this.isStarted(), \"Can't handle server close on non-started stream\");\n        log.debug(LOG_TAG, \"close with error: \" + error);\n        this.stream = null;\n        // In theory the stream could close cleanly, however, in our current model\n        // we never expect this to happen because if we stop a stream ourselves,\n        // this callback will never be called. To prevent cases where we retry\n        // without a backoff accidentally, we set the stream to error in all cases.\n        return this.close(PersistentStreamState.Error, error);\n    };\n    return PersistentStream;\n}());\nexport { PersistentStream };\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the openHandler, any number of listen and\n * unlisten calls calls can be sent to control what changes will be sent from\n * the server for ListenResponses.\n */\nvar PersistentListenStream = /** @class */ (function (_super) {\n    __extends(PersistentListenStream, _super);\n    function PersistentListenStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        return _this;\n    }\n    PersistentListenStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Listen', token);\n    };\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n        // A successful response means the stream is healthy\n        this.backoff.reset();\n        var watchChange = this.serializer.fromWatchChange(watchChangeProto);\n        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);\n        return this.listener.onWatchChange(watchChange, snapshot);\n    };\n    /**\n     * Registers interest in the results of the given query. If the query\n     * includes a resumeToken it will be included in the request. Results that\n     * affect the query will be streamed back as WatchChange messages that\n     * reference the targetId.\n     */\n    PersistentListenStream.prototype.watch = function (queryData) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.addTarget = this.serializer.toTarget(queryData);\n        var labels = this.serializer.toListenRequestLabels(queryData);\n        if (labels) {\n            request.labels = labels;\n        }\n        this.sendRequest(request);\n    };\n    /**\n     * Unregisters interest in the results of the query associated with the\n     * given targetId.\n     */\n    PersistentListenStream.prototype.unwatch = function (targetId) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.removeTarget = targetId;\n        this.sendRequest(request);\n    };\n    return PersistentListenStream;\n}(PersistentStream));\nexport { PersistentListenStream };\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nvar PersistentWriteStream = /** @class */ (function (_super) {\n    __extends(PersistentWriteStream, _super);\n    function PersistentWriteStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        _this.handshakeComplete_ = false;\n        return _this;\n    }\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n        /**\n         * Tracks whether or not a handshake has been successfully exchanged and\n         * the stream is ready to accept mutations.\n         */\n        get: function () {\n            return this.handshakeComplete_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Override of PersistentStream.start\n    PersistentWriteStream.prototype.start = function (listener) {\n        this.handshakeComplete_ = false;\n        _super.prototype.start.call(this, listener);\n    };\n    PersistentWriteStream.prototype.tearDown = function () {\n        if (this.handshakeComplete_) {\n            this.writeMutations([]);\n        }\n    };\n    PersistentWriteStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Write', token);\n    };\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\n        // Always capture the last stream token.\n        assert(!!responseProto.streamToken, 'Got a write response without a stream token');\n        this.lastStreamToken = responseProto.streamToken;\n        if (!this.handshakeComplete_) {\n            // The first response is always the handshake response\n            assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');\n            this.handshakeComplete_ = true;\n            return this.listener.onHandshakeComplete();\n        }\n        else {\n            // A successful first write response means the stream is healthy,\n            // Note, that we could consider a successful handshake healthy, however,\n            // the write itself might be causing an error we want to back off from.\n            this.backoff.reset();\n            var results = this.serializer.fromWriteResults(responseProto.writeResults);\n            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);\n            return this.listener.onMutationResult(commitVersion, results);\n        }\n    };\n    /**\n     * Sends an initial streamToken to the server, performing the handshake\n     * required to make the StreamingWrite RPC work. Subsequent\n     * calls should wait until onHandshakeComplete was called.\n     */\n    PersistentWriteStream.prototype.writeHandshake = function () {\n        assert(this.isOpen(), 'Writing handshake requires an opened stream');\n        assert(!this.handshakeComplete_, 'Handshake already completed');\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\n        // stream token on the handshake, ignoring any stream token we might have.\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        this.sendRequest(request);\n    };\n    /** Sends a group of mutations to the Firestore backend to apply. */\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\n        var _this = this;\n        assert(this.isOpen(), 'Writing mutations requires an opened stream');\n        assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');\n        assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');\n        var request = {\n            // Protos are typed with string, but we support UInt8Array on Node\n            // tslint:disable-next-line:no-any\n            streamToken: this.lastStreamToken,\n            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })\n        };\n        this.sendRequest(request);\n    };\n    return PersistentWriteStream;\n}(PersistentStream));\nexport { PersistentWriteStream };\n\n//# sourceMappingURL=persistent_stream.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/persistent_stream.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { ReferenceSet } from '../local/reference_set';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { CurrentStatusUpdate, RemoteEvent } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport * as log from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\nimport { isNullOrUndefined } from '../util/types';\nimport { Query } from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { TargetIdGenerator } from './target_id_generator';\nimport { AddedLimboDocument, RemovedLimboDocument, View } from './view';\nvar LOG_TAG = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nvar QueryView = /** @class */ (function () {\n    function QueryView(\n        /**\n         * The query itself.\n         */\n        query, \n        /**\n         * The target number created by the client that is used in the watch\n         * stream to identify this query.\n         */\n        targetId, \n        /**\n         * An identifier from the datastore backend that indicates the last state\n         * of the results that was received. This can be used to indicate where\n         * to continue receiving new doc changes for the query.\n         */\n        resumeToken, \n        /**\n         * The view is responsible for computing the final merged truth of what\n         * docs are in the query. It gets notified of local and remote changes,\n         * and applies the query filters and limits to determine the most correct\n         * possible results.\n         */\n        view) {\n        this.query = query;\n        this.targetId = targetId;\n        this.resumeToken = resumeToken;\n        this.view = view;\n    }\n    return QueryView;\n}());\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nvar SyncEngine = /** @class */ (function () {\n    function SyncEngine(localStore, remoteStore, currentUser) {\n        this.localStore = localStore;\n        this.remoteStore = remoteStore;\n        this.currentUser = currentUser;\n        this.viewHandler = null;\n        this.errorHandler = null;\n        this.queryViewsByQuery = new ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.queryViewsByTarget = {};\n        this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);\n        this.limboKeysByTarget = {};\n        this.limboDocumentRefs = new ReferenceSet();\n        this.limboCollector = new EagerGarbageCollector();\n        /** Stores user completion handlers, indexed by User and BatchId. */\n        this.mutationUserCallbacks = {};\n        this.targetIdGenerator = TargetIdGenerator.forSyncEngine();\n    }\n    /** Subscribes view and error handler. Can be called only once. */\n    SyncEngine.prototype.subscribe = function (viewHandler, errorHandler) {\n        assert(viewHandler !== null && errorHandler !== null, 'View and error handlers cannot be null');\n        assert(this.viewHandler === null && this.errorHandler === null, 'SyncEngine already has a subscriber.');\n        this.viewHandler = viewHandler;\n        this.errorHandler = errorHandler;\n        this.limboCollector.addGarbageSource(this.limboDocumentRefs);\n    };\n    /**\n     * Initiates the new listen, resolves promise when listen enqueued to the\n     * server. All the subsequent view snapshots or errors are sent to the\n     * subscribed handlers. Returns the targetId of the query.\n     */\n    SyncEngine.prototype.listen = function (query) {\n        var _this = this;\n        this.assertSubscribed('listen()');\n        assert(!this.queryViewsByQuery.has(query), 'We already listen to the query: ' + query);\n        return this.localStore.allocateQuery(query).then(function (queryData) {\n            return _this.localStore\n                .executeQuery(query)\n                .then(function (docs) {\n                return _this.localStore\n                    .remoteDocumentKeys(queryData.targetId)\n                    .then(function (remoteKeys) {\n                    var view = new View(query, remoteKeys);\n                    var viewDocChanges = view.computeDocChanges(docs);\n                    var viewChange = view.applyChanges(viewDocChanges);\n                    assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');\n                    assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');\n                    var data = new QueryView(query, queryData.targetId, queryData.resumeToken, view);\n                    _this.queryViewsByQuery.set(query, data);\n                    _this.queryViewsByTarget[queryData.targetId] = data;\n                    _this.viewHandler([viewChange.snapshot]);\n                    _this.remoteStore.listen(queryData);\n                });\n            })\n                .then(function () {\n                return queryData.targetId;\n            });\n        });\n    };\n    /** Stops listening to the query. */\n    SyncEngine.prototype.unlisten = function (query) {\n        var _this = this;\n        this.assertSubscribed('unlisten()');\n        var queryView = this.queryViewsByQuery.get(query);\n        assert(!!queryView, 'Trying to unlisten on query not found:' + query);\n        return this.localStore.releaseQuery(query).then(function () {\n            _this.remoteStore.unlisten(queryView.targetId);\n            return _this.removeAndCleanupQuery(queryView).then(function () {\n                return _this.localStore.collectGarbage();\n            });\n        });\n    };\n    /**\n     * Initiates the write of local mutation batch which involves adding the\n     * writes to the mutation queue, notifying the remote store about new\n     * mutations and raising events for any changes this write caused.\n     *\n     * The promise returned by this call is resolved when the above steps\n     * have completed, *not* when the write was acked by the backend. The\n     * userCallback is resolved once the write was acked/rejected by the\n     * backend (or failed locally for any other reason).\n     */\n    SyncEngine.prototype.write = function (batch, userCallback) {\n        var _this = this;\n        this.assertSubscribed('write()');\n        return this.localStore\n            .localWrite(batch)\n            .then(function (result) {\n            _this.addMutationCallback(result.batchId, userCallback);\n            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);\n        })\n            .then(function () {\n            return _this.remoteStore.fillWritePipeline();\n        });\n    };\n    // TODO(klimt): Wrap the given error in a standard Firestore error object.\n    SyncEngine.prototype.wrapUpdateFunctionError = function (error) {\n        return error;\n    };\n    /**\n     * Takes an updateFunction in which a set of reads and writes can be performed\n     * atomically. In the updateFunction, the client can read and write values\n     * using the supplied transaction object. After the updateFunction, all\n     * changes will be committed. If some other client has changed any of the data\n     * referenced, then the updateFunction will be called again. If the\n     * updateFunction still fails after the given number of retries, then the\n     * transaction will be rejection.\n     *\n     * The transaction object passed to the updateFunction contains methods for\n     * accessing documents and collections. Unlike other datastore access, data\n     * accessed with the transaction will not reflect local changes that have not\n     * been committed. For this reason, it is required that all reads are\n     * performed before any writes. Transactions must be performed while online.\n     *\n     * The promise returned is resolved when the transaction is fully committed.\n     */\n    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {\n        var _this = this;\n        if (retries === void 0) { retries = 5; }\n        assert(retries >= 0, 'Got negative number of retries for transaction.');\n        var transaction = this.remoteStore.createTransaction();\n        var wrappedUpdateFunction = function () {\n            try {\n                var userPromise = updateFunction(transaction);\n                if (isNullOrUndefined(userPromise) ||\n                    !userPromise.catch ||\n                    !userPromise.then) {\n                    return Promise.reject(Error('Transaction callback must return a Promise'));\n                }\n                return userPromise.catch(function (e) {\n                    return Promise.reject(_this.wrapUpdateFunctionError(e));\n                });\n            }\n            catch (e) {\n                return Promise.reject(_this.wrapUpdateFunctionError(e));\n            }\n        };\n        return wrappedUpdateFunction().then(function (result) {\n            return transaction\n                .commit()\n                .then(function () {\n                return result;\n            })\n                .catch(function (error) {\n                if (retries === 0) {\n                    return Promise.reject(error);\n                }\n                // TODO(klimt): Put in a retry delay?\n                return _this.runTransaction(updateFunction, retries - 1);\n            });\n        });\n    };\n    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        this.assertSubscribed('applyRemoteEvent()');\n        // Make sure limbo documents are deleted if there were no results\n        objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, targetChange) {\n            var limboKey = _this.limboKeysByTarget[targetId];\n            if (limboKey &&\n                targetChange.currentStatusUpdate ===\n                    CurrentStatusUpdate.MarkCurrent &&\n                !remoteEvent.documentUpdates.get(limboKey)) {\n                // When listening to a query the server responds with a snapshot\n                // containing documents matching the query and a current marker\n                // telling us we're now in sync. It's possible for these to arrive\n                // as separate remote events or as a single remote event.\n                // For a document query, there will be no documents sent in the\n                // response if the document doesn't exist.\n                //\n                // If the snapshot arrives separately from the current marker,\n                // we handle it normally and updateTrackedLimbos will resolve the\n                // limbo status of the document, removing it from limboDocumentRefs.\n                // This works because clients only initiate limbo resolution when\n                // a target is current and because all current targets are\n                // always at a consistent snapshot.\n                //\n                // However, if the document doesn't exist and the current marker\n                // arrives, the document is not present in the snapshot and our\n                // normal view handling would consider the document to remain in\n                // limbo indefinitely because there are no updates to the document.\n                // To avoid this, we specially handle this just this case here:\n                // synthesizing a delete.\n                //\n                // TODO(dimond): Ideally we would have an explicit lookup query\n                // instead resulting in an explicit delete message and we could\n                // remove this special logic.\n                remoteEvent.addDocumentUpdate(new NoDocument(limboKey, remoteEvent.snapshotVersion));\n            }\n        });\n        return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n        });\n    };\n    SyncEngine.prototype.rejectListen = function (targetId, err) {\n        var _this = this;\n        this.assertSubscribed('rejectListens()');\n        var limboKey = this.limboKeysByTarget[targetId];\n        if (limboKey) {\n            // Since this query failed, we won't want to manually unlisten to it.\n            // So go ahead and remove it from bookkeeping.\n            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);\n            delete this.limboKeysByTarget[targetId];\n            // TODO(klimt): We really only should do the following on permission\n            // denied errors, but we don't have the cause code here.\n            // It's a limbo doc. Create a synthetic event saying it was deleted.\n            // This is kind of a hack. Ideally, we would have a method in the local\n            // store to purge a document. However, it would be tricky to keep all of\n            // the local store's invariants with another method.\n            var docMap = new SortedMap(DocumentKey.comparator);\n            docMap = docMap.insert(limboKey, new NoDocument(limboKey, SnapshotVersion.forDeletedDoc()));\n            var event_1 = new RemoteEvent(SnapshotVersion.MIN, {}, docMap);\n            return this.applyRemoteEvent(event_1);\n        }\n        else {\n            var queryView_1 = this.queryViewsByTarget[targetId];\n            assert(!!queryView_1, 'Unknown targetId: ' + targetId);\n            return this.localStore.releaseQuery(queryView_1.query).then(function () {\n                return _this.removeAndCleanupQuery(queryView_1).then(function () {\n                    _this.errorHandler(queryView_1.query, err);\n                });\n            });\n        }\n    };\n    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {\n        var _this = this;\n        this.assertSubscribed('applySuccessfulWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught\n        // up), so we raise user callbacks first so that they consistently happen\n        // before listen events.\n        this.processUserCallback(mutationBatchResult.batch.batchId, \n        /*error=*/ null);\n        return this.localStore\n            .acknowledgeBatch(mutationBatchResult)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {\n        var _this = this;\n        this.assertSubscribed('rejectFailedWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught up),\n        // so we raise user callbacks first so that they consistently happen before\n        // listen events.\n        this.processUserCallback(batchId, error);\n        return this.localStore.rejectBatch(batchId).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        if (!newCallbacks) {\n            newCallbacks = new SortedMap(primitiveComparator);\n        }\n        newCallbacks = newCallbacks.insert(batchId, callback);\n        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    };\n    /**\n     * Resolves or rejects the user callback for the given batch and then discards\n     * it.\n     */\n    SyncEngine.prototype.processUserCallback = function (batchId, error) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        // NOTE: Mutations restored from persistence won't have callbacks, so it's\n        // okay for there to be no callback for this ID.\n        if (newCallbacks) {\n            var callback = newCallbacks.get(batchId);\n            if (callback) {\n                assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');\n                if (error) {\n                    callback.reject(error);\n                }\n                else {\n                    callback.resolve();\n                }\n                newCallbacks = newCallbacks.remove(batchId);\n            }\n            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n        }\n    };\n    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {\n        this.queryViewsByQuery.delete(queryView.query);\n        delete this.queryViewsByTarget[queryView.targetId];\n        this.limboDocumentRefs.removeReferencesForId(queryView.targetId);\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {\n        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n            var limboChange = limboChanges_1[_i];\n            if (limboChange instanceof AddedLimboDocument) {\n                this.limboDocumentRefs.addReference(limboChange.key, targetId);\n                this.trackLimboChange(limboChange);\n            }\n            else if (limboChange instanceof RemovedLimboDocument) {\n                log.debug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n                this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n            }\n            else {\n                fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n            }\n        }\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.trackLimboChange = function (limboChange) {\n        var key = limboChange.key;\n        if (!this.limboTargetsByKey.get(key)) {\n            log.debug(LOG_TAG, 'New document in limbo: ' + key);\n            var limboTargetId = this.targetIdGenerator.next();\n            var query = Query.atPath(key.path);\n            this.limboKeysByTarget[limboTargetId] = key;\n            this.remoteStore.listen(new QueryData(query, limboTargetId, QueryPurpose.Listen));\n            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);\n        }\n    };\n    SyncEngine.prototype.gcLimboDocuments = function () {\n        var _this = this;\n        // HACK: We can use a null transaction here, because we know that the\n        // reference set is entirely within memory and doesn't need a store engine.\n        return this.limboCollector\n            .collectGarbage(null)\n            .next(function (keys) {\n            keys.forEach(function (key) {\n                var limboTargetId = _this.limboTargetsByKey.get(key);\n                if (limboTargetId === null) {\n                    // This target already got removed, because the query failed.\n                    return;\n                }\n                _this.remoteStore.unlisten(limboTargetId);\n                _this.limboTargetsByKey = _this.limboTargetsByKey.remove(key);\n                delete _this.limboKeysByTarget[limboTargetId];\n            });\n        })\n            .toPromise();\n    };\n    // Visible for testing\n    SyncEngine.prototype.currentLimboDocs = function () {\n        return this.limboTargetsByKey;\n    };\n    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {\n        var _this = this;\n        var newSnaps = [];\n        var docChangesInAllViews = [];\n        var queriesProcessed = [];\n        this.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(Promise.resolve()\n                .then(function () {\n                var viewDocChanges = queryView.view.computeDocChanges(changes);\n                if (!viewDocChanges.needsRefill) {\n                    return viewDocChanges;\n                }\n                // The query has a limit and some docs were removed, so we need\n                // to re-run the query against the local store to make sure we\n                // didn't lose any good docs that had been past the limit.\n                return _this.localStore.executeQuery(queryView.query).then(function (docs) {\n                    return queryView.view.computeDocChanges(docs, viewDocChanges);\n                });\n            })\n                .then(function (viewDocChanges) {\n                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];\n                var viewChange = queryView.view.applyChanges(viewDocChanges, targetChange);\n                return _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges).then(function () {\n                    if (viewChange.snapshot) {\n                        newSnaps.push(viewChange.snapshot);\n                        var docChanges = LocalViewChanges.fromSnapshot(viewChange.snapshot);\n                        docChangesInAllViews.push(docChanges);\n                    }\n                });\n            }));\n        });\n        return Promise.all(queriesProcessed)\n            .then(function () {\n            _this.viewHandler(newSnaps);\n            return _this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n        })\n            .then(function () {\n            return _this.localStore.collectGarbage();\n        });\n    };\n    SyncEngine.prototype.assertSubscribed = function (fnName) {\n        assert(this.viewHandler !== null && this.errorHandler !== null, 'Trying to call ' + fnName + ' before calling subscribe().');\n    };\n    SyncEngine.prototype.handleUserChange = function (user) {\n        var _this = this;\n        this.currentUser = user;\n        return this.localStore\n            .handleUserChange(user)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        })\n            .then(function () {\n            return _this.remoteStore.handleUserChange(user);\n        });\n    };\n    return SyncEngine;\n}());\nexport { SyncEngine };\n\n//# sourceMappingURL=sync_engine.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/sync_engine.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet, documentVersionMap } from './collections';\nimport { assert } from '../util/assert';\nimport * as misc from '../util/misc';\nexport var BATCHID_UNKNOWN = -1;\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nvar MutationBatch = /** @class */ (function () {\n    function MutationBatch(batchId, localWriteTime, mutations) {\n        this.batchId = batchId;\n        this.localWriteTime = localWriteTime;\n        this.mutations = mutations;\n    }\n    /**\n     * Applies all the mutations in this MutationBatch to the specified document\n     * to create a new remote document\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     * @param batchResult The result of applying the MutationBatch to the\n     * backend.\n     */\n    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(docKey), \"applyToRemoteDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var mutationResults = batchResult.mutationResults;\n        assert(mutationResults.length === this.mutations.length, \"Mismatch between mutations length\\n      (\" + this.mutations.length + \") and mutation results length\\n      (\" + mutationResults.length + \").\");\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                var mutationResult = mutationResults[i];\n                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n            }\n        }\n        return maybeDoc;\n    };\n    /**\n     * Computes the local view of a document given all the mutations in this\n     * batch.\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     */\n    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(docKey), \"applyToLocalDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                maybeDoc = mutation.applyToLocalView(maybeDoc, this.localWriteTime);\n            }\n        }\n        return maybeDoc;\n    };\n    MutationBatch.prototype.keys = function () {\n        var keySet = documentKeySet();\n        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {\n            var mutation = _a[_i];\n            keySet = keySet.add(mutation.key);\n        }\n        return keySet;\n    };\n    MutationBatch.prototype.equals = function (other) {\n        return (this.batchId === other.batchId &&\n            misc.arrayEquals(this.mutations, other.mutations));\n    };\n    /**\n     * Returns true if this mutation batch has already been removed from the\n     * mutation queue.\n     *\n     * Note that not all implementations of the MutationQueue necessarily use\n     * tombstones as part of their implementation and generally speaking no code\n     * outside the mutation queues should really care about this.\n     */\n    MutationBatch.prototype.isTombstone = function () {\n        return this.mutations.length === 0;\n    };\n    /** Converts this batch into a tombstone */\n    MutationBatch.prototype.toTombstone = function () {\n        return new MutationBatch(this.batchId, this.localWriteTime, []);\n    };\n    return MutationBatch;\n}());\nexport { MutationBatch };\n/** The result of applying a mutation batch to the backend. */\nvar MutationBatchResult = /** @class */ (function () {\n    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, \n        /**\n         * A pre-computed mapping from each mutated document to the resulting\n         * version.\n         */\n        docVersions) {\n        this.batch = batch;\n        this.commitVersion = commitVersion;\n        this.mutationResults = mutationResults;\n        this.streamToken = streamToken;\n        this.docVersions = docVersions;\n    }\n    /**\n     * Creates a new MutationBatchResult for the given batch and results. There\n     * must be one result for each mutation in the batch. This static factory\n     * caches a document=>version mapping (docVersions).\n     */\n    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {\n        assert(batch.mutations.length === results.length, 'Mutations sent ' +\n            batch.mutations.length +\n            ' must equal results received ' +\n            results.length);\n        var versionMap = documentVersionMap();\n        var mutations = batch.mutations;\n        for (var i = 0; i < mutations.length; i++) {\n            var version = results[i].version;\n            if (version === null) {\n                // deletes don't have a version, so we substitute the commitVersion\n                // of the entire batch.\n                version = commitVersion;\n            }\n            versionMap = versionMap.insert(mutations[i].key, version);\n        }\n        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);\n    };\n    return MutationBatchResult;\n}());\nexport { MutationBatchResult };\n\n//# sourceMappingURL=mutation_batch.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/model/mutation_batch.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbQueryCache } from './indexeddb_query_cache';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { ALL_STORES, DbOwner } from './indexeddb_schema';\nimport { createOrUpgradeDb, SCHEMA_VERSION } from './indexeddb_schema';\nimport { LocalSerializer } from './local_serializer';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDb } from './simple_db';\nvar LOG_TAG = 'IndexedDbPersistence';\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nvar OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nvar OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nvar ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nvar EXISTING_OWNER_ERROR_MSG = 'There is another tab open with offline' +\n    ' persistence enabled. Only one such tab is allowed at a time. The' +\n    ' other tab must be closed or persistence must be disabled.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +\n    ' IndexedDB or is known to have an incomplete implementation. Offline' +\n    ' persistence has been disabled.';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nvar IndexedDbPersistence = /** @class */ (function () {\n    function IndexedDbPersistence(prefix, serializer) {\n        this.ownerId = this.generateOwnerId();\n        this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n        this.serializer = new LocalSerializer(serializer);\n        this.localStoragePrefix = prefix;\n    }\n    IndexedDbPersistence.prototype.start = function () {\n        var _this = this;\n        if (!IndexedDbPersistence.isAvailable()) {\n            this.persistenceError = new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n            return Promise.reject(this.persistenceError);\n        }\n        assert(!this.started, 'IndexedDbPersistence double-started!');\n        this.started = true;\n        return SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, createOrUpgradeDb)\n            .then(function (db) {\n            _this.simpleDb = db;\n        })\n            .then(function () { return _this.tryAcquireOwnerLease(); })\n            .then(function () {\n            _this.scheduleOwnerLeaseRefreshes();\n            _this.attachWindowUnloadHook();\n        });\n    };\n    IndexedDbPersistence.prototype.shutdown = function () {\n        var _this = this;\n        assert(this.started, 'IndexedDbPersistence shutdown without start!');\n        this.started = false;\n        this.detachWindowUnloadHook();\n        this.stopOwnerLeaseRefreshes();\n        return this.releaseOwnerLease().then(function () {\n            _this.simpleDb.close();\n        });\n    };\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n        return IndexedDbMutationQueue.forUser(user, this.serializer);\n    };\n    IndexedDbPersistence.prototype.getQueryCache = function () {\n        return new IndexedDbQueryCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n        return new IndexedDbRemoteDocumentCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.runTransaction = function (action, operation) {\n        var _this = this;\n        if (this.persistenceError) {\n            return Promise.reject(this.persistenceError);\n        }\n        log.debug(LOG_TAG, 'Starting transaction:', action);\n        // Do all transactions as readwrite against all object stores, since we\n        // are the only reader/writer.\n        return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {\n            // Verify that we still have the owner lease as part of every transaction.\n            return _this.ensureOwnerLease(txn).next(function () { return operation(txn); });\n        });\n    };\n    IndexedDbPersistence.isAvailable = function () {\n        return SimpleDb.isAvailable();\n    };\n    /**\n     * Generates a string used as a prefix when storing data in IndexedDB and\n     * LocalStorage.\n     */\n    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {\n        // Use two different prefix formats:\n        //\n        //   * firestore / persistenceKey / projectID . databaseID / ...\n        //   * firestore / persistenceKey / projectID / ...\n        //\n        // projectIDs are DNS-compatible names and cannot contain dots\n        // so there's no danger of collisions.\n        var database = databaseInfo.databaseId.projectId;\n        if (!databaseInfo.databaseId.isDefaultDatabase) {\n            database += '.' + databaseInfo.databaseId.database;\n        }\n        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n    };\n    /**\n     * Acquires the owner lease if there's no valid owner. Else returns a rejected\n     * promise.\n     */\n    IndexedDbPersistence.prototype.tryAcquireOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (!_this.validOwner(dbOwner)) {\n                    var newDbOwner = new DbOwner(_this.ownerId, Date.now());\n                    log.debug(LOG_TAG, 'No valid owner. Acquiring owner lease. Current owner:', dbOwner, 'New owner:', newDbOwner);\n                    return store.put('owner', newDbOwner);\n                }\n                else {\n                    log.debug(LOG_TAG, 'Valid owner already. Failing. Current owner:', dbOwner);\n                    _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                    return PersistencePromise.reject(_this.persistenceError);\n                }\n            });\n        });\n    };\n    /** Checks the owner lease and deletes it if we are the current owner. */\n    IndexedDbPersistence.prototype.releaseOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (dbOwner !== null && dbOwner.ownerId === _this.ownerId) {\n                    log.debug(LOG_TAG, 'Releasing owner lease.');\n                    return store.delete('owner');\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Checks the owner lease and returns a rejected promise if we are not the\n     * current owner. This should be included in every transaction to guard\n     * against losing the owner lease.\n     */\n    IndexedDbPersistence.prototype.ensureOwnerLease = function (txn) {\n        var _this = this;\n        var store = txn.store(DbOwner.store);\n        return store.get('owner').next(function (dbOwner) {\n            if (dbOwner === null || dbOwner.ownerId !== _this.ownerId) {\n                _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                return PersistencePromise.reject(_this.persistenceError);\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns true if the provided owner exists, has a recent timestamp, and\n     * isn't zombied.\n     *\n     * NOTE: To determine if the owner is zombied, this method reads from\n     * LocalStorage which could be mildly expensive.\n     */\n    IndexedDbPersistence.prototype.validOwner = function (dbOwner) {\n        var now = Date.now();\n        var minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n        var maxAcceptable = now;\n        if (dbOwner === null) {\n            return false; // no owner.\n        }\n        else if (dbOwner.leaseTimestampMs < minAcceptable) {\n            return false; // owner lease has expired.\n        }\n        else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n            log.error('Persistence owner-lease is in the future. Discarding.', dbOwner);\n            return false;\n        }\n        else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n            return false; // owner's tab closed.\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Schedules a recurring timer to update the owner lease timestamp to prevent\n     * other tabs from taking the lease.\n     */\n    IndexedDbPersistence.prototype.scheduleOwnerLeaseRefreshes = function () {\n        var _this = this;\n        // NOTE: This doesn't need to be scheduled on the async queue and doing so\n        // would increase the chances of us not refreshing on time if the queue is\n        // backed up for some reason.\n        this.ownerLeaseRefreshHandle = setInterval(function () {\n            var txResult = _this.runTransaction('Refresh owner timestamp', function (txn) {\n                // NOTE: We don't need to validate the current owner contents, since\n                // runTransaction does that automatically.\n                var store = txn.store(DbOwner.store);\n                return store.put('owner', new DbOwner(_this.ownerId, Date.now()));\n            });\n            txResult.catch(function (reason) {\n                // Probably means we lost the lease. Report the error and stop trying to\n                // refresh the lease.\n                log.error(reason);\n                _this.stopOwnerLeaseRefreshes();\n            });\n        }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n    };\n    IndexedDbPersistence.prototype.stopOwnerLeaseRefreshes = function () {\n        if (this.ownerLeaseRefreshHandle) {\n            clearInterval(this.ownerLeaseRefreshHandle);\n            this.ownerLeaseRefreshHandle = null;\n        }\n    };\n    /**\n     * Attaches a window.unload handler that will synchronously write our\n     * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n     * by tabs trying to acquire the lease to determine that the lease should be\n     * acquired immediately even if the timestamp is recent. This is particularly\n     * important for the refresh case (so the tab correctly re-acquires the owner\n     * lease). LocalStorage is used for this rather than IndexedDb because it is\n     * a synchronous API and so can be used reliably from an unload handler.\n     */\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n        var _this = this;\n        this.windowUnloadHandler = function () {\n            // Record that we're zombied.\n            _this.setZombiedOwnerId(_this.ownerId);\n            // Attempt graceful shutdown (including releasing our owner lease), but\n            // there's no guarantee it will complete.\n            _this.shutdown();\n        };\n        window.addEventListener('unload', this.windowUnloadHandler);\n    };\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n        if (this.windowUnloadHandler) {\n            window.removeEventListener('unload', this.windowUnloadHandler);\n            this.windowUnloadHandler = null;\n        }\n    };\n    /**\n     * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n     * zombied due to their tab closing) from LocalStorage, or null if no such\n     * record exists.\n     */\n    IndexedDbPersistence.prototype.getZombiedOwnerId = function () {\n        try {\n            var zombiedOwnerId = window.localStorage.getItem(this.zombiedOwnerLocalStorageKey());\n            log.debug(LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n            return zombiedOwnerId;\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log.error('Failed to get zombie owner id.', e);\n            return null;\n        }\n    };\n    /**\n     * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n     * or, if passed null, deletes any recorded zombied owner.\n     */\n    IndexedDbPersistence.prototype.setZombiedOwnerId = function (zombieOwnerId) {\n        try {\n            if (zombieOwnerId === null) {\n                window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n            }\n            else {\n                window.localStorage.setItem(this.zombiedOwnerLocalStorageKey(), zombieOwnerId);\n            }\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log.error('Failed to set zombie owner id.', e);\n        }\n    };\n    IndexedDbPersistence.prototype.zombiedOwnerLocalStorageKey = function () {\n        return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n    };\n    IndexedDbPersistence.prototype.generateOwnerId = function () {\n        // For convenience, just use an AutoId.\n        return AutoId.newId();\n    };\n    /**\n     * The name of the main (and currently only) IndexedDB database. this name is\n     * appended to the prefix provided to the IndexedDbPersistence constructor.\n     */\n    IndexedDbPersistence.MAIN_DATABASE = 'main';\n    return IndexedDbPersistence;\n}());\nexport { IndexedDbPersistence };\n\n//# sourceMappingURL=indexeddb_persistence.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/indexeddb_persistence.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet, documentMap, maybeDocumentMap } from '../model/collections';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nvar LocalDocumentsView = /** @class */ (function () {\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.mutationQueue = mutationQueue;\n    }\n    /**\n     * Get the local view of the document identified by `key`.\n     *\n     * @return Local view of the document or null if we don't have any cached\n     * state for it.\n     */\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n        var _this = this;\n        return this.remoteDocumentCache\n            .getEntry(transaction, key)\n            .next(function (remoteDoc) {\n            return _this.computeLocalDocument(transaction, key, remoteDoc);\n        });\n    };\n    /**\n     * Gets the local view of the documents identified by `keys`.\n     *\n     * If we don't have cached state for a document in `keys`, a NoDocument will\n     * be stored for that key in the resulting set.\n     */\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n        var _this = this;\n        var promises = [];\n        var results = maybeDocumentMap();\n        keys.forEach(function (key) {\n            promises.push(_this.getDocument(transaction, key).next(function (maybeDoc) {\n                // TODO(http://b/32275378): Don't conflate missing / deleted.\n                if (!maybeDoc) {\n                    maybeDoc = new NoDocument(key, SnapshotVersion.forDeletedDoc());\n                }\n                results = results.insert(key, maybeDoc);\n            }));\n        });\n        return PersistencePromise.waitFor(promises).next(function () { return results; });\n    };\n    /** Performs a query against the local view of all documents. */\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        if (DocumentKey.isDocumentKey(query.path)) {\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n        }\n        else {\n            return this.getDocumentsMatchingCollectionQuery(transaction, query);\n        }\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n        // Just do a simple document lookup.\n        return this.getDocument(transaction, new DocumentKey(docPath)).next(function (maybeDoc) {\n            var result = documentMap();\n            if (maybeDoc instanceof Document) {\n                result = result.insert(maybeDoc.key, maybeDoc);\n            }\n            return result;\n        });\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {\n        var _this = this;\n        // Query the remote documents and overlay mutations.\n        // TODO(mikelehen): There may be significant overlap between the mutations\n        // affecting these remote documents and the\n        // getAllMutationBatchesAffectingQuery() mutations. Consider optimizing.\n        var results;\n        return this.remoteDocumentCache\n            .getDocumentsMatchingQuery(transaction, query)\n            .next(function (queryResults) {\n            return _this.computeLocalDocuments(transaction, queryResults);\n        })\n            .next(function (promisedResults) {\n            results = promisedResults;\n            // Now use the mutation queue to discover any other documents that may\n            // match the query after applying mutations.\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n        })\n            .next(function (matchingMutationBatches) {\n            var matchingKeys = documentKeySet();\n            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n                var batch = matchingMutationBatches_1[_i];\n                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                    var mutation = _b[_a];\n                    // TODO(mikelehen): PERF: Check if this mutation actually\n                    // affects the query to reduce work.\n                    if (!results.get(mutation.key)) {\n                        matchingKeys = matchingKeys.add(mutation.key);\n                    }\n                }\n            }\n            // Now add in the results for the matchingKeys.\n            var promises = [];\n            matchingKeys.forEach(function (key) {\n                promises.push(_this.getDocument(transaction, key).next(function (doc) {\n                    if (doc instanceof Document) {\n                        results = results.insert(doc.key, doc);\n                    }\n                }));\n            });\n            return PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            // Finally, filter out any documents that don't actually match\n            // the query.\n            results.forEach(function (key, doc) {\n                if (!query.matches(doc)) {\n                    results = results.remove(key);\n                }\n            });\n            return results;\n        });\n    };\n    /**\n     * Takes a remote document and applies local mutations to generate the local\n     * view of the document.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the document (necessary when remoteDocument\n     *     is null).\n     * @param document The base remote document to apply mutations to or null.\n     */\n    LocalDocumentsView.prototype.computeLocalDocument = function (transaction, documentKey, document) {\n        return this.mutationQueue\n            .getAllMutationBatchesAffectingDocumentKey(transaction, documentKey)\n            .next(function (batches) {\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n                var batch = batches_1[_i];\n                document = batch.applyToLocalView(documentKey, document);\n            }\n            return document;\n        });\n    };\n    /**\n     * Takes a set of remote documents and applies local mutations to generate the\n     * local view of the documents.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documents The base remote documents to apply mutations to.\n     * @return The local view of the documents.\n     */\n    LocalDocumentsView.prototype.computeLocalDocuments = function (transaction, documents) {\n        var _this = this;\n        var promises = [];\n        documents.forEach(function (key, doc) {\n            promises.push(_this.computeLocalDocument(transaction, key, doc).next(function (mutatedDoc) {\n                if (mutatedDoc instanceof Document) {\n                    documents = documents.insert(mutatedDoc.key, mutatedDoc);\n                }\n                else if (mutatedDoc instanceof NoDocument) {\n                    documents = documents.remove(mutatedDoc.key);\n                }\n                else {\n                    fail('Unknown MaybeDocument: ' + mutatedDoc);\n                }\n            }));\n        });\n        return PersistencePromise.waitFor(promises).next(function () { return documents; });\n    };\n    return LocalDocumentsView;\n}());\nexport { LocalDocumentsView };\n\n//# sourceMappingURL=local_documents_view.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_documents_view.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { assert } from '../util/assert';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nvar RemoteDocumentChangeBuffer = /** @class */ (function () {\n    function RemoteDocumentChangeBuffer(remoteDocumentCache) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.changes = maybeDocumentMap();\n    }\n    /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {\n        var changes = this.assertChanges();\n        this.changes = changes.insert(maybeDocument.key, maybeDocument);\n    };\n    // NOTE: removeEntry() is not presently necessary and so is omitted.\n    /**\n     * Looks up an entry in the cache. The buffered changes will first be checked,\n     * and if no buffered change applies, this will forward to\n     * `RemoteDocumentCache.getEntry()`.\n     *\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the entry to look up.\n     * @return The cached Document or NoDocument entry, or null if we have nothing\n     * cached.\n     */\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n        var changes = this.assertChanges();\n        var bufferedEntry = changes.get(documentKey);\n        if (bufferedEntry) {\n            return PersistencePromise.resolve(bufferedEntry);\n        }\n        else {\n            return this.remoteDocumentCache.getEntry(transaction, documentKey);\n        }\n    };\n    /**\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\n     * the provided transaction.\n     */\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n        var _this = this;\n        var changes = this.assertChanges();\n        var promises = [];\n        changes.forEach(function (key, maybeDoc) {\n            promises.push(_this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n        });\n        // We should not be used to buffer any more changes.\n        this.changes = null;\n        return PersistencePromise.waitFor(promises);\n    };\n    /** Helper to assert this.changes is not null and return it. */\n    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {\n        assert(this.changes !== null, 'Changes have already been applied.');\n        return this.changes;\n    };\n    return RemoteDocumentChangeBuffer;\n}());\nexport { RemoteDocumentChangeBuffer };\n\n//# sourceMappingURL=remote_document_change_buffer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/remote_document_change_buffer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { Timestamp } from '../core/timestamp';\nimport { documentKeySet } from '../model/collections';\nimport { BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { ResetMapping, UpdateMapping } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport * as log from '../util/log';\nimport * as objUtils from '../util/obj';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistencePromise } from './persistence_promise';\nimport { QueryData, QueryPurpose } from './query_data';\nimport { ReferenceSet } from './reference_set';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nvar LOG_TAG = 'LocalStore';\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nvar LocalStore = /** @class */ (function () {\n    function LocalStore(\n        /** Manages our in-memory or durable persistence. */\n        persistence, initialUser, \n        /**\n         * The garbage collector collects documents that should no longer be\n         * cached (e.g. if they are no longer retained by the above reference sets\n         * and the garbage collector is performing eager collection).\n         */\n        garbageCollector) {\n        this.persistence = persistence;\n        this.garbageCollector = garbageCollector;\n        /**\n         * The set of document references maintained by any local views.\n         */\n        this.localViewReferences = new ReferenceSet();\n        /** Maps a targetID to data about its query. */\n        this.targetIds = {};\n        /** Used to generate targetIDs for queries tracked locally. */\n        this.targetIdGenerator = TargetIdGenerator.forLocalStore();\n        /**\n         * A heldBatchResult is a mutation batch result (from a write acknowledgement)\n         * that arrived before the watch stream got notified of a snapshot that\n         * includes the write. So we \"hold\" it until the watch stream catches up. It\n         * ensures that the local write remains visible (latency compensation) and\n         * doesn't temporarily appear reverted because the watch stream is slower than\n         * the write stream and so wasn't reflecting it.\n         *\n         * NOTE: Eventually we want to move this functionality into the remote store.\n         */\n        this.heldBatchResults = [];\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\n        this.queryCache = persistence.getQueryCache();\n        this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue);\n        this.garbageCollector.addGarbageSource(this.localViewReferences);\n        this.garbageCollector.addGarbageSource(this.queryCache);\n        this.garbageCollector.addGarbageSource(this.mutationQueue);\n    }\n    /** Performs any initial startup actions required by the local store. */\n    LocalStore.prototype.start = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Start LocalStore', function (txn) {\n            return _this.startMutationQueue(txn).next(function () { return _this.startQueryCache(txn); });\n        });\n    };\n    /**\n     * Tells the LocalStore that the currently authenticated user has changed.\n     *\n     * In response the local store switches the mutation queue to the new user and\n     * returns any resulting document changes.\n     */\n    LocalStore.prototype.handleUserChange = function (user) {\n        var _this = this;\n        return this.persistence.runTransaction('Handle user change', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return _this.mutationQueue\n                .getAllMutationBatches(txn)\n                .next(function (promisedOldBatches) {\n                oldBatches = promisedOldBatches;\n                _this.garbageCollector.removeGarbageSource(_this.mutationQueue);\n                _this.mutationQueue = _this.persistence.getMutationQueue(user);\n                _this.garbageCollector.addGarbageSource(_this.mutationQueue);\n                return _this.startMutationQueue(txn);\n            })\n                .next(function () {\n                // Recreate our LocalDocumentsView using the new\n                // MutationQueue.\n                _this.localDocuments = new LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue);\n                return _this.mutationQueue.getAllMutationBatches(txn);\n            })\n                .next(function (newBatches) {\n                // Union the old/new changed keys.\n                var changedKeys = documentKeySet();\n                for (var _i = 0, _a = [oldBatches, newBatches]; _i < _a.length; _i++) {\n                    var batches = _a[_i];\n                    for (var _b = 0, batches_1 = batches; _b < batches_1.length; _b++) {\n                        var batch = batches_1[_b];\n                        for (var _c = 0, _d = batch.mutations; _c < _d.length; _c++) {\n                            var mutation = _d[_c];\n                            changedKeys = changedKeys.add(mutation.key);\n                        }\n                    }\n                }\n                // Return the set of all (potentially) changed documents as the\n                // result of the user change.\n                return _this.localDocuments.getDocuments(txn, changedKeys);\n            });\n        });\n    };\n    LocalStore.prototype.startQueryCache = function (txn) {\n        var _this = this;\n        return this.queryCache.start(txn).next(function () {\n            var targetId = _this.queryCache.getHighestTargetId();\n            _this.targetIdGenerator = TargetIdGenerator.forLocalStore(targetId);\n        });\n    };\n    LocalStore.prototype.startMutationQueue = function (txn) {\n        var _this = this;\n        return this.mutationQueue\n            .start(txn)\n            .next(function () {\n            // If we have any leftover mutation batch results from a prior run,\n            // just drop them.\n            // TODO(http://b/33446471): We probably need to repopulate\n            // heldBatchResults or similar instead, but that is not\n            // straightforward since we're not persisting the write ack versions.\n            _this.heldBatchResults = [];\n            return _this.mutationQueue.getHighestAcknowledgedBatchId(txn);\n        })\n            .next(function (highestAck) {\n            // TODO(mikelehen): This is the only usage of\n            // getAllMutationBatchesThroughBatchId(). Consider removing it in\n            // favor of a getAcknowledgedBatches() method.\n            if (highestAck !== BATCHID_UNKNOWN) {\n                return _this.mutationQueue.getAllMutationBatchesThroughBatchId(txn, highestAck);\n            }\n            else {\n                return PersistencePromise.resolve([]);\n            }\n        })\n            .next(function (ackedBatches) {\n            if (ackedBatches.length > 0) {\n                return _this.mutationQueue.removeMutationBatches(txn, ackedBatches);\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /* Accept locally generated Mutations and commit them to storage. */\n    LocalStore.prototype.localWrite = function (mutations) {\n        var _this = this;\n        return this.persistence.runTransaction('Locally write mutations', function (txn) {\n            var batch;\n            var localWriteTime = Timestamp.now();\n            return _this.mutationQueue\n                .addMutationBatch(txn, localWriteTime, mutations)\n                .next(function (promisedBatch) {\n                batch = promisedBatch;\n                // TODO(koss): This is doing an N^2 update by replaying ALL the\n                // mutations on each document (instead of just the ones added) in\n                // this batch.\n                var keys = batch.keys();\n                return _this.localDocuments.getDocuments(txn, keys);\n            })\n                .next(function (changedDocuments) {\n                return { batchId: batch.batchId, changes: changedDocuments };\n            });\n        });\n    };\n    /**\n     * Acknowledge the given batch.\n     *\n     * On the happy path when a batch is acknowledged, the local store will\n     *\n     *  + remove the batch from the mutation queue;\n     *  + apply the changes to the remote document cache;\n     *  + recalculate the latency compensated view implied by those changes (there\n     *    may be mutations in the queue that affect the documents but haven't been\n     *    acknowledged yet); and\n     *  + give the changed documents back the sync engine\n     *\n     * @returns The resulting (modified) documents.\n     */\n    LocalStore.prototype.acknowledgeBatch = function (batchResult) {\n        var _this = this;\n        return this.persistence.runTransaction('Acknowledge batch', function (txn) {\n            var affected;\n            return _this.mutationQueue\n                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n                .next(function () {\n                if (_this.shouldHoldBatchResult(batchResult.commitVersion)) {\n                    _this.heldBatchResults.push(batchResult);\n                    affected = documentKeySet();\n                    return PersistencePromise.resolve();\n                }\n                else {\n                    var documentBuffer_1 = new RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseBatchResults(txn, [batchResult], documentBuffer_1).next(function (promisedAffectedKeys) {\n                        affected = promisedAffectedKeys;\n                        return documentBuffer_1.apply(txn);\n                    });\n                }\n            })\n                .next(function () {\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affected);\n            });\n        });\n    };\n    /**\n     * Remove mutations from the MutationQueue for the specified batch;\n     * LocalDocuments will be recalculated.\n     *\n     * @returns The resulting modified documents.\n     */\n    LocalStore.prototype.rejectBatch = function (batchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Reject batch', function (txn) {\n            var toReject;\n            var affectedKeys;\n            return _this.mutationQueue\n                .lookupMutationBatch(txn, batchId)\n                .next(function (promisedToReject) {\n                assert(promisedToReject != null, 'Attempt to reject nonexistent batch!');\n                toReject = promisedToReject;\n                return _this.mutationQueue\n                    .getHighestAcknowledgedBatchId(txn)\n                    .next(function (lastAcked) {\n                    assert(batchId > lastAcked, \"Acknowledged batches can't be rejected.\");\n                    return toReject;\n                });\n            })\n                .next(function () {\n                return _this.removeMutationBatch(txn, toReject);\n            })\n                .next(function (promisedAffectedKeys) {\n                affectedKeys = promisedAffectedKeys;\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affectedKeys);\n            });\n        });\n    };\n    /** Returns the last recorded stream token for the current user. */\n    LocalStore.prototype.getLastStreamToken = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Get last stream token', function (txn) {\n            return _this.mutationQueue.getLastStreamToken(txn);\n        });\n    };\n    /**\n     * Sets the stream token for the current user without acknowledging any\n     * mutation batch. This is usually only useful after a stream handshake or in\n     * response to an error that requires clearing the stream token.\n     */\n    LocalStore.prototype.setLastStreamToken = function (streamToken) {\n        var _this = this;\n        return this.persistence.runTransaction('Set last stream token', function (txn) {\n            return _this.mutationQueue.setLastStreamToken(txn, streamToken);\n        });\n    };\n    /**\n     * Returns the last consistent snapshot processed (used by the RemoteStore to\n     * determine whether to buffer incoming snapshots from the backend).\n     */\n    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.queryCache.getLastRemoteSnapshotVersion();\n    };\n    /**\n     * Update the \"ground-state\" (remote) documents. We assume that the remote\n     * event reflects any write batches that have been acknowledged or rejected\n     * (i.e. we do not re-apply local mutations to updates from this event).\n     *\n     * LocalDocuments are re-calculated if there are remaining mutations in the\n     * queue.\n     */\n    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        var documentBuffer = new RemoteDocumentChangeBuffer(this.remoteDocuments);\n        return this.persistence.runTransaction('Apply remote event', function (txn) {\n            var promises = [];\n            objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                // Do not ref/unref unassigned targetIds - it may lead to leaks.\n                var queryData = _this.targetIds[targetId];\n                if (!queryData)\n                    return;\n                var mapping = change.mapping;\n                if (mapping) {\n                    // First make sure that all references are deleted\n                    if (mapping instanceof ResetMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeysForTargetId(txn, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.documents, targetId);\n                        }));\n                    }\n                    else if (mapping instanceof UpdateMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeys(txn, mapping.removedDocuments, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.addedDocuments, targetId);\n                        }));\n                    }\n                    else {\n                        return fail('Unknown mapping type: ' + JSON.stringify(mapping));\n                    }\n                }\n                // Update the resume token if the change includes one. Don't clear\n                // any preexisting value.\n                var resumeToken = change.resumeToken;\n                if (resumeToken.length > 0) {\n                    queryData = queryData.update({\n                        resumeToken: resumeToken,\n                        snapshotVersion: change.snapshotVersion\n                    });\n                    _this.targetIds[targetId] = queryData;\n                    promises.push(_this.queryCache.addQueryData(txn, queryData));\n                }\n            });\n            var changedDocKeys = documentKeySet();\n            remoteEvent.documentUpdates.forEach(function (key, doc) {\n                changedDocKeys = changedDocKeys.add(key);\n                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {\n                    // Make sure we don't apply an old document version to the remote\n                    // cache, though we make an exception for SnapshotVersion.MIN which\n                    // can happen for manufactured events (e.g. in the case of a limbo\n                    // document resolution failing).\n                    if (existingDoc == null ||\n                        doc.version.equals(SnapshotVersion.MIN) ||\n                        doc.version.compareTo(existingDoc.version) >= 0) {\n                        documentBuffer.addEntry(doc);\n                    }\n                    else {\n                        log.debug(LOG_TAG, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n                    }\n                    // The document might be garbage because it was unreferenced by\n                    // everything. Make sure to mark it as garbage if it is...\n                    _this.garbageCollector.addPotentialGarbageKey(key);\n                }));\n            });\n            // HACK: The only reason we allow a null snapshot version is so that we\n            // can synthesize remote events when we get permission denied errors while\n            // trying to resolve the state of a locally cached document that is in\n            // limbo.\n            var lastRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion();\n            var remoteVersion = remoteEvent.snapshotVersion;\n            if (!remoteVersion.equals(SnapshotVersion.MIN)) {\n                assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +\n                    remoteVersion +\n                    ' < ' +\n                    lastRemoteVersion);\n                promises.push(_this.queryCache.setLastRemoteSnapshotVersion(txn, remoteVersion));\n            }\n            var releasedWriteKeys;\n            return PersistencePromise.waitFor(promises)\n                .next(function () { return _this.releaseHeldBatchResults(txn, documentBuffer); })\n                .next(function (promisedReleasedWriteKeys) {\n                releasedWriteKeys = promisedReleasedWriteKeys;\n                return documentBuffer.apply(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, changedDocKeys.unionWith(releasedWriteKeys));\n            });\n        });\n    };\n    /**\n     * Notify local store of the changed views to locally pin documents.\n     */\n    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {\n        var _this = this;\n        return this.persistence.runTransaction('Notify local view changes', function (txn) {\n            var promises = [];\n            var _loop_1 = function (view) {\n                promises.push(_this.queryCache\n                    .getQueryData(txn, view.query)\n                    .next(function (queryData) {\n                    assert(queryData !== null, 'Local view changes contain unallocated query.');\n                    var targetId = queryData.targetId;\n                    _this.localViewReferences.addReferences(view.addedKeys, targetId);\n                    _this.localViewReferences.removeReferences(view.removedKeys, targetId);\n                }));\n            };\n            for (var _i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n                var view = viewChanges_1[_i];\n                _loop_1(view);\n            }\n            return PersistencePromise.waitFor(promises);\n        });\n    };\n    /**\n     * Gets the mutation batch after the passed in batchId in the mutation queue\n     * or null if empty.\n     * @param afterBatchId If provided, the batch to search after.\n     * @returns The next mutation or null if there wasn't one.\n     */\n    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Get next mutation batch', function (txn) {\n            if (afterBatchId === undefined) {\n                afterBatchId = BATCHID_UNKNOWN;\n            }\n            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n        });\n    };\n    /**\n     * Read the current value of a Document with a given key or null if not\n     * found - used for testing.\n     */\n    LocalStore.prototype.readDocument = function (key) {\n        var _this = this;\n        return this.persistence.runTransaction('read document', function (txn) {\n            return _this.localDocuments.getDocument(txn, key);\n        });\n    };\n    /**\n     * Assigns the given query an internal ID so that its results can be pinned so\n     * they don't get GC'd. A query must be allocated in the local store before\n     * the store can be used to manage its view.\n     */\n    LocalStore.prototype.allocateQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Allocate query', function (txn) {\n            var queryData;\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (cached) {\n                if (cached) {\n                    // This query has been listened to previously, so reuse the\n                    // previous targetID.\n                    // TODO(mcg): freshen last accessed date?\n                    queryData = cached;\n                    return PersistencePromise.resolve();\n                }\n                else {\n                    var targetId = _this.targetIdGenerator.next();\n                    queryData = new QueryData(query, targetId, QueryPurpose.Listen);\n                    return _this.queryCache.addQueryData(txn, queryData);\n                }\n            })\n                .next(function () {\n                assert(!_this.targetIds[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);\n                _this.targetIds[queryData.targetId] = queryData;\n                return queryData;\n            });\n        });\n    };\n    /** Unpin all the documents associated with the given query. */\n    LocalStore.prototype.releaseQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Release query', function (txn) {\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (queryData) {\n                assert(queryData != null, 'Tried to release nonexistent query: ' + query);\n                _this.localViewReferences.removeReferencesForId(queryData.targetId);\n                delete _this.targetIds[queryData.targetId];\n                if (_this.garbageCollector.isEager) {\n                    return _this.queryCache.removeQueryData(txn, queryData);\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            })\n                .next(function () {\n                // If this was the last watch target, then we won't get any more\n                // watch snapshots, so we should release any held batch results.\n                if (objUtils.isEmpty(_this.targetIds)) {\n                    var documentBuffer_2 = new RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseHeldBatchResults(txn, documentBuffer_2).next(function () {\n                        documentBuffer_2.apply(txn);\n                    });\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Runs the specified query against all the documents in the local store and\n     * returns the results.\n     */\n    LocalStore.prototype.executeQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Execute query', function (txn) {\n            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);\n        });\n    };\n    /**\n     * Returns the keys of the documents that are associated with the given\n     * target id in the remote table.\n     */\n    LocalStore.prototype.remoteDocumentKeys = function (targetId) {\n        var _this = this;\n        return this.persistence.runTransaction('Remote document keys', function (txn) {\n            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);\n        });\n    };\n    /**\n     * Collect garbage if necessary.\n     * Should be called periodically by Sync Engine to recover resources. The\n     * implementation must guarantee that GC won't happen in other places than\n     * this method call.\n     */\n    LocalStore.prototype.collectGarbage = function () {\n        var _this = this;\n        // Call collectGarbage regardless of whether isGCEnabled so the referenceSet\n        // doesn't continue to accumulate the garbage keys.\n        return this.persistence.runTransaction('Garbage collection', function (txn) {\n            return _this.garbageCollector.collectGarbage(txn).next(function (garbage) {\n                var promises = [];\n                garbage.forEach(function (key) {\n                    promises.push(_this.remoteDocuments.removeEntry(txn, key));\n                });\n                return PersistencePromise.waitFor(promises);\n            });\n        });\n    };\n    LocalStore.prototype.releaseHeldBatchResults = function (txn, documentBuffer) {\n        var toRelease = [];\n        for (var _i = 0, _a = this.heldBatchResults; _i < _a.length; _i++) {\n            var batchResult = _a[_i];\n            if (!this.isRemoteUpToVersion(batchResult.commitVersion)) {\n                break;\n            }\n            toRelease.push(batchResult);\n        }\n        if (toRelease.length === 0) {\n            return PersistencePromise.resolve(documentKeySet());\n        }\n        else {\n            this.heldBatchResults.splice(0, toRelease.length);\n            return this.releaseBatchResults(txn, toRelease, documentBuffer);\n        }\n    };\n    LocalStore.prototype.isRemoteUpToVersion = function (version) {\n        // If there are no watch targets, then we won't get remote snapshots, and\n        // we are always \"up-to-date.\"\n        var lastRemoteVersion = this.queryCache.getLastRemoteSnapshotVersion();\n        return (version.compareTo(lastRemoteVersion) <= 0 ||\n            objUtils.isEmpty(this.targetIds));\n    };\n    LocalStore.prototype.shouldHoldBatchResult = function (version) {\n        // Check if watcher isn't up to date or prior results are already held.\n        return (!this.isRemoteUpToVersion(version) || this.heldBatchResults.length > 0);\n    };\n    LocalStore.prototype.releaseBatchResults = function (txn, batchResults, documentBuffer) {\n        var _this = this;\n        var promiseChain = PersistencePromise.resolve();\n        var _loop_2 = function (batchResult) {\n            promiseChain = promiseChain.next(function () {\n                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);\n            });\n        };\n        for (var _i = 0, batchResults_1 = batchResults; _i < batchResults_1.length; _i++) {\n            var batchResult = batchResults_1[_i];\n            _loop_2(batchResult);\n        }\n        return promiseChain.next(function () {\n            return _this.removeMutationBatches(txn, batchResults.map(function (result) { return result.batch; }));\n        });\n    };\n    LocalStore.prototype.removeMutationBatch = function (txn, batch) {\n        return this.removeMutationBatches(txn, [batch]);\n    };\n    /** Removes all the mutation batches named in the given array. */\n    LocalStore.prototype.removeMutationBatches = function (txn, batches) {\n        var affectedDocs = documentKeySet();\n        for (var _i = 0, batches_2 = batches; _i < batches_2.length; _i++) {\n            var batch = batches_2[_i];\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                affectedDocs = affectedDocs.add(key);\n            }\n        }\n        return this.mutationQueue\n            .removeMutationBatches(txn, batches)\n            .next(function () { return affectedDocs; });\n    };\n    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {\n        var batch = batchResult.batch;\n        var docKeys = batch.keys();\n        var promiseChain = PersistencePromise.resolve();\n        docKeys.forEach(function (docKey) {\n            promiseChain = promiseChain\n                .next(function () {\n                return documentBuffer.getEntry(txn, docKey);\n            })\n                .next(function (remoteDoc) {\n                var doc = remoteDoc;\n                var ackVersion = batchResult.docVersions.get(docKey);\n                assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');\n                if (!doc || doc.version.compareTo(ackVersion) < 0) {\n                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n                    if (!doc) {\n                        assert(!remoteDoc, 'Mutation batch ' +\n                            batch +\n                            ' applied to document ' +\n                            remoteDoc +\n                            ' resulted in null');\n                    }\n                    else {\n                        documentBuffer.addEntry(doc);\n                    }\n                }\n            });\n        });\n        return promiseChain;\n    };\n    return LocalStore;\n}());\nexport { LocalStore };\n\n//# sourceMappingURL=local_store.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/local_store.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { emptyByteString } from '../platform/platform';\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\nvar MemoryMutationQueue = /** @class */ (function () {\n    function MemoryMutationQueue() {\n        /**\n         * The set of all mutations that have been sent but not yet been applied to\n         * the backend.\n         */\n        this.mutationQueue = [];\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\n        this.nextBatchId = 1;\n        /** The highest acknowledged mutation in the queue. */\n        this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        /** The last received stream token from the server, used to acknowledge which\n         * responses the client has processed. Stream tokens are opaque checkpoint\n         * markers whose only real value is their inclusion in the next request.\n         */\n        this.lastStreamToken = emptyByteString();\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n        /** An ordered mapping between documents and the mutations batch IDs. */\n        this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n    }\n    MemoryMutationQueue.prototype.start = function (transaction) {\n        // NOTE: The queue may be shutdown / started multiple times, since we\n        // maintain the queue for the duration of the app session in case a user\n        // logs out / back in. To behave like the LevelDB-backed MutationQueue (and\n        // accommodate tests that expect as much), we reset nextBatchId and\n        // highestAcknowledgedBatchId if the queue is empty.\n        if (this.mutationQueue.length === 0) {\n            this.nextBatchId = 1;\n            this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        }\n        assert(this.highestAcknowledgedBatchId < this.nextBatchId, 'highestAcknowledgedBatchId must be less than the nextBatchId');\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n        return PersistencePromise.resolve(this.mutationQueue.length === 0);\n    };\n    MemoryMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.nextBatchId);\n    };\n    MemoryMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.highestAcknowledgedBatchId);\n    };\n    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n        // Verify that the batch in the queue is the one to be acknowledged.\n        var check = this.mutationQueue[batchIndex];\n        assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' +\n            batchId +\n            ', got batch ' +\n            check.batchId);\n        assert(!check.isTombstone(), \"Can't acknowledge a previously removed batch\");\n        this.highestAcknowledgedBatchId = batchId;\n        this.lastStreamToken = streamToken;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return PersistencePromise.resolve(this.lastStreamToken);\n    };\n    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.lastStreamToken = streamToken;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        assert(mutations.length !== 0, 'Mutation batches should not be empty');\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        if (this.mutationQueue.length > 0) {\n            var prior = this.mutationQueue[this.mutationQueue.length - 1];\n            assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');\n        }\n        var batch = new MutationBatch(batchId, localWriteTime, mutations);\n        this.mutationQueue.push(batch);\n        // Track references by document key.\n        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n            var mutation = mutations_1[_i];\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));\n        }\n        return PersistencePromise.resolve(batch);\n    };\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        return PersistencePromise.resolve(this.findMutationBatch(batchId));\n    };\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var size = this.mutationQueue.length;\n        // All batches with batchId <= this.highestAcknowledgedBatchId have been\n        // acknowledged so the first unacknowledged batch after batchID will have a\n        // batchID larger than both of these values.\n        batchId = Math.max(batchId + 1, this.highestAcknowledgedBatchId);\n        // The requested batchId may still be out of range so normalize it to the\n        // start of the queue.\n        var rawIndex = this.indexOfBatchId(batchId);\n        var index = rawIndex < 0 ? 0 : rawIndex;\n        // Finally return the first non-tombstone batch.\n        for (; index < size; index++) {\n            var batch = this.mutationQueue[index];\n            if (!batch.isTombstone()) {\n                return PersistencePromise.resolve(batch);\n            }\n        }\n        return PersistencePromise.resolve(null);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        return PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var count = this.mutationQueue.length;\n        var endIndex = this.indexOfBatchId(batchId);\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        else if (endIndex >= count) {\n            endIndex = count;\n        }\n        else {\n            // The endIndex is in the queue so increment to pull everything in the\n            // queue including it.\n            endIndex++;\n        }\n        return PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(endIndex));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        var start = new DocReference(documentKey, 0);\n        var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n        var result = [];\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n            assert(documentKey.equals(ref.key), \"Should only iterate over a single key's batches\");\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\n            assert(batch !== null, 'Batches in the index must exist in the main table');\n            result.push(batch);\n        });\n        return PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        // Use the query path as a prefix for testing if a document matches the\n        // query.\n        var prefix = query.path;\n        var immediateChildrenPathLength = prefix.length + 1;\n        // Construct a document reference for actually scanning the index. Unlike\n        // the prefix the document key in this reference must have an even number of\n        // segments. The empty segment can be used a suffix of the query path\n        // because it precedes all other segments in an ordered traversal.\n        var startPath = prefix;\n        if (!DocumentKey.isDocumentKey(startPath)) {\n            startPath = startPath.child('');\n        }\n        var start = new DocReference(new DocumentKey(startPath), 0);\n        // Find unique batchIDs referenced by all documents potentially matching the\n        // query.\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\n            var rowKeyPath = ref.key.path;\n            if (!prefix.isPrefixOf(rowKeyPath)) {\n                return false;\n            }\n            else {\n                // Rows with document keys more than one segment longer than the query\n                // path can't be matches. For example, a query on 'rooms' can't match\n                // the document /rooms/abc/messages/xyx.\n                // TODO(mcg): we'll need a different scanner when we implement\n                // ancestor queries.\n                if (rowKeyPath.length === immediateChildrenPathLength) {\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n                }\n                return true;\n            }\n        }, start);\n        // Construct an array of matching batches, sorted by batchID to ensure that\n        // multiple mutations affecting the same document key are applied in order.\n        var result = [];\n        uniqueBatchIDs.forEach(function (batchId) {\n            var batch = _this.findMutationBatch(batchId);\n            if (batch !== null) {\n                result.push(batch);\n            }\n        });\n        return PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var batchCount = batches.length;\n        assert(batchCount > 0, 'Should not remove mutations when none exist.');\n        var firstBatchId = batches[0].batchId;\n        var queueCount = this.mutationQueue.length;\n        // Find the position of the first batch for removal. This need not be the\n        // first entry in the queue.\n        var startIndex = this.indexOfExistingBatchId(firstBatchId, 'removed');\n        assert(this.mutationQueue[startIndex].batchId === firstBatchId, 'Removed batches must exist in the queue');\n        // Check that removed batches are contiguous (while excluding tombstones).\n        var batchIndex = 1;\n        var queueIndex = startIndex + 1;\n        while (batchIndex < batchCount && queueIndex < queueCount) {\n            var batch = this.mutationQueue[queueIndex];\n            if (batch.isTombstone()) {\n                queueIndex++;\n                continue;\n            }\n            assert(batch.batchId === batches[batchIndex].batchId, 'Removed batches must be contiguous in the queue');\n            batchIndex++;\n            queueIndex++;\n        }\n        // Only actually remove batches if removing at the front of the queue.\n        // Previously rejected batches may have left tombstones in the queue, so\n        // expand the removal range to include any tombstones.\n        if (startIndex === 0) {\n            for (; queueIndex < queueCount; queueIndex++) {\n                var batch = this.mutationQueue[queueIndex];\n                if (!batch.isTombstone()) {\n                    break;\n                }\n            }\n            var length_1 = queueIndex - startIndex;\n            this.mutationQueue.splice(startIndex, length_1);\n        }\n        else {\n            // Mark the tombstones\n            for (var i = startIndex; i < queueIndex; i++) {\n                this.mutationQueue[i] = this.mutationQueue[i].toTombstone();\n            }\n        }\n        var references = this.batchesByDocumentKey;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            var batchId = batch.batchId;\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                if (this.garbageCollector !== null) {\n                    this.garbageCollector.addPotentialGarbageKey(key);\n                }\n                var ref = new DocReference(key, batchId);\n                references = references.delete(ref);\n            }\n        }\n        this.batchesByDocumentKey = references;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n        return PersistencePromise.resolve(key.equals(firstRef && firstRef.key));\n    };\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        if (this.mutationQueue.length === 0) {\n            assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');\n        }\n        return PersistencePromise.resolve();\n    };\n    /**\n     * A private helper that collects all the mutations batches in the queue up to\n     * but not including the given endIndex. All tombstones in the queue are\n     * excluded.\n     */\n    MemoryMutationQueue.prototype.getAllLiveMutationBatchesBeforeIndex = function (endIndex) {\n        var result = [];\n        for (var i = 0; i < endIndex; i++) {\n            var batch = this.mutationQueue[i];\n            if (!batch.isTombstone()) {\n                result.push(batch);\n            }\n        }\n        return result;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue and asserts that\n     * the resulting index is within the bounds of the queue.\n     *\n     * @param batchId The batchId to search for\n     * @param action A description of what the caller is doing, phrased in passive\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n     */\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n        var index = this.indexOfBatchId(batchId);\n        assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);\n        return index;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue. This operation\n     * is O(1).\n     *\n     * @return The computed index of the batch with the given batchId, based on\n     * the state of the queue. Note this index can be negative if the requested\n     * batchId has already been remvoed from the queue or past the end of the\n     * queue if the batchId is larger than the last added batch.\n     */\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n        if (this.mutationQueue.length === 0) {\n            // As an index this is past the end of the queue\n            return 0;\n        }\n        // Examine the front of the queue to figure out the difference between the\n        // batchId and indexes in the array. Note that since the queue is ordered\n        // by batchId, if the first batch has a larger batchId then the requested\n        // batchId doesn't exist in the queue.\n        var firstBatchId = this.mutationQueue[0].batchId;\n        return batchId - firstBatchId;\n    };\n    /**\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\n     * other functions that uses this code easier to read and more efficent.\n     */\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n        var index = this.indexOfBatchId(batchId);\n        if (index < 0 || index >= this.mutationQueue.length) {\n            return null;\n        }\n        var batch = this.mutationQueue[index];\n        assert(batch.batchId === batchId, 'If found batch must match');\n        return batch.isTombstone() ? null : batch;\n    };\n    return MemoryMutationQueue;\n}());\nexport { MemoryMutationQueue };\n\n//# sourceMappingURL=memory_mutation_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_mutation_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ObjectMap } from '../util/obj_map';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nvar MemoryQueryCache = /** @class */ (function () {\n    function MemoryQueryCache() {\n        /**\n         * Maps a query to the data about that query\n         */\n        this.queries = new ObjectMap(function (q) { return q.canonicalId(); });\n        /** The last received snapshot version. */\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n        /** The highest numbered target ID encountered. */\n        this.highestTargetId = 0;\n        /**\n         * A ordered bidirectional mapping between documents and the remote target\n         * IDs.\n         */\n        this.references = new ReferenceSet();\n    }\n    MemoryQueryCache.prototype.start = function (transaction) {\n        // Nothing to do.\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    MemoryQueryCache.prototype.getHighestTargetId = function () {\n        return this.highestTargetId;\n    };\n    MemoryQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        this.queries.set(queryData.query, queryData);\n        var targetId = queryData.targetId;\n        if (targetId > this.highestTargetId) {\n            this.highestTargetId = targetId;\n        }\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        this.queries.delete(queryData.query);\n        this.references.removeReferencesForId(queryData.targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {\n        var queryData = this.queries.get(query) || null;\n        return PersistencePromise.resolve(queryData);\n    };\n    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        this.references.addReferences(keys, targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        this.references.removeReferences(keys, targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        this.references.removeReferencesForId(targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var matchingKeys = this.references.referencesForId(targetId);\n        return PersistencePromise.resolve(matchingKeys);\n    };\n    MemoryQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.references.setGarbageCollector(gc);\n    };\n    MemoryQueryCache.prototype.containsKey = function (txn, key) {\n        return this.references.containsKey(txn, key);\n    };\n    return MemoryQueryCache;\n}());\nexport { MemoryQueryCache };\n\n//# sourceMappingURL=memory_query_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_query_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap, maybeDocumentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { PersistencePromise } from './persistence_promise';\nvar MemoryRemoteDocumentCache = /** @class */ (function () {\n    function MemoryRemoteDocumentCache() {\n        this.docs = maybeDocumentMap();\n    }\n    MemoryRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        this.docs = this.docs.insert(maybeDocument.key, maybeDocument);\n        return PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        this.docs = this.docs.remove(documentKey);\n        return PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        return PersistencePromise.resolve(this.docs.get(documentKey));\n    };\n    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var prefix = new DocumentKey(query.path.child(''));\n        var iterator = this.docs.getIteratorFrom(prefix);\n        while (iterator.hasNext()) {\n            var _a = iterator.getNext(), key = _a.key, maybeDoc = _a.value;\n            if (!query.path.isPrefixOf(key.path)) {\n                break;\n            }\n            if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        }\n        return PersistencePromise.resolve(results);\n    };\n    return MemoryRemoteDocumentCache;\n}());\nexport { MemoryRemoteDocumentCache };\n\n//# sourceMappingURL=memory_remote_document_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_remote_document_cache.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryQueryCache } from './memory_query_cache';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nvar LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new MemoryRemoteDocumentCache();\n        this.queryCache = new MemoryQueryCache();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        assert(!this.started, 'MemoryPersistence double-started!');\n        this.started = true;\n        // No durable state to read on startup.\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        // No durable state to ensure is closed on shutdown.\n        assert(this.started, 'MemoryPersistence shutdown without start!');\n        this.started = false;\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new MemoryMutationQueue();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        debug(LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\nexport { MemoryPersistence };\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n//# sourceMappingURL=memory_persistence.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/memory_persistence.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return PersistencePromise.resolve(documentKeySet());\n    };\n    return NoOpGarbageCollector;\n}());\nexport { NoOpGarbageCollector };\n\n//# sourceMappingURL=no_op_garbage_collector.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/local/no_op_garbage_collector.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\nexport { Deferred };\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nexport function sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n//# sourceMappingURL=promise.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/promise.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as log from '../util/log';\nimport { Deferred } from '../util/promise';\nvar LOG_TAG = 'ExponentialBackoff';\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar ExponentialBackoff = /** @class */ (function () {\n    function ExponentialBackoff(\n        /**\n         * The initial delay (used as the base delay on the first retry attempt).\n         * Note that jitter will still be applied, so the actual delay could be as\n         * little as 0.5*initialDelayMs.\n         */\n        initialDelayMs, \n        /**\n         * The multiplier to use to determine the extended base delay after each\n         * attempt.\n         */\n        backoffFactor, \n        /**\n         * The maximum base delay after which no further backoff is performed.\n         * Note that jitter will still be applied, so the actual delay could be as\n         * much as 1.5*maxDelayMs.\n         */\n        maxDelayMs) {\n        this.initialDelayMs = initialDelayMs;\n        this.backoffFactor = backoffFactor;\n        this.maxDelayMs = maxDelayMs;\n        this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */\n    ExponentialBackoff.prototype.reset = function () {\n        this.currentBaseMs = 0;\n    };\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n    ExponentialBackoff.prototype.resetToMax = function () {\n        this.currentBaseMs = this.maxDelayMs;\n    };\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     */\n    ExponentialBackoff.prototype.backoffAndWait = function () {\n        var def = new Deferred();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        var delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            log.debug(LOG_TAG, \"Backing off for \" + delayWithJitterMs + \" ms \" +\n                (\"(base delay: \" + this.currentBaseMs + \" ms)\"));\n        }\n        setTimeout(function () {\n            def.resolve();\n        }, delayWithJitterMs);\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        if (this.currentBaseMs < this.initialDelayMs) {\n            this.currentBaseMs = this.initialDelayMs;\n        }\n        if (this.currentBaseMs > this.maxDelayMs) {\n            this.currentBaseMs = this.maxDelayMs;\n        }\n        return def.promise;\n    };\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\n        return (Math.random() - 0.5) * this.currentBaseMs;\n    };\n    return ExponentialBackoff;\n}());\nexport { ExponentialBackoff };\n\n//# sourceMappingURL=backoff.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/backoff.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { assert } from '../util/assert';\nimport { PersistentListenStream, PersistentWriteStream } from './persistent_stream';\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nvar Datastore = /** @class */ (function () {\n    function Datastore(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        this.databaseInfo = databaseInfo;\n        this.queue = queue;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.serializer = serializer;\n        this.initialBackoffDelay = initialBackoffDelay;\n    }\n    Datastore.prototype.newPersistentWriteStream = function () {\n        return new PersistentWriteStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.newPersistentWatchStream = function () {\n        return new PersistentListenStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.commit = function (mutations) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\n        };\n        return this.invokeRPC('Commit', params).then(function (response) {\n            return _this.serializer.fromWriteResults(response.writeResults);\n        });\n    };\n    Datastore.prototype.lookup = function (keys) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\n        };\n        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {\n            var docs = maybeDocumentMap();\n            response.forEach(function (proto) {\n                var doc = _this.serializer.fromMaybeDocument(proto);\n                docs = docs.insert(doc.key, doc);\n            });\n            var result = [];\n            keys.forEach(function (key) {\n                var doc = docs.get(key);\n                assert(!!doc, 'Missing entity in write response for ' + key);\n                result.push(doc);\n            });\n            return result;\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC. */\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeRPC(rpcName, request, token);\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC with streamed results. */\n    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeStreamingRPC(rpcName, request, token);\n        });\n    };\n    return Datastore;\n}());\nexport { Datastore };\n\n//# sourceMappingURL=datastore.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/datastore.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from './snapshot_version';\nimport { documentVersionMap } from '../model/collections';\nimport { NoDocument } from '../model/document';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport { Code, FirestoreError } from '../util/error';\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(datastore) {\n        this.datastore = datastore;\n        // The version of each document that was read during this transaction.\n        this.readVersions = documentVersionMap();\n        this.mutations = [];\n        this.committed = false;\n    }\n    Transaction.prototype.recordVersion = function (doc) {\n        var docVersion = doc.version;\n        if (doc instanceof NoDocument) {\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            docVersion = SnapshotVersion.forDeletedDoc();\n        }\n        var existingVersion = this.readVersions.get(doc.key);\n        if (existingVersion !== null) {\n            if (!docVersion.equals(existingVersion)) {\n                // This transaction will fail no matter what.\n                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n            }\n        }\n        else {\n            this.readVersions = this.readVersions.insert(doc.key, docVersion);\n        }\n    };\n    Transaction.prototype.lookup = function (keys) {\n        var _this = this;\n        if (this.committed) {\n            return Promise.reject('Transaction has already completed.');\n        }\n        if (this.mutations.length > 0) {\n            return Promise.reject('Transactions lookups are invalid after writes.');\n        }\n        return this.datastore.lookup(keys).then(function (docs) {\n            docs.forEach(function (doc) { return _this.recordVersion(doc); });\n            return docs;\n        });\n    };\n    Transaction.prototype.write = function (mutations) {\n        if (this.committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');\n        }\n        this.mutations = this.mutations.concat(mutations);\n    };\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n    Transaction.prototype.precondition = function (key) {\n        var version = this.readVersions.get(key);\n        if (version) {\n            return Precondition.updateTime(version);\n        }\n        else {\n            return Precondition.NONE;\n        }\n    };\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n    Transaction.prototype.preconditionForUpdate = function (key) {\n        var version = this.readVersions.get(key);\n        if (version && version.equals(SnapshotVersion.forDeletedDoc())) {\n            // The document doesn't exist, so fail the transaction.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, \"Can't update a document that doesn't exist.\");\n        }\n        else if (version) {\n            // Document exists, base precondition on document update time.\n            return Precondition.updateTime(version);\n        }\n        else {\n            // Document was not read, so we just use the preconditions for a blind\n            // update.\n            return Precondition.exists(true);\n        }\n    };\n    Transaction.prototype.set = function (key, data) {\n        this.write(data.toMutations(key, this.precondition(key)));\n    };\n    Transaction.prototype.update = function (key, data) {\n        this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    };\n    Transaction.prototype.delete = function (key) {\n        this.write([new DeleteMutation(key, this.precondition(key))]);\n        // Since the delete will be applied before all following writes, we need to\n        // ensure that the precondition for the next write will be exists: false.\n        this.readVersions = this.readVersions.insert(key, SnapshotVersion.forDeletedDoc());\n    };\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var unwritten = this.readVersions;\n        // For each mutation, note that the doc was written.\n        this.mutations.forEach(function (mutation) {\n            unwritten = unwritten.remove(mutation.key);\n        });\n        if (!unwritten.isEmpty()) {\n            return Promise.reject(Error('Every document read in a transaction must also be written.'));\n        }\n        return this.datastore.commit(this.mutations).then(function () {\n            _this.committed = true;\n        });\n    };\n    return Transaction;\n}());\nexport { Transaction };\n\n//# sourceMappingURL=transaction.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/transaction.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Transaction } from '../core/transaction';\nimport { OnlineState } from '../core/types';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { BATCHID_UNKNOWN, MutationBatchResult } from '../model/mutation_batch';\nimport { emptyByteString } from '../platform/platform';\nimport { assert } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\nimport * as objUtils from '../util/obj';\nimport { ResetMapping, UpdateMapping } from './remote_event';\nimport { isPermanentError } from './rpc_error';\nimport { WatchChangeAggregator, WatchTargetChange, WatchTargetChangeState } from './watch_change';\nvar LOG_TAG = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nvar MAX_PENDING_WRITES = 10;\n// The RemoteStore notifies an onlineStateHandler with OnlineState.Failed if we\n// fail to connect to the backend. This subsequently triggers get() requests to\n// fail or use cached data, etc. Unfortunately, our connections have\n// historically been subject to various transient failures. So we wait for\n// multiple failures before notifying the onlineStateHandler.\nvar ONLINE_ATTEMPTS_BEFORE_FAILURE = 2;\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nvar RemoteStore = /** @class */ (function () {\n    function RemoteStore(\n        /**\n         * The local store, used to fill the write pipeline with outbound\n         * mutations and resolve existence filter mismatches.\n         */\n        localStore, \n        /** The client-side proxy for interacting with the backend. */\n        datastore, onlineStateHandler) {\n        this.localStore = localStore;\n        this.datastore = datastore;\n        this.onlineStateHandler = onlineStateHandler;\n        this.pendingWrites = [];\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        /**\n         * A mapping of watched targets that the client cares about tracking and the\n         * user has explicitly called a 'listen' for this target.\n         *\n         * These targets may or may not have been sent to or acknowledged by the\n         * server. On re-establishing the listen stream, these targets should be sent\n         * to the server. The targets removed with unlistens are removed eagerly\n         * without waiting for confirmation from the listen stream.\n         */\n        this.listenTargets = {};\n        /**\n         * A mapping of targetId to pending acks needed.\n         *\n         * If a targetId is present in this map, then we're waiting for watch to\n         * acknowledge a removal or addition of the target. If a target is not in this\n         * mapping, and it's in the listenTargets map, then we consider the target to\n         * be active.\n         *\n         * We increment the count here every time we issue a request over the stream\n         * to watch or unwatch. We then decrement the count every time we get a target\n         * added or target removed message from the server. Once the count is equal to\n         * 0 we know that the client and server are in the same state (once this state\n         * is reached the targetId is removed from the map to free the memory).\n         */\n        this.pendingTargetResponses = {};\n        this.accumulatedWatchChanges = [];\n        this.watchStream = null;\n        this.writeStream = null;\n        /**\n         * The online state of the watch stream. The state is set to healthy if and\n         * only if there are messages received by the backend.\n         */\n        this.watchStreamOnlineState = OnlineState.Unknown;\n        /** A count of consecutive failures to open the stream. */\n        this.watchStreamFailures = 0;\n        /** Whether the client should fire offline warning. */\n        this.shouldWarnOffline = true;\n    }\n    /**\n     * Starts up the remote store, creating streams, restoring state from\n     * LocalStore, etc.\n     */\n    RemoteStore.prototype.start = function () {\n        return this.enableNetwork();\n    };\n    RemoteStore.prototype.setOnlineStateToHealthy = function () {\n        this.shouldWarnOffline = false;\n        this.updateAndBroadcastOnlineState(OnlineState.Healthy);\n    };\n    RemoteStore.prototype.setOnlineStateToUnknown = function () {\n        // The state is set to unknown when a healthy stream is closed (e.g. due to\n        // a token timeout) or when we have no active listens and therefore there's\n        // no need to start the stream. Assuming there is (possibly in the future)\n        // an active listen, then we will eventually move to state Online or Failed,\n        // but we always want to make at least ONLINE_ATTEMPTS_BEFORE_FAILURE\n        // attempts before failing, so we reset the count here.\n        this.watchStreamFailures = 0;\n        this.updateAndBroadcastOnlineState(OnlineState.Unknown);\n    };\n    RemoteStore.prototype.updateOnlineStateAfterFailure = function () {\n        // The first failure after we are successfully connected moves us to the\n        // 'Unknown' state. We then may make multiple attempts (based on\n        // ONLINE_ATTEMPTS_BEFORE_FAILURE) before we actually report failure.\n        if (this.watchStreamOnlineState === OnlineState.Healthy) {\n            this.setOnlineStateToUnknown();\n        }\n        else {\n            this.watchStreamFailures++;\n            if (this.watchStreamFailures >= ONLINE_ATTEMPTS_BEFORE_FAILURE) {\n                if (this.shouldWarnOffline) {\n                    log.error('Could not reach Firestore backend.');\n                    this.shouldWarnOffline = false;\n                }\n                this.updateAndBroadcastOnlineState(OnlineState.Failed);\n            }\n        }\n    };\n    RemoteStore.prototype.updateAndBroadcastOnlineState = function (onlineState) {\n        var didChange = this.watchStreamOnlineState !== onlineState;\n        this.watchStreamOnlineState = onlineState;\n        if (didChange) {\n            this.onlineStateHandler(onlineState);\n        }\n    };\n    RemoteStore.prototype.isNetworkEnabled = function () {\n        assert((this.watchStream == null) == (this.writeStream == null), 'WatchStream and WriteStream should both be null or non-null');\n        return this.watchStream != null;\n    };\n    /** Re-enables the network. Only to be called as the counterpart to disableNetwork(). */\n    RemoteStore.prototype.enableNetwork = function () {\n        var _this = this;\n        assert(this.watchStream == null, 'enableNetwork() called with non-null watchStream.');\n        assert(this.writeStream == null, 'enableNetwork() called with non-null writeStream.');\n        // Create new streams (but note they're not started yet).\n        this.watchStream = this.datastore.newPersistentWatchStream();\n        this.writeStream = this.datastore.newPersistentWriteStream();\n        // Load any saved stream token from persistent storage\n        return this.localStore.getLastStreamToken().then(function (token) {\n            _this.writeStream.lastStreamToken = token;\n            if (_this.shouldStartWatchStream()) {\n                _this.startWatchStream();\n            }\n            _this.updateAndBroadcastOnlineState(OnlineState.Unknown);\n            return _this.fillWritePipeline(); // This may start the writeStream.\n        });\n    };\n    /** Temporarily disables the network. The network can be re-enabled using enableNetwork(). */\n    RemoteStore.prototype.disableNetwork = function () {\n        this.updateAndBroadcastOnlineState(OnlineState.Failed);\n        // NOTE: We're guaranteed not to get any further events from these streams (not even a close\n        // event).\n        this.watchStream.stop();\n        this.writeStream.stop();\n        this.cleanUpWatchStreamState();\n        this.cleanUpWriteStreamState();\n        this.writeStream = null;\n        this.watchStream = null;\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.shutdown = function () {\n        log.debug(LOG_TAG, 'RemoteStore shutting down.');\n        this.disableNetwork();\n        return Promise.resolve(undefined);\n    };\n    /** Starts new listen for the given query. Uses resume token if provided */\n    RemoteStore.prototype.listen = function (queryData) {\n        assert(!objUtils.contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');\n        // Mark this as something the client is currently listening for.\n        this.listenTargets[queryData.targetId] = queryData;\n        if (this.shouldStartWatchStream()) {\n            // The listen will be sent in onWatchStreamOpen\n            this.startWatchStream();\n        }\n        else if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendWatchRequest(queryData);\n        }\n    };\n    /** Removes the listen from server */\n    RemoteStore.prototype.unlisten = function (targetId) {\n        assert(objUtils.contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');\n        var queryData = this.listenTargets[targetId];\n        delete this.listenTargets[targetId];\n        if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendUnwatchRequest(targetId);\n            if (objUtils.isEmpty(this.listenTargets)) {\n                this.watchStream.markIdle();\n            }\n        }\n    };\n    /**\n     * We need to increment the the expected number of pending responses we're due\n     * from watch so we wait for the ack to process any messages from this target.\n     */\n    RemoteStore.prototype.sendWatchRequest = function (queryData) {\n        this.recordPendingTargetRequest(queryData.targetId);\n        this.watchStream.watch(queryData);\n    };\n    /**\n     * We need to increment the expected number of pending responses we're due\n     * from watch so we wait for the removal on the server before we process any\n     * messages from this target.\n     */\n    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {\n        this.recordPendingTargetRequest(targetId);\n        this.watchStream.unwatch(targetId);\n    };\n    /**\n     * Increment the mapping of how many acks are needed from watch before we can\n     * consider the server to be 'in-sync' with the client's active targets.\n     */\n    RemoteStore.prototype.recordPendingTargetRequest = function (targetId) {\n        // For each request we get we need to record we need a response for it.\n        this.pendingTargetResponses[targetId] =\n            (this.pendingTargetResponses[targetId] || 0) + 1;\n    };\n    RemoteStore.prototype.startWatchStream = function () {\n        assert(this.shouldStartWatchStream(), 'startWriteStream() called when shouldStartWatchStream() is false.');\n        this.watchStream.start({\n            onOpen: this.onWatchStreamOpen.bind(this),\n            onClose: this.onWatchStreamClose.bind(this),\n            onWatchChange: this.onWatchStreamChange.bind(this)\n        });\n    };\n    /**\n     * Returns whether the watch stream should be started because there are\n     * active targets trying to be listened too\n     */\n    RemoteStore.prototype.shouldStartWatchStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.watchStream.isStarted() &&\n            !objUtils.isEmpty(this.listenTargets));\n    };\n    RemoteStore.prototype.cleanUpWatchStreamState = function () {\n        // If the connection is closed then we'll never get a snapshot version for\n        // the accumulated changes and so we'll never be able to complete the batch.\n        // When we start up again the server is going to resend these changes\n        // anyway, so just toss the accumulated state.\n        this.accumulatedWatchChanges = [];\n        this.pendingTargetResponses = {};\n    };\n    RemoteStore.prototype.onWatchStreamOpen = function () {\n        var _this = this;\n        // TODO(b/35852690): close the stream again (with some timeout?) if no watch\n        // targets are active\n        objUtils.forEachNumber(this.listenTargets, function (targetId, queryData) {\n            _this.sendWatchRequest(queryData);\n        });\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamClose = function (error) {\n        assert(this.isNetworkEnabled(), 'onWatchStreamClose() should only be called when the network is enabled');\n        this.cleanUpWatchStreamState();\n        // If there was an error, retry the connection.\n        if (this.shouldStartWatchStream()) {\n            this.updateOnlineStateAfterFailure();\n            this.startWatchStream();\n        }\n        else {\n            // No need to restart watch stream because there are no active targets.\n            // The online state is set to unknown because there is no active attempt\n            // at establishing a connection\n            this.setOnlineStateToUnknown();\n        }\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {\n        // Mark the connection as healthy because we got a message from the server\n        this.setOnlineStateToHealthy();\n        if (watchChange instanceof WatchTargetChange &&\n            watchChange.state === WatchTargetChangeState.Removed &&\n            watchChange.cause) {\n            // There was an error on a target, don't wait for a consistent snapshot\n            // to raise events\n            return this.handleTargetError(watchChange);\n        }\n        // Accumulate watch changes but don't process them if there's no\n        // snapshotVersion or it's older than a previous snapshot we've processed\n        // (can happen after we resume a target using a resume token).\n        this.accumulatedWatchChanges.push(watchChange);\n        if (!snapshotVersion.equals(SnapshotVersion.MIN) &&\n            snapshotVersion.compareTo(this.localStore.getLastRemoteSnapshotVersion()) >= 0) {\n            var changes = this.accumulatedWatchChanges;\n            this.accumulatedWatchChanges = [];\n            return this.handleWatchChangeBatch(snapshotVersion, changes);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Takes a batch of changes from the Datastore, repackages them as a\n     * RemoteEvent, and passes that on to the listener, which is typically the\n     * SyncEngine.\n     */\n    RemoteStore.prototype.handleWatchChangeBatch = function (snapshotVersion, changes) {\n        var _this = this;\n        var aggregator = new WatchChangeAggregator(snapshotVersion, this.listenTargets, this.pendingTargetResponses);\n        aggregator.addChanges(changes);\n        var remoteEvent = aggregator.createRemoteEvent();\n        // Get the new response counts from the aggregator\n        this.pendingTargetResponses = aggregator.pendingTargetResponses;\n        var promises = [];\n        // Handle existence filters and existence filter mismatches.\n        objUtils.forEachNumber(aggregator.existenceFilters, function (targetId, filter) {\n            var queryData = _this.listenTargets[targetId];\n            if (!queryData) {\n                // A watched target might have been removed already.\n                return;\n            }\n            var query = queryData.query;\n            if (query.isDocumentQuery()) {\n                if (filter.count === 0) {\n                    // The existence filter told us the document does not exist.\n                    // We need to deduce that this document does not exist and apply\n                    // a deleted document to our updates. Without applying a deleted\n                    // document there might be another query that will raise this\n                    // document as part of a snapshot until it is resolved,\n                    // essentially exposing inconsistency between queries.\n                    var key = new DocumentKey(query.path);\n                    var deletedDoc = new NoDocument(key, snapshotVersion);\n                    remoteEvent.addDocumentUpdate(deletedDoc);\n                }\n                else {\n                    assert(filter.count === 1, 'Single document existence filter with count: ' + filter.count);\n                }\n            }\n            else {\n                // Not a document query.\n                var promise = _this.localStore\n                    .remoteDocumentKeys(targetId)\n                    .then(function (trackedRemote) {\n                    if (remoteEvent.targetChanges[targetId]) {\n                        var mapping = remoteEvent.targetChanges[targetId].mapping;\n                        if (mapping !== null) {\n                            if (mapping instanceof UpdateMapping) {\n                                trackedRemote = mapping.applyToKeySet(trackedRemote);\n                            }\n                            else {\n                                assert(mapping instanceof ResetMapping, 'Expected either reset or update mapping but got something else: ' +\n                                    mapping);\n                                trackedRemote = mapping.documents;\n                            }\n                        }\n                    }\n                    if (trackedRemote.size !== filter.count) {\n                        // Existence filter mismatch, resetting mapping.\n                        // Make sure the mismatch is exposed in the remote event.\n                        remoteEvent.handleExistenceFilterMismatch(targetId);\n                        // Clear the resume token for the query, since we're in a\n                        // known mismatch state.\n                        var newQueryData = new QueryData(query, targetId, queryData.purpose);\n                        _this.listenTargets[targetId] = newQueryData;\n                        // Cause a hard reset by unwatching and rewatching\n                        // immediately, but deliberately don't send a resume token\n                        // so that we get a full update.\n                        // Make sure we expect that this acks are going to happen.\n                        _this.sendUnwatchRequest(targetId);\n                        // Mark the query we send as being on behalf of an existence\n                        // filter mismatch, but don't actually retain that in\n                        // listenTargets. This ensures that we flag the first\n                        // re-listen this way without impacting future listens of\n                        // this target (that might happen e.g. on reconnect).\n                        var requestQueryData = new QueryData(query, targetId, QueryPurpose.ExistenceFilterMismatch);\n                        _this.sendWatchRequest(requestQueryData);\n                    }\n                });\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises).then(function () {\n            // Update in-memory resume tokens. LocalStore will update the\n            // persistent view of these when applying the completed RemoteEvent.\n            objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                if (change.resumeToken.length > 0) {\n                    var queryData = _this.listenTargets[targetId];\n                    // A watched target might have been removed already.\n                    if (queryData) {\n                        _this.listenTargets[targetId] = queryData.update({\n                            resumeToken: change.resumeToken,\n                            snapshotVersion: change.snapshotVersion\n                        });\n                    }\n                }\n            });\n            // Finally handle remote event\n            return _this.syncEngine.applyRemoteEvent(remoteEvent);\n        });\n    };\n    /** Handles an error on a target */\n    RemoteStore.prototype.handleTargetError = function (watchChange) {\n        var _this = this;\n        assert(!!watchChange.cause, 'Handling target error without a cause');\n        var error = watchChange.cause;\n        var promiseChain = Promise.resolve();\n        watchChange.targetIds.forEach(function (targetId) {\n            promiseChain = promiseChain.then(function () {\n                if (objUtils.contains(_this.listenTargets, targetId)) {\n                    delete _this.listenTargets[targetId];\n                    return _this.syncEngine.rejectListen(targetId, error);\n                }\n                else {\n                    // A watched target might have been removed already.\n                    return Promise.resolve();\n                }\n            });\n        });\n        return promiseChain;\n    };\n    RemoteStore.prototype.cleanUpWriteStreamState = function () {\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        this.pendingWrites = [];\n    };\n    /**\n     * Notifies that there are new mutations to process in the queue. This is\n     * typically called by SyncEngine after it has sent mutations to LocalStore.\n     */\n    RemoteStore.prototype.fillWritePipeline = function () {\n        var _this = this;\n        if (!this.canWriteMutations()) {\n            return Promise.resolve();\n        }\n        else {\n            return this.localStore\n                .nextMutationBatch(this.lastBatchSeen)\n                .then(function (batch) {\n                if (batch === null) {\n                    if (_this.pendingWrites.length == 0) {\n                        _this.writeStream.markIdle();\n                    }\n                    return Promise.resolve();\n                }\n                else {\n                    _this.commit(batch);\n                    return _this.fillWritePipeline();\n                }\n            });\n        }\n    };\n    /**\n     * Returns true if the backend can accept additional write requests.\n     *\n     * When sending mutations to the write stream (e.g. in fillWritePipeline),\n     * call this method first to check if more mutations can be sent.\n     *\n     * Currently the only thing that can prevent the backend from accepting\n     * write requests is if there are too many requests already outstanding. As\n     * writes complete the backend will be able to accept more.\n     */\n    RemoteStore.prototype.canWriteMutations = function () {\n        return (this.isNetworkEnabled() && this.pendingWrites.length < MAX_PENDING_WRITES);\n    };\n    // For testing\n    RemoteStore.prototype.outstandingWrites = function () {\n        return this.pendingWrites.length;\n    };\n    /**\n     * Given mutations to commit, actually commits them to the Datastore. Note\n     * that this does *not* return a Promise specifically because the AsyncQueue\n     * should not block operations for this.\n     */\n    RemoteStore.prototype.commit = function (batch) {\n        assert(this.canWriteMutations(), \"commit called when batches can't be written\");\n        this.lastBatchSeen = batch.batchId;\n        this.pendingWrites.push(batch);\n        if (this.shouldStartWriteStream()) {\n            this.startWriteStream();\n        }\n        else if (this.isNetworkEnabled() && this.writeStream.handshakeComplete) {\n            this.writeStream.writeMutations(batch.mutations);\n        }\n    };\n    RemoteStore.prototype.shouldStartWriteStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.writeStream.isStarted() &&\n            this.pendingWrites.length > 0);\n    };\n    RemoteStore.prototype.startWriteStream = function () {\n        assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');\n        this.writeStream.start({\n            onOpen: this.onWriteStreamOpen.bind(this),\n            onClose: this.onWriteStreamClose.bind(this),\n            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n            onMutationResult: this.onMutationResult.bind(this)\n        });\n    };\n    RemoteStore.prototype.onWriteStreamOpen = function () {\n        this.writeStream.writeHandshake();\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWriteHandshakeComplete = function () {\n        var _this = this;\n        // Record the stream token.\n        return this.localStore\n            .setLastStreamToken(this.writeStream.lastStreamToken)\n            .then(function () {\n            // Drain any pending writes.\n            //\n            // Note that at this point pendingWrites contains mutations that\n            // have already been accepted by fillWritePipeline/commitBatch. If\n            // the pipeline is full, canWriteMutations will be false, despite\n            // the fact that we actually need to send mutations over.\n            //\n            // This also means that this method indirectly respects the limits\n            // imposed by canWriteMutations since writes can't be added to the\n            // pendingWrites array when canWriteMutations is false. If the\n            // limits imposed by canWriteMutations actually protect us from\n            // DOSing ourselves then those limits won't be exceeded here and\n            // we'll continue to make progress.\n            for (var _i = 0, _a = _this.pendingWrites; _i < _a.length; _i++) {\n                var batch = _a[_i];\n                _this.writeStream.writeMutations(batch.mutations);\n            }\n        });\n    };\n    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {\n        var _this = this;\n        // This is a response to a write containing mutations and should be\n        // correlated to the first pending write.\n        assert(this.pendingWrites.length > 0, 'Got result for empty pending writes');\n        var batch = this.pendingWrites.shift();\n        var success = MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);\n        return this.syncEngine.applySuccessfulWrite(success).then(function () {\n            // It's possible that with the completion of this mutation another\n            // slot has freed up.\n            return _this.fillWritePipeline();\n        });\n    };\n    RemoteStore.prototype.onWriteStreamClose = function (error) {\n        var _this = this;\n        assert(this.isNetworkEnabled(), 'onWriteStreamClose() should only be called when the network is enabled');\n        // If the write stream closed due to an error, invoke the error callbacks if\n        // there are pending writes.\n        if (error && this.pendingWrites.length > 0) {\n            assert(!!error, 'We have pending writes, but the write stream closed without an error');\n            // A promise that is resolved after we processed the error\n            var errorHandling = void 0;\n            if (this.writeStream.handshakeComplete) {\n                // This error affects the actual write.\n                errorHandling = this.handleWriteError(error);\n            }\n            else {\n                // If there was an error before the handshake has finished, it's\n                // possible that the server is unable to process the stream token\n                // we're sending. (Perhaps it's too old?)\n                errorHandling = this.handleHandshakeError(error);\n            }\n            return errorHandling.then(function () {\n                // The write stream might have been started by refilling the write\n                // pipeline for failed writes\n                if (_this.shouldStartWriteStream()) {\n                    _this.startWriteStream();\n                }\n            });\n        }\n        else {\n            // No pending writes, nothing to do\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleHandshakeError = function (error) {\n        // Reset the token if it's a permanent error or the error code is\n        // ABORTED, signaling the write stream is no longer valid.\n        if (isPermanentError(error.code) || error.code === Code.ABORTED) {\n            log.debug(LOG_TAG, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);\n            this.writeStream.lastStreamToken = emptyByteString();\n            return this.localStore.setLastStreamToken(emptyByteString());\n        }\n        else {\n            // Some other error, don't reset stream token. Our stream logic will\n            // just retry with exponential backoff.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleWriteError = function (error) {\n        var _this = this;\n        if (isPermanentError(error.code)) {\n            // This was a permanent error, the request itself was the problem\n            // so it's not going to succeed if we resend it.\n            var batch = this.pendingWrites.shift();\n            // In this case it's also unlikely that the server itself is melting\n            // down -- this was just a bad request so inhibit backoff on the next\n            // restart.\n            this.writeStream.inhibitBackoff();\n            return this.syncEngine\n                .rejectFailedWrite(batch.batchId, error)\n                .then(function () {\n                // It's possible that with the completion of this mutation\n                // another slot has freed up.\n                return _this.fillWritePipeline();\n            });\n        }\n        else {\n            // Transient error, just let the retry logic kick in.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.createTransaction = function () {\n        return new Transaction(this.datastore);\n    };\n    RemoteStore.prototype.handleUserChange = function (user) {\n        log.debug(LOG_TAG, 'RemoteStore changing users: uid=', user.uid);\n        // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n        // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n        // (since mutations are per-user).\n        this.disableNetwork();\n        return this.enableNetwork();\n    };\n    return RemoteStore;\n}());\nexport { RemoteStore };\n\n//# sourceMappingURL=remote_store.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/remote/remote_store.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventManager, QueryListener } from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { IndexedDbPersistence } from '../local/indexeddb_persistence';\nimport { LocalStore } from '../local/local_store';\nimport { MemoryPersistence } from '../local/memory_persistence';\nimport { NoOpGarbageCollector } from '../local/no_op_garbage_collector';\nimport { Datastore } from '../remote/datastore';\nimport { RemoteStore } from '../remote/remote_store';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { Code } from '../util/error';\nimport { debug } from '../util/log';\nimport { Deferred } from '../util/promise';\nvar LOG_TAG = 'FirestoreClient';\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nvar FirestoreClient = /** @class */ (function () {\n    function FirestoreClient(platform, databaseInfo, credentials, \n        /**\n         * Asynchronous queue responsible for all of our internal processing. When\n         * we get incoming work from the user (via public API) or the network\n         * (incoming GRPC messages), we should always schedule onto this queue.\n         * This ensures all of our work is properly serialized (e.g. we don't\n         * start processing a new operation while the previous one is waiting for\n         * an async I/O to complete).\n         */\n        asyncQueue) {\n        this.platform = platform;\n        this.databaseInfo = databaseInfo;\n        this.credentials = credentials;\n        this.asyncQueue = asyncQueue;\n    }\n    /**\n     * Starts up the FirestoreClient, returning only whether or not enabling\n     * persistence succeeded.\n     *\n     * The intent here is to \"do the right thing\" as far as users are concerned.\n     * Namely, in cases where offline persistence is requested and possible,\n     * enable it, but otherwise fall back to persistence disabled. For the most\n     * part we expect this to succeed one way or the other so we don't expect our\n     * users to actually wait on the firestore.enablePersistence Promise since\n     * they generally won't care.\n     *\n     * Of course some users actually do care about whether or not persistence\n     * was successfully enabled, so the Promise returned from this method\n     * indicates this outcome.\n     *\n     * This presents a problem though: even before enablePersistence resolves or\n     * rejects, users may have made calls to e.g. firestore.collection() which\n     * means that the FirestoreClient in there will be available and will be\n     * enqueuing actions on the async queue.\n     *\n     * Meanwhile any failure of an operation on the async queue causes it to\n     * panic and reject any further work, on the premise that unhandled errors\n     * are fatal.\n     *\n     * Consequently the fallback is handled internally here in start, and if the\n     * fallback succeeds we signal success to the async queue even though the\n     * start() itself signals failure.\n     *\n     * @param usePersistence Whether or not to attempt to enable persistence.\n     * @returns A deferred result indicating the user-visible result of enabling\n     *     offline persistence. This method will reject this if IndexedDB fails to\n     *     start for any reason. If usePersistence is false this is\n     *     unconditionally resolved.\n     */\n    FirestoreClient.prototype.start = function (usePersistence) {\n        var _this = this;\n        // We defer our initialization until we get the current user from\n        // setUserChangeListener(). We block the async queue until we got the\n        // initial user and the initialization is completed. This will prevent\n        // any scheduled work from happening before initialization is completed.\n        //\n        // If initializationDone resolved then the FirestoreClient is in a usable\n        // state.\n        var initializationDone = new Deferred();\n        // If usePersistence is true, certain classes of errors while starting are\n        // recoverable but only by falling back to persistence disabled.\n        //\n        // If there's an error in the first case but not in recovery we cannot\n        // reject the promise blocking the async queue because this will cause the\n        // async queue to panic.\n        var persistenceResult = new Deferred();\n        var initialized = false;\n        this.credentials.setUserChangeListener(function (user) {\n            if (!initialized) {\n                initialized = true;\n                _this.initializePersistence(usePersistence, persistenceResult)\n                    .then(function () { return _this.initializeRest(user); })\n                    .then(initializationDone.resolve, initializationDone.reject);\n            }\n            else {\n                _this.asyncQueue.schedule(function () {\n                    return _this.handleUserChange(user);\n                });\n            }\n        });\n        // Block the async queue until initialization is done\n        this.asyncQueue.schedule(function () {\n            return initializationDone.promise;\n        });\n        // Return only the result of enabling persistence. Note that this does not\n        // need to await the completion of initializationDone because the result of\n        // this method should not reflect any other kind of failure to start.\n        return persistenceResult.promise;\n    };\n    /** Enables the network connection and requeues all pending operations. */\n    FirestoreClient.prototype.enableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.enableNetwork();\n        });\n    };\n    /**\n     * Initializes persistent storage, attempting to use IndexedDB if\n     * usePersistence is true or memory-only if false.\n     *\n     * If IndexedDB fails because it's already open in another tab or because the\n     * platform can't possibly support our implementation then this method rejects\n     * the persistenceResult and falls back on memory-only persistence.\n     *\n     * @param usePersistence indicates whether or not to use offline persistence\n     * @param persistenceResult A deferred result indicating the user-visible\n     *     result of enabling offline persistence. This method will reject this if\n     *     IndexedDB fails to start for any reason. If usePersistence is false\n     *     this is unconditionally resolved.\n     * @returns a Promise indicating whether or not initialization should\n     *     continue, i.e. that one of the persistence implementations actually\n     *     succeeded.\n     */\n    FirestoreClient.prototype.initializePersistence = function (usePersistence, persistenceResult) {\n        var _this = this;\n        if (usePersistence) {\n            return this.startIndexedDbPersistence()\n                .then(persistenceResult.resolve)\n                .catch(function (error) {\n                // Regardless of whether or not the retry succeeds, from an user\n                // perspective, offline persistence has failed.\n                persistenceResult.reject(error);\n                // An unknown failure on the first stage shuts everything down.\n                if (!_this.canFallback(error)) {\n                    return Promise.reject(error);\n                }\n                console.warn('Error enabling offline storage. Falling back to' +\n                    ' storage disabled: ' +\n                    error);\n                return _this.startMemoryPersistence();\n            });\n        }\n        else {\n            // When usePersistence == false, enabling offline persistence is defined\n            // to unconditionally succeed. This allows start() to have the same\n            // signature for both cases, despite the fact that the returned promise\n            // is only used in the enablePersistence call.\n            persistenceResult.resolve();\n            return this.startMemoryPersistence();\n        }\n    };\n    FirestoreClient.prototype.canFallback = function (error) {\n        return (error.code === Code.FAILED_PRECONDITION ||\n            error.code === Code.UNIMPLEMENTED);\n    };\n    /**\n     * Starts IndexedDB-based persistence.\n     *\n     * @returns A promise indicating success or failure.\n     */\n    FirestoreClient.prototype.startIndexedDbPersistence = function () {\n        // TODO(http://b/33384523): For now we just disable garbage collection\n        // when persistence is enabled.\n        this.garbageCollector = new NoOpGarbageCollector();\n        var storagePrefix = IndexedDbPersistence.buildStoragePrefix(this.databaseInfo);\n        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n        var serializer = new JsonProtoSerializer(this.databaseInfo.databaseId, {\n            useProto3Json: true\n        });\n        this.persistence = new IndexedDbPersistence(storagePrefix, serializer);\n        return this.persistence.start();\n    };\n    /**\n     * Starts Memory-backed persistence. In practice this cannot fail.\n     *\n     * @returns A promise that will successfully resolve.\n     */\n    FirestoreClient.prototype.startMemoryPersistence = function () {\n        this.garbageCollector = new EagerGarbageCollector();\n        this.persistence = new MemoryPersistence();\n        return this.persistence.start();\n    };\n    /**\n     * Initializes the rest of the FirestoreClient, assuming the initial user\n     * has been obtained from the credential provider and some persistence\n     * implementation is available in this.persistence.\n     */\n    FirestoreClient.prototype.initializeRest = function (user) {\n        var _this = this;\n        return this.platform\n            .loadConnection(this.databaseInfo)\n            .then(function (connection) {\n            _this.localStore = new LocalStore(_this.persistence, user, _this.garbageCollector);\n            var serializer = _this.platform.newSerializer(_this.databaseInfo.databaseId);\n            var datastore = new Datastore(_this.databaseInfo, _this.asyncQueue, connection, _this.credentials, serializer);\n            var onlineStateChangedHandler = function (onlineState) {\n                _this.eventMgr.onOnlineStateChanged(onlineState);\n            };\n            _this.remoteStore = new RemoteStore(_this.localStore, datastore, onlineStateChangedHandler);\n            _this.syncEngine = new SyncEngine(_this.localStore, _this.remoteStore, user);\n            // Setup wiring between sync engine and remote store\n            _this.remoteStore.syncEngine = _this.syncEngine;\n            _this.eventMgr = new EventManager(_this.syncEngine);\n            // NOTE: RemoteStore depends on LocalStore (for persisting stream\n            // tokens, refilling mutation queue, etc.) so must be started after\n            // LocalStore.\n            return _this.localStore.start();\n        })\n            .then(function () {\n            return _this.remoteStore.start();\n        });\n    };\n    FirestoreClient.prototype.handleUserChange = function (user) {\n        this.asyncQueue.verifyOperationInProgress();\n        debug(LOG_TAG, 'User Changed: ' + user.uid);\n        return this.syncEngine.handleUserChange(user);\n    };\n    /** Disables the network connection. Pending operations will not complete. */\n    FirestoreClient.prototype.disableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.disableNetwork();\n        });\n    };\n    FirestoreClient.prototype.shutdown = function () {\n        var _this = this;\n        return this.asyncQueue\n            .schedule(function () {\n            _this.credentials.removeUserChangeListener();\n            return _this.remoteStore.shutdown();\n        })\n            .then(function () {\n            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n            return _this.persistence.shutdown();\n        });\n    };\n    FirestoreClient.prototype.listen = function (query, observer, options) {\n        var _this = this;\n        var listener = new QueryListener(query, observer, options);\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.listen(listener);\n        });\n        return listener;\n    };\n    FirestoreClient.prototype.unlisten = function (listener) {\n        var _this = this;\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.unlisten(listener);\n        });\n    };\n    FirestoreClient.prototype.write = function (mutations) {\n        var _this = this;\n        var deferred = new Deferred();\n        this.asyncQueue.schedule(function () { return _this.syncEngine.write(mutations, deferred); });\n        return deferred.promise;\n    };\n    FirestoreClient.prototype.databaseId = function () {\n        return this.databaseInfo.databaseId;\n    };\n    FirestoreClient.prototype.transaction = function (updateFunction) {\n        var _this = this;\n        // We have to wait for the async queue to be sure syncEngine is initialized.\n        return this.asyncQueue\n            .schedule(function () {\n            return Promise.resolve();\n        })\n            .then(function () {\n            return _this.syncEngine.runTransaction(updateFunction);\n        });\n    };\n    return FirestoreClient;\n}());\nexport { FirestoreClient };\n\n//# sourceMappingURL=firestore_client.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/core/firestore_client.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nvar AsyncObserver = /** @class */ (function () {\n    function AsyncObserver(observer) {\n        this.observer = observer;\n        /**\n         * When set to true, will not raise future events. Necessary to deal with\n         * async detachment of listener.\n         */\n        this.muted = false;\n    }\n    AsyncObserver.prototype.next = function (value) {\n        this.scheduleEvent(this.observer.next, value);\n    };\n    AsyncObserver.prototype.error = function (error) {\n        this.scheduleEvent(this.observer.error, error);\n    };\n    AsyncObserver.prototype.mute = function () {\n        this.muted = true;\n    };\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n        var _this = this;\n        if (!this.muted) {\n            setTimeout(function () {\n                if (!_this.muted) {\n                    eventHandler(event);\n                }\n            }, 0);\n        }\n    };\n    return AsyncObserver;\n}());\nexport { AsyncObserver };\n\n//# sourceMappingURL=async_observer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/async_observer.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert, fail } from './assert';\nimport * as log from './log';\nimport { Deferred } from './promise';\nimport { Code, FirestoreError } from './error';\nvar AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        // The last promise in the queue.\n        this.tail = Promise.resolve();\n        // A list with timeout handles and their respective deferred promises.\n        // Contains an entry for each operation that is queued to run in the future\n        // (i.e. it has a delay that has not yet elapsed). Prior to cleanup, this list\n        // may also contain entries that have already been run (in which case `handle` is\n        // null).\n        this.delayedOperations = [];\n        // The number of operations that are queued to be run in the future (i.e. they\n        // have a delay that has not yet elapsed). Unlike `delayedOperations`, this\n        // is guaranteed to only contain operations that have not yet been run.\n        //\n        // Visible for testing.\n        this.delayedOperationsCount = 0;\n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.operationInProgress = false;\n    }\n    /**\n     * Adds a new operation to the queue. Returns a promise that will be resolved\n     * when the promise returned by the new operation is (with its value).\n     *\n     * Can optionally specify a delay (in milliseconds) to wait before queuing the\n     * operation.\n     */\n    AsyncQueue.prototype.schedule = function (op, delay) {\n        var _this = this;\n        if (this.failure) {\n            fail('AsyncQueue is already failed: ' +\n                (this.failure.stack || this.failure.message));\n        }\n        if ((delay || 0) > 0) {\n            this.delayedOperationsCount++;\n            var delayedOp_1 = {\n                handle: null,\n                op: op,\n                deferred: new Deferred()\n            };\n            delayedOp_1.handle = setTimeout(function () {\n                _this.scheduleInternal(function () {\n                    return delayedOp_1.op().then(function (result) {\n                        delayedOp_1.deferred.resolve(result);\n                    });\n                });\n                delayedOp_1.handle = null;\n                _this.delayedOperationsCount--;\n                if (_this.delayedOperationsCount === 0) {\n                    _this.delayedOperations = [];\n                }\n            }, delay);\n            this.delayedOperations.push(delayedOp_1);\n            return delayedOp_1.deferred.promise;\n        }\n        else {\n            return this.scheduleInternal(op);\n        }\n    };\n    AsyncQueue.prototype.scheduleInternal = function (op) {\n        var _this = this;\n        this.tail = this.tail.then(function () {\n            _this.operationInProgress = true;\n            return op()\n                .catch(function (error) {\n                _this.failure = error;\n                _this.operationInProgress = false;\n                var message = error.stack || error.message || '';\n                log.error('INTERNAL UNHANDLED ERROR: ', message);\n                // Escape the promise chain and throw the error globally so that\n                // e.g. any global crash reporting library detects and reports it.\n                // (but not for simulated errors in our tests since this breaks mocha)\n                if (message.indexOf('Firestore Test Simulated Error') < 0) {\n                    setTimeout(function () {\n                        throw error;\n                    }, 0);\n                }\n                // Re-throw the error so that this.tail becomes a rejected Promise and\n                // all further attempts to chain (via .then) will just short-circuit\n                // and return the rejected Promise.\n                throw error;\n            })\n                .then(function () {\n                _this.operationInProgress = false;\n            });\n        });\n        return this.tail;\n    };\n    /**\n     * Verifies there's an operation currently in-progress on the AsyncQueue.\n     * Unfortunately we can't verify that the running code is in the promise chain\n     * of that operation, so this isn't a foolproof check, but it should be enough\n     * to catch some bugs.\n     */\n    AsyncQueue.prototype.verifyOperationInProgress = function () {\n        assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');\n    };\n    /**\n     * Waits until all currently scheduled tasks are finished executing. Tasks\n     * scheduled with a delay can be rejected or queued for immediate execution.\n     */\n    AsyncQueue.prototype.drain = function (executeDelayedTasks) {\n        var _this = this;\n        this.delayedOperations.forEach(function (entry) {\n            if (entry.handle) {\n                clearTimeout(entry.handle);\n                if (executeDelayedTasks) {\n                    _this.scheduleInternal(entry.op).then(entry.deferred.resolve, entry.deferred.reject);\n                }\n                else {\n                    entry.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled by shutdown'));\n                }\n            }\n        });\n        this.delayedOperations = [];\n        this.delayedOperationsCount = 0;\n        return this.schedule(function () { return Promise.resolve(); });\n    };\n    return AsyncQueue;\n}());\nexport { AsyncQueue };\n\n//# sourceMappingURL=async_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/util/async_queue.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User = /** @class */ (function () {\n    function User(uid) {\n        this.uid = uid;\n    }\n    User.prototype.isUnauthenticated = function () {\n        return this.uid == null;\n    };\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n    User.prototype.toKey = function () {\n        if (this.isUnauthenticated()) {\n            return 'anonymous-user';\n        }\n        else {\n            return 'uid:' + this.uid;\n        }\n    };\n    User.prototype.equals = function (otherUser) {\n        return otherUser.uid === this.uid;\n    };\n    /** A user with a null UID. */\n    User.UNAUTHENTICATED = new User(null);\n    // TODO(mikelehen): Look into getting a proper uid-equivalent for\n    // non-FirebaseAuth providers.\n    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n    User.FIRST_PARTY = new User('first-party-uid');\n    return User;\n}());\nexport { User };\n\n//# sourceMappingURL=user.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/auth/user.js\n// module id = null\n// module chunks = ","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { makeConstructorPrivate } from '../util/api';\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return ServerTimestampFieldValueImpl.instance;\n    };\n    return FieldValueImpl;\n}());\nexport { FieldValueImpl };\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\n    __extends(DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\nexport { DeleteFieldValueImpl };\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    __extends(ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\nexport { ServerTimestampFieldValueImpl };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nexport var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n//# sourceMappingURL=field_value.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../firestore/dist/esm/src/api/field_value.js\n// module id = null\n// module chunks = ","(function() {var g,goog=goog||{},k=this;function l(a){return\"string\"==typeof a}function aa(){}\nfunction ba(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"array\"==ba(a)}function ca(a){var b=ba(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length}function da(a){return\"function\"==ba(a)}function p(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}var q=\"closure_uid_\"+(1E9*Math.random()>>>0),ea=0;function fa(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ha(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?r=fa:r=ha;return r.apply(null,arguments)}\nfunction ia(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var t=Date.now||function(){return+new Date};function u(a,b){function c(){}c.prototype=b.prototype;a.L=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Ab=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ja(a){if(Error.captureStackTrace)Error.captureStackTrace(this,ja);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}u(ja,Error);ja.prototype.name=\"CustomError\";function ka(a,b){for(var c=a.split(\"%s\"),d=\"\",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join(\"%s\")}var la=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\")};function ma(a,b){return a<b?-1:a>b?1:0};function na(a,b){b.unshift(a);ja.call(this,ka.apply(null,b));b.shift()}u(na,ja);na.prototype.name=\"AssertionError\";function oa(a,b){throw new na(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1));};function w(){0!=qa&&(ra[this[q]||(this[q]=++ea)]=this);this.i=this.i;this.w=this.w}var qa=0,ra={};w.prototype.i=!1;w.prototype.Z=function(){if(!this.i&&(this.i=!0,this.A(),0!=qa)){var a=this[q]||(this[q]=++ea);delete ra[a]}};w.prototype.A=function(){if(this.w)for(;this.w.length;)this.w.shift()()};var sa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(l(a))return l(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ta=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};\nfunction ua(a){a:{var b=va;for(var c=a.length,d=l(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function wa(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function xa(a){return Array.prototype.concat.apply([],arguments)}function ya(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};var x;a:{var za=k.navigator;if(za){var Aa=za.userAgent;if(Aa){x=Aa;break a}}x=\"\"}function y(a){return-1!=x.indexOf(a)};function Ba(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Ca(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Da(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Ea(a){var b={},c;for(c in a)b[c]=a[c];return b}var Fa=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ga(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Fa.length;f++)c=Fa[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ha(a){Ha[\" \"](a);return a}Ha[\" \"]=aa;function Ia(a,b){var c=Ja;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Ka=y(\"Opera\"),z=y(\"Trident\")||y(\"MSIE\"),La=y(\"Edge\"),Ma=y(\"Gecko\")&&!(-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\"))&&!(y(\"Trident\")||y(\"MSIE\"))&&!y(\"Edge\"),Na=-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\");function Oa(){var a=k.document;return a?a.documentMode:void 0}var Pa;\na:{var Qa=\"\",Ra=function(){var a=x;if(Ma)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(La)return/Edge\\/([\\d\\.]+)/.exec(a);if(z)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Na)return/WebKit\\/(\\S+)/.exec(a);if(Ka)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Ra&&(Qa=Ra?Ra[1]:\"\");if(z){var Sa=Oa();if(null!=Sa&&Sa>parseFloat(Qa)){Pa=String(Sa);break a}}Pa=Qa}var Ja={};\nfunction Ta(a){return Ia(a,function(){for(var b=0,c=la(String(Pa)).split(\".\"),d=la(String(a)).split(\".\"),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||\"\",m=d[f]||\"\";do{h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];m=/(\\d*)(\\D*)(.*)/.exec(m)||[\"\",\"\",\"\",\"\"];if(0==h[0].length&&0==m[0].length)break;b=ma(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||ma(0==h[2].length,0==m[2].length)||ma(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var Ua;var Va=k.document;\nUa=Va&&z?Oa()||(\"CSS1Compat\"==Va.compatMode?parseInt(Pa,10):5):void 0;var Wa=Object.freeze||function(a){return a};var Xa=!z||9<=Number(Ua),Ya=z&&!Ta(\"9\"),Za=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},\"passive\",{get:function(){a=!0}});k.addEventListener(\"test\",aa,b);k.removeEventListener(\"test\",aa,b);return a}();function A(a,b){this.type=a;this.a=this.target=b;this.Pa=!0}A.prototype.b=function(){this.Pa=!1};function $a(a,b){A.call(this,a?a.type:\"\");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key=\"\";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType=\"\";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Ma){a:{try{Ha(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else\"mouseover\"==c?b=\na.fromElement:\"mouseout\"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||\"\";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=\na.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:ab[a.pointerType]||\"\";this.c=a;a.defaultPrevented&&this.b()}}u($a,A);var ab=Wa({2:\"touch\",3:\"pen\",4:\"mouse\"});$a.prototype.b=function(){$a.L.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Ya)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var bb=\"closure_listenable_\"+(1E6*Math.random()|0);function cb(a){return!(!a||!a[bb])}var db=0;function eb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.ga=e;this.key=++db;this.Y=this.ca=!1}function fb(a){a.Y=!0;a.listener=null;a.a=null;a.src=null;a.ga=null};function gb(a){this.src=a;this.a={};this.b=0}gb.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=hb(a,b,d,e);-1<h?(b=a[h],c||(b.ca=!1)):(b=new eb(b,this.src,f,!!d,e),b.ca=c,a.push(b));return b};function ib(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=sa(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(fb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}function jb(a,b,c,d,e){a=a.a[b.toString()];b=-1;a&&(b=hb(a,c,d,e));return-1<b?a[b]:null}\nfunction hb(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.Y&&f.listener==b&&f.capture==!!c&&f.ga==d)return e}return-1};var kb=\"closure_lm_\"+(1E6*Math.random()|0),lb={},mb=0;function nb(a,b,c,d,e){if(d&&d.once)return ob(a,b,c,d,e);if(n(b)){for(var f=0;f<b.length;f++)nb(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.aa(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!1,d,e)}\nfunction qb(a,b,c,d,e,f){if(!b)throw Error(\"Invalid event type\");var h=p(e)?!!e.capture:!!e,m=rb(a);m||(a[kb]=m=new gb(a));c=m.add(b,c,d,h,f);if(c.a)return c;d=sb();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)Za||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(tb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error(\"addEventListener and attachEvent are unavailable.\");mb++;return c}\nfunction sb(){var a=ub,b=Xa?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function ob(a,b,c,d,e){if(n(b)){for(var f=0;f<b.length;f++)ob(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.Ha(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!0,d,e)}function vb(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)vb(a,b[f],c,d,e);else d=p(d)?!!d.capture:!!d,c=pb(c),cb(a)?a.va(b,c,d,e):a&&(a=rb(a))&&(b=jb(a,b,c,d,e))&&wb(b)}\nfunction wb(a){if(\"number\"!=typeof a&&a&&!a.Y){var b=a.src;if(cb(b))ib(b.c,a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(tb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);mb--;(c=rb(b))?(ib(c,a),0==c.b&&(c.src=null,b[kb]=null)):fb(a)}}}function tb(a){return a in lb?lb[a]:lb[a]=\"on\"+a}\nfunction xb(a,b,c,d){var e=!0;if(a=rb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.Y&&(f=yb(f,d),e=e&&!1!==f)}return e}function yb(a,b){var c=a.listener,d=a.ga||a.src;a.ca&&wb(a);return c.call(d,b)}\nfunction ub(a,b){if(a.Y)return!0;if(!Xa){if(!b)a:{b=[\"window\",\"event\"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new $a(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=xb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=xb(d[e],a,!1,b),c=c&&f}return c}return yb(a,\nnew $a(b,this))}function rb(a){a=a[kb];return a instanceof gb?a:null}var zb=\"__closure_events_fn_\"+(1E9*Math.random()>>>0);function pb(a){if(da(a))return a;a[zb]||(a[zb]=function(b){return a.handleEvent(b)});return a[zb]};function B(){w.call(this);this.c=new gb(this);this.P=this;this.J=null}u(B,w);B.prototype[bb]=!0;g=B.prototype;g.addEventListener=function(a,b,c,d){nb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){vb(this,a,b,c,d)};\ng.dispatchEvent=function(a){var b,c=this.J;if(c)for(b=[];c;c=c.J)b.push(c);c=this.P;var d=a.type||a;if(l(a))a=new A(a,c);else if(a instanceof A)a.target=a.target||c;else{var e=a;a=new A(d,c);Ga(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=Ab(h,d,!0,a)&&e}h=a.a=c;e=Ab(h,d,!0,a)&&e;e=Ab(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=Ab(h,d,!1,a)&&e;return e};\ng.A=function(){B.L.A.call(this);if(this.c){var a=this.c,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,fb(d[e]);delete a.a[c];a.b--}}this.J=null};g.aa=function(a,b,c,d){return this.c.add(String(a),b,!1,c,d)};g.Ha=function(a,b,c,d){return this.c.add(String(a),b,!0,c,d)};g.va=function(a,b,c,d){var e=this.c;a=String(a).toString();if(a in e.a){var f=e.a[a];b=hb(f,b,c,d);-1<b&&(fb(f[b]),Array.prototype.splice.call(f,b,1),0==f.length&&(delete e.a[a],e.b--))}};\nfunction Ab(a,b,c,d){b=a.c.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.Y&&h.capture==c){var m=h.listener,v=h.ga||h.src;h.ca&&ib(a.c,h);e=!1!==m.call(v,d)&&e}}return e&&0!=d.Pa};function Bb(a){return/^\\s*$/.test(a)?!1:/^[\\],:{}\\s\\u2028\\u2029]*$/.test(a.replace(/\\\\[\"\\\\\\/bfnrtu]/g,\"@\").replace(/(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g,\"]\").replace(/(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g,\"\"))}function Cb(a){a=String(a);if(Bb(a))try{return eval(\"(\"+a+\")\")}catch(b){}throw Error(\"Invalid JSON string: \"+a);}function Db(a){var b=[];Eb(new Fb,a,b);return b.join(\"\")}function Fb(){}\nfunction Eb(a,b,c){if(null==b)c.push(\"null\");else{if(\"object\"==typeof b){if(n(b)){var d=b;b=d.length;c.push(\"[\");for(var e=\"\",f=0;f<b;f++)c.push(e),Eb(a,d[f],c),e=\",\";c.push(\"]\");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push(\"{\");e=\"\";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],\"function\"!=typeof f&&(c.push(e),Gb(d,c),c.push(\":\"),Eb(a,f,c),e=\",\"));c.push(\"}\");return}}switch(typeof b){case \"string\":Gb(b,c);break;case \"number\":c.push(isFinite(b)&&\n!isNaN(b)?String(b):\"null\");break;case \"boolean\":c.push(String(b));break;case \"function\":c.push(\"null\");break;default:throw Error(\"Unknown type: \"+typeof b);}}}var Hb={'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\u000b\"},Ib=/\\uffff/.test(\"\\uffff\")?/[\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g:/[\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\nfunction Gb(a,b){b.push('\"',a.replace(Ib,function(a){var b=Hb[a];b||(b=\"\\\\u\"+(a.charCodeAt(0)|65536).toString(16).substr(1),Hb[a]=b);return b}),'\"')};function Jb(a,b){this.c=a;this.f=b;this.b=0;this.a=null}Jb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function Kb(){this.b=this.a=null}var Nb=new Jb(function(){return new Lb},function(a){a.reset()});Kb.prototype.add=function(a,b){var c=Nb.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function Ob(){var a=Pb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Lb(){this.next=this.b=this.a=null}Lb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};Lb.prototype.reset=function(){this.next=this.b=this.a=null};function Qb(a){k.setTimeout(function(){throw a;},0)}var Rb;\nfunction Sb(){var a=k.MessageChannel;\"undefined\"===typeof a&&\"undefined\"!==typeof window&&window.postMessage&&window.addEventListener&&!y(\"Presto\")&&(a=function(){var a=document.createElement(\"IFRAME\");a.style.display=\"none\";a.src=\"\";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write(\"\");a.close();var c=\"callImmediate\"+Math.random(),d=\"file:\"==b.location.protocol?\"*\":b.location.protocol+\"//\"+b.location.host;a=r(function(a){if((\"*\"==d||a.origin==d)&&a.data==\nc)this.port1.onmessage()},this);b.addEventListener(\"message\",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if(\"undefined\"!==typeof a&&!y(\"Trident\")&&!y(\"MSIE\")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.za;c.za=null;a()}};return function(a){d.next={za:a};d=d.next;b.port2.postMessage(0)}}return\"undefined\"!==typeof document&&\"onreadystatechange\"in document.createElement(\"SCRIPT\")?function(a){var b=document.createElement(\"SCRIPT\");\nb.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};var Tb;function Ub(){if(-1!=String(k.Promise).indexOf(\"[native code]\")){var a=k.Promise.resolve(void 0);Tb=function(){a.then(Vb)}}else Tb=function(){var a=Vb;!da(k.setImmediate)||k.Window&&k.Window.prototype&&!y(\"Edge\")&&k.Window.prototype.setImmediate==k.setImmediate?(Rb||(Rb=Sb()),Rb(a)):k.setImmediate(a)}}var Wb=!1,Pb=new Kb;function Vb(){for(var a;a=Ob();){try{a.a.call(a.b)}catch(c){Qb(c)}var b=Nb;b.f(a);100>b.b&&(b.b++,a.next=b.a,b.a=a)}Wb=!1};function Xb(a,b){B.call(this);this.b=a||1;this.a=b||k;this.f=r(this.ib,this);this.g=t()}u(Xb,B);g=Xb.prototype;g.$=!1;g.K=null;g.ib=function(){if(this.$){var a=t()-this.g;0<a&&a<.8*this.b?this.K=this.a.setTimeout(this.f,this.b-a):(this.K&&(this.a.clearTimeout(this.K),this.K=null),this.dispatchEvent(\"tick\"),this.$&&(this.K=this.a.setTimeout(this.f,this.b),this.g=t()))}};g.start=function(){this.$=!0;this.K||(this.K=this.a.setTimeout(this.f,this.b),this.g=t())};\nfunction Yb(a){a.$=!1;a.K&&(a.a.clearTimeout(a.K),a.K=null)}g.A=function(){Xb.L.A.call(this);Yb(this);delete this.a};function Zb(a,b,c){if(da(a))c&&(a=r(a,c));else if(a&&\"function\"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error(\"Invalid listener argument\");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)};function $b(a,b,c){w.call(this);this.f=null!=c?r(a,c):a;this.c=b;this.b=r(this.bb,this);this.a=[]}u($b,w);g=$b.prototype;g.ha=!1;g.X=null;g.Xa=function(a){this.a=arguments;this.X?this.ha=!0:ac(this)};g.A=function(){$b.L.A.call(this);this.X&&(k.clearTimeout(this.X),this.X=null,this.ha=!1,this.a=[])};g.bb=function(){this.X=null;this.ha&&(this.ha=!1,ac(this))};function ac(a){a.X=Zb(a.b,a.c);a.f.apply(null,a.a)};function C(a){w.call(this);this.b=a;this.a={}}u(C,w);var bc=[];C.prototype.aa=function(a,b,c,d){n(b)||(b&&(bc[0]=b.toString()),b=bc);for(var e=0;e<b.length;e++){var f=nb(a,b[e],c||this.handleEvent,d||!1,this.b||this);if(!f)break;this.a[f.key]=f}return this};\nC.prototype.va=function(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)this.va(a,b[f],c,d,e);else c=c||this.handleEvent,d=p(d)?!!d.capture:!!d,e=e||this.b||this,c=pb(c),d=!!d,b=cb(a)?jb(a.c,String(b),c,d,e):a?(a=rb(a))?jb(a,b,c,d,e):null:null,b&&(wb(b),delete this.a[b.key])};function cc(a){Ba(a.a,function(a,c){this.a.hasOwnProperty(c)&&wb(a)},a);a.a={}}C.prototype.A=function(){C.L.A.call(this);cc(this)};C.prototype.handleEvent=function(){throw Error(\"EventHandler.handleEvent not implemented\");};function dc(a,b,c){this.reset(a,b,c,void 0,void 0)}dc.prototype.a=null;var ec=0;dc.prototype.reset=function(a,b,c,d,e){\"number\"==typeof e||ec++;d||t();delete this.a};function fc(a){this.f=a;this.b=this.c=this.a=null}function D(a,b){this.name=a;this.value=b}D.prototype.toString=function(){return this.name};var gc=new D(\"SEVERE\",1E3),hc=new D(\"WARNING\",900),ic=new D(\"INFO\",800),jc=new D(\"CONFIG\",700),kc=new D(\"FINE\",500);function lc(a){if(a.c)return a.c;if(a.a)return lc(a.a);oa(\"Root logger has no level set.\");return null}fc.prototype.log=function(a,b,c){if(a.value>=lc(this).value)for(da(b)&&(b=b()),a=new dc(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};\nvar mc={},nc=null;function oc(a){nc||(nc=new fc(\"\"),mc[\"\"]=nc,nc.c=jc);var b;if(!(b=mc[a])){b=new fc(a);var c=a.lastIndexOf(\".\"),d=a.substr(c+1);c=oc(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;mc[a]=b}return b};function E(a,b){a&&a.log(hc,b,void 0)}function pc(a,b){a&&a.log(ic,b,void 0)}function F(a,b){a&&a.log(kc,b,void 0)};function qc(){this.a=oc(\"goog.labs.net.webChannel.WebChannelDebug\");this.b=!0}qc.prototype.Ea=function(){this.b=!1};function rc(a,b,c,d,e,f){H(a,function(){if(a.b)if(f){var h=\"\";for(var m=f.split(\"&\"),v=0;v<m.length;v++){var G=m[v].split(\"=\");if(1<G.length){var Z=G[0];G=G[1];var Mb=Z.split(\"_\");h=2<=Mb.length&&\"type\"==Mb[1]?h+(Z+\"=\"+G+\"&\"):h+(Z+\"=redacted&\")}}}else h=null;else h=f;return\"XMLHTTP REQ (\"+d+\") [attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+h})}\nfunction sc(a,b,c,d,e,f,h){H(a,function(){return\"XMLHTTP RESP (\"+d+\") [ attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+f+\" \"+h})}function tc(a,b,c,d){H(a,function(){return\"XMLHTTP TEXT (\"+b+\"): \"+uc(a,c)+(d?\" \"+d:\"\")})}function vc(a,b){H(a,function(){return\"TIMEOUT: \"+b})}function I(a,b){F(a.a,b)}function wc(a,b,c){(a=a.a)&&a.log(gc,c||\"Exception\",b)}function H(a,b){pc(a.a,b)}function xc(a,b){(a=a.a)&&a.log(gc,b,void 0)}\nfunction uc(a,b){if(!a.b)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(var d=0;d<c.length;d++)if(n(c[d])){var e=c[d];if(!(2>e.length)){var f=e[1];if(n(f)&&!(1>f.length)){var h=f[0];if(\"noop\"!=h&&\"stop\"!=h&&\"close\"!=h)for(var m=1;m<f.length;m++)f[m]=\"\"}}}return Db(c)}catch(v){return I(a,\"Exception parsing expected JS array - probably was not JS\"),b}};var yc=new B;function zc(a){A.call(this,\"serverreachability\",a)}u(zc,A);function Ac(a){yc.dispatchEvent(new zc(yc,a))}function Bc(a){A.call(this,\"statevent\",a)}u(Bc,A);function J(a){yc.dispatchEvent(new Bc(yc,a))}function Cc(a){A.call(this,\"timingevent\",a)}u(Cc,A);function Dc(a,b,c){yc.dispatchEvent(new Cc(yc,a,b,c))}function Ec(a,b){if(!da(a))throw Error(\"Fn must not be null and must be a function\");return k.setTimeout(function(){a()},b)};var Fc={NO_ERROR:0,jb:1,qb:2,pb:3,mb:4,ob:5,rb:6,Ra:7,TIMEOUT:8,ub:9};var Gc={lb:\"complete\",yb:\"success\",Sa:\"error\",Ra:\"abort\",wb:\"ready\",xb:\"readystatechange\",TIMEOUT:\"timeout\",sb:\"incrementaldata\",vb:\"progress\",nb:\"downloadprogress\",zb:\"uploadprogress\"};function Hc(){}Hc.prototype.a=null;function Ic(a){var b;(b=a.a)||(b={},Jc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Kc;function Lc(){}u(Lc,Hc);function Mc(a){return(a=Jc(a))?new ActiveXObject(a):new XMLHttpRequest}function Jc(a){if(!a.b&&\"undefined\"==typeof XMLHttpRequest&&\"undefined\"!=typeof ActiveXObject){for(var b=[\"MSXML2.XMLHTTP.6.0\",\"MSXML2.XMLHTTP.3.0\",\"MSXML2.XMLHTTP\",\"Microsoft.XMLHTTP\"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error(\"Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed\");}return a.b}Kc=new Lc;function K(a,b,c,d){this.i=a;this.b=b;this.f=c;this.T=d||1;this.N=new C(this);this.S=Nc;a=this.H=new Xb;a.b=Oc;a.K&&a.$?(Yb(a),a.start()):a.K&&Yb(a);this.j=null;this.c=!1;this.m=this.g=this.h=this.J=this.D=this.U=this.w=null;this.s=[];this.a=null;this.F=0;this.l=this.o=null;this.C=-1;this.B=!1;this.P=0;this.I=null;this.M=!1}var Nc=45E3,Oc=250;\nfunction Pc(a,b){switch(a){case 0:return\"Non-200 return code (\"+b+\")\";case 1:return\"XMLHTTP failure (no data)\";case 2:return\"HttpConnection timeout\";default:return\"Unknown error\"}}var Qc={},Rc={};g=K.prototype;g.setTimeout=function(a){this.S=a};function Sc(a,b,c){a.J=1;a.h=Tc(L(b));a.m=c;a.M=!0;Uc(a,null)}function Vc(a,b,c,d){a.J=1;a.h=Tc(L(b));a.m=null;a.M=c;Uc(a,d)}\nfunction Uc(a,b){a.D=t();Wc(a);a.g=L(a.h);Xc(a.g,\"t\",a.T);a.F=0;a.a=a.i.da(a.i.ia()?b:null);0<a.P&&(a.I=new $b(r(a.Qa,a,a.a),a.P));a.N.aa(a.a,\"readystatechange\",a.fb);b=a.j?Ea(a.j):{};a.m?(a.o||(a.o=\"POST\"),b[\"Content-Type\"]=\"application/x-www-form-urlencoded\",a.a.fa(a.g,a.o,a.m,b)):(a.o=\"GET\",a.a.fa(a.g,a.o,null,b));Ac(1);rc(a.b,a.o,a.g,a.f,a.T,a.m)}g.fb=function(a){a=a.target;var b=this.I;b&&3==M(a)?(I(this.b,\"Throttling readystatechange.\"),b.Xa()):this.Qa(a)};\ng.Qa=function(a){try{a==this.a?Yc(this):E(this.b.a,\"Called back with an unexpected xmlhttp\")}catch(c){if(I(this.b,\"Failed call to OnXmlHttpReadyStateChanged_\"),this.a&&this.a.V()){var b=this;wc(this.b,c,function(){return\"ResponseText: \"+b.a.V()})}else wc(this.b,c,\"No response text\")}finally{}};\nfunction Yc(a){var b=M(a.a),c=a.a.Fa(),d=a.a.W();if(!(3>b||3==b&&!Ka&&!a.a.V())){a.B||4!=b||7==c||(8==c||0>=d?Ac(3):Ac(2));Zc(a);var e=a.a.W();a.C=e;(c=a.a.V())||I(a.b,function(){return\"No response text for uri \"+a.g+\" status \"+e});a.c=200==e;sc(a.b,a.o,a.g,a.f,a.T,b,e);a.c?(a.M?($c(a,b,c),Ka&&a.c&&3==b&&ad(a)):(tc(a.b,a.f,c,null),bd(a,c)),4==b&&cd(a),a.c&&!a.B&&(4==b?a.i.ua(a):(a.c=!1,Wc(a)))):(400==e&&0<c.indexOf(\"Unknown SID\")?(a.l=3,J(12),E(a.b.a,\"XMLHTTP Unknown SID (\"+a.f+\")\")):(a.l=0,J(13),\nE(a.b.a,\"XMLHTTP Bad status \"+e+\" (\"+a.f+\")\")),cd(a),dd(a))}}function $c(a,b,c){for(var d=!0;!a.B&&a.F<c.length;){var e=ed(a,c);if(e==Rc){4==b&&(a.l=4,J(14),d=!1);tc(a.b,a.f,null,\"[Incomplete Response]\");break}else if(e==Qc){a.l=4;J(15);tc(a.b,a.f,c,\"[Invalid Chunk]\");d=!1;break}else tc(a.b,a.f,e,null),bd(a,e)}4==b&&0==c.length&&(a.l=1,J(16),d=!1);a.c=a.c&&d;d||(tc(a.b,a.f,c,\"[Invalid Chunked Response]\"),cd(a),dd(a))}\ng.eb=function(){var a=M(this.a),b=this.a.V();this.F<b.length&&(Zc(this),$c(this,a,b),this.c&&4!=a&&Wc(this))};function ad(a){a.N.aa(a.H,\"tick\",a.eb);a.H.start()}function ed(a,b){var c=a.F,d=b.indexOf(\"\\n\",c);if(-1==d)return Rc;c=Number(b.substring(c,d));if(isNaN(c))return Qc;d+=1;if(d+c>b.length)return Rc;b=b.substr(d,c);a.F=d+c;return b}g.cancel=function(){this.B=!0;cd(this)};function Wc(a){a.U=t()+a.S;fd(a,a.S)}\nfunction fd(a,b){if(null!=a.w)throw Error(\"WatchDog timer not null\");a.w=Ec(r(a.cb,a),b)}function Zc(a){a.w&&(k.clearTimeout(a.w),a.w=null)}g.cb=function(){this.w=null;var a=t();0<=a-this.U?(this.c&&xc(this.b,\"Received watchdog timeout even though request loaded successfully\"),vc(this.b,this.g),2!=this.J&&(Ac(3),J(17)),cd(this),this.l=2,dd(this)):(E(this.b.a,\"WatchDog timer called too early\"),fd(this,this.U-a))};function dd(a){a.i.Ja()||a.B||a.i.ua(a)}\nfunction cd(a){Zc(a);var b=a.I;b&&\"function\"==typeof b.Z&&b.Z();a.I=null;Yb(a.H);cc(a.N);a.a&&(b=a.a,a.a=null,b.abort(),b.Z())}function bd(a,b){try{a.i.Ma(a,b),Ac(4)}catch(c){wc(a.b,c,\"Error in httprequest callback\")}};function gd(a){if(a.v&&\"function\"==typeof a.v)return a.v();if(l(a))return a.split(\"\");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Ca(a)}\nfunction hd(a,b){if(a.forEach&&\"function\"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||l(a))ta(a,b,void 0);else{if(a.O&&\"function\"==typeof a.O)var c=a.O();else if(a.v&&\"function\"==typeof a.v)c=void 0;else if(ca(a)||l(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else c=Da(a);d=gd(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}};function N(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error(\"Uneven number of arguments\");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a){a instanceof N?(c=a.O(),d=a.v()):(c=Da(a),d=Ca(a));for(var e=0;e<c.length;e++)this.set(c[e],d[e])}}g=N.prototype;g.u=function(){return this.c};g.v=function(){id(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.O=function(){id(this);return this.a.concat()};\nfunction jd(a){a.b={};a.a.length=0;a.c=0}function kd(a,b){return O(a.b,b)?(delete a.b[b],a.c--,a.a.length>2*a.c&&id(a),!0):!1}function id(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];O(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],O(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return O(this.b,a)?this.b[a]:b};g.set=function(a,b){O(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};\ng.forEach=function(a,b){for(var c=this.O(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function O(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var ld=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;function md(a,b){if(a){a=a.split(\"&\");for(var c=0;c<a.length;c++){var d=a[c].indexOf(\"=\"),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\\+/g,\" \")):\"\")}}};function P(a,b){this.b=this.j=this.f=\"\";this.i=null;this.g=this.a=\"\";this.h=!1;var c;a instanceof P?(this.h=void 0!==b?b:a.h,nd(this,a.f),this.j=a.j,od(this,a.b),pd(this,a.i),this.a=a.a,qd(this,rd(a.c)),this.g=a.g):a&&(c=String(a).match(ld))?(this.h=!!b,nd(this,c[1]||\"\",!0),this.j=sd(c[2]||\"\"),od(this,c[3]||\"\",!0),pd(this,c[4]),this.a=sd(c[5]||\"\",!0),qd(this,c[6]||\"\",!0),this.g=sd(c[7]||\"\")):(this.h=!!b,this.c=new td(null,this.h))}\nP.prototype.toString=function(){var a=[],b=this.f;b&&a.push(ud(b,vd,!0),\":\");var c=this.b;if(c||\"file\"==b)a.push(\"//\"),(b=this.j)&&a.push(ud(b,vd,!0),\"@\"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),c=this.i,null!=c&&a.push(\":\",String(c));if(c=this.a)this.b&&\"/\"!=c.charAt(0)&&a.push(\"/\"),a.push(ud(c,\"/\"==c.charAt(0)?wd:xd,!0));(c=this.c.toString())&&a.push(\"?\",c);(c=this.g)&&a.push(\"#\",ud(c,yd));return a.join(\"\")};\nP.prototype.resolve=function(a){var b=L(this),c=!!a.f;c?nd(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?od(b,a.b):c=null!=a.i;var d=a.a;if(c)pd(b,a.i);else if(c=!!a.a){if(\"/\"!=d.charAt(0))if(this.b&&!this.a)d=\"/\"+d;else{var e=b.a.lastIndexOf(\"/\");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(\"..\"==e||\".\"==e)d=\"\";else if(-1!=e.indexOf(\"./\")||-1!=e.indexOf(\"/.\")){d=0==e.lastIndexOf(\"/\",0);e=e.split(\"/\");for(var f=[],h=0;h<e.length;){var m=e[h++];\".\"==m?d&&h==e.length&&f.push(\"\"):\"..\"==m?((1<f.length||1==f.length&&\"\"!=\nf[0])&&f.pop(),d&&h==e.length&&f.push(\"\")):(f.push(m),d=!0)}d=f.join(\"/\")}else d=e}c?b.a=d:c=\"\"!==a.c.toString();c?qd(b,rd(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function L(a){return new P(a)}function nd(a,b,c){a.f=c?sd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,\"\"))}function od(a,b,c){a.b=c?sd(b,!0):b}function pd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error(\"Bad port number \"+b);a.i=b}else a.i=null}function qd(a,b,c){b instanceof td?(a.c=b,zd(a.c,a.h)):(c||(b=ud(b,Ad)),a.c=new td(b,a.h))}\nfunction Q(a,b,c){a.c.set(b,c)}function Xc(a,b,c){n(c)||(c=[String(c)]);Bd(a.c,b,c)}function Tc(a){Q(a,\"zx\",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^t()).toString(36));return a}function Cd(a){return a instanceof P?L(a):new P(a,void 0)}function Dd(a,b,c,d){var e=new P(null,void 0);a&&nd(e,a);b&&od(e,b);c&&pd(e,c);d&&(e.a=d);return e}function sd(a,b){return a?b?decodeURI(a.replace(/%25/g,\"%2525\")):decodeURIComponent(a):\"\"}\nfunction ud(a,b,c){return l(a)?(a=encodeURI(a).replace(b,Ed),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),a):null}function Ed(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)}var vd=/[#\\/\\?@]/g,xd=/[#\\?:]/g,wd=/[#\\?]/g,Ad=/[#\\?@]/g,yd=/#/g;function td(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}function R(a){a.a||(a.a=new N,a.b=0,a.c&&md(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\\+/g,\" \")),c)}))}g=td.prototype;g.u=function(){R(this);return this.b};\ng.add=function(a,b){R(this);this.c=null;a=Fd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Gd(a,b){R(a);b=Fd(a,b);O(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,kd(a.a,b))}function Hd(a,b){R(a);b=Fd(a,b);return O(a.a.b,b)}g.forEach=function(a,b){R(this);this.a.forEach(function(c,d){ta(c,function(c){a.call(b,c,d,this)},this)},this)};\ng.O=function(){R(this);for(var a=this.a.v(),b=this.a.O(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.v=function(a){R(this);var b=[];if(l(a))Hd(this,a)&&(b=xa(b,this.a.get(Fd(this,a))));else{a=this.a.v();for(var c=0;c<a.length;c++)b=xa(b,a[c])}return b};g.set=function(a,b){R(this);this.c=null;a=Fd(this,a);Hd(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.v(a):[];return 0<a.length?String(a[0]):b};\nfunction Bd(a,b,c){Gd(a,b);0<c.length&&(a.c=null,a.a.set(Fd(a,b),ya(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return\"\";for(var a=[],b=this.a.O(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.v(d);for(var f=0;f<d.length;f++){var h=e;\"\"!==d[f]&&(h+=\"=\"+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join(\"&\")};function rd(a){var b=new td;b.c=a.c;a.a&&(b.a=new N(a.a),b.b=a.b);return b}\nfunction Fd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function zd(a,b){b&&!a.f&&(R(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(Gd(this,b),Bd(this,c,a))},a));a.f=b};function Id(){this.a=t()}var Jd=null;Id.prototype.set=function(a){this.a=a};Id.prototype.reset=function(){this.set(t())};Id.prototype.get=function(){return this.a};function Kd(){Jd||(Jd=new Id)}function Ld(){Jd||(Jd=new Id)}u(Ld,Kd);function Md(){}var Nd={OPEN:\"a\",kb:\"b\",Sa:\"c\",tb:\"d\"};function Od(){A.call(this,\"d\")}u(Od,A);function Pd(){A.call(this,\"c\")}u(Pd,A);function Qd(a,b){this.a=a;this.b=b;this.c=this.i=null;this.h=!1;this.l=null;this.f=-1;this.m=this.g=null}g=Qd.prototype;g.R=null;\nfunction Rd(a){I(a.b,\"TestConnection: starting stage 2\");var b=a.a.H.a;if(null!=b)I(a.b,function(){return\"TestConnection: skipping stage 2, precomputed result is \"+b?\"Buffered\":\"Unbuffered\"}),J(4),b?(J(10),Sd(a.a,a,!1)):(J(11),Sd(a.a,a,!0));else{a.c=new K(a,a.b,void 0,void 0);a.c.j=a.i;var c=Td(a.a,a.g,a.l);J(4);Xc(c,\"TYPE\",\"xmlhttp\");var d=a.a.j,e=a.a.J;d&&e&&Q(c,d,e);Vc(a.c,c,!1,a.g)}}g.da=function(a){return this.a.da(a)};g.abort=function(){this.c&&(this.c.cancel(),this.c=null);this.f=-1};\ng.Ja=function(){return!1};\ng.Ma=function(a,b){this.f=a.C;if(0==this.R){I(this.b,\"TestConnection: Got data for stage 1\");if(!this.a.D&&(a=a.a)){var c=a.a?a.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null;this.m=c?c:null;this.a.j&&((a=a.a?a.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?this.a.J=a:E(this.b.a,\"Missing X_HTTP_SESSION_ID in the handshake response\"))}if(b){try{var d=this.a.ma.a.parse(b)}catch(e){wc(this.b,e);Ud(this.a,this);return}this.g=d[0]}else I(this.b,\"TestConnection: Null responseText\"),Ud(this.a,this)}else if(1==\nthis.R)if(this.h)J(6);else if(\"11111\"==b){if(J(5),this.h=!0,!z||10<=Number(Ua))this.f=200,this.c.cancel(),I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)}else J(7),this.h=!1};\ng.ua=function(){this.f=this.c.C;this.c.c?0==this.R?(this.R=1,I(this.b,\"TestConnection: request complete for initial check\"),Rd(this)):1==this.R&&(I(this.b,\"TestConnection: request complete for stage 2\"),this.h?(I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)):(I(this.b,\"Test connection failed; not using streaming\"),J(10),Sd(this.a,this,!1))):(I(this.b,\"TestConnection: request failed, in state \"+this.R),0==this.R?J(8):1==this.R&&J(9),Ud(this.a,this))};\ng.ia=function(){return this.a.ia()};g.ra=function(){return this.a.ra()};function Vd(){this.a=this.b=null};function S(){this.a=new N}function Wd(a){var b=typeof a;return\"object\"==b&&a||\"function\"==b?\"o\"+(a[q]||(a[q]=++ea)):b.charAt(0)+a}S.prototype.u=function(){return this.a.u()};S.prototype.add=function(a){this.a.set(Wd(a),a)};S.prototype.contains=function(a){a=Wd(a);return O(this.a.b,a)};S.prototype.v=function(){return this.a.v()};function Xd(a,b){this.a=a;this.b=b};function Yd(a){this.g=a||Zd;this.f=k.pa&&k.pa.Ka&&k.pa.Ka()&&k.pa.Ka().Bb?this.g:1;this.a=null;1<this.f&&(this.a=new S);this.b=null;this.c=[]}var Zd=10;function $d(a,b){a.a||-1==b.indexOf(\"spdy\")&&-1==b.indexOf(\"quic\")&&-1==b.indexOf(\"h2\")||(a.f=a.g,a.a=new S,a.b&&(ae(a,a.b),a.b=null))}function be(a){return a.b?!0:a.a?a.a.u()>=a.f:!1}function ce(a,b){return a.b?a.b==b:a.a?a.a.contains(b):!1}function ae(a,b){a.a?a.a.add(b):a.b=b}\nfunction de(a,b){a.b&&a.b==b?a.b=null:a.a&&a.a.contains(b)&&kd(a.a.a,Wd(b))}Yd.prototype.cancel=function(){this.c=ee(this);this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(ta(this.a.v(),function(a){a.cancel()}),jd(this.a.a))};function ee(a){if(null!=a.b)return a.c.concat(a.b.s);if(null!=a.a&&0!=a.a.a.c){var b=a.c;ta(a.a.v(),function(a){b=b.concat(a.s)});return b}return ya(a.c)}function fe(a,b){a.c=a.c.concat(b)};function ge(){}ge.prototype.stringify=function(a){return k.JSON.stringify(a,void 0)};ge.prototype.parse=function(a){return k.JSON.parse(a,void 0)};function he(){this.a=new ge}function ie(a,b,c){var d=c||\"\";try{hd(a,function(a,c){var e=a;p(a)&&(e=Db(a));b.push(d+c+\"=\"+encodeURIComponent(e))})}catch(e){throw b.push(d+\"type=\"+encodeURIComponent(\"_badmap\")),e;}};function je(a,b){var c=new qc;I(c,\"TestLoadImage: loading \"+a);var d=new Image;d.onload=ia(ke,c,d,\"TestLoadImage: loaded\",!0,b);d.onerror=ia(ke,c,d,\"TestLoadImage: error\",!1,b);d.onabort=ia(ke,c,d,\"TestLoadImage: abort\",!1,b);d.ontimeout=ia(ke,c,d,\"TestLoadImage: timeout\",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function ke(a,b,c,d,e){try{I(a,c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){wc(a,f)}};function T(a){B.call(this);this.headers=new N;this.F=a||null;this.f=!1;this.D=this.a=null;this.M=this.s=\"\";this.j=0;this.g=\"\";this.h=this.I=this.o=this.H=!1;this.l=0;this.B=null;this.N=le;this.C=this.m=!1}u(T,B);var le=\"\";T.prototype.b=oc(\"goog.net.XhrIo\");var me=/^https?$/i,ne=[\"POST\",\"PUT\"];g=T.prototype;\ng.fa=function(a,b,c,d){if(this.a)throw Error(\"[goog.net.XhrIo] Object is active with another request=\"+this.s+\"; newUri=\"+a);b=b?b.toUpperCase():\"GET\";this.s=a;this.g=\"\";this.j=0;this.M=b;this.H=!1;this.f=!0;this.a=this.F?Mc(this.F):Mc(Kc);this.D=this.F?Ic(this.F):Ic(Kc);this.a.onreadystatechange=r(this.La,this);try{F(this.b,U(this,\"Opening Xhr\")),this.I=!0,this.a.open(b,String(a),!0),this.I=!1}catch(f){F(this.b,U(this,\"Error opening Xhr: \"+f.message));oe(this,f);return}a=c||\"\";var e=new N(this.headers);\nd&&hd(d,function(a,b){e.set(b,a)});d=ua(e.O());c=k.FormData&&a instanceof k.FormData;!(0<=sa(ne,b))||d||c||e.set(\"Content-Type\",\"application/x-www-form-urlencoded;charset=utf-8\");e.forEach(function(a,b){this.a.setRequestHeader(b,a)},this);this.N&&(this.a.responseType=this.N);\"withCredentials\"in this.a&&this.a.withCredentials!==this.m&&(this.a.withCredentials=this.m);try{pe(this),0<this.l&&(this.C=qe(this.a),F(this.b,U(this,\"Will abort after \"+this.l+\"ms if incomplete, xhr2 \"+this.C)),this.C?(this.a.timeout=\nthis.l,this.a.ontimeout=r(this.Ia,this)):this.B=Zb(this.Ia,this.l,this)),F(this.b,U(this,\"Sending request\")),this.o=!0,this.a.send(a),this.o=!1}catch(f){F(this.b,U(this,\"Send error: \"+f.message)),oe(this,f)}};function qe(a){return z&&Ta(9)&&\"number\"==typeof a.timeout&&void 0!==a.ontimeout}function va(a){return\"content-type\"==a.toLowerCase()}\ng.Ia=function(){\"undefined\"!=typeof goog&&this.a&&(this.g=\"Timed out after \"+this.l+\"ms, aborting\",this.j=8,F(this.b,U(this,this.g)),this.dispatchEvent(\"timeout\"),this.abort(8))};function oe(a,b){a.f=!1;a.a&&(a.h=!0,a.a.abort(),a.h=!1);a.g=b;a.j=5;re(a);se(a)}function re(a){a.H||(a.H=!0,a.dispatchEvent(\"complete\"),a.dispatchEvent(\"error\"))}\ng.abort=function(a){this.a&&this.f&&(F(this.b,U(this,\"Aborting\")),this.f=!1,this.h=!0,this.a.abort(),this.h=!1,this.j=a||7,this.dispatchEvent(\"complete\"),this.dispatchEvent(\"abort\"),se(this))};g.A=function(){this.a&&(this.f&&(this.f=!1,this.h=!0,this.a.abort(),this.h=!1),se(this,!0));T.L.A.call(this)};g.La=function(){this.i||(this.I||this.o||this.h?te(this):this.ab())};g.ab=function(){te(this)};\nfunction te(a){if(a.f&&\"undefined\"!=typeof goog)if(a.D[1]&&4==M(a)&&2==a.W())F(a.b,U(a,\"Local request error detected and ignored\"));else if(a.o&&4==M(a))Zb(a.La,0,a);else if(a.dispatchEvent(\"readystatechange\"),4==M(a)){F(a.b,U(a,\"Request complete\"));a.f=!1;try{var b=a.W();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.s).match(ld)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;\nf=h.substr(0,h.length-1)}e=!me.test(f?f.toLowerCase():\"\")}d=e}d?(a.dispatchEvent(\"complete\"),a.dispatchEvent(\"success\")):(a.j=6,a.g=a.Ga()+\" [\"+a.W()+\"]\",re(a))}finally{se(a)}}}function se(a,b){if(a.a){pe(a);var c=a.a,d=a.D[0]?aa:null;a.a=null;a.D=null;b||a.dispatchEvent(\"ready\");try{c.onreadystatechange=d}catch(e){(a=a.b)&&a.log(gc,\"Problem encountered resetting onreadystatechange: \"+e.message,void 0)}}}function pe(a){a.a&&a.C&&(a.a.ontimeout=null);a.B&&(k.clearTimeout(a.B),a.B=null)}\nfunction M(a){return a.a?a.a.readyState:0}g.W=function(){try{return 2<M(this)?this.a.status:-1}catch(a){return-1}};g.Ga=function(){try{return 2<M(this)?this.a.statusText:\"\"}catch(a){return F(this.b,\"Can not get status: \"+a.message),\"\"}};g.V=function(){try{return this.a?this.a.responseText:\"\"}catch(a){return F(this.b,\"Can not get responseText: \"+a.message),\"\"}};\ng.Ya=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));a:{a=b;if(k.JSON)try{var c=k.JSON.parse(a);break a}catch(d){}c=Cb(a)}return c}};g.Fa=function(){return this.j};g.Za=function(){return l(this.g)?this.g:String(this.g)};function U(a,b){return b+\" [\"+a.M+\" \"+a.s+\" \"+a.W()+\"]\"};function ue(a){var b=\"\";Ba(a,function(a,d){b+=d;b+=\":\";b+=a;b+=\"\\r\\n\"});return b}function ve(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=ue(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?\"=\"+encodeURIComponent(String(c)):\"\";if(b+=c){c=a.indexOf(\"#\");0>c&&(c=a.length);d=a.indexOf(\"?\");if(0>d||d>c){d=c;var e=\"\"}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+\"&\"+b:b:c;a=a[0]+(a[1]?\"?\"+a[1]:\"\")+a[2]}return a}Q(a,b,c);return a};function we(a){this.ya=0;this.g=[];this.a=new qc;this.H=new Vd;this.ja=this.wa=this.F=this.ka=this.b=this.J=this.j=this.U=this.h=this.M=this.i=null;this.Ua=this.P=0;this.la=this.B=this.o=this.m=this.l=this.f=null;this.s=this.xa=this.N=-1;this.T=this.w=this.C=0;this.S=a&&a.supportsCrossDomainXhr||!1;this.I=\"\";this.c=new Yd(a&&a.concurrentRequestLimit);this.ma=new he;this.D=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;this.Ta=a&&a.fastHandshake||!1;a&&a.Ea&&this.a.Ea()}g=we.prototype;\ng.oa=8;g.G=1;function xe(a){I(a.a,\"disconnect()\");ye(a);if(3==a.G){var b=a.P++,c=L(a.F);Q(c,\"SID\",a.I);Q(c,\"RID\",b);Q(c,\"TYPE\",\"terminate\");ze(a,c);b=new K(a,a.a,b,void 0);b.J=2;b.h=Tc(L(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.h.toString(),\"\"));!c&&k.Image&&((new Image).src=b.h,c=!0);c||(b.a=b.i.da(null),b.a.fa(b.h));b.D=t();Wc(b)}Ae(a)}\nfunction ye(a){a.B&&(a.B.abort(),a.B=null);a.b&&(a.b.cancel(),a.b=null);a.m&&(k.clearTimeout(a.m),a.m=null);Be(a);a.c.cancel();a.l&&(k.clearTimeout(a.l),a.l=null)}function Ce(a,b){1E3==a.g.length&&xc(a.a,function(){return\"Already have 1000 queued maps upon queueing \"+Db(b)});a.g.push(new Xd(a.Ua++,b));3==a.G&&De(a)}g.Ja=function(){return 0==this.G};function De(a){be(a.c)||a.l||(a.l=Ec(r(a.Oa,a),0),a.C=0)}\nfunction Ee(a,b){var c=a.c;if((c.b?1:c.a?c.a.u():0)>=a.c.f-(a.l?1:0))return xc(a.a,\"Unexpected retry request is scheduled.\"),!1;if(a.l)return I(a.a,\"Use the retry request that is already scheduled.\"),a.g=b.s.concat(a.g),!0;if(1==a.G||2==a.G||2<=a.C)return!1;I(a.a,\"Going to retry POST\");a.l=Ec(r(a.Oa,a,b),Fe(a,a.C));a.C++;return!0}\ng.Oa=function(a){this.l=null;I(this.a,\"startForwardChannel_\");if(1==this.G)if(a)xc(this.a,\"Not supposed to retry the open\");else{I(this.a,\"open_()\");this.P=Math.floor(1E5*Math.random());a=this.P++;var b=new K(this,this.a,a,void 0),c=this.i;this.M&&(c?(c=Ea(c),Ga(c,this.M)):c=this.M);null===this.h&&(b.j=c);var d=Ge(this,b),e=L(this.F);Q(e,\"RID\",a);Q(e,\"CVER\",21);this.D&&this.j&&Q(e,\"X-HTTP-Session-Id\",this.j);ze(this,e);this.h&&c&&ve(e,this.h,c);ae(this.c,b);this.Ta?(Q(e,\"$req\",d),Sc(b,e,null)):Sc(b,\ne,d);this.G=2}else 3==this.G&&(a?He(this,a):0==this.g.length?I(this.a,\"startForwardChannel_ returned: nothing to send\"):be(this.c)?xc(this.a,\"startForwardChannel_ returned: connection already in progress\"):(He(this),I(this.a,\"startForwardChannel_ finished, sent request\")))};\nfunction He(a,b){var c;b?c=b.f:c=a.P++;var d=L(a.F);Q(d,\"SID\",a.I);Q(d,\"RID\",c);Q(d,\"AID\",a.N);ze(a,d);a.h&&a.i&&ve(d,a.h,a.i);c=new K(a,a.a,c,a.C+1);null===a.h&&(c.j=a.i);b&&(a.g=b.s.concat(a.g));b=Ge(a,c);c.setTimeout(Math.round(1E4)+Math.round(1E4*Math.random()));ae(a.c,c);Sc(c,d,b)}function ze(a,b){a.f&&hd({},function(a,d){Q(b,d,a)})}\nfunction Ge(a,b){var c=Math.min(a.g.length,1E3),d=a.f?r(a.f.Va,a.f,a):null;a:for(var e=a.g,f=-1;;){var h=[\"count=\"+c];-1==f?0<c?(f=e[0].a,h.push(\"ofs=\"+f)):f=0:h.push(\"ofs=\"+f);for(var m=!0,v=0;v<c;v++){var G=e[v].a,Z=e[v].b;G-=f;if(0>G)f=Math.max(0,e[v].a-100),m=!1;else try{ie(Z,h,\"req\"+G+\"_\")}catch(Mb){d&&d(Z)}}if(m){d=h.join(\"&\");break a}}a=a.g.splice(0,c);b.s=a;return d}function Ie(a){if(!a.b&&!a.m){a.T=1;var b=a.Na;Tb||Ub();Wb||(Tb(),Wb=!0);Pb.add(b,a);a.w=0}}\nfunction Je(a){if(a.b||a.m)return xc(a.a,\"Request already in progress\"),!1;if(3<=a.w)return!1;I(a.a,\"Going to retry GET\");a.T++;a.m=Ec(r(a.Na,a),Fe(a,a.w));a.w++;return!0}\ng.Na=function(){this.m=null;I(this.a,\"Creating new HttpRequest\");this.b=new K(this,this.a,\"rpc\",this.T);null===this.h&&(this.b.j=this.i);this.b.P=0;var a=L(this.wa);Q(a,\"RID\",\"rpc\");Q(a,\"SID\",this.I);Q(a,\"CI\",this.la?\"0\":\"1\");Q(a,\"AID\",this.N);ze(this,a);Q(a,\"TYPE\",\"xmlhttp\");this.h&&this.i&&ve(a,this.h,this.i);Vc(this.b,a,!0,this.ja);I(this.a,\"New Request created\")};\nfunction Sd(a,b,c){I(a.a,\"Test Connection Finished\");var d=b.m;d&&$d(a.c,d);a.la=c;a.s=b.f;I(a.a,\"connectChannel_()\");a.F=Ke(a,a.ka);De(a)}function Ud(a,b){I(a.a,\"Test Connection Failed\");a.s=b.f;V(a,2)}\ng.Ma=function(a,b){if(0!=this.G&&(this.b==a||ce(this.c,a)))if(this.s=a.C,ce(this.c,a)&&3==this.G){try{var c=this.ma.a.parse(b)}catch(f){c=null}if(n(c)&&3==c.length)if(b=c,0==b[0])a:if(I(this.a,\"Server claims our backchannel is missing.\"),this.m)I(this.a,\"But we are currently starting the request.\");else{if(this.b)if(this.b.D+3E3<a.D)Be(this),this.b.cancel(),this.b=null;else break a;else E(this.a.a,\"We do not have a BackChannel established\");Je(this);J(18)}else this.xa=b[1],a=this.xa-this.N,0<a&&(b=\nb[2],I(this.a,b+\" bytes (in \"+a+\" arrays) are outstanding on the BackChannel\"),37500>b&&this.la&&0==this.w&&!this.o&&(this.o=Ec(r(this.$a,this),6E3)));else I(this.a,\"Bad POST response data returned\"),V(this,11)}else if(this.b==a&&Be(this),!/^[\\s\\xa0]*$/.test(b))for(b=c=this.ma.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.N=d[0];d=d[1];if(2==this.G)if(\"c\"==d[0]){this.I=d[1];this.ja=d[2];var e=d[3];null!=e&&(this.oa=e,H(this.a,\"VER=\"+this.oa));d=d[4];null!=d&&(this.ya=d,H(this.a,\"SVER=\"+this.ya));\nthis.D&&(d=a.a)&&((e=d.a?d.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null)&&$d(this.c,e),this.j&&((d=d.a?d.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?(this.J=d,Q(this.F,this.j,d)):E(this.a.a,\"Missing X_HTTP_SESSION_ID in the handshake response\")));this.G=3;this.f&&this.f.Da();this.wa=Td(this,this.ja,this.ka);Ie(this)}else\"stop\"!=d[0]&&\"close\"!=d[0]||V(this,7);else 3==this.G&&(\"stop\"==d[0]||\"close\"==d[0]?\"stop\"==d[0]?V(this,7):xe(this):\"noop\"!=d[0]&&this.f&&this.f.Ca(d),this.w=0)}};\ng.$a=function(){null!=this.o&&(this.o=null,this.b.cancel(),this.b=null,Je(this),J(19))};function Be(a){null!=a.o&&(k.clearTimeout(a.o),a.o=null)}\ng.ua=function(a){I(this.a,\"Request complete\");var b=null;if(this.b==a){Be(this);this.b=null;var c=2}else if(ce(this.c,a))b=a.s,de(this.c,a),c=1;else return;this.s=a.C;if(0!=this.G)if(a.c)1==c?(Dc(a.m?a.m.length:0,t()-a.D,this.C),De(this)):Ie(this);else{var d=a.l;if(3==d||0==d&&0<this.s)I(this.a,\"Not retrying due to error type\");else{var e=this;I(this.a,function(){return\"Maybe retrying, last error: \"+Pc(d,e.s)});if(1==c&&Ee(this,a)||2==c&&Je(this))return;I(this.a,\"Exceeded max number of retries\")}b&&\n0<b.length&&fe(this.c,b);I(this.a,\"Error: HTTP request failed\");switch(d){case 1:V(this,5);break;case 4:V(this,10);break;case 3:V(this,6);break;default:V(this,2)}}};function Fe(a,b){var c=5E3+Math.floor(1E4*Math.random());a.ra()||(I(a.a,\"Inactive channel\"),c*=2);return c*b}\nfunction V(a,b){H(a.a,\"Error code \"+b);if(2==b){var c=null;a.f&&(c=null);var d=r(a.hb,a);c||(c=new P(\"//www.google.com/images/cleardot.gif\"),k.location&&\"http\"==k.location.protocol||nd(c,\"https\"),Tc(c));je(c.toString(),d)}else J(2);I(a.a,\"HttpChannel: error - \"+b);a.G=0;a.f&&a.f.Ba(b);Ae(a);ye(a)}g.hb=function(a){a?(H(this.a,\"Successfully pinged google.com\"),J(2)):(H(this.a,\"Failed to ping google.com\"),J(1))};\nfunction Ae(a){a.G=0;a.s=-1;if(a.f){var b=ee(a.c);if(0!=b.length||0!=a.g.length)I(a.a,function(){return\"Number of undelivered maps, pending: \"+b.length+\", outgoing: \"+a.g.length}),a.c.c.length=0,ya(a.g),a.g.length=0;a.f.Aa()}}function Ke(a,b){b=Le(a,null,b);I(a.a,\"GetForwardChannelUri: \"+b);return b}function Td(a,b,c){b=Le(a,a.ia()?b:null,c);I(a.a,\"GetBackChannelUri: \"+b);return b}\nfunction Le(a,b,c){var d=Cd(c);if(\"\"!=d.b)b&&od(d,b+\".\"+d.b),pd(d,d.i);else{var e=k.location,f;b?f=b+\".\"+e.hostname:f=e.hostname;d=Dd(e.protocol,f,e.port,c)}a.U&&Ba(a.U,function(a,b){Q(d,b,a)});b=a.j;c=a.J;b&&c&&Q(d,b,c);Q(d,\"VER\",a.oa);ze(a,d);return d}g.da=function(a){if(a&&!this.S)throw Error(\"Can't create secondary domain capable XhrIo object.\");a=new T;a.m=this.S;return a};g.ra=function(){return!!this.f&&!0};g.ia=function(){return this.S};new Ld;function Me(){}g=Me.prototype;g.Da=function(){};\ng.Ca=function(){};g.Ba=function(){};g.Aa=function(){};g.Va=function(){};function Ne(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf(\"/\",0))b=d;else{var e;(e=\"\"==b)||(e=b.length-1,e=0<=e&&b.indexOf(\"/\",e)==e);e?b+=d:b+=\"/\"+d}}return b};function Oe(){if(z&&!(10<=Number(Ua)))throw Error(\"Environmental error: no available transport.\");}Oe.prototype.a=function(a,b){return new W(a,b)};\nfunction W(a,b){B.call(this);this.a=new we(b);this.b=a;this.s=b&&b.testUrl?b.testUrl:Ne(this.b,\"test\");this.f=oc(\"goog.labs.net.webChannel.WebChannelBaseTransport\");this.g=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a[\"X-Client-Protocol\"]=\"webchannel\":a={\"X-Client-Protocol\":\"webchannel\"});this.a.i=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a[\"X-WebChannel-Content-Type\"]=b.messageContentType:a={\"X-WebChannel-Content-Type\":b.messageContentType});\nthis.a.M=a;(a=b&&b.httpHeadersOverwriteParam)&&!/^[\\s\\xa0]*$/.test(a)&&(this.a.h=a);this.o=b&&b.supportsCrossDomainXhr||!1;this.m=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!/^[\\s\\xa0]*$/.test(b)&&(this.a.j=b,a=this.g,null!==a&&b in a&&(a=this.g,b in a&&delete a[b],E(this.f,\"Ignore httpSessionIdParam also specified with messageUrlParams: \"+b)));this.h=new Pe(this)}u(W,B);\nW.prototype.j=function(){this.a.f=this.h;this.o&&(this.a.S=!0);var a=this.a,b=this.s,c=this.b,d=this.g||void 0;I(a.a,\"connect()\");J(0);a.ka=c;a.U=d||{};a.D&&(I(a.a,\"connect() bypassed channel-test.\"),a.H.b=[],a.H.a=!1);I(a.a,\"connectTest_()\");a.B=new Qd(a,a.a);null===a.h&&(a.B.i=a.i);c=b;a.h&&a.i&&(c=ve(b,a.h,a.i));a=a.B;a.l=c;b=Ke(a.a,a.l);J(3);c=a.a.H.b;null!=c?(a.g=c[0],a.R=1,Rd(a)):(Xc(b,\"MODE\",\"init\"),!a.a.D&&a.a.j&&Xc(b,\"X-HTTP-Session-Id\",a.a.j),a.c=new K(a,a.b,void 0,void 0),a.c.j=a.i,Vc(a.c,\nb,!1,null),a.R=0)};W.prototype.close=function(){xe(this.a)};W.prototype.l=function(a){if(l(a)){var b={};b.__data__=a;Ce(this.a,b)}else this.m?(b={},b.__data__=Db(a),Ce(this.a,b)):Ce(this.a,a)};W.prototype.A=function(){this.a.f=null;delete this.h;xe(this.a);delete this.a;W.L.A.call(this)};function Qe(a){Od.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0}(this.c=a)?(a=this.c,this.data=null!==b&&a in b?b[a]:void 0):this.data=b}else this.data=a}u(Qe,Od);\nfunction Re(){Pd.call(this);this.status=1}u(Re,Pd);function Pe(a){this.a=a}u(Pe,Me);Pe.prototype.Da=function(){pc(this.a.f,\"WebChannel opened on \"+this.a.b);this.a.dispatchEvent(\"a\")};Pe.prototype.Ca=function(a){this.a.dispatchEvent(new Qe(a))};Pe.prototype.Ba=function(a){pc(this.a.f,\"WebChannel aborted on \"+this.a.b+\" due to channel error: \"+a);this.a.dispatchEvent(new Re(a))};Pe.prototype.Aa=function(){pc(this.a.f,\"WebChannel closed on \"+this.a.b);this.a.dispatchEvent(\"b\")};var Se=ia(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Oe);function Te(){this.b=[];this.a=[]}function Ue(a){0==a.b.length&&(a.b=a.a,a.b.reverse(),a.a=[]);return a.b.pop()}Te.prototype.u=function(){return this.b.length+this.a.length};Te.prototype.contains=function(a){return 0<=sa(this.b,a)||0<=sa(this.a,a)};Te.prototype.v=function(){for(var a=[],b=this.b.length-1;0<=b;--b)a.push(this.b[b]);var c=this.a.length;for(b=0;b<c;++b)a.push(this.a[b]);return a};function Ve(a,b){w.call(this);this.h=a||0;this.c=b||10;if(this.h>this.c)throw Error(We);this.a=new Te;this.b=new S;this.g=null;this.ba()}u(Ve,w);var We=\"[goog.structs.Pool] Min can not be greater than max\";g=Ve.prototype;g.ea=function(){var a=t();if(!(null!=this.g&&0>a-this.g)){for(var b;0<this.a.u()&&(b=Ue(this.a),!this.ta(b));)this.ba();!b&&this.u()<this.c&&(b=this.qa());b&&(this.g=a,this.b.add(b));return b}};g.gb=function(a){return kd(this.b.a,Wd(a))?(this.na(a),!0):!1};\ng.na=function(a){kd(this.b.a,Wd(a));this.ta(a)&&this.u()<this.c?this.a.a.push(a):Xe(a)};g.ba=function(){for(var a=this.a;this.u()<this.h;){var b=this.qa();a.a.push(b)}for(;this.u()>this.c&&0<this.a.u();)Xe(Ue(a))};g.qa=function(){return{}};function Xe(a){if(\"function\"==typeof a.Z)a.Z();else for(var b in a)a[b]=null}g.ta=function(a){return\"function\"==typeof a.Wa?a.Wa():!0};g.contains=function(a){return this.a.contains(a)||this.b.contains(a)};g.u=function(){return this.a.u()+this.b.u()};\ng.A=function(){Ve.L.A.call(this);if(0<this.b.u())throw Error(\"[goog.structs.Pool] Objects not released\");delete this.b;for(var a=this.a;0!=a.b.length||0!=a.a.length;)Xe(Ue(a));delete this.a};function Ye(a,b){this.a=a;this.b=b};function Ze(a){this.a=[];if(a)a:{if(a instanceof Ze){var b=a.O();a=a.v();if(0>=this.u()){for(var c=this.a,d=0;d<b.length;d++)c.push(new Ye(b[d],a[d]));break a}}else b=Da(a),a=Ca(a);for(d=0;d<b.length;d++)$e(this,b[d],a[d])}}function $e(a,b,c){var d=a.a;d.push(new Ye(b,c));b=d.length-1;a=a.a;for(c=a[b];0<b;)if(d=b-1>>1,a[d].a>c.a)a[b]=a[d],b=d;else break;a[b]=c}Ze.prototype.v=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].b);return b};\nZe.prototype.O=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].a);return b};Ze.prototype.u=function(){return this.a.length};function af(){Ze.call(this)}u(af,Ze);function X(a,b){this.f=new af;Ve.call(this,a,b)}u(X,Ve);g=X.prototype;g.ea=function(a,b){if(!a)return X.L.ea.call(this);$e(this.f,void 0!==b?b:100,a);this.sa()};g.sa=function(){for(var a=this.f;0<a.u();){var b=this.ea();if(b){var c=a,d=c.a,e=d.length;var f=d[0];if(0>=e)f=void 0;else{if(1==e)wa(d);else{d[0]=d.pop();d=0;c=c.a;e=c.length;for(var h=c[d];d<e>>1;){var m=2*d+1,v=2*d+2;m=v<e&&c[v].a<c[m].a?v:m;if(c[m].a>h.a)break;c[d]=c[m];d=m}c[d]=h}f=f.b}f.apply(this,[b])}else break}};\ng.na=function(a){X.L.na.call(this,a);this.sa()};g.ba=function(){X.L.ba.call(this);this.sa()};g.A=function(){X.L.A.call(this);k.clearTimeout(void 0);wa(this.f.a);this.f=null};function Y(a,b,c,d){this.l=a;this.j=!!d;X.call(this,b,c)}u(Y,X);Y.prototype.qa=function(){var a=new T,b=this.l;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.j&&(a.m=!0);return a};Y.prototype.ta=function(a){return!a.i&&!a.a};Oe.prototype.createWebChannel=Oe.prototype.a;W.prototype.send=W.prototype.l;W.prototype.open=W.prototype.j;W.prototype.close=W.prototype.close;Fc.NO_ERROR=0;Fc.TIMEOUT=8;Fc.HTTP_ERROR=6;Gc.COMPLETE=\"complete\";Md.EventType=Nd;Nd.OPEN=\"a\";Nd.CLOSE=\"b\";Nd.ERROR=\"c\";Nd.MESSAGE=\"d\";B.prototype.listen=B.prototype.aa;Y.prototype.getObject=Y.prototype.ea;Y.prototype.releaseObject=Y.prototype.gb;T.prototype.listenOnce=T.prototype.Ha;T.prototype.getLastError=T.prototype.Za;T.prototype.getLastErrorCode=T.prototype.Fa;\nT.prototype.getStatus=T.prototype.W;T.prototype.getStatusText=T.prototype.Ga;T.prototype.getResponseJson=T.prototype.Ya;T.prototype.getResponseText=T.prototype.V;T.prototype.getResponseText=T.prototype.V;T.prototype.send=T.prototype.fa;module.exports={createWebChannelTransport:Se,ErrorCode:Fc,EventType:Gc,WebChannel:Md,XhrIoPool:Y};}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {})\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../webchannel-wrapper/dist/index.js\n// module id = 115\n// module chunks = 1"],"sourceRoot":""}